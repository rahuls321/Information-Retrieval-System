
Title:
HyperLogLog
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		.mw-parser-output .sidebar{width:22em;float:right;clear:right;margin:0.5em 0 1em 1em;background:#f8f9fa;border:1px solid #aaa;padding:0.2em;text-align:center;line-height:1.4em;font-size:88%;border-collapse:collapse;display:table}body.skin-minerva .mw-parser-output .sidebar{display:table!important;float:right!important;margin:0.5em 0 1em 1em!important}.mw-parser-output .sidebar-subgroup{width:100%;margin:0;border-spacing:0}.mw-parser-output .sidebar-left{float:left;clear:left;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-none{float:none;clear:both;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-outer-title{padding:0 0.4em 0.2em;font-size:125%;line-height:1.2em;font-weight:bold}.mw-parser-output .sidebar-top-image{padding:0.4em}.mw-parser-output .sidebar-top-caption,.mw-parser-output .sidebar-pretitle-with-top-image,.mw-parser-output .sidebar-caption{padding:0.2em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-pretitle{padding:0.4em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-title,.mw-parser-output .sidebar-title-with-pretitle{padding:0.2em 0.8em;font-size:145%;line-height:1.2em}.mw-parser-output .sidebar-title-with-pretitle{padding:0.1em 0.4em}.mw-parser-output .sidebar-image{padding:0.2em 0.4em 0.4em}.mw-parser-output .sidebar-heading{padding:0.1em 0.4em}.mw-parser-output .sidebar-content{padding:0 0.5em 0.4em}.mw-parser-output .sidebar-content-with-subgroup{padding:0.1em 0.4em 0.2em}.mw-parser-output .sidebar-above,.mw-parser-output .sidebar-below{padding:0.3em 0.8em;font-weight:bold}.mw-parser-output .sidebar-collapse .sidebar-above,.mw-parser-output .sidebar-collapse .sidebar-below{border-top:1px solid #aaa;border-bottom:1px solid #aaa}.mw-parser-output .sidebar-navbar{text-align:right;font-size:115%;padding:0 0.4em 0.4em}.mw-parser-output .sidebar-list-title{padding:0 0.4em;text-align:left;font-weight:bold;line-height:1.6em;font-size:105%}.mw-parser-output .sidebar-list-title-c{padding:0 0.4em;text-align:center;margin:0 3.3em}@media(max-width:720px){body.mediawiki .mw-parser-output .sidebar{width:100%!important;clear:both;float:none!important;margin-left:0!important;margin-right:0!important}}Part of a series onProbabilisticdata structures
Bloom filter
Countâmin sketch
Quotient filter
Skip list

Random trees
Random binary tree
Treap
Rapidly-exploring random tree

Related
Randomized algorithm
HyperLogLog
.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vte
HyperLogLog is an algorithm for the count-distinct problem, approximating the number of distinct elements in a multiset.[1] Calculating the exact cardinality of a multiset requires an amount of memory proportional to the cardinality, which is impractical for very large data sets. Probabilistic cardinality estimators, such as the HyperLogLog algorithm, use significantly less memory than this, at the cost of obtaining only an approximation of the cardinality. The HyperLogLog algorithm is able to estimate cardinalities ofÂ >Â 109 with a typical accuracy (standard error) of 2%, using 1.5Â kB of memory.[1] HyperLogLog is an extension of the earlier LogLog algorithm,[2] itself deriving from the 1984 FlajoletâMartin algorithm.[3]

Contents

1 Terminology
2 Algorithm
3 Operations

3.1 Add
3.2 Count
3.3 Practical considerations
3.4 Merge


4 Complexity
5 HLL++
6 Streaming HLL
7 Further reading
8 References



Terminology[edit]
In the original paper by Flajolet et al.[1] and in related literature on the count-distinct problem, the term "cardinality" is used to mean the number of distinct elements in a data stream with repeated elements.  However in the theory of multisets the term refers to the sum of multiplicities of each member of a multiset.  This article chooses to use Flajolet's definition for consistency with the sources.

Algorithm[edit]
This section includes a list of general references, but it remains largely unverified because it lacks sufficient corresponding inline citations. Please help to improve this section by introducing more precise citations.  (March 2014) (Learn how and when to remove this template message)
The basis of the HyperLogLog algorithm is the observation that the cardinality of a multiset of uniformly distributed random numbers can be estimated by calculating the maximum number of leading zeros in the binary representation of each number in the set. If the maximum number of leading zeros observed isÂ n, an estimate for the number of distinct elements in the set isÂ 2n.[1]
In the HyperLogLog algorithm, a hash function is applied to each element in the original multiset to obtain a multiset of uniformly distributed random numbers with the same cardinality as the original multiset. The cardinality of this randomly distributed set can then be estimated using the algorithm above.
The simple estimate of cardinality obtained using the algorithm above has the disadvantage of a large variance. In the HyperLogLog algorithm, the variance is minimised by splitting the multiset into numerous subsets, calculating the maximum number of leading zeros in the numbers in each of these subsets, and using a harmonic mean to combine these estimates for each subset into an estimate of the cardinality of the whole set.[4]

Operations[edit]
The HyperLogLog has three main operations: add to add a new element to the set, count to obtain the cardinality of the set and merge to obtain the union of two sets. Some derived operations can be computed using the inclusionâexclusion principle like the cardinality of the intersection or the cardinality of the difference between two HyperLogLogs combining the merge and count operations.
The data of the HyperLogLog is stored in an array M of counters called registers with size m that are set to 0 in their initial state.

Add[edit]
The add operation consists of computing the hash of the input data v with a hash function h, getting the first b bits (where b is 
  
    
      
        
          log
          
            2
          
        
        â¡
        (
        m
        )
      
    
    {\textstyle \log _{2}(m)}
  
), and adding 1 to them to obtain the address of the register to modify. With the remaining bits compute 
  
    
      
        Ï
        (
        w
        )
      
    
    {\textstyle \rho (w)}
  
 which returns the position of the leftmost 1. The new value of the register will be the maximum between the current value of the register and 
  
    
      
        Ï
        (
        w
        )
      
    
    {\textstyle \rho (w)}
  
.


  
    
      
        
          
            
              
                x
              
              
                
                :=
                h
                (
                v
                )
              
            
            
              
                j
              
              
                
                :=
                1
                +
                â¨
                
                  x
                  
                    1
                  
                
                
                  x
                  
                    2
                  
                
                .
                .
                .
                
                  x
                  
                    b
                  
                
                
                  â©
                  
                    2
                  
                
              
            
            
              
                w
              
              
                
                :=
                
                  x
                  
                    b
                    +
                    1
                  
                
                
                  x
                  
                    b
                    +
                    2
                  
                
                .
                .
                .
              
            
            
              
                M
                [
                j
                ]
              
              
                
                :=
                max
                (
                M
                [
                j
                ]
                ,
                Ï
                (
                w
                )
                )
              
            
          
        
      
    
    {\displaystyle {\begin{aligned}x&:=h(v)\\j&:=1+\langle x_{1}x_{2}...x_{b}\rangle _{2}\\w&:=x_{b+1}x_{b+2}...\\M[j]&:=\max(M[j],\rho (w))\\\end{aligned}}}
  

Count[edit]
The count algorithm consists in computing the harmonic mean of the m registers, and using a constant to derive an estimate 
  
    
      
        E
      
    
    {\textstyle E}
  
 of the count:


  
    
      
        Z
        =
        
          
            (
          
        
        
          â
          
            j
            =
            1
          
          
            m
          
        
        
          
            2
            
              â
              M
              [
              j
              ]
            
          
        
        
          
            
              )
            
          
          
            â
            1
          
        
      
    
    {\displaystyle Z={\Bigg (}\sum _{j=1}^{m}{2^{-M[j]}}{\Bigg )}^{-1}}
  


  
    
      
        
          Î±
          
            m
          
        
        =
        
          
            (
            
              m
              
                â«
                
                  0
                
                
                  â
                
              
              
                
                  (
                  
                    
                      log
                      
                        2
                      
                    
                    â¡
                    
                      (
                      
                        
                          
                            2
                            +
                            u
                          
                          
                            1
                            +
                            u
                          
                        
                      
                      )
                    
                  
                  )
                
                
                  m
                
              
              
              d
              u
            
            )
          
          
            â
            1
          
        
      
    
    {\displaystyle \alpha _{m}=\left(m\int _{0}^{\infty }\left(\log _{2}\left({\frac {2+u}{1+u}}\right)\right)^{m}\,du\right)^{-1}}
  


  
    
      
        E
        =
        
          Î±
          
            m
          
        
        
          m
          
            2
          
        
        Z
      
    
    {\displaystyle E=\alpha _{m}m^{2}Z}
  

The intuition is that n being the unknown cardinality of M, each subset 
  
    
      
        
          M
          
            j
          
        
      
    
    {\textstyle M_{j}}
  
 will have 
  
    
      
        n
        
          /
        
        m
      
    
    {\textstyle n/m}
  
 elements. Then 

  
    
      
        
          max
          
            x
            â
            
              M
              
                j
              
            
          
        
        Ï
        (
        x
        )
      
    
    {\textstyle \max _{x\in M_{j}}\rho (x)}
  
 should be close to 
  
    
      
        
          log
          
            2
          
        
        â¡
        (
        n
        
          /
        
        m
        )
      
    
    {\textstyle \log _{2}(n/m)}
  
. The harmonic mean of 2 to these quantities is 
  
    
      
        m
        Z
      
    
    {\textstyle mZ}
  
 which should be near 
  
    
      
        n
        
          /
        
        m
      
    
    {\textstyle n/m}
  
. Thus, 
  
    
      
        
          m
          
            2
          
        
        Z
      
    
    {\textstyle m^{2}Z}
  
 should be n approximately.
Finally, the constant 
  
    
      
        
          Î±
          
            m
          
        
      
    
    {\textstyle \alpha _{m}}
  
 is introduced to correct a systematic multiplicative bias present in 
  
    
      
        
          m
          
            2
          
        
        Z
      
    
    {\textstyle m^{2}Z}
  
 due to hash collisions.

Practical considerations[edit]
The constant 
  
    
      
        
          Î±
          
            m
          
        
      
    
    {\textstyle \alpha _{m}}
  
 is not simple to calculate, and can be approximated with the formula[1]


  
    
      
        
          Î±
          
            m
          
        
        â
        
          
            {
            
              
                
                  m
                  =
                  16
                
                
                  0.673
                
              
              
                
                  m
                  =
                  32
                
                
                  0.697
                
              
              
                
                  m
                  =
                  64
                
                
                  0.709
                
              
              
                
                  m
                  â¥
                  128
                
                
                  
                    
                      0.7213
                      
                        1
                        +
                        
                          
                            1.079
                            m
                          
                        
                      
                    
                  
                
              
            
            
          
        
      
    
    {\displaystyle \alpha _{m}\approx {\begin{cases}m=16&0.673\\m=32&0.697\\m=64&0.709\\m\geq 128&{\frac {0.7213}{1+{\frac {1.079}{m}}}}\end{cases}}}
  

The HyperLogLog technique, though, is biased for small cardinalities below a threshold of 
  
    
      
        
          
            5
            2
          
        
        m
      
    
    {\textstyle {\frac {5}{2}}m}
  
. The original paper proposes using a different algorithm for small cardinalities known as Linear Counting.[5] In the case where the estimate provided above is less than the threshold 
  
    
      
        E
        <
        
          
            5
            2
          
        
        m
      
    
    {\textstyle E<{\frac {5}{2}}m}
  
, the alternative calculation can be used:

Let 
  
    
      
        V
      
    
    {\textstyle V}
  
 be the count of registers equal to 0.
If 
  
    
      
        V
        =
        0
      
    
    {\textstyle V=0}
  
, use the standard HyperLogLog estimator 
  
    
      
        E
      
    
    {\textstyle E}
  
 above.
Otherwise, use Linear Counting: 
  
    
      
        
          E
          
            â
          
        
        =
        m
        log
        â¡
        
          (
          
            
              m
              V
            
          
          )
        
      
    
    {\textstyle E^{\star }=m\log \left({\frac {m}{V}}\right)}
  

Additionally, for very large cardinalities approaching the limit of the size of the registers (
  
    
      
        E
        >
        
          
            
              2
              
                32
              
            
            30
          
        
      
    
    {\textstyle E>{\frac {2^{32}}{30}}}
  
 for 32-bit registers), the cardinality can be estimated with:


  
    
      
        
          E
          
            â
          
        
        =
        â
        
          2
          
            32
          
        
        log
        â¡
        
          (
          
            1
            â
            
              
                E
                
                  2
                  
                    32
                  
                
              
            
          
          )
        
      
    
    {\displaystyle E^{\star }=-2^{32}\log \left(1-{\frac {E}{2^{32}}}\right)}
  

With the above corrections for lower and upper bounds, the error can be estimated as 
  
    
      
        Ï
        =
        1.04
        
          /
        
        
          
            m
          
        
      
    
    {\textstyle \sigma =1.04/{\sqrt {m}}}
  
.

Merge[edit]
The merge operation for two HLLs (
  
    
      
        
          
            
              h
              l
              l
            
          
          
            1
          
        
        ,
        
          
            
              h
              l
              l
            
          
          
            2
          
        
      
    
    {\textstyle {\mathit {hll}}_{1},{\mathit {hll}}_{2}}
  
) consists in obtaining the maximum for each pair of registers 
  
    
      
        j
        :
        1..
        m
      
    
    {\textstyle j:1..m}
  



  
    
      
        
          
            
              h
              l
              l
            
          
          
            union
          
        
        [
        j
        ]
        =
        max
        (
        
          
            
              h
              l
              l
            
          
          
            1
          
        
        [
        j
        ]
        ,
        
          
            
              h
              l
              l
            
          
          
            2
          
        
        [
        j
        ]
        )
      
    
    {\displaystyle {\mathit {hll}}_{\text{union}}[j]=\max({\mathit {hll}}_{1}[j],{\mathit {hll}}_{2}[j])}
  

Complexity[edit]
To analyze the complexity, the data streaming 
  
    
      
        (
        Ïµ
        ,
        Î´
        )
      
    
    {\displaystyle (\epsilon ,\delta )}
  
 model[6] is used, which analyzes the space necessary to get a 
  
    
      
        1
        Â±
        Ïµ
      
    
    {\displaystyle 1\pm \epsilon }
  
 approximation with a fixed success probability 
  
    
      
        1
        â
        Î´
      
    
    {\displaystyle 1-\delta }
  
. The relative error of HLL is 
  
    
      
        1.04
        
          /
        
        
          
            m
          
        
      
    
    {\displaystyle 1.04/{\sqrt {m}}}
  
 and it needs 
  
    
      
        O
        (
        
          Ïµ
          
            â
            2
          
        
        log
        â¡
        log
        â¡
        n
        +
        log
        â¡
        n
        )
      
    
    {\displaystyle O(\epsilon ^{-2}\log \log n+\log n)}
  
 space, where n is the set cardinality and m is the number of registers (usually less than one byte size).
The add operation depends on the size of the output of the hash function. As this size is fixed, we can consider the running time for the add operation to be 
  
    
      
        O
        (
        1
        )
      
    
    {\displaystyle O(1)}
  
.
The count and merge operations depend on the number of registers m and have a theoretical cost of 
  
    
      
        O
        (
        m
        )
      
    
    {\displaystyle O(m)}
  
. In some implementations (Redis)[7] the number of registers is fixed and the cost is considered to be 
  
    
      
        O
        (
        1
        )
      
    
    {\displaystyle O(1)}
  
 in the documentation.

HLL++[edit]
The HyperLogLog++ algorithm proposes several improvements in the HyperLogLog algorithm to reduce memory requirements and increase accuracy in some ranges of cardinalities:[6]

64-bit hash function is used instead of the 32 bits used in the original paper. This reduces the hash collisions for large cardinalities allowing to remove the large range correction.
Some bias is found for small cardinalities when switching from linear counting to the HLL counting. An empirical bias correction is proposed to mitigate the problem.
A sparse representation of the registers is proposed to reduce memory requirements for small cardinalities, which can be later transformed to a dense representation if the cardinality grows.
Streaming HLL[edit]
When the data arrives in a single stream, the Historic Inverse Probability or martingale estimator[8][9]
significantly improves the accuracy of the HLL sketch and uses 36% less memory to achieve a given error level. This estimator is provably optimal for any duplicate insensitive approximate distinct counting sketch on a single stream.
The single stream scenario also leads to variants in the HLL sketch construction.
HLL-TailCut+ uses 45% less memory than the original HLL sketch but at the cost of being dependent on the data insertion order and not being able to merge sketches.[10]

Further reading[edit]
.mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}"Probabilistic Data Structures for Web Analytics and Data Mining". highlyscalable.wordpress.com. May 2012. Retrieved 2014-04-19.
"New cardinality estimation algorithms for HyperLogLog sketches" (PDF). Retrieved 2016-10-29.
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ Jump up to: a b c d e Flajolet, Philippe; Fusy, Ãric; Gandouet, Olivier; Meunier, FrÃ©dÃ©ric (2007). "Hyperloglog: The analysis of a near-optimal cardinality estimation algorithm" (PDF). Discrete Mathematics and Theoretical Computer Science Proceedings. Nancy, France. AH: 127â146. CiteSeerXÂ 10.1.1.76.4286. Retrieved 2016-12-11. 

^ Durand, M.; Flajolet, P. (2003). "LogLog counting of large cardinalities." (PDF).  In G. Di Battista and U. Zwick (ed.). Lecture Notes in Computer Science. Annual European Symposium on Algorithms (ESA03). Vol.Â 2832. Springer. pp.Â 605â617.

^ Flajolet, Philippe; Martin, G. Nigel (1985). "Probabilistic counting algorithms for data base applications" (PDF). Journal of Computer and System Sciences. 31 (2): 182â209. doi:10.1016/0022-0000(85)90041-8.

^ S Heule, M Nunkesser, A Hall (2013). "HyperLogLog in Practice: Algorithmic Engineering of a State of The Art Cardinality Estimation Algorithm" (PDF). sec 4.{{cite web}}:  CS1 maint: uses authors parameter (link)

^ Whang, Kyu-Young; Vander-Zanden, Brad T; Taylor, Howard M (1990). "A linear-time probabilistic counting algorithm for database applications". ACM Transactions on Database Systems. 15 (2): 208â229. doi:10.1145/78922.78925.

^ Jump up to: a b "HyperLogLog in Practice: Algorithmic Engineering of a State of The Art Cardinality Estimation Algorithm". Retrieved 2014-04-19.

^ "PFCOUNT â Redis".

^ Cohen, E. (March 2015). "All-distances sketches, revisited: HIP estimators for massive graphs analysis". IEEE Transactions on Knowledge and Data Engineering. 27 (9): 2320â2334. arXiv:1306.3284. doi:10.1109/TKDE.2015.2411606.

^ 
Ting, D. (August 2014). "Streamed approximate counting of distinct elements: beating optimal batch methods". Proceedings of the 20th ACM SIGKDD International Conference on Knowledge Discovery and Data Mining (KDD '14): 442â451. doi:10.1145/2623330.2623669. ISBNÂ 9781450329569.

^ Xiao, Q.; Zhou, Y.; Chen, S. (May 2017). "Better with fewer bits: Improving the performance of cardinality estimation of large data streams". IEEE INFOCOM 2017 - IEEE Conference on Computer Communications: 1â9. doi:10.1109/INFOCOM.2017.8057088. ISBNÂ 978-1-5090-5336-0.






<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=HyperLogLog&oldid=1051223172"
		Categories: Probabilistic data structuresStatistical algorithmsHidden categories: CS1 maint: uses authors parameterArticles lacking in-text citations from March 2014All articles lacking in-text citations
	
