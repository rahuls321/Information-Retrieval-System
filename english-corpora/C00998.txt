
Title:
Graph isomorphism problem
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Computational problem


.mw-parser-output .unsolved{margin:0 1em 1em;border:#ccc solid;padding:0.35em 0.35em 0.35em 2.2em;background-color:#eee;background-image:url("https://upload.wikimedia.org/wikipedia/commons/2/26/Question%2C_Web_Fundamentals.svg");background-position:top 50%left 0.35em;background-size:1.5em;background-repeat:no-repeat}@media(min-width:720px){.mw-parser-output .unsolved{float:right;max-width:25%}}.mw-parser-output .unsolved-label{font-weight:bold}.mw-parser-output .unsolved-body{margin:0.35em;font-style:italic}.mw-parser-output .unsolved-more{font-size:smaller}


Unsolved problem in computer science:
Can the graph isomorphism problem be solved in polynomial time?
(more unsolved problems in computer science)

The graph isomorphism problem is the computational problem of determining whether two finite graphs are isomorphic.
The problem is not known to be solvable in polynomial time nor to be NP-complete, and therefore may be in the computational complexity class NP-intermediate.  It is known that the graph isomorphism problem is in the low hierarchy of class NP, which implies that it is not NP-complete unless the polynomial time hierarchy collapses to its second level.[1]  At the same time, isomorphism for many special classes of graphs can be solved in polynomial time, and in practice graph isomorphism can often be solved efficiently.[2][3]
This problem is a special case of the subgraph isomorphism problem,[4] which asks whether a given graph G contains a subgraph that is isomorphic to another given graph H; this problem is known to be NP-complete. It is also known to be a special case of the non-abelian hidden subgroup problem over the symmetric group.[5]
In the area of image recognition it is known as the exact graph matching.[6]

Contents

1 State of the art
2 Solved special cases
3 Complexity class GI

3.1 GI-complete and GI-hard problems

3.1.1 Isomorphism of other objects
3.1.2 GI-complete classes of graphs
3.1.3 Other GI-complete problems
3.1.4 GI-hard problems




4 Program checking
5 Applications
6 See also
7 Notes
8 References

8.1 Surveys and monographs
8.2 Software





State of the art[edit]
In November 2015, LÃ¡szlÃ³ Babai announced a quasipolynomial time algorithm for all graphs, that is, one with running time 
  
    
      
        
          2
          
            O
            (
            (
            log
            â¡
            n
            
              )
              
                c
              
            
            )
          
        
      
    
    {\displaystyle 2^{O((\log n)^{c})}}
  
 for some fixed 
  
    
      
        c
        >
        0
      
    
    {\displaystyle c>0}
  
.[7][8][9][10] On January 4, 2017, Babai retracted the quasi-polynomial claim and stated a sub-exponential time bound instead after Harald Helfgott discovered a flaw in the proof. On January 9, 2017, Babai announced a correction (published in full on January 19) and restored the quasi-polynomial claim, with Helfgott confirming the fix.[11][12]  Helfgott further claims that one can take c = 3, so the running time is 2O((log n)3).[13][14]
Prior to this, the best currently accepted theoretical algorithm was due to Babai & Luks (1983), and is based on the earlier work by Luks (1982) combined with a subfactorial algorithm of V. N. Zemlyachenko (Zemlyachenko, Korneenko & Tyshkevich 1985).  The algorithm has run time 2O(ânÂ logÂ n) for graphs with n vertices and relies on the classification of finite simple groups. Without this classification theorem, a slightly weaker bound 
2O(ânÂ log2Â n) was obtained first for strongly regular graphs by LÃ¡szlÃ³ BabaiÂ (1980), and then extended to general graphs by Babai & Luks (1983).  Improvement of the exponent ân is a major open problem; for strongly regular graphs this was done by Spielman (1996).  For hypergraphs of bounded rank, a subexponential upper bound matching the case of graphs was obtained by Babai & Codenotti (2008).
There are several competing practical algorithms for graph isomorphism, such as those due to McKay (1981), Schmidt & Druffel (1976), and Ullman (1976).  While they seem to perform well on random graphs, a major drawback of these algorithms is their exponential time performance in the worst case.[15]
The graph isomorphism problem is computationally equivalent to the problem of computing the automorphism group of a graph,[16][17] and is weaker than the permutation group isomorphism problem and the permutation group intersection problem.  For the latter two problems, Babai, Kantor & Luks (1983) obtained complexity bounds similar to that for graph isomorphism.

Solved special cases[edit]
A number of important special cases of the graph isomorphism problem have efficient, polynomial-time solutions:

Trees[18][19]
Planar graphs[20] (In fact, planar graph isomorphism is in log space,[21] a class contained in P)
Interval graphs[22]
Permutation graphs[23]
Circulant graphs[24]
Bounded-parameter graphs
Graphs of bounded treewidth[25]
Graphs of bounded genus[26] (Planar graphs are graphs of genus 0.)
Graphs of bounded degree[27]
Graphs with bounded eigenvalue multiplicity[28]
k-Contractible graphs (a generalization of bounded degree and bounded genus)[29]
Color-preserving isomorphism of colored graphs with bounded color multiplicity (i.e., at most k vertices have the same color for a fixed k) is in class NC, which is a subclass of P[30]
Complexity class GI[edit]
Since the graph isomorphism problem is neither known to be NP-complete nor known to be tractable, researchers have sought to gain insight into the problem by defining a new class GI, the set of problems with a polynomial-time Turing reduction to the graph isomorphism problem.[31] If in fact the graph isomorphism problem is solvable in polynomial time, GI would equal P. On the other hand, if the problem is NP-complete, GI would equal NP and all problems in NP would be solvable in quasi-polynomial time.
As is common for complexity classes within the polynomial time hierarchy, a problem is called GI-hard if there is a polynomial-time Turing reduction from any problem in GI to that problem, i.e.,  a polynomial-time solution to a GI-hard problem would yield a polynomial-time solution to the graph isomorphism problem (and so all problems in GI).  A problem 
  
    
      
        X
      
    
    {\displaystyle X}
  
 is called complete for GI, or GI-complete, if it is both GI-hard and a polynomial-time solution to the GI problem would yield a polynomial-time solution to 
  
    
      
        X
      
    
    {\displaystyle X}
  
.
The graph isomorphism problem is contained in both NP and co-AM. GI is contained in and low for Parity P, as well as contained in the potentially much smaller class SPP.[32] That it lies in Parity P means that the graph isomorphism problem is no harder than determining whether a polynomial-time nondeterministic Turing machine has an even or odd number of accepting paths. GI is also contained in and low for ZPPNP.[33] This essentially means that an efficient Las Vegas algorithm with access to an NP oracle can solve graph isomorphism so easily that it gains no power from being given the ability to do so in constant time.

GI-complete and GI-hard problems[edit]
Isomorphism of other objects[edit]
There are a number of classes of mathematical objects for which the problem of isomorphism is a GI-complete problem. A number of them are graphs endowed with additional properties or restrictions:[34]

digraphs[34]
labelled graphs, with the proviso that an isomorphism is not required to preserve the labels,[34] but only the equivalence relation consisting of pairs of vertices with the same label
"polarized graphs" (made of a complete graph Km and an empty graph Kn plus some edges connecting the two; their isomorphism must preserve the partition)[34]
2-colored graphs[34]
explicitly given finite structures[34]
multigraphs[34]
hypergraphs[34]
finite automata[34]
Markov Decision Processes[35]
commutative class 3 nilpotent (i.e., xyz = 0 for every elements x, y, z) semigroups[34]
finite rank associative algebras over a fixed algebraically closed field with zero squared radical and commutative factor over the radical.[34][36]
context-free grammars[34]
balanced incomplete block designs[34]
Recognizing combinatorial isomorphism of convex polytopes represented by vertex-facet incidences.[37]
This list is incomplete; you can help by adding missing items.  (August 2008)
GI-complete classes of graphs[edit]
A class of graphs is called GI-complete if recognition of isomorphism for graphs from this subclass is a GI-complete problem. The following classes are GI-complete:[34]

connected graphs[34]
graphs of diameter 2 and radius 1[34]
directed acyclic graphs[34]
regular graphs[34]
bipartite graphs without non-trivial strongly regular subgraphs[34]
bipartite Eulerian graphs[34]
bipartite regular graphs[34]
line graphs[34]
split graphs[38]
chordal graphs[34]
regular self-complementary graphs[34]
polytopal graphs of general, simple, and simplicial convex polytopes in arbitrary dimensions.[39]
This list is incomplete; you can help by adding missing items.  (August 2008)
Many classes of digraphs are also GI-complete.

Other GI-complete problems[edit]
There are other nontrivial GI-complete problems in addition to isomorphism problems.

The recognition of self-complementarity of a graph or digraph.[40]
A clique problem for a class of so-called M-graphs. It is shown that finding an isomorphism for n-vertex graphs is equivalent to finding an n-clique in an M-graph of size n2. This fact is interesting because the problem of finding an (nÂ âÂ Îµ)-clique in a M-graph of size n2 is NP-complete for arbitrarily small positive Îµ.[41]
The problem of homeomorphism of 2-complexes.[42]
GI-hard problems[edit]
The problem of counting the number of isomorphisms between two graphs is polynomial-time equivalent to the problem of telling whether even one exists.[43]
The problem of deciding whether two convex polytopes given by either the V-description or H-description are projectively or affinely isomorphic. The latter means existence of a projective or affine map between the spaces that contain the two polytopes (not necessarily of the same dimension) which induces a bijection between the polytopes.[39]
Program checking[edit]
Manuel Blum and Sampath KannanÂ (1995) have shown a probabilistic checker for programs for graph isomorphism. Suppose P is a claimed polynomial-time procedure that checks if two graphs are isomorphic, but it is not trusted. To check if graphs G and H are isomorphic:

Ask P whether G and H are isomorphic.
If the answer is "yes":
Attempt to construct an isomorphism using P as subroutine. Mark a vertex u in G and v in H, and modify the graphs to make them distinctive (with a small local change). Ask P if the modified graphs are isomorphic. If no, change v to a different vertex. Continue searching.
Either the isomorphism will be found (and can be verified), or P will contradict itself.
If the answer is "no":
Perform the following 100 times. Choose randomly G or H, and randomly permute its vertices. Ask P if the graph is isomorphic to G and H. (As in AM protocol for graph nonisomorphism).
If any of the tests are failed, judge P as invalid program. Otherwise, answer "no".
This procedure is polynomial-time and gives the correct answer if P is a correct program for graph isomorphism. If P is not a correct program, but answers correctly on G and H, the checker will either give the correct answer, or detect invalid behaviour of P.
If P is not a correct program, and answers incorrectly on G and H, the checker will detect invalid behaviour of P with high probability, or answer wrong with probability 2â100.
Notably, P is used only as a blackbox.

Applications[edit]
Graphs are commonly used to encode structural information in many fields, including computer vision and pattern recognition, and graph matching, i.e., identification of similarities between graphs, is an important tools in these areas. In these areas graph isomorphism problem is known as the exact graph matching.[44]
In cheminformatics and in mathematical chemistry, graph isomorphism testing is used to identify a chemical compound within a chemical database.[45] Also, in organic mathematical chemistry graph isomorphism testing is useful for generation of molecular graphs and for computer synthesis.
Chemical database search is an example of graphical data mining, where the graph canonization approach is often used.[46] In particular, a number of identifiers for chemical substances,  such as SMILES and InChI, designed to provide a standard and human-readable way to encode molecular information and to facilitate the search for such information in databases and on the web, use canonization step in their computation, which is essentially the canonization of the graph which represents the molecule.
In electronic design automation graph isomorphism is the basis of the Layout Versus Schematic (LVS) circuit design step, which is a verification whether the electric circuits represented by a circuit schematic and an integrated circuit layout are the same.[47]

See also[edit]
Graph automorphism problem
Graph canonization
Notes[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ SchÃ¶ning (1987).

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Babai, LÃ¡szlÃ³; ErdÅs, Paul; Selkow, Stanley M. (1980-08-01). "Random Graph Isomorphism". SIAM Journal on Computing. 9 (3): 628â635. doi:10.1137/0209047. ISSNÂ 0097-5397.

^ McKay (1981).

^ Ullman (1976).

^ Moore, Russell & Schulman (2008).

^ Endika Bengoetxea, "Inexact Graph Matching Using Estimation of Distribution Algorithms", Ph.
 D., 2002, Chapter 2:The graph matching problem (retrieved June 28, 2017)

^ "Mathematician claims breakthrough in complexity theory". Science. November 10, 2015.

^ Babai (2015)

^ Video of first 2015 lecture linked from Babai's home page

^ "The Graph Isomorphism Problem". Communications of the ACM. Retrieved 4 May 2021.

^ Babai, LÃ¡szlÃ³ (January 9, 2017), Graph isomorphism update

^ Erica Klarreich, Graph Isomorphism Vanquished â Again, Quanta Magazine,  January 14, 2017 see here

^ Helfgott, Harald (January 16, 2017), Isomorphismes de graphes en temps quasi-polynomial (d'aprÃ¨s Babai et Luks, Weisfeiler-Leman...), arXiv:1701.04372, Bibcode:2017arXiv170104372A

^ Dona, Daniele; Bajpai, Jitendra; Helfgott, Harald AndrÃ©s (October 12, 2017). "Graph isomorphisms in quasi-polynomial time". arXiv:1710.04574 [math.GR].

^ Foggia, Sansone & Vento (2001).

^ Luks, Eugene (1993-09-01). "Permutation groups and polynomial-time computation". DIMACS Series in Discrete Mathematics and Theoretical Computer Science. Vol.Â 11. Providence, Rhode Island: American Mathematical Society. pp.Â 139â175. doi:10.1090/dimacs/011/11. ISBNÂ 978-0-8218-6599-6. ISSNÂ 1052-1798.

^ Algeboy (https://cs.stackexchange.com/users/90177/algeboy), Graph isomorphism and the automorphism group, URL (version: 2018-09-20): https://cs.stackexchange.com/q/97575

^ Kelly (1957).

^ Aho, Hopcroft & Ullman (1974), p.Â 84-86.

^ Hopcroft & Wong (1974).

^ Datta et al. (2009).

^ Booth & Lueker (1979).

^ Colbourn (1981).

^ Muzychuk (2004).

^ Bodlaender (1990).

^ Miller 1980; Filotti & Mayer 1980.

^ Luks (1982).

^ Babai, Grigoryev & Mount (1982).

^ Miller (1983).

^ Luks (1986).

^ Booth & Colbourn 1977; KÃ¶bler, SchÃ¶ning & TorÃ¡n 1993.

^ KÃ¶bler, SchÃ¶ning & TorÃ¡n 1992; Arvind & Kurur 2006

^ Arvind & KÃ¶bler (2000).

^ Jump up to: a b c d e f g h i j k l m n o p q r s t u v w x Zemlyachenko, Korneenko & Tyshkevich (1985)

^ Narayanamurthy & Ravindran (2008).

^ Grigor'ev (1981).

^ Johnson (2005); Kaibel & Schwartz (2003).

^ Chung (1985).

^ Jump up to: a b Kaibel & Schwartz (2003).

^ Colbourn & Colbourn (1978).

^ Kozen (1978).

^ Shawe-Taylor & Pisanski (1994).

^ Mathon (1979); Johnson 2005.

^ Endika Bengoetxea, Ph.D., Abstract

^ Irniger (2005).

^ Cook & Holder (2007).

^ Baird & Cho (1975).


References[edit]
.mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li{margin-left:0;padding-left:3.2em;text-indent:-3.2em}.mw-parser-output .refbegin-hanging-indents ul,.mw-parser-output .refbegin-hanging-indents ul li{list-style:none}@media(max-width:720px){.mw-parser-output .refbegin-hanging-indents>ul>li{padding-left:1.6em;text-indent:-1.6em}}.mw-parser-output .refbegin-columns{margin-top:0.3em}.mw-parser-output .refbegin-columns ul{margin-top:0}.mw-parser-output .refbegin-columns li{page-break-inside:avoid;break-inside:avoid-column}
Aho, Alfred V.; Hopcroft, John; Ullman, Jeffrey D. (1974), The Design and Analysis of Computer Algorithms, Reading, MA: Addison-Wesley.
Arvind, Vikraman; KÃ¶bler, Johannes (2000), "Graph isomorphism is low for ZPP(NP) and other lowness results.", Proceedings of the 17th Annual Symposium on Theoretical Aspects of Computer Science, Lecture Notes in Computer Science, vol.Â 1770, Springer-Verlag, pp.Â 431â442, doi:10.1007/3-540-46541-3_36, ISBNÂ 3-540-67141-2, MRÂ 1781752.
Arvind, Vikraman; Kurur, Piyush P. (2006), "Graph isomorphism is in SPP", Information and Computation, 204 (5): 835â852, doi:10.1016/j.ic.2006.02.002, MRÂ 2226371.
Babai, LÃ¡szlÃ³ (1980), "On the complexity of canonical labeling of strongly regular graphs", SIAM Journal on Computing, 9 (1): 212â216, doi:10.1137/0209018, MRÂ 0557839.
Babai, LÃ¡szlÃ³; Codenotti, Paolo (2008), "Isomorphism of hypergraphs of low rank in moderately exponential time" (PDF), Proceedings of the 49th Annual IEEE Symposium on Foundations of Computer Science (FOCS 2008), IEEE Computer Society, pp.Â 667â676, doi:10.1109/FOCS.2008.80, ISBNÂ 978-0-7695-3436-7, S2CIDÂ 14025744.
Babai, LÃ¡szlÃ³; Grigoryev, D. Yu.; Mount, David M. (1982), "Isomorphism of graphs with bounded eigenvalue multiplicity", Proceedings of the 14th Annual ACM Symposium on Theory of Computing, pp.Â 310â324, doi:10.1145/800070.802206, ISBNÂ 0-89791-070-2, S2CIDÂ 12837287.
Babai, LÃ¡szlÃ³; Kantor, William; Luks, Eugene (1983), "Computational complexity and the classification of finite simple groups", Proceedings of the 24th Annual Symposium on Foundations of Computer Science (FOCS), pp.Â 162â171, doi:10.1109/SFCS.1983.10, S2CIDÂ 6670135.
Babai, LÃ¡szlÃ³; Luks, Eugene M. (1983), "Canonical labeling of graphs", Proceedings of the Fifteenth Annual ACM Symposium on Theory of Computing (STOC '83), pp.Â 171â183, doi:10.1145/800061.808746, ISBNÂ 0-89791-099-0, S2CIDÂ 12572142.
Babai, LÃ¡szlÃ³ (2015), Graph Isomorphism in Quasipolynomial Time, arXiv:1512.03547, Bibcode:2015arXiv151203547B
Baird, H. S.; Cho, Y. E. (1975), "An artwork design verification system", Proceedings of the 12th Design Automation Conference (DAC '75), Piscataway, NJ, USA: IEEE Press, pp.Â 414â420.
Blum, Manuel; Kannan, Sampath (1995), "Designing programs that check their work", Journal of the ACM, 42 (1): 269â291, CiteSeerXÂ 10.1.1.38.2537, doi:10.1145/200836.200880, S2CIDÂ 52151779.
Bodlaender, Hans (1990), "Polynomial algorithms for graph isomorphism and chromatic index on partial k-trees", Journal of Algorithms, 11 (4): 631â643, doi:10.1016/0196-6774(90)90013-5, MRÂ 1079454.
Booth, Kellogg S.; Colbourn, C. J. (1977), Problems polynomially equivalent to graph isomorphism, Technical Report, vol.Â CS-77-04, Computer Science Department, University of Waterloo.
Booth, Kellogg S.; Lueker, George S. (1979), "A linear time algorithm for deciding interval graph isomorphism", Journal of the ACM, 26 (2): 183â195, doi:10.1145/322123.322125, MRÂ 0528025, S2CIDÂ 18859101.
Boucher, C.; Loker, D. (2006), Graph isomorphism completeness for perfect graphs and subclasses of perfect graphs (PDF), Technical Report, vol.Â CS-2006-32, Computer Science Department, University of Waterloo.
Chung, Fan R. K. (1985), "On the cutwidth and the topological bandwidth of a tree", SIAM Journal on Algebraic and Discrete Methods, 6 (2): 268â277, doi:10.1137/0606026, MRÂ 0778007.
Colbourn, C. J. (1981), "On testing isomorphism of permutation graphs", Networks, 11: 13â21, doi:10.1002/net.3230110103, MRÂ 0608916.
Colbourn, Marlene Jones; Colbourn, Charles J. (1978), "Graph isomorphism and self-complementary graphs", ACM SIGACT News, 10 (1): 25â29, doi:10.1145/1008605.1008608, S2CIDÂ 35157300.
Cook, Diane J.; Holder, Lawrence B. (2007), "Section 6.2.1: Canonical Labeling", Mining Graph Data, Wiley, pp.Â 120â122, ISBNÂ 978-0-470-07303-2.
Datta, S.; Limaye, N.; Nimbhorkar, P.; Thierauf, T.; Wagner, F. (2009), "Planar graph isomorphism is in log-space", 2009 24th Annual IEEE Conference on Computational Complexity, p.Â 203, arXiv:0809.2319, doi:10.1109/CCC.2009.16, ISBNÂ 978-0-7695-3717-7, S2CIDÂ 14836820.
Filotti, I. S.; Mayer, Jack N. (1980), "A polynomial-time algorithm for determining the isomorphism of graphs of fixed genus", Proceedings of the 12th Annual ACM Symposium on Theory of Computing, pp.Â 236â243, doi:10.1145/800141.804671, ISBNÂ 0-89791-017-6, S2CIDÂ 16345164.
Foggia, P.; Sansone, C.; Vento, M. (2001), "A performance comparison of five algorithms for graph isomorphism" (PDF), Proc. 3rd IAPR-TC15 Workshop Graph-Based Representations in Pattern Recognition, pp.Â 188â199.
Garey, Michael R.; Johnson, David S. (1979), Computers and Intractability: A Guide to the Theory of NP-Completeness, W. H. Freeman, ISBNÂ 978-0-7167-1045-5.
Grigor'ev, D. Ju. (1981), "Complexity of 'wild' matrix problems and of the isomorphism of algebras and graphs", Zapiski Nauchnykh Seminarov Leningradskogo Otdeleniya Matematicheskogo Instituta Imeni V. A. Steklova Akademii Nauk SSSR (LOMI) (in Russian), 105: 10â17, 198, MRÂ 0628981. English translation in Journal of Mathematical Sciences 22 (3): 1285â1289, 1983.
Hopcroft, John; Wong, J. (1974), "Linear time algorithm for isomorphism of planar graphs", Proceedings of the Sixth Annual ACM Symposium on Theory of Computing, pp.Â 172â184, doi:10.1145/800119.803896, S2CIDÂ 15561884.
Irniger, Christophe-AndrÃ© Mario (2005), Graph Matching: Filtering Databases of Graphs Using Machine Learning, Dissertationen zur kÃ¼nstlichen Intelligenz, vol.Â 293, AKA, ISBNÂ 1-58603-557-6.
Kaibel, Volker; Schwartz, Alexander (2003), "On the complexity of polytope isomorphism problems", Graphs and Combinatorics, 19 (2): 215â230, arXiv:math/0106093, doi:10.1007/s00373-002-0503-y, MRÂ 1996205, S2CIDÂ 179936, archived from the original on 2015-07-21.
Kelly, Paul J. (1957), "A congruence theorem for trees", Pacific Journal of Mathematics, 7: 961â968, doi:10.2140/pjm.1957.7.961, MRÂ 0087949.
KÃ¶bler, Johannes; SchÃ¶ning, Uwe; TorÃ¡n, Jacobo (1992), "Graph isomorphism is low for PP", Computational Complexity, 2 (4): 301â330, doi:10.1007/BF01200427, MRÂ 1215315, S2CIDÂ 8542603.
Kozen, Dexter (1978), "A clique problem equivalent to graph isomorphism", ACM SIGACT News, 10 (2): 50â52, doi:10.1145/990524.990529, S2CIDÂ 52835766.
Luks, Eugene M. (1982), "Isomorphism of graphs of bounded valence can be tested in polynomial time", Journal of Computer and System Sciences, 25: 42â65, doi:10.1016/0022-0000(82)90009-5, MRÂ 0685360, S2CIDÂ 2572728.
Luks, Eugene M. (1986), "Parallel algorithms for permutation groups and graph isomorphism", Proc. IEEE Symp. Foundations of Computer Science, pp.Â 292â302.
Mathon, Rudolf (1979), "A note on the graph isomorphism counting problem", Information Processing Letters, 8 (3): 131â132, doi:10.1016/0020-0190(79)90004-8, MRÂ 0526453.
McKay, Brendan D. (1981), "Practical graph isomorphism", 10th. Manitoba Conference on Numerical Mathematics and Computing (Winnipeg, 1980), Congressus Numerantium, vol.Â 30, pp.Â 45â87, MRÂ 0635936.
Miller, Gary (1980), "Isomorphism testing for graphs of bounded genus", Proceedings of the 12th Annual ACM Symposium on Theory of Computing, pp.Â 225â235, doi:10.1145/800141.804670, ISBNÂ 0-89791-017-6, S2CIDÂ 13647304.
Miller, Gary L. (1983), "Isomorphism testing and canonical forms for k-contractable graphs (a generalization of bounded valence and bounded genus)", Proc. Int. Conf. on Foundations of Computer Theory, Lecture Notes in Computer Science, vol.Â 158, pp.Â 310â327, doi:10.1007/3-540-12689-9_114. Full paper in Information and Control 56 (1â2): 1â20, 1983.
Moore, Cristopher; Russell, Alexander; Schulman, Leonard J. (2008), "The symmetric group defies strong Fourier sampling", SIAM Journal on Computing, 37 (6): 1842â1864, arXiv:quant-ph/0501056, doi:10.1137/050644896, MRÂ 2386215.
Muzychuk, Mikhail (2004), "A Solution of the Isomorphism Problem for Circulant Graphs", Proc. London Math. Soc., 88: 1â41, doi:10.1112/s0024611503014412, MRÂ 2018956.
Narayanamurthy, S. M.; Ravindran, B. (2008), "On the hardness of finding symmetries in Markov decision processes" (PDF), Proceedings of the Twenty-fifth International Conference on Machine Learning (ICML 2008), pp.Â 688â696.
Schmidt, Douglas C.; Druffel, Larry E. (1976), "A fast backtracking algorithm to test directed graphs for isomorphism using distance matrices", Journal of the ACM, 23 (3): 433â445, doi:10.1145/321958.321963, MRÂ 0411230, S2CIDÂ 6163956.
SchÃ¶ning, Uwe (1987), "Graph isomorphism is in the low hierarchy", Proceedings of the 4th Annual Symposium on Theoretical Aspects of Computer Science, pp.Â 114â124; also Journal of Computer and System Sciences 37: 312â323, 1988.
Shawe-Taylor, John; Pisanski, TomaÅ¾ (1994), "Homeomorphism of 2-complexes is graph isomorphism complete", SIAM Journal on Computing, 23 (1): 120â132, doi:10.1137/S0097539791198900, MRÂ 1258998.
Spielman, Daniel A. (1996), "Faster isomorphism testing of strongly regular graphs", Proceedings of the Twenty-eighth Annual ACM Symposium on Theory of Computing (STOC '96), ACM, pp.Â 576â584, ISBNÂ 978-0-89791-785-8.
Ullman, Julian R. (1976), "An algorithm for subgraph isomorphism" (PDF), Journal of the ACM, 23: 31â42, CiteSeerXÂ 10.1.1.361.7741, doi:10.1145/321921.321925, MRÂ 0495173, S2CIDÂ 17268751.
Surveys and monographs[edit]
Read, Ronald C.; Corneil, Derek G. (1977), "The graph isomorphism disease", Journal of Graph Theory, 1 (4): 339â363, doi:10.1002/jgt.3190010410, MRÂ 0485586.
Gati, G. (1979), "Further annotated bibliography on the isomorphism disease", Journal of Graph Theory, 3 (2): 95â109, doi:10.1002/jgt.3190030202.
Zemlyachenko, V. N.; Korneenko, N. M.; Tyshkevich, R. I. (1985), "Graph isomorphism problem", Journal of Mathematical Sciences, 29 (4): 1426â1481, doi:10.1007/BF02104746, S2CIDÂ 121818465. (Translated from Zapiski Nauchnykh Seminarov Leningradskogo Otdeleniya Matematicheskogo Instituta im. V. A. Steklova AN SSSR (Records of Seminars of the Leningrad Department of Steklov Institute of Mathematics of the USSR Academy of Sciences), Vol. 118, pp.Â 83â158, 1982.)
Arvind, V.; TorÃ¡n, Jacobo (2005), "Isomorphism testing: Perspectives and open problems" (PDF), Bulletin of the European Association for Theoretical Computer Science, 86: 66â84. (A brief survey of open questions related to the isomorphism problem for graphs, rings and groups.)
KÃ¶bler, Johannes; SchÃ¶ning, Uwe; TorÃ¡n, Jacobo (1993), The Graph Isomorphism Problem: Its Structural Complexity, BirkhÃ¤user, ISBNÂ 978-0-8176-3680-7. (From the book cover: The books focuses on the issue of the computational complexity of the problem and presents several recent results that provide a better understanding of the relative position of the problem in the class NP as well as in other complexity classes.)
Johnson, David S. (2005), "The NP-Completeness Column", ACM Transactions on Algorithms, 1 (1): 160â176, doi:10.1145/1077464.1077476, S2CIDÂ 12604799. (This 24th edition of the Column discusses the state of the art for the open problems from the book Computers and Intractability and previous columns, in particular, for Graph Isomorphism.)
TorÃ¡n, Jacobo; Wagner, Fabian (2009), "The complexity of planar graph isomorphism" (PDF), Bulletin of the European Association for Theoretical Computer Science, 97, archived from the original (PDF) on 2010-09-20, retrieved 2010-06-03.
Software[edit]
Graph Isomorphism, review of implementations, The Stony Brook Algorithm Repository.





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Graph_isomorphism_problem&oldid=1068785550"
		Categories: Graph algorithmsMorphismsComputational problems in graph theoryUnsolved problems in computer scienceComputational complexity theoryHidden categories: Articles with short descriptionShort description matches WikidataUse American English from January 2019All Wikipedia articles written in American EnglishArticles using small message boxesIncomplete lists from August 2008CS1: long volume valueCS1 Russian-language sources (ru)AC with 0 elements
	
