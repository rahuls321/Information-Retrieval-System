
Title:
Recursion
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Process of repeating items in a self-similar way
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}For other uses, see Recursion (disambiguation).


This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources:Â "Recursion"Â âÂ newsÂ Â· newspapersÂ Â· booksÂ Â· scholarÂ Â· JSTOR  (June 2012) (Learn how and when to remove this template message)
  A visual form of recursion known as the Droste effect. The woman in this image holds an object that contains a smaller image of her holding an identical object, which in turn contains a smaller image of herself holding an identical object, and so forth. 1904 Droste cocoa tin, designed by Jan Misset
Recursion (adjective: recursive) occurs when a thing is defined in terms of itself or of its type. Recursion is used in a variety of disciplines ranging from linguistics to logic. The most common application of recursion is in mathematics and computer science, where a function being defined is applied within its own definition. While this apparently defines an infinite number of instances (function values), it is often done in such a way that no infinite loop or infinite chain of references can occur.

Contents

1 Formal definitions
2 Informal definition
3 In language

3.1 Recursive humor


4 In mathematics

4.1 Recursively defined sets

4.1.1 Example: the natural numbers
4.1.2 Example: Proof procedure


4.2 Finite subdivision rules
4.3 Functional recursion
4.4 Proofs involving recursive definitions
4.5 Recursive optimization
4.6 The recursion theorem

4.6.1 Proof of uniqueness




5 In computer science
6 In biology
7 In art
8 See also
9 References
10 Bibliography
11 External links



Formal definitions
  Ouroboros, an ancient symbol depicting a serpent or dragon eating its own tail.
In mathematics and computer science, a class of objects or methods exhibits recursive behavior when it can be defined by two properties:

A simple base case (or cases) â a terminating scenario that does not use recursion to produce an answer
A recursive step â a set of rules that reduces all successive cases toward the base case.
For example, the following is a recursive definition of a person's ancestor. One's ancestor is either:

One's parent (base case), or
One's parent's ancestor (recursive step).
The Fibonacci sequence is another classic example of recursion:

Fib(0) = 0 as base case 1,
Fib(1) = 1 as base case 2,
For all integers n > 1, Fib(n) = Fib(n â 1) + Fib(n â 2).
Many mathematical axioms are based upon recursive rules. For example, the formal definition of the natural numbers by the Peano axioms can be described as: "Zero is a natural number, and each natural number has a successor, which is also a natural number."[1] By this base case and recursive rule, one can generate the set of all natural numbers.
Other recursively defined mathematical objects include factorials, functions (e.g., recurrence relations), sets (e.g., Cantor ternary set), and fractals.
There are various more tongue-in-cheek definitions of recursion; see recursive humor.

Informal definition
  Recently refreshed sourdough, bubbling through fermentation: the recipe calls for some sourdough left over from the last time the same recipe was made.
Recursion is the process a procedure goes through when one of the steps of the procedure involves invoking the procedure itself. A procedure that goes through recursion is said to be 'recursive'.[2]
To understand recursion, one must recognize the distinction between a procedure and the running of a procedure. A procedure is a set of steps based on a set of rules, while the running of a procedure involves actually following the rules and performing the steps.
Recursion is related to, but not the same as, a reference within the specification of a procedure to the execution of some other procedure.
When a procedure is defined as such, this immediately creates the possibility of an endless loop; recursion can only be properly used in a definition if the step in question is skipped in certain cases so that the procedure can complete.
But even if it is properly defined, a recursive procedure is not easy for humans to perform, as it requires distinguishing the new from the old, partially executed invocation of the procedure; this requires some administration as to how far various simultaneous instances of the procedures have progressed. For this reason, recursive definitions are very rare in everyday situations.

In language
Linguist Noam Chomsky, among many others, has argued that the lack of an upper bound on the number of grammatical sentences in a language, and the lack of an upper bound on grammatical sentence length (beyond practical constraints such as the time available to utter one), can be explained as the consequence of recursion in natural language.[3][4]
This can be understood in terms of a recursive definition of a syntactic category, such as a sentence. A sentence can have a structure in which what follows the verb is another sentence: Dorothy thinks witches are dangerous, in which the sentence witches are dangerous occurs in the larger one. So a sentence can be defined recursively (very roughly) as something with a structure that includes a noun phrase, a verb, and optionally another sentence. This is really just a special case of the mathematical definition of recursion.
This provides a way of understanding the creativity of languageâthe unbounded number of grammatical sentencesâbecause it immediately predicts that sentences can be of arbitrary length: Dorothy thinks that Toto suspects that Tin Man said that.... There are many structures apart from sentences that can be defined recursively, and therefore many ways in which a sentence can embed instances of one category inside another.[5] Over the years, languages in general have proved amenable to this kind of analysis.
Recently, however, the generally accepted idea that recursion is an essential property of human language has been challenged by Daniel Everett on the basis of his claims about the PirahÃ£ language. Andrew Nevins, David Pesetsky and Cilene Rodrigues are among many who have argued against this.[6] Literary self-reference can in any case be argued to be different in kind from mathematical or logical recursion.[7]
Recursion plays a crucial role not only in syntax, but also in natural language semantics. The word and, for example, can be construed as a function that can apply to sentence meanings to create new sentences, and likewise for noun phrase meanings, verb phrase meanings, and others. It can also apply to intransitive verbs, transitive verbs, or ditransitive verbs. In order to provide a single denotation for it that is suitably flexible, and is typically defined so that it can take any of these different types of meanings as arguments. This can be done by defining it for a simple case in which it combines sentences, and then defining the other cases recursively in terms of the simple one.[8]
A recursive grammar is a formal grammar that contains recursive production rules.[9]

Recursive humor
  A recursive Wikipedia page
Recursion is sometimes used humorously in computer science, programming, philosophy, or mathematics textbooks, generally by giving a circular definition or self-reference, in which the putative recursive step does not get closer to a base case, but instead leads to an infinite regress. It is not unusual for such books to include a joke entry in their glossary along the lines of:

Recursion, see Recursion.[10]
A variation is found on page 269 in the index  of some editions of Brian Kernighan and Dennis Ritchie's book The C Programming Language; the index entry recursively references itself ("recursion 86, 139, 141, 182, 202, 269"). Early versions of this joke can be found in Let's talk Lisp by Laurent SiklÃ³ssy (published by Prentice Hall PTR on December 1, 1975, with a copyright date of 1976) and in Software Tools by Kernighan and Plauger (published by Addison-Wesley Professional on January 11, 1976). The joke also appears in The UNIX Programming Environment by Kernighan and Pike. It did not appear in the first edition of The C Programming Language. The joke is part of the Functional programming folklore and was already widespread in the functional programming community before the publication of the aforementioned books.
Another joke is that "To understand recursion, you must understand recursion."[10] In the English-language version of the Google web search engine, when a search for "recursion" is made, the site suggests "Did you mean: recursion."[11] An alternative form is the following, from Andrew Plotkin: "If you already know what recursion is, just remember the answer. Otherwise, find someone who is standing closer to Douglas Hofstadter than you are; then ask him or her what recursion is."
Recursive acronyms are other examples of recursive humor. PHP, for example, stands for "PHP Hypertext Preprocessor", WINE stands for "WINE Is Not an Emulator" GNU stands for "GNU's not Unix", and SPARQL denotes the "SPARQL Protocol and RDF Query Language".

In mathematics
  The Sierpinski triangleâa confined recursion of triangles that form a fractal
Recursively defined sets
Main article: Recursive definition
Example: the natural numbers
See also: Closure (mathematics)
The canonical example of a recursively defined set is given by the natural numbers:

0 is in 
  
    
      
        
          N
        
      
    
    {\displaystyle \mathbb {N} }
  

if n is in 
  
    
      
        
          N
        
      
    
    {\displaystyle \mathbb {N} }
  
, then n + 1 is in 
  
    
      
        
          N
        
      
    
    {\displaystyle \mathbb {N} }
  

The set of natural numbers is the smallest set satisfying the previous two properties.
In mathematical logic, the Peano axioms (or Peano postulates or DedekindâPeano axioms), are axioms for the natural numbers presented in the 19th century by the German mathematician Richard Dedekind and by the Italian mathematician Giuseppe Peano. The Peano Axioms define the natural numbers referring to a recursive successor function and addition and multiplication as recursive functions.

Example: Proof procedure
Another interesting example is the set of all "provable" propositions in an axiomatic system that are defined in terms of a proof procedure which is inductively (or recursively) defined as follows:

If a proposition is an axiom, it is a provable proposition.
If a proposition can be derived from true reachable propositions by means of inference rules, it is a provable proposition.
The set of provable propositions is the smallest set of propositions satisfying these conditions.
Finite subdivision rules
Main article: Finite subdivision rule
Finite subdivision rules are a geometric form of recursion, which can be used to create fractal-like images. A subdivision rule starts with a collection of polygons labelled by finitely many labels, and then each polygon is subdivided into smaller labelled polygons in a way that depends only on the labels of the original polygon. This process can be iterated. The standard `middle thirds' technique for creating the Cantor set is a subdivision rule, as is barycentric subdivision.

Functional recursion
A function may be recursively defined in terms of itself. A familiar example is the Fibonacci number sequence: F(n) = F(n â 1) + F(n â 2).  For such a definition to be useful, it must be reducible to non-recursively defined values: in this case F(0) = 0 and F(1) = 1.
A famous recursive function is the Ackermann function, which, unlike the Fibonacci sequence, cannot be expressed without recursion.[citation needed]

Proofs involving recursive definitions
Applying the standard technique of proof by cases to recursively defined sets or functions, as in the preceding sections, yields structural induction â a powerful generalization of mathematical induction widely used to derive proofs in mathematical logic and computer science.

Recursive optimization
Dynamic programming is an approach to optimization that restates a multiperiod or multistep optimization problem in recursive form. The key result in dynamic programming is the Bellman equation, which writes the value of the optimization problem at an earlier time (or earlier step) in terms of its value at a later time (or later step).

The recursion theorem
In set theory, this is a theorem guaranteeing that recursively defined functions exist. Given a set X, an element a of X and a function f: X â X, the theorem states that there is a unique function 
  
    
      
        F
        :
        
          N
        
        â
        X
      
    
    {\displaystyle F:\mathbb {N} \to X}
  
 (where 
  
    
      
        
          N
        
      
    
    {\displaystyle \mathbb {N} }
  
 denotes the set of natural numbers including zero) such that


  
    
      
        F
        (
        0
        )
        =
        a
      
    
    {\displaystyle F(0)=a}
  


  
    
      
        F
        (
        n
        +
        1
        )
        =
        f
        (
        F
        (
        n
        )
        )
      
    
    {\displaystyle F(n+1)=f(F(n))}
  

for any natural number n.

Proof of uniqueness
Take two functions 
  
    
      
        F
        :
        
          N
        
        â
        X
      
    
    {\displaystyle F:\mathbb {N} \to X}
  
 and 
  
    
      
        G
        :
        
          N
        
        â
        X
      
    
    {\displaystyle G:\mathbb {N} \to X}
  
 such that:


  
    
      
        F
        (
        0
        )
        =
        a
      
    
    {\displaystyle F(0)=a}
  


  
    
      
        G
        (
        0
        )
        =
        a
      
    
    {\displaystyle G(0)=a}
  


  
    
      
        F
        (
        n
        +
        1
        )
        =
        f
        (
        F
        (
        n
        )
        )
      
    
    {\displaystyle F(n+1)=f(F(n))}
  


  
    
      
        G
        (
        n
        +
        1
        )
        =
        f
        (
        G
        (
        n
        )
        )
      
    
    {\displaystyle G(n+1)=f(G(n))}
  

where a is an element of X.
It can be proved by mathematical induction that F(n) = G(n) for all natural numbers 
n:

Base Case: F(0) = a = G(0) so the equality holds for n = 0.
Inductive Step: Suppose F(k) = G(k) for some 
  
    
      
        k
        â
        
          N
        
      
    
    {\displaystyle k\in \mathbb {N} }
  
. Then F(k + 1) = f(F(k)) = f(G(k)) = G(k + 1).
Hence F(k) = G(k) implies F(k + 1) = G(k + 1).
By induction, F(n) = G(n) for all 
  
    
      
        n
        â
        
          N
        
      
    
    {\displaystyle n\in \mathbb {N} }
  
.

In computer science
Main article: Recursion (computer science)
A common method of simplification is to divide a problem into subproblems of the same type. As a computer programming technique, this is called divide and conquer and is key to the design of many important algorithms. Divide and conquer serves as a top-down approach to problem solving, where problems are solved by solving smaller and smaller instances. A contrary approach is dynamic programming. This approach serves as a bottom-up approach, where problems are solved by solving larger and larger instances, until the desired size is reached.
A classic example of recursion is the definition of the factorial function, given here in C code:

unsigned int factorial(unsigned int n) {
    if (n == 0) {
        return 1;
    } else {
        return n * factorial(n - 1);
    }
}

The function calls itself recursively on a smaller version of the input (n - 1) and multiplies the result of the recursive call by n, until reaching the base case, analogously to the mathematical definition of factorial.
Recursion in computer programming is exemplified when a function is defined in terms of simpler, often smaller versions of itself. The solution to the problem is then devised by combining the solutions obtained from the simpler versions of the problem. One example application of recursion is in parsers for programming languages. The great advantage of recursion is that an infinite set of possible sentences, designs or other data can be defined, parsed or produced by a finite computer program.
Recurrence relations are equations which define one or more sequences recursively. Some specific kinds of recurrence relation can be "solved" to obtain a non-recursive definition (e.g., a closed-form expression).
Use of recursion in an algorithm has both advantages and disadvantages.  The main advantage is usually the simplicity of instructions. The main disadvantage is that the memory usage of recursive algorithms may grow very quickly, rendering them impractical for larger instances.

In biology
Shapes that seem to have been created by recursive processes sometimes appear in plants and animals, such as in branching structures in which one large part branches out into two or more similar smaller parts.  One example is Romanesco broccoli.[12]

In art
  Recursive dolls: the original set of Matryoshka dolls by Zvyozdochkin and Malyutin, 1892
  Front face of Giotto's Stefaneschi Triptych, 1320, recursively contains an image of itself (held up by the kneeling figure in the central panel).
See also: Mathematics and art and Infinity mirror
The Russian Doll or Matryoshka doll is a physical artistic example of the recursive concept.[13]
Recursion has been used in paintings since Giotto's Stefaneschi Triptych, made in 1320. Its central panel  contains the kneeling figure of Cardinal Stefaneschi, holding up the triptych itself as an offering.[14][failed verification]
M. C. Escher's Print Gallery (1956) is a print which depicts a distorted city containing a gallery which recursively contains the picture, and so ad infinitum.[15]


See also
.mw-parser-output .div-col{margin-top:0.3em;column-width:30em}.mw-parser-output .div-col-small{font-size:90%}.mw-parser-output .div-col-rules{column-rule:1px solid #aaa}.mw-parser-output .div-col dl,.mw-parser-output .div-col ol,.mw-parser-output .div-col ul{margin-top:0}.mw-parser-output .div-col li,.mw-parser-output .div-col dd{page-break-inside:avoid;break-inside:avoid-column}
Corecursion
Course-of-values recursion
Digital infinity
A Dream Within a Dream (poem)
Droste effect
False awakening
Fixed point combinator
Infinite compositions of analytic functions
Infinite loop
Infinite regress
Infinitism
Infinity mirror
Iterated function
Mathematical induction
Mise en abyme
Reentrant (subroutine)
Self-reference
Spiegel im Spiegel
Strange loop
Tail recursion
Tupper's self-referential formula
Turtles all the way down

References
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}"Peano axioms | mathematics". Encyclopedia Britannica. Retrieved 2019-10-24.

^ "Definition of RECURSIVE". www.merriam-webster.com. Retrieved 2019-10-24.

^ Pinker, Steven (1994). The Language Instinct. William Morrow.

^ Pinker, Steven; Jackendoff, Ray (2005). "The faculty of language: What's so special about it?". Cognition. 95 (2): 201â236. CiteSeerXÂ 10.1.1.116.7784. doi:10.1016/j.cognition.2004.08.004. PMIDÂ 15694646. S2CIDÂ 1599505.

^ Nordquist, Richard. "What Is Recursion in English Grammar?". ThoughtCo. Retrieved 2019-10-24.

^ Nevins, Andrew; Pesetsky, David; Rodrigues, Cilene (2009). "Evidence and argumentation: A reply to Everett (2009)" (PDF). Language. 85 (3): 671â681. doi:10.1353/lan.0.0140. S2CIDÂ 16915455. Archived from the original (PDF) on 2012-01-06.

^ Drucker, Thomas (4 January 2008). Perspectives on the History of Mathematical Logic. Springer Science & Business Media. p.Â 110. ISBNÂ 978-0-8176-4768-1.

^ Barbara Partee and Mats Rooth. 1983. In Rainer BÃ¤uerle et al., Meaning, Use, and Interpretation of Language. Reprinted in Paul Portner and Barbara Partee, eds. 2002. Formal Semantics: The Essential Readings. Blackwell.

^ Nederhof, Mark-Jan; Satta, Giorgio (2002), "Parsing Non-recursive Context-free Grammars", Proceedings of the 40th Annual Meeting on Association for Computational Linguistics (ACL '02), Stroudsburg, PA, USA: Association for Computational Linguistics, pp.Â 112â119, doi:10.3115/1073083.1073104.

^ Jump up to: a b Hunter, David (2011). Essentials of Discrete Mathematics. Jones and Bartlett. p.Â 494. ISBNÂ 9781449604424.

^ "recursion - Google Search". www.google.com. Retrieved 2019-10-24.

^ "Picture of the Day: Fractal Cauliflower". 28 December 2012. Retrieved 19 April 2020.

^ Tang, Daisy. "Recursion". Retrieved 24 September 2015. More examples of recursion: Russian Matryoshka dolls. Each doll is made of solid wood or is hollow and contains another Matryoshka doll inside it.

^ "Giotto di Bondone and assistants: Stefaneschi triptych". The Vatican. Retrieved 16 September 2015.

^ Cooper, Jonathan (5 September 2007). "Art and Mathematics". Retrieved 5 July 2020.


Bibliography
.mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li{margin-left:0;padding-left:3.2em;text-indent:-3.2em}.mw-parser-output .refbegin-hanging-indents ul,.mw-parser-output .refbegin-hanging-indents ul li{list-style:none}@media(max-width:720px){.mw-parser-output .refbegin-hanging-indents>ul>li{padding-left:1.6em;text-indent:-1.6em}}.mw-parser-output .refbegin-columns{margin-top:0.3em}.mw-parser-output .refbegin-columns ul{margin-top:0}.mw-parser-output .refbegin-columns li{page-break-inside:avoid;break-inside:avoid-column}
Dijkstra, Edsger W. (1960). "Recursive Programming". Numerische Mathematik. 2 (1): 312â318. doi:10.1007/BF01386232. S2CIDÂ 127891023.
Johnsonbaugh, Richard (2004). Discrete Mathematics. Prentice Hall. ISBNÂ 978-0-13-117686-7.
Hofstadter, Douglas (1999). GÃ¶del, Escher, Bach: an Eternal Golden Braid. Basic Books. ISBNÂ 978-0-465-02656-2.
Shoenfield, Joseph R. (2000). Recursion Theory. A K Peters Ltd. ISBNÂ 978-1-56881-149-9.
Causey, Robert L. (2001). Logic, Sets, and Recursion. Jones & Bartlett. ISBNÂ 978-0-7637-1695-0.
Cori, Rene; Lascar, Daniel; Pelletier, Donald H. (2001). Recursion Theory, GÃ¶del's Theorems, Set Theory, Model Theory. Oxford University Press. ISBNÂ 978-0-19-850050-6.
Barwise, Jon; Moss, Lawrence S. (1996). Vicious Circles. Stanford Univ Center for the Study of Language and Information. ISBNÂ 978-0-19-850050-6.  - offers a treatment of corecursion.
Rosen, Kenneth H. (2002). Discrete Mathematics and Its Applications. McGraw-Hill College. ISBNÂ 978-0-07-293033-7.
Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; Stein, Clifford (2001). Introduction to Algorithms. Mit Pr. ISBNÂ 978-0-262-03293-3.
Kernighan, B.; Ritchie, D. (1988). The C programming Language. Prentice Hall. ISBNÂ 978-0-13-110362-7.
Stokey, Nancy; Robert Lucas; Edward Prescott (1989). Recursive Methods in Economic Dynamics. Harvard University Press. ISBNÂ 978-0-674-75096-8.
Hungerford (1980). Algebra. Springer. ISBNÂ 978-0-387-90518-1., first chapter on set theory.

External links



Wikimedia Commons has media related to Recursive humor.




Look up recursionÂ or recursivity in Wiktionary, the free dictionary.

Recursion - tutorial by Alan Gauld
Zip Files All The Way Down
Nevins, Andrew and David Pesetsky and Cilene Rodrigues. Evidence and Argumentation: A Reply to Everett (2009). Language 85.3: 671--681 (2009)
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}show.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteFractalsCharacteristics
Fractal dimensions
Assouad
Box-counting
Correlation
Hausdorff
Packing
Topological
Recursion
Self-similarity
Iterated function system
Barnsley fern
Cantor set
Koch snowflake
Menger sponge
Sierpinski carpet
Sierpinski triangle
Apollonian gasket
Fibonacci word
Space-filling curve
Blancmange curve
De Rham curve
Minkowski
Dragon curve
Hilbert curve
Koch curve
LÃ©vy C curve
Moore curve
Peano curve
SierpiÅski curve
T-square
n-flake
Vicsek fractal
Hexaflake
Gosper curve
Pythagoras tree
Strange attractor
Multifractal system
L-system
Fractal canopy
Space-filling curve
H tree
Escape-time fractals
Burning Ship fractal
Julia set
Filled
Newton fractal
Douady rabbit
Lyapunov fractal
Mandelbrot set
Misiurewicz point
Multibrot set
Newton fractal
Tricorn
Mandelbox
Mandelbulb
Rendering techniques
Buddhabrot
Orbit trap
Pickover stalk
Random fractals
Brownian motion
Brownian tree
Brownian motor
Fractal landscape
LÃ©vy flight
Percolation theory
Self-avoiding walk
People
Michael Barnsley
Georg Cantor
Bill Gosper
Felix Hausdorff
Desmond Paul Henry
Gaston Julia
Helge von Koch
Paul LÃ©vy
Aleksandr Lyapunov
Benoit Mandelbrot
Hamid Naderi Yeganeh
Lewis Fry Richardson
WacÅaw SierpiÅski
Other
"How Long Is the Coast of Britain?"
Coastline paradox
List of fractals by Hausdorff dimension
The Beauty of Fractals (1986 book)
Fractal art
Chaos: Making a New Science (1987 book)
The Fractal Geometry of Nature  (1982 book)
Kaleidoscope
Chaos theory

showvteMathematical logicGeneral
Axiom
First-order logic
Formal proof
Logical consequence
Formal semantics
Foundations of mathematics
Model
Set
Theorem
Theory
Type theory
TheoremsÂ (list)
GÃ¶del's completenessÂ andÂ incompleteness theorems
Tarski's undefinability
BanachâTarski paradox
Cantor'sÂ theorem,Â paradoxÂ andÂ diagonal argument
LindstrÃ¶m's
LÃ¶wenheimâSkolem
Compactness
LogicsTraditional
Classical logic
Proposition
Inference
Logical equivalence
Argument
Validity
Syllogism
Square of opposition
Venn diagram
Propositional
Boolean algebra
Boolean functions
Logical connectives
Propositional calculus
Propositional formula
Truth tables
Many-valued logic
Predicate
First-order
Quantifiers
Predicate
Second-order
Monadic predicate calculus
Set theory
Set
Element
Ordered pair
Ordinal number
Russell's paradox
Power set
Subset
Relation
Function/Map
Domain
Codomain
Image
Extensionality
Forcing
Cardinality
Empty set
Inhabited set
Enumeration
Countable set
Uncountable set
Finite set
Infinite set
Class
SchrÃ¶derâBernstein theorem
Set theories
ZermeloâFraenkel
Axiom of choice
Continuum hypothesis
General
KripkeâPlatek
MorseâKelley
Naive
TarskiâGrothendieck
Von NeumannâBernaysâGÃ¶del
SyntaxÂ &Â Language
Alphabet
Arity
Expression
Ground
Extension
Relation
Formal
Grammar
Language
Proof
System
Theory
Formation rule
Formula
Atomic
Open
Free/bound variable
Logical connective
Â¬
â¨
â§
â
â
=
Predicate
Functional
Variable
Propositional variable
Quantifier
â
â
Sentence
Atomic
Signature
String
Substitution
Symbol
Function
Logical/Constant
Non-logical
Variable
Term
Proof theory
Formal proof
Natural deduction
Logical consequence
Rule of inference
Sequent calculus
Theorem
Systems
Formal
Axiomatic
Deductive
Hilbert
Complete theory
IndependenceÂ (fromÂ ZFC)
Model theory
Interpretation
Model
Equivalence
Finite
Saturated
Substructure
Non-standard model
of arithmetic
Diagram
Elementary
Categorical theory
Model complete theory
Strength
Semantics of logic
Theories of truth
Semantic
Tarski's
Kripke's
T-schema
Transfer principle
Truth predicate
Truth value
Type
Ultraproduct
Validity
Computability theory
ChurchâTuring thesis
Computably enumerable
Computable function
Computable set
Decision problem
Halting problem
Primitive recursive function
Recursion
Recursive set

Authority control 
Integrated Authority File (Germany)





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Recursion&oldid=1055318844"
		Categories: RecursionTheory of computationSelf-referenceFeedbackHidden categories: Articles with short descriptionShort description matches WikidataWikipedia pages semi-protected against vandalismArticles needing additional references from June 2012All articles needing additional referencesAll articles with unsourced statementsArticles with unsourced statements from October 2019All articles with failed verificationArticles with failed verification from July 2020Commons category link from WikidataArticles with GND identifiersArticles with example C code
	
