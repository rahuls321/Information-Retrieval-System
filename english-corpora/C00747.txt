
Title:
Iterative deepening depth-first search
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources:Â "Iterative deepening depth-first search"Â âÂ newsÂ Â· newspapersÂ Â· booksÂ Â· scholarÂ Â· JSTOR  (January 2017) (Learn how and when to remove this template message)
.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}Iterative deepening depth-first searchClassSearch algorithmData structureTree, GraphWorst-case performance
  
    
      
        O
        (
        
          b
          
            d
          
        
        )
      
    
    {\displaystyle O(b^{d})}
  
, where 
  
    
      
        b
      
    
    {\displaystyle b}
  
 is the branching factor and 
  
    
      
        d
      
    
    {\displaystyle d}
  
 is the depth of the shallowest solutionWorst-case space complexity
  
    
      
        O
        (
        d
        )
      
    
    {\displaystyle O(d)}
  
[1]:â5â
.mw-parser-output .sidebar{width:22em;float:right;clear:right;margin:0.5em 0 1em 1em;background:#f8f9fa;border:1px solid #aaa;padding:0.2em;text-align:center;line-height:1.4em;font-size:88%;border-collapse:collapse;display:table}body.skin-minerva .mw-parser-output .sidebar{display:table!important;float:right!important;margin:0.5em 0 1em 1em!important}.mw-parser-output .sidebar-subgroup{width:100%;margin:0;border-spacing:0}.mw-parser-output .sidebar-left{float:left;clear:left;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-none{float:none;clear:both;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-outer-title{padding:0 0.4em 0.2em;font-size:125%;line-height:1.2em;font-weight:bold}.mw-parser-output .sidebar-top-image{padding:0.4em}.mw-parser-output .sidebar-top-caption,.mw-parser-output .sidebar-pretitle-with-top-image,.mw-parser-output .sidebar-caption{padding:0.2em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-pretitle{padding:0.4em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-title,.mw-parser-output .sidebar-title-with-pretitle{padding:0.2em 0.8em;font-size:145%;line-height:1.2em}.mw-parser-output .sidebar-title-with-pretitle{padding:0.1em 0.4em}.mw-parser-output .sidebar-image{padding:0.2em 0.4em 0.4em}.mw-parser-output .sidebar-heading{padding:0.1em 0.4em}.mw-parser-output .sidebar-content{padding:0 0.5em 0.4em}.mw-parser-output .sidebar-content-with-subgroup{padding:0.1em 0.4em 0.2em}.mw-parser-output .sidebar-above,.mw-parser-output .sidebar-below{padding:0.3em 0.8em;font-weight:bold}.mw-parser-output .sidebar-collapse .sidebar-above,.mw-parser-output .sidebar-collapse .sidebar-below{border-top:1px solid #aaa;border-bottom:1px solid #aaa}.mw-parser-output .sidebar-navbar{text-align:right;font-size:115%;padding:0 0.4em 0.4em}.mw-parser-output .sidebar-list-title{padding:0 0.4em;text-align:left;font-weight:bold;line-height:1.6em;font-size:105%}.mw-parser-output .sidebar-list-title-c{padding:0 0.4em;text-align:center;margin:0 3.3em}@media(max-width:720px){body.mediawiki .mw-parser-output .sidebar{width:100%!important;clear:both;float:none!important;margin-left:0!important;margin-right:0!important}}Graph and treesearch algorithms
Î±âÎ²
A*
B*
Backtracking
Beam
BellmanâFord
Best-first
Bidirectional
BorÅ¯vka
Branch & bound
BFS
British Museum
D*
DFS
Dijkstra
Edmonds
FloydâWarshall
Fringe search
Hill climbing
IDA*
Iterative deepening
Johnson
Jump point
Kruskal
Lexicographic BFS
LPA*
Prim
SMA*

Listings
Graph algorithms
Search algorithms
List of graph algorithms

Related topics
Dynamic programming
Graph traversal
Tree traversal
Search games
Graph coloring
.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vte
In computer science, iterative deepening search or more specifically iterative deepening depth-first search[2] (IDS or IDDFS) is a state space/graph search strategy in which a depth-limited version of depth-first search is run repeatedly with increasing depth limits until the goal is found.  IDDFS is optimal like breadth-first search, but uses much less memory; at each iteration, it visits the nodes in the search tree in the same order as depth-first search, but the cumulative order in which nodes are first visited is effectively breadth-first.[1]

Contents

1 Algorithm for directed graphs
2 Properties
3 Asymptotic analysis

3.1 Time complexity

3.1.1 Proof
3.1.2 Example


3.2 Space complexity

3.2.1 Proof




4 Example
5 Related algorithms

5.1 Bidirectional IDDFS

5.1.1 Time and space complexities
5.1.2 Pseudocode




6 References



Algorithm for directed graphs[edit]
The following pseudocode shows IDDFS implemented in terms of a recursive depth-limited DFS (called DLS) for directed graphs. This implementation of IDDFS does not account for already-visited nodes and therefore does not work for undirected graphs.

function IDDFS(root) is
    for depth from 0 to â do
        found, remaining â DLS(root, depth)
        if found â  null then
            return found
        else if not remaining then
            return null

function DLS(node, depth) is
    if depth = 0 then
        if node is a goal then
            return (node, true)
        else
            return (null, true)    (Not found, but may have children)

    else if depth > 0 then
        any_remaining â false
        foreach child of node do
            found, remaining â DLS(child, depthâ1)
            if found â  null then
                return (found, true)   
            if remaining then
                any_remaining â true    (At least one node found at depth, let IDDFS deepen)
        return (null, any_remaining)

If the goal node is found, then DLS unwinds the recursion returning with no further iterations. Otherwise, if at least one node exists at that level of depth, the remaining flag will let IDDFS continue.
2-tuples are useful as return value to signal IDDFS to continue deepening or stop, in case tree depth and goal membership are unknown a priori. Another solution could use sentinel values instead to represent not found or remaining level results.

Properties[edit]
IDDFS combines depth-first search's space-efficiency and breadth-first search's completeness (when the branching factor is finite). If a solution exists, it will find a solution path with the fewest arcs.[3]
Since iterative deepening visits states multiple times, it may seem wasteful, but it turns out to be not so costly, since in a tree most of the nodes are in the bottom level, so it does not matter much if the upper levels are visited multiple times.[4]
The main advantage of IDDFS in game tree searching is that the earlier searches tend to improve the commonly used heuristics, such as the killer heuristic and alphaâbeta pruning, so that a more accurate estimate of the score of various nodes at the final depth search can occur, and the search completes more quickly since it is done in a better order. For example, alphaâbeta pruning is most efficient if it searches the best moves first.[4]
A second advantage is the responsiveness of the algorithm. Because early iterations use small values for 
  
    
      
        d
      
    
    {\displaystyle d}
  
, they execute extremely quickly. This allows the algorithm to supply early indications of the result almost immediately, followed by refinements as 
  
    
      
        d
      
    
    {\displaystyle d}
  
 increases. When used in an interactive setting, such as in a chess-playing program, this facility allows the program to play at any time with the current best move found in the search it has completed so far. This can be phrased as each depth of the search corecursively producing a better approximation of the solution, though the work done at each step is recursive. This is not possible with a traditional depth-first search, which does not produce intermediate results.

Asymptotic analysis[edit]
Time complexity[edit]
The time complexity of IDDFS in a (well-balanced) tree works out to be the same as breadth-first search, i.e. 
  
    
      
        O
        (
        
          b
          
            d
          
        
        )
      
    
    {\displaystyle O(b^{d})}
  
,[1]:â5â where 
  
    
      
        b
      
    
    {\displaystyle b}
  
 is the branching factor and 
  
    
      
        d
      
    
    {\displaystyle d}
  
 is the depth of the goal.

Proof[edit]
In an iterative deepening search, the nodes at depth 
  
    
      
        d
      
    
    {\displaystyle d}
  
 are expanded once, those at depth 
  
    
      
        d
        â
        1
      
    
    {\displaystyle d-1}
  
 are expanded twice, and so on up to the root of the search tree, which is
expanded 
  
    
      
        d
        +
        1
      
    
    {\displaystyle d+1}
  
 times.[1]:â5â So the total number of expansions in an iterative deepening search is


  
    
      
        
          b
          
            d
          
        
        +
        2
        
          b
          
            d
            â
            1
          
        
        +
        3
        
          b
          
            d
            â
            2
          
        
        +
        â¯
        +
        (
        d
        â
        1
        )
        
          b
          
            2
          
        
        +
        d
        b
        +
        (
        d
        +
        1
        )
        =
        
          â
          
            i
            =
            0
          
          
            d
          
        
        (
        d
        +
        1
        â
        i
        )
        
          b
          
            i
          
        
      
    
    {\displaystyle b^{d}+2b^{d-1}+3b^{d-2}+\cdots +(d-1)b^{2}+db+(d+1)=\sum _{i=0}^{d}(d+1-i)b^{i}}
  

where 
  
    
      
        
          b
          
            d
          
        
      
    
    {\displaystyle b^{d}}
  
 is the number of expansions at depth 
  
    
      
        d
      
    
    {\displaystyle d}
  
, 
  
    
      
        2
        
          b
          
            d
            â
            1
          
        
      
    
    {\displaystyle 2b^{d-1}}
  
 is the number of expansions at depth 
  
    
      
        d
        â
        1
      
    
    {\displaystyle d-1}
  
, and so on. Factoring out 
  
    
      
        
          b
          
            d
          
        
      
    
    {\displaystyle b^{d}}
  
 gives


  
    
      
        
          b
          
            d
          
        
        (
        1
        +
        2
        
          b
          
            â
            1
          
        
        +
        3
        
          b
          
            â
            2
          
        
        +
        â¯
        +
        (
        d
        â
        1
        )
        
          b
          
            2
            â
            d
          
        
        +
        d
        
          b
          
            1
            â
            d
          
        
        +
        (
        d
        +
        1
        )
        
          b
          
            â
            d
          
        
        )
      
    
    {\displaystyle b^{d}(1+2b^{-1}+3b^{-2}+\cdots +(d-1)b^{2-d}+db^{1-d}+(d+1)b^{-d})}
  

Now let 
  
    
      
        x
        =
        
          
            1
            b
          
        
        =
        
          b
          
            â
            1
          
        
      
    
    {\displaystyle x={\frac {1}{b}}=b^{-1}}
  
. Then we have


  
    
      
        
          b
          
            d
          
        
        (
        1
        +
        2
        x
        +
        3
        
          x
          
            2
          
        
        +
        â¯
        +
        (
        d
        â
        1
        )
        
          x
          
            d
            â
            2
          
        
        +
        d
        
          x
          
            d
            â
            1
          
        
        +
        (
        d
        +
        1
        )
        
          x
          
            d
          
        
        )
      
    
    {\displaystyle b^{d}(1+2x+3x^{2}+\cdots +(d-1)x^{d-2}+dx^{d-1}+(d+1)x^{d})}
  

This is less than the infinite series


  
    
      
        
          b
          
            d
          
        
        (
        1
        +
        2
        x
        +
        3
        
          x
          
            2
          
        
        +
        4
        
          x
          
            3
          
        
        +
        â¯
        )
        =
        
          b
          
            d
          
        
        
          (
          
            
              â
              
                n
                =
                1
              
              
                â
              
            
            n
            
              x
              
                n
                â
                1
              
            
          
          )
        
      
    
    {\displaystyle b^{d}(1+2x+3x^{2}+4x^{3}+\cdots )=b^{d}\left(\sum _{n=1}^{\infty }nx^{n-1}\right)}
  

which converges to


  
    
      
        
          b
          
            d
          
        
        (
        1
        â
        x
        
          )
          
            â
            2
          
        
        =
        
          b
          
            d
          
        
        
          
            1
            
              (
              1
              â
              x
              
                )
                
                  2
                
              
            
          
        
      
    
    {\displaystyle b^{d}(1-x)^{-2}=b^{d}{\frac {1}{(1-x)^{2}}}}
  
, for 
  
    
      
        a
        b
        s
        (
        x
        )
        <
        1
      
    
    {\displaystyle abs(x)<1}
  

That is, we have

  
    
      
        
          b
          
            d
          
        
        (
        1
        +
        2
        x
        +
        3
        
          x
          
            2
          
        
        +
        â¯
        +
        (
        d
        â
        1
        )
        
          x
          
            d
            â
            2
          
        
        +
        d
        
          x
          
            d
            â
            1
          
        
        +
        (
        d
        +
        1
        )
        
          x
          
            d
          
        
        )
        â¤
        
          b
          
            d
          
        
        (
        1
        â
        x
        
          )
          
            â
            2
          
        
      
    
    {\displaystyle b^{d}(1+2x+3x^{2}+\cdots +(d-1)x^{d-2}+dx^{d-1}+(d+1)x^{d})\leq b^{d}(1-x)^{-2}}
  
, for 
  
    
      
        a
        b
        s
        (
        x
        )
        <
        1
      
    
    {\displaystyle abs(x)<1}
  

Since 
  
    
      
        (
        1
        â
        x
        
          )
          
            â
            2
          
        
      
    
    {\displaystyle (1-x)^{-2}}
  
 or 
  
    
      
        
          
            (
            
              1
              â
              
                
                  1
                  b
                
              
            
            )
          
          
            â
            2
          
        
      
    
    {\displaystyle \left(1-{\frac {1}{b}}\right)^{-2}}
  
 is a constant independent of 
  
    
      
        d
      
    
    {\displaystyle d}
  
 (the depth), if 
  
    
      
        b
        >
        1
      
    
    {\displaystyle b>1}
  
 (i.e., if the branching factor is greater than 1), the running time of the depth-first iterative deepening search is 
  
    
      
        O
        (
        
          b
          
            d
          
        
        )
      
    
    {\displaystyle O(b^{d})}
  
.

Example[edit]
For 
  
    
      
        b
        =
        10
      
    
    {\displaystyle b=10}
  
 and 
  
    
      
        d
        =
        5
      
    
    {\displaystyle d=5}
  
 the number is


  
    
      
        
          â
          
            i
            =
            0
          
          
            5
          
        
        (
        5
        +
        1
        â
        i
        )
        
          10
          
            i
          
        
        =
        6
        +
        50
        +
        400
        +
        3000
        +
        20000
        +
        100000
        =
        123456
      
    
    {\displaystyle \sum _{i=0}^{5}(5+1-i)10^{i}=6+50+400+3000+20000+100000=123456}
  

All together, an iterative deepening search from depth 
  
    
      
        1
      
    
    {\displaystyle 1}
  
 all the way down to depth 
  
    
      
        d
      
    
    {\displaystyle d}
  
 expands only about 
  
    
      
        11
        %
      
    
    {\displaystyle 11\%}
  
 more nodes than a single breadth-first or depth-limited search to depth 
  
    
      
        d
      
    
    {\displaystyle d}
  
, when 
  
    
      
        b
        =
        10
      
    
    {\displaystyle b=10}
  
.[5]
The higher the branching factor, the lower the overhead of repeatedly expanded states,[1]:â6â but even when the branching factor is 2, iterative deepening search only takes about twice as long as a complete breadth-first search. This means that the time complexity of iterative deepening is still 
  
    
      
        O
        (
        
          b
          
            d
          
        
        )
      
    
    {\displaystyle O(b^{d})}
  
.

Space complexity[edit]
The space complexity of IDDFS is 
  
    
      
        O
        (
        d
        )
      
    
    {\displaystyle O(d)}
  
,[1]:â5â where 
  
    
      
        d
      
    
    {\displaystyle d}
  
 is the depth of the goal.

Proof[edit]
Since IDDFS, at any point, is engaged in a depth-first search, it need only store a stack of nodes which represents the branch of the tree it is expanding. Since it finds a solution of optimal length, the maximum depth of this stack is 
  
    
      
        d
      
    
    {\displaystyle d}
  
, and hence the maximum amount of space is 
  
    
      
        O
        (
        d
        )
      
    
    {\displaystyle O(d)}
  
.
In general, iterative deepening is the preferred search method when there is a large search space and the depth of the solution is not known.[4]

Example[edit]
For the following graph:

a depth-first search starting at A, assuming that the left edges in the shown graph are chosen before right edges, and assuming the search remembers previously-visited nodes and will not repeat them (since this is a small graph), will visit the nodes in the following order: A, B, D, F, E, C, G.  The edges traversed in this search form a TrÃ©maux tree, a structure with important applications in graph theory.
Performing the same search without remembering previously visited nodes results in visiting nodes in the order A, B, D, F, E, A, B, D, F, E, etc. forever, caught in the A, B, D, F, E cycle and never reaching C or G.
Iterative deepening prevents this loop and will reach the following nodes on the following depths, assuming it proceeds left-to-right as above:

0: A
1: A, B, C, E
(Iterative deepening has now seen C, when a conventional depth-first search did not.)

2: A, B, D, F, C, G, E, F
(It still sees C, but that it came later. Also it sees E via a different path, and loops back to F twice.)

3: A, B, D, F, E, C, G, E, F, B
For this graph, as more depth is added, the two cycles "ABFE" and "AEFB" will simply get longer before the algorithm gives up and tries another branch.

Related algorithms[edit]
Similar to iterative deepening is a search strategy called iterative lengthening search that works with increasing path-cost limits instead of depth-limits. It expands nodes in the order of increasing path cost; therefore the first goal it encounters is the one with the cheapest path cost. But iterative lengthening incurs substantial overhead that makes it less useful than iterative deepening.[4]
Iterative deepening A* is a best-first search that performs iterative deepening based on "f"-values similar to the ones computed in the A* algorithm.

Bidirectional IDDFS[edit]
IDDFS has a bidirectional counterpart,[1]:â6â which alternates two searches: one starting from the source node and moving along the directed arcs, and another one starting from the target node and proceeding along the directed arcs in opposite direction (from the arc's head node to the arc's tail node). The search process first checks that the source node and the target node are same, and if so, returns the trivial path consisting of a single source/target node. Otherwise, the forward search process expands the child nodes of the source node (set 
  
    
      
        A
      
    
    {\displaystyle A}
  
), the backward search process expands the parent nodes of the target node (set 
  
    
      
        B
      
    
    {\displaystyle B}
  
), and it is checked whether 
  
    
      
        A
      
    
    {\displaystyle A}
  
 and 
  
    
      
        B
      
    
    {\displaystyle B}
  
 intersect. If so, a shortest path is found. Otherwise, the search depth is incremented and the same computation takes place.
One limitation of the algorithm is that the shortest path consisting of an odd number of arcs will not be detected. Suppose we have a shortest path 
  
    
      
        â¨
        s
        ,
        u
        ,
        v
        ,
        t
        â©
        .
      
    
    {\displaystyle \langle s,u,v,t\rangle .}
  
 When the depth will reach two hops along the arcs, the forward search will proceed to 
  
    
      
        v
      
    
    {\displaystyle v}
  
 from 
  
    
      
        u
      
    
    {\displaystyle u}
  
, and the backward search will proceed from 
  
    
      
        v
      
    
    {\displaystyle v}
  
 to 
  
    
      
        u
      
    
    {\displaystyle u}
  
. Pictorially, the search frontiers will go through each other, and instead a suboptimal path consisting of an even number of arcs will be returned. This is illustrated in the below diagrams:

  Bidirectional IDDFS
What comes to space complexity, the algorithm colors the deepest nodes in the forward search process in order to detect existence of the middle node where the two search processes meet.
Additional difficulty of applying bidirectional IDDFS is that if the source and the target nodes are in different strongly connected components, say, 
  
    
      
        s
        â
        S
        ,
        t
        â
        T
      
    
    {\displaystyle s\in S,t\in T}
  
, if there is no arc leaving 
  
    
      
        S
      
    
    {\displaystyle S}
  
 and entering 
  
    
      
        T
      
    
    {\displaystyle T}
  
, the search will never terminate.

Time and space complexities[edit]
The running time of bidirectional IDDFS is given by



  
    
      
        2
        
          â
          
            k
            =
            0
          
          
            n
            
              /
            
            2
          
        
        
          b
          
            k
          
        
      
    
    {\displaystyle 2\sum _{k=0}^{n/2}b^{k}}
  


and the space complexity is given by



  
    
      
        
          b
          
            n
            
              /
            
            2
          
        
        ,
      
    
    {\displaystyle b^{n/2},}
  


where 
  
    
      
        n
      
    
    {\displaystyle n}
  
 is the number of nodes in the shortest 
  
    
      
        s
        ,
        t
      
    
    {\displaystyle s,t}
  
-path. Since the running time complexity of iterative deepening depth-first search is 
  
    
      
        
          â
          
            k
            =
            0
          
          
            n
          
        
        
          b
          
            k
          
        
      
    
    {\displaystyle \sum _{k=0}^{n}b^{k}}
  
, the speedup is roughly



  
    
      
        
          
            
              
                â
                
                  k
                  =
                  0
                
                
                  n
                
              
              
                b
                
                  k
                
              
            
            
              2
              
                â
                
                  k
                  =
                  0
                
                
                  n
                  
                    /
                  
                  2
                
              
              
                b
                
                  k
                
              
            
          
        
        =
        
          
            
              
                1
                â
                
                  b
                  
                    n
                    +
                    1
                  
                
              
              
                1
                â
                b
              
            
            
              2
              
                
                  
                    1
                    â
                    
                      b
                      
                        n
                        
                          /
                        
                        2
                        +
                        1
                      
                    
                  
                  
                    1
                    â
                    b
                  
                
              
            
          
        
        =
        
          
            
              1
              â
              
                b
                
                  n
                  +
                  1
                
              
            
            
              2
              (
              1
              â
              
                b
                
                  n
                  
                    /
                  
                  2
                  +
                  1
                
              
              )
            
          
        
        =
        
          
            
              
                b
                
                  n
                  +
                  1
                
              
              â
              1
            
            
              2
              (
              
                b
                
                  n
                  
                    /
                  
                  2
                  +
                  1
                
              
              â
              1
              )
            
          
        
        â
        
          
            
              b
              
                n
                +
                1
              
            
            
              2
              
                b
                
                  n
                  
                    /
                  
                  2
                  +
                  1
                
              
            
          
        
        =
        Î
        (
        
          b
          
            n
            
              /
            
            2
          
        
        )
        .
      
    
    {\displaystyle {\frac {\sum _{k=0}^{n}b^{k}}{2\sum _{k=0}^{n/2}b^{k}}}={\frac {\frac {1-b^{n+1}}{1-b}}{2{\frac {1-b^{n/2+1}}{1-b}}}}={\frac {1-b^{n+1}}{2(1-b^{n/2+1})}}={\frac {b^{n+1}-1}{2(b^{n/2+1}-1)}}\approx {\frac {b^{n+1}}{2b^{n/2+1}}}=\Theta (b^{n/2}).}
  


Pseudocode[edit]
function Build-Path(s, Î¼, B) is
    Ï â Find-Shortest-Path(s, Î¼) (Recursively compute the path to the relay node)
    remove the last node from Ï
    return Ï 
  
    
      
        â
      
    
    {\displaystyle \circ }
  
 B (Append the backward search stack)

function Depth-Limited-Search-Forward(u, Î, F) is
    if Î = 0 then
        F â F 
  
    
      
        âª
      
    
    {\displaystyle \cup }
  
 {u} (Mark the node)
        return
    foreach child of u do
        Depth-Limited-Search-Forward(child, Î â 1, F)

function Depth-Limited-Search-Backward(u, Î, B, F) is
    prepend u to B
    if Î = 0 then
        if u in F  then
            return u (Reached the marked node, use it as a relay node)
        remove the head node of B
        return null
    foreach parent of u do
        Î¼ â Depth-Limited-Search-Backward(parent, Î â 1, B, F)
        if Î¼ 
  
    
      
        â 
      
    
    {\displaystyle \neq }
  
 null then
            return Î¼
    remove the head node of B
    return null

function Find-Shortest-Path(s, t) is
   if s = t then
       return <s>
   F, B, Î â â, â, 0
   forever do
       Depth-Limited-Search-Forward(s, Î, F)
       foreach Î´ = Î, Î + 1 do
           Î¼ â Depth-Limited-Search-Backward(t, Î´, B, F)
           if Î¼ 
  
    
      
        â 
      
    
    {\displaystyle \neq }
  
 null then
               return Build-Path(s, Î¼, B) (Found a relay node)
       F, Î â â, Î + 1

References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ Jump up to: a b c d e f g .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}KORF, Richard E. (1985). "Depth-first iterative deepening" (PDF). {{cite journal}}: Cite journal requires |journal= (help)

^ Korf, Richard (1985). "Depth-first Iterative-Deepening: An Optimal Admissible Tree Search". Artificial Intelligence. 27: 97â109. doi:10.1016/0004-3702(85)90084-0.

^ David Poole; Alan Mackworth. "3.5.3 Iterative Deepeningâ£ Chapter 3 Searching for Solutions â£ Artificial Intelligence: Foundations of Computational Agents, 2nd Edition". artint.info. Retrieved 29 November 2018.

^ Jump up to: a b c d Russell, Stuart J.; Norvig, Peter (2003), Artificial Intelligence: A Modern Approach (2ndÂ ed.), Upper Saddle River, New Jersey: Prentice Hall, ISBNÂ 0-13-790395-2

^ Russell; Norvig (1994). Artificial Intelligence: A Modern Approach.






<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Iterative_deepening_depth-first_search&oldid=1001650193"
		Categories: Graph algorithmsSearch algorithmsHidden categories: CS1 errors: missing periodicalArticles needing additional references from January 2017All articles needing additional references
	
