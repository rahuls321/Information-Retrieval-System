
Title:
Longest path problem
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		In graph theory and theoretical computer science, the longest path problem is the problem of finding a simple path of maximum length in a given graph. A path is called simple if it does not have any repeated vertices; the length of a path may either be measured by its number of edges, or (in weighted graphs) by the sum of the weights of its edges. In contrast to the shortest path problem, which can be solved in polynomial time in graphs without negative-weight cycles, the longest path problem is NP-hard and the decision version of the problem, which asks whether a path exists of at least some given length, is NP-complete.  This means that the decision problem cannot be solved in polynomial time for arbitrary graphs unlessÂ PÂ =Â NP. Stronger hardness results are also known showing that it is difficult to approximate. However, it has a linear time solution for directed acyclic graphs, which has important applications in finding the critical path in scheduling problems.

Contents

1 NP-hardness
2 Acyclic graphs

2.1 Critical paths


3 Approximation
4 Parameterized complexity
5 Special classes of graphs
6 See also
7 References
8 External links



NP-hardness[edit]
The NP-hardness of the unweighted longest path problem can be shown using a reduction from the Hamiltonian path problem: a graph G has a Hamiltonian path if and only if its longest path has length nÂ âÂ 1, where n is the number of vertices in G. Because the Hamiltonian path problem is NP-complete, this reduction shows that the decision version of the longest path problem is also NP-complete. In this decision problem, the input is a graph G and a number k; the desired output is "yes" if G contains a path of k or more edges, and no otherwise.[1]
If the longest path problem could be solved in polynomial time, it could be used to solve this decision problem, by finding a longest path and then comparing its length to the numberÂ k. Therefore, the longest path problem is NP-hard. The question "does there exist a simple path in a given graph with at least k edges" is NP-complete.[2]
In weighted complete graphs with non-negative edge weights, the weighted longest path problem is the same as the Travelling salesman path problem, because the longest path always includes all vertices.[3]

Acyclic graphs[edit]
A longest path between two given vertices s and t in a weighted graph G is the same thing as a shortest path in a graph âG derived from G by changing every weight to its negation. Therefore, if shortest paths can be found in âG, then longest paths can also be found in G.[4]
For most graphs, this transformation is not useful because it creates cycles of negative length in âG. But if G is a directed acyclic graph, then no negative cycles can be created, and a longest path in G can be found in linear time by applying a linear time algorithm for shortest paths in âG, which is also a directed acyclic graph.[4] For a DAG, the longest path from a source vertex to all other vertices can be obtained by running the shortest-path algorithm on âG.
Similarly, for each vertex v in a given DAG, the length of the longest path ending at v may be obtained by the following steps:

Find a topological ordering of the given DAG.
For each vertex v of the DAG, in the topological ordering, compute the length of the longest path ending at v by looking at its incoming neighbors and adding one to the maximum length recorded for those neighbors. If v has no incoming neighbors, set the length of the longest path ending at v to zero. In either case, record this number so that later steps of the algorithm can access it.
Once this has been done, the longest path in the whole DAG may be obtained by starting at the vertex v with the largest recorded value, then repeatedly stepping backwards to its incoming neighbor with the largest recorded value, and reversing the sequence of vertices found in this way.
This is equivalent to running the shortest-path algorithm on âG.

Critical paths[edit]
The critical path method for scheduling a set of activities involves the construction of a directed acyclic graph in which the vertices represent project milestones and the edges represent activities that must be performed after one milestone and before another; each edge is weighted by an estimate of the amount of time the corresponding activity will take to complete. In such a graph, the longest path from the first milestone to the last one is the critical path, which describes the total time for completing the project.[4]
Longest paths of directed acyclic graphs may also be applied in layered graph drawing: assigning each vertex v of a directed acyclic graph G to the layer whose number is the length of the longest path ending at v results in a layer assignment for G with the minimum possible number of layers.[5]

Approximation[edit]
BjÃ¶rklund, Husfeldt & Khanna (2004) write that the longest path problem in unweighted undirected graphs "is notorious for the difficulty of understanding its approximation hardness".[6]
The best polynomial time approximation algorithm known for this case achieves only a very weak approximation ratio, 
  
    
      
        n
        
          /
        
        exp
        â¡
        (
        Î©
        (
        
          
            log
            â¡
            n
          
        
        )
        )
      
    
    {\displaystyle n/\exp(\Omega ({\sqrt {\log n}}))}
  
.[7] For all 
  
    
      
        Ïµ
        >
        0
      
    
    {\displaystyle \epsilon >0}
  
, it is not possible to approximate the longest path to within a factor of 
  
    
      
        
          2
          
            (
            log
            â¡
            n
            
              )
              
                1
                â
                Ïµ
              
            
          
        
      
    
    {\displaystyle 2^{(\log n)^{1-\epsilon }}}
  
 unless NP is contained within quasi-polynomial deterministic time; however, there is a big gap between this inapproximability result and the known approximation algorithms for this problem.[8]
In the case of unweighted but directed graphs, strong inapproximability results are known. For every 
  
    
      
        Ïµ
        >
        0
      
    
    {\displaystyle \epsilon >0}
  
 the problem cannot be approximated to within a factor of 
  
    
      
        
          n
          
            1
            â
            Ïµ
          
        
      
    
    {\displaystyle n^{1-\epsilon }}
  
 unless P = NP, and with stronger complexity-theoretic assumptions it cannot be approximated to within a factor of 
  
    
      
        n
        
          /
        
        
          log
          
            2
            +
            Ïµ
          
        
        â¡
        n
      
    
    {\displaystyle n/\log ^{2+\epsilon }n}
  
.[6] The color-coding technique can be used to find paths of logarithmic length, if they exist, but this gives an approximation ratio of only 
  
    
      
        O
        (
        n
        
          /
        
        log
        â¡
        n
        )
      
    
    {\displaystyle O(n/\log n)}
  
.[9]

Parameterized complexity[edit]
The longest path problem is fixed-parameter tractable when parameterized by the length of the path. For instance, it can be solved in time linear in the size of the input graph (but exponential in the length of the path), by an algorithm that performs the following steps:

Perform a depth-first search of the graph. Let 
  
    
      
        d
      
    
    {\displaystyle d}
  
 be the depth of the resulting depth-first search tree.
Use the sequence of root-to-leaf paths of the depth-first search tree, in the order in which they were traversed by the search, to construct a path decomposition of the graph, with pathwidth 
  
    
      
        d
      
    
    {\displaystyle d}
  
.
Apply dynamic programming to this path decomposition to find a longest path in time 
  
    
      
        O
        (
        d
        !
        
          2
          
            d
          
        
        n
        )
      
    
    {\displaystyle O(d!2^{d}n)}
  
, where 
  
    
      
        n
      
    
    {\displaystyle n}
  
 is the number of vertices in the graph.
Since the output path has length at least as large as 
  
    
      
        d
      
    
    {\displaystyle d}
  
, the running time is also bounded by 
  
    
      
        O
        (
        â
        !
        
          2
          
            â
          
        
        n
        )
      
    
    {\displaystyle O(\ell !2^{\ell }n)}
  
, where 
  
    
      
        â
      
    
    {\displaystyle \ell }
  
 is the length of the longest path.[10] Using color-coding, the dependence on path length can be reduced to singly exponential.[9][11][12][13] A similar dynamic programming technique shows that the longest path problem is also fixed-parameter tractable when parameterized by the treewidth of the graph.
For graphs of bounded clique-width, the longest path can also be solved by a polynomial time dynamic programming algorithm. However, the exponent of the polynomial depends on the clique-width of the graph, so this algorithms is not fixed-parameter tractable. The longest path problem, parameterized by clique-width, is hard for the parameterized complexity class 
  
    
      
        W
        [
        1
        ]
      
    
    {\displaystyle W[1]}
  
, showing that a fixed-parameter tractable algorithm is unlikely to exist.[14]

Special classes of graphs[edit]
A linear-time algorithm for finding a longest path in a tree was proposed by Dijkstra in 1960's, while a formal proof of this algorithm was published in 2002.[15]
Furthermore, a longest path can be computed in polynomial time on weighted trees, on block graphs, on cacti,[16]
on bipartite permutation graphs,[17]
and on Ptolemaic graphs.[18]
For the class of interval graphs, an 
  
    
      
        O
        (
        
          n
          
            4
          
        
        )
      
    
    {\displaystyle O(n^{4})}
  
-time algorithm is known, which uses a dynamic programming approach.[19]
This dynamic programming approach has been exploited to obtain polynomial-time algorithms on the greater classes of circular-arc graphs[20]
and of co-comparability graphs (i.e. of the complements of comparability graphs, which also contain permutation graphs),[21]
both having the same running time 
  
    
      
        O
        (
        
          n
          
            4
          
        
        )
      
    
    {\displaystyle O(n^{4})}
  
. The latter algorithm is based on special properties of the lexicographic depth first search (LDFS) vertex ordering[22]
of co-comparability graphs. For co-comparability graphs also an alternative polynomial-time algorithm with higher running time 
  
    
      
        O
        (
        
          n
          
            7
          
        
        )
      
    
    {\displaystyle O(n^{7})}
  
 is known, which is based on the Hasse diagram of the partially ordered set defined by the complement of the input co-comparability graph.[23]
Furthermore, the longest path problem is solvable in polynomial time on any class of graphs with bounded treewidth or bounded clique-width, such as the distance-hereditary graphs. Finally, it is clearly NP-hard on all graph classes on which the Hamiltonian path problem is NP-hard, such as on split graphs, circle graphs, and planar graphs.
A simple model of a directed acyclic graph is the Price model, developed by Derek J. de Solla Price to represent citation networks. This is simple enough to allow for analytic results to be found for some properties. For instance,
the length of the longest path, from the n-th node added to the network to the first node in the network, scales as[24] 
  
    
      
        ln
        â¡
        (
        n
        )
      
    
    {\displaystyle \ln(n)}
  
.

See also[edit]
GallaiâHasseâRoyâVitaver theorem, a duality relation between longest paths and graph coloring
Longest uncrossed knight's path
Snake-in-the-box, the longest induced path in a hypercube graph
Price's model, a simple citation network model where the longest path lengths can be found analytically
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Schrijver, Alexander (2003), Combinatorial Optimization: Polyhedra and Efficiency, Volume 1, Algorithms and Combinatorics, vol.Â 24, Springer, p.Â 114, ISBNÂ 9783540443896.

^ Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; Stein, Clifford (2001), Introduction To Algorithms (2ndÂ ed.), MIT Press, p.Â 978, ISBNÂ 9780262032933.

^ Lawler, Eugene L. (2001), Combinatorial Optimization: Networks and Matroids, Courier Dover Publications, p.Â 64, ISBNÂ 9780486414539.

^ Jump up to: a b c Sedgewick, Robert; Wayne, Kevin Daniel (2011), Algorithms (4thÂ ed.), Addison-Wesley Professional, pp.Â 661â666, ISBNÂ 9780321573513.

^ Di Battista, Giuseppe; Eades, Peter; Tamassia, Roberto; Tollis, Ioannis G. (1998), "Layered Drawings of Digraphs", Graph Drawing: Algorithms for the Visualization of Graphs, Prentice Hall, pp.Â 265â302, ISBNÂ 978-0-13-301615-4.

^ Jump up to: a b BjÃ¶rklund, Andreas; Husfeldt, Thore; Khanna, Sanjeev (2004), "Approximating longest directed paths and cycles", Proc. Int. Coll. Automata, Languages and Programming (ICALP 2004), Lecture Notes in Computer Science, vol.Â 3142, Berlin: Springer-Verlag, pp.Â 222â233, MRÂ 2160935.

^ Gabow, Harold N.; Nie, Shuxin (2008), "Finding long paths, cycles and circuits", International Symposium on Algorithms and Computation, Lecture Notes in Computer Science, vol.Â 5369, Berlin: Springer, pp.Â 752â763, doi:10.1007/978-3-540-92182-0_66, ISBNÂ 978-3-540-92181-3, MRÂ 2539968. For earlier work with even weaker approximation bounds, see Gabow, Harold N. (2007), "Finding paths and cycles of superpolylogarithmic length" (PDF), SIAM Journal on Computing, 36 (6): 1648â1671, doi:10.1137/S0097539704445366, MRÂ 2299418 and BjÃ¶rklund, Andreas; Husfeldt, Thore (2003), "Finding a path of superlogarithmic length", SIAM Journal on Computing, 32 (6): 1395â1402, doi:10.1137/S0097539702416761, MRÂ 2034242.

^ Karger, David; Motwani, Rajeev; Ramkumar, G. D. S. (1997), "On approximating the longest path in a graph", Algorithmica, 18 (1): 82â98, doi:10.1007/BF02523689, MRÂ 1432030, S2CIDÂ 3241830.

^ Jump up to: a b Alon, Noga; Yuster, Raphael; Zwick, Uri (1995), "Color-coding", Journal of the ACM, 42 (4): 844â856, doi:10.1145/210332.210337, MRÂ 1411787, S2CIDÂ 208936467.

^ Bodlaender, Hans L. (1993), "On linear time minor tests with depth-first search", Journal of Algorithms, 14 (1): 1â23, doi:10.1006/jagm.1993.1001, MRÂ 1199244. For an earlier FPT algorithm with slightly better dependence on the path length, but worse dependence on the size of the graph, see Monien, B. (1985), "How to find long paths efficiently", Analysis and design of algorithms for combinatorial problems (Udine, 1982), North-Holland Math. Stud., vol.Â 109, Amsterdam: North-Holland, pp.Â 239â254, doi:10.1016/S0304-0208(08)73110-4, ISBNÂ 9780444876997, MRÂ 0808004.

^ Chen, Jianer; Lu, Songjian; Sze, Sing-Hoi; Zhang, Fenghui (2007), "Improved algorithms for path, matching, and packing problems", Proc. 18th ACM-SIAM Symposium on Discrete algorithms (SODA '07) (PDF), pp.Â 298â307.

^ Koutis, Ioannis (2008), "Faster algebraic algorithms for path and packing problems", International Colloquium on Automata, Languages and Programming (PDF), Lecture Notes in Computer Science, vol.Â 5125, Berlin: Springer, pp.Â 575â586, CiteSeerXÂ 10.1.1.141.6899, doi:10.1007/978-3-540-70575-8_47, ISBNÂ 978-3-540-70574-1, MRÂ 2500302, archived from the original (PDF) on 2017-08-09, retrieved 2013-08-09.

^ Williams, Ryan (2009), "Finding paths of length k in O*(2k) time", Information Processing Letters, 109 (6): 315â318, arXiv:0807.3026, doi:10.1016/j.ipl.2008.11.004, MRÂ 2493730, S2CIDÂ 10295448.

^ Fomin, Fedor V.; Golovach, Petr A.; Lokshtanov, Daniel; Saurabh, Saket (2009), "Clique-width: on the price of generality", Proc. 20th ACM-SIAM Symposium on Discrete Algorithms (SODA '09) (PDF), pp.Â 825â834, archived from the original (PDF) on 2012-10-18, retrieved 2012-12-01.

^ Bulterman, R.W.; van der Sommen, F.W.; Zwaan, G.; Verhoeff, T.; van Gasteren, A.J.M. (2002), "On computing a longest path in a tree", Information Processing Letters, 81 (2): 93â96, doi:10.1016/S0020-0190(01)00198-3.

^ Uehara, Ryuhei; Uno, Yushi (2004), "Efficient algorithms for the longest path problem", Isaac 2004, Lecture Notes in Computer Science, 3341: 871â883, doi:10.1007/978-3-540-30551-4_74, ISBNÂ 978-3-540-24131-7.

^ Uehara, Ryuhei; Valiente, Gabriel (2007), "Linear structure of bipartite permutation graphs and the longest path problem", Information Processing Letters, 103 (2): 71â77, CiteSeerXÂ 10.1.1.101.96, doi:10.1016/j.ipl.2007.02.010.

^ Takahara, Yoshihiro; Teramoto, Sachio; Uehara, Ryuhei (2008), "Longest path problems on Ptolemaic graphs", IEICE Transactions, 91-D (2): 170â177, doi:10.1093/ietisy/e91-d.2.170.

^ Ioannidou, Kyriaki; Mertzios, George B.; Nikolopoulos, Stavros D. (2011), "The longest path problem has a polynomial solution on interval graphs", Algorithmica, 61 (2): 320â341, CiteSeerXÂ 10.1.1.224.4927, doi:10.1007/s00453-010-9411-3, S2CIDÂ 7577817.

^ Mertzios, George B.; Bezakova, Ivona (2014), "Computing and counting longest paths on circular-arc graphs in polynomial time", Discrete Applied Mathematics, 164 (2): 383â399, CiteSeerXÂ 10.1.1.224.779, doi:10.1016/j.dam.2012.08.024.

^ Mertzios, George B.; Corneil, Derek G. (2012), "A simple polynomial algorithm for the longest path problem on cocomparability graphs", SIAM Journal on Discrete Mathematics, 26 (3): 940â963, arXiv:1004.4560, doi:10.1137/100793529, S2CIDÂ 4645245.

^ Corneil, Derek G.; Krueger, Richard (2008), "A unified view of graph searching", SIAM Journal on Discrete Mathematics, 22 (4): 1259â1276, doi:10.1137/050623498.

^ Ioannidou, Kyriaki; Nikolopoulos, Stavros D. (2011), "The longest path problem is polynomial on cocomparability graphs" (PDF), Algorithmica, 65: 177â205, CiteSeerXÂ 10.1.1.415.9996, doi:10.1007/s00453-011-9583-5, S2CIDÂ 7271040.

^ Evans, T.S.; Calmon, L.; Vasiliauskaite, V. (2020), "The Longest Path in the Price Model", Scientific Reports, 10 (1): 10503, arXiv:1903.03667, Bibcode:2020NatSR..1010503E, doi:10.1038/s41598-020-67421-8, PMCÂ 7324613, PMIDÂ 32601403


External links[edit]
"Find the Longest Path", song by Dan Barrett




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Longest_path_problem&oldid=1032225867"
		Categories: Network theoryNP-complete problemsGraph algorithmsComputational problems in graph theoryHamiltonian paths and cyclesGraph distance
	
