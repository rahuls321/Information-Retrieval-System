
Title:
Delimiter
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Characters that specify the boundary between regions in a data stream
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}This article is about delimiters in computing. For delimiters in human use, see Word divider and digit grouping.
  A stylistic depiction of a fragment from a CSV-formatted text file. The commas (shown in red) are used as field delimiters.
A delimiter is a sequence of one or more characters for specifying the boundary between separate, independent regions in plain text, mathematical expressions or other data streams.[1][2] An example of a delimiter is the comma character, which acts as a field delimiter in a sequence of comma-separated values. Another example of a delimiter is the time gap used to separate letters and words in the transmission of Morse code.
In mathematics, delimiters are often used to specify the scope of an operation, and can occur both as isolated symbols (e.g., colon in "
  
    
      
        1
        :
        4
      
    
    {\displaystyle 1:4}
  
") and as a pair of opposing-looking symbols (e.g., angled brackets in 
  
    
      
        â¨
        a
        ,
        b
        â©
      
    
    {\displaystyle \langle a,b\rangle }
  
).
Delimiters represent one of various means of specifying boundaries in a data stream. Declarative notation, for example, is an alternate method that uses a length field at the start of a data stream to specify the number of characters that the data stream contains.[3]

Contents

1 Overview

1.1 Field and record delimiters
1.2 Bracket delimiters
1.3 Conventions


2 Delimiter collision

2.1 Solutions

2.1.1 ASCII delimited text
2.1.2 Escape character
2.1.3 Escape sequence
2.1.4 Dual quoting delimiters
2.1.5 Padding quoting delimiters
2.1.6 Configurable alternative quoting delimiters
2.1.7 Content boundary
2.1.8 Whitespace or indentation
2.1.9 Regular expression syntax
2.1.10 Here document
2.1.11 ASCII armor

2.1.11.1 Example






3 See also
4 References
5 External links



Overview[edit]
Delimiters may be characterized as field and record delimiters, or as bracket delimiters.

Field and record delimiters[edit]
Field delimiters separate data fields. Record delimiters separate groups of fields.[4]
For example, the CSV file format uses a comma as the delimiter between fields, and an end-of-line indicator as the delimiter between records:

fname,lname,age,salary
nancy,davolio,33,$30000
erin,borakova,28,$25250
tony,raphael,35,$28700

This specifies a simple flat file database table using the CSV file format.

Bracket delimiters[edit]
Bracket delimiters, also called block delimiters, region delimiters, or balanced delimiters, mark both the start and end of a region of text.[5][6]
Common examples of bracket delimiters include:[7]




Delimiters

Description


( )

Parentheses. The Lisp programming language syntax is cited as recognizable primarily by its use of parentheses.[8]


{ }

Braces (also called curly brackets.[9])


[ ]

Brackets (commonly used to denote a subscript)


< >

Angle brackets.[10]


" "

commonly used to denote string literals.[11]


' '

commonly used to denote character literals.[11]


<? ?>

used to indicate XML processing instructions.[12]


/* */

used to denote comments in some programming languages.[13]


<% %>

used in some web templates to specify language boundaries. These are also called template delimiters.[14]

Conventions[edit]
Historically, computing platforms have used certain delimiters by convention.[15][16] The following tables depict a few examples for comparison.
Programming languages
(See also, Comparison of programming languages (syntax)).




String Literal
End of Statement


Pascal

singlequote
semicolon


Python

doublequote, singlequote
end of line (EOL)


Field and Record delimiters (See also, ASCII, Control character).




End of Field
End of Record
End of File


Unix-like systems including macOS, AmigaOS

Tab
LF
none


Windows, MS-DOS, OS/2, CP/M

Tab
CRLF
none (except in CP/M), Control-Z[17]


Classic Mac OS, Apple DOS, ProDOS, GS/OS

Tab
CR
none


ASCII/Unicode

UNIT SEPARATORPosition 31 (U+001F)
RECORD SEPARATORPosition 30 (U+001E)
FILE SEPARATORPosition 28 (U+001C)

Delimiter collision[edit]
Delimiter collision is a problem that occurs when an author or programmer introduces delimiters into text without actually intending them to be interpreted as boundaries between separate regions.[4][18] In the case of XML, for example, this can occur whenever an author attempts to specify an angle bracket character. 
In most file types there is both a field delimiter and a record delimiter, both of which are subject to collision. In the case of comma-separated values files, for example, field collision can occur whenever an author attempts to include a comma as part of a field value (e.g., salary = "$30,000"), and record delimiter collision would occur whenever a field contained multiple lines. Both record and field delimiter collision occur frequently in text files.
In some contexts, a malicious user or attacker may seek to exploit this problem intentionally. Consequently, delimiter collision can be the source of security vulnerabilities and exploits. Malicious users can take advantage of delimiter collision in languages such as SQL and HTML to deploy such well-known attacks as SQL injection and cross-site scripting, respectively.

Solutions[edit]
Because delimiter collision is a very common problem, various methods for avoiding it have been invented. Some authors may attempt to avoid the problem by choosing a delimiter character (or sequence of characters) that is not likely to appear in the data stream itself. This ad hoc approach may be suitable, but it necessarily depends on a correct guess of what will appear in the data stream, and offers no security against malicious collisions. Other, more formal conventions are therefore applied as well.

ASCII delimited text[edit]
The ASCII and Unicode character sets were designed to solve this problem by the provision of non-printing characters that can be used as delimiters. These are the range from ASCII 28 to 31.




ASCII Dec

Symbol

Unicode Name

Common Name

Usage


28

â

INFORMATION SEPARATOR FOUR

file separator

End of file. Or between a concatenation of what might otherwise be separate files.


29

â

INFORMATION SEPARATOR THREE

group separator

Between sections of data. Not needed in simple data files.


30

â

INFORMATION SEPARATOR TWO

record separator

End of a record or row.


31

â

INFORMATION SEPARATOR ONE

unit separator

Between fields of a record, or members of a row.

The use of ASCII 31 Unit separator as a field separator and ASCII 30 Record separator solves the problem of both field and record delimiters that appear in a text data stream.[19]

Escape character[edit]
One method for avoiding delimiter collision is to use escape characters. From a language design standpoint, these are adequate, but they have drawbacks:

text can be rendered unreadable when littered with numerous escape characters, a problem referred to as leaning toothpick syndrome (due to use of \ to escape / in Perl regular expressions, leading to sequences such as "\/\/");
text becomes difficult to parse through regular expression
they require a mechanism to "escape the escapes" when not intended as escape characters; and
although easy to type, they can be cryptic to someone unfamiliar with the language.[20]
they do not protect against injection attacks[citation needed]
Escape sequence[edit]
Escape sequences are similar to escape characters, except they usually consist of some kind of mnemonic instead of just a single character. One use is in string literals that include a doublequote (") character. For example in Perl, the code:

print "Nancy said \x22Hello World!\x22 to the crowd.";  ### use \x22

produces the same output as:

print "Nancy said \"Hello World!\" to the crowd.";      ### use escape char

One drawback of escape sequences, when used by people, is the need to memorize the codes that represent individual characters (see also: character entity reference, numeric character reference).

Dual quoting delimiters[edit]
In contrast to escape sequences and escape characters, dual delimiters provide yet another way to avoid delimiter collision. Some languages, for example, allow the use of either a single quote (') or a double quote (") to specify a string literal. For example, in Perl:

print 'Nancy said "Hello World!" to the crowd.';

produces the desired output without requiring escapes. This approach, however, only works when the string does not contain both types of quotation marks.

Padding quoting delimiters[edit]
In contrast to escape sequences and escape characters, padding delimiters provide yet another way to avoid delimiter collision. Visual Basic, for example, uses double quotes as delimiters. This is similar to escaping the delimiter.

print "Nancy said ""Hello World!"" to the crowd."

produces the desired output without requiring escapes. Like regular escaping it can, however, become confusing when many quotes are used.
The code to print the above source code would look more confusing:

print "print ""Nancy said """"Hello World!"""" to the crowd."""

Configurable alternative quoting delimiters[edit]
In contrast to dual delimiters, multiple delimiters are even more flexible for avoiding delimiter collision.[7]:â63â
For example, in Perl:

print qq^Nancy doesn't want to say "Hello World!" anymore.^;
print qq@Nancy doesn't want to say "Hello World!" anymore.@;
print qq(Nancy doesn't want to say "Hello World!" anymore.);

all produce the desired output through use of quote operators, which allow any convenient character to act as a delimiter. Although this method is more flexible, few languages support it. Perl and Ruby are two that do.[7]:â62â[21]

Content boundary[edit]
A content boundary is a special type of delimiter that is specifically designed to resist delimiter collision. It works by allowing the author to specify a sequence of characters that is guaranteed to always indicate a boundary between parts in a multi-part message, with no other possible interpretation.[22]
The delimiter is frequently generated from a random sequence of characters that is statistically improbable to occur in the content. This may be followed by an identifying mark such as a UUID, a timestamp, or some other distinguishing mark. Alternatively, the content may be scanned to guarantee that a delimiter does not appear in the text. This may allow the delimiter to be shorter or simpler, and increase the human readability of the document. (See e.g., MIME, Here documents).

Whitespace or indentation[edit]
Some programming and computer languages allow the use of whitespace delimiters or indentation as a means of specifying boundaries between independent regions in text.[23]

Regular expression syntax[edit]
See also: Regular expression examples
In specifying a regular expression, alternate delimiters may also be used to simplify the syntax for match and substitution operations in Perl.[24]
For example, a simple match operation may be specified in Perl with the following syntax:

$string1 = 'Nancy said "Hello World!" to the crowd.';    # specify a target string
print $string1 =~ m/[aeiou]+/;                           # match one or more vowels

The syntax is flexible enough to specify match operations with alternate delimiters, making it easy to avoid delimiter collision:

$string1 = 'Nancy said "http://Hello/World.htm" is not a valid address.'; # target string
   
print $string1 =~ m@http://@;       # match using alternate regular expression delimiter
print $string1 =~ m{http://};       # same as previous, but different delimiter
print $string1 =~ m!http://!;       # same as previous, but different delimiter.

Here document[edit]
A Here document allows the inclusion of arbitrary content by describing a special end sequence. Many languages support this including PHP, bash scripts, ruby and perl. A here document starts by describing what the end sequence will be and continues until that sequence is seen at the start of a new line.[25]
Here is an example in perl:

print <<ENDOFHEREDOC;
It's very hard to encode a string with "certain characters".

Newlines, commas, and other characters can cause delimiter collisions.
ENDOFHEREDOC

This code would print:

It's very hard to encode a string with "certain characters".

Newlines, commas, and other characters can cause delimiter collisions.

By using a special end sequence all manner of characters are allowed in the string.

ASCII armor[edit]
Although principally used as a mechanism for text encoding of binary data,
ASCII armoring is a programming and systems administration technique that also helps to avoid delimiter collision in some circumstances.[26][27] This technique is contrasted from the other approaches described above because it is more complicated, and therefore not suitable for small applications and simple data storage formats. The technique employs a special encoding scheme, such as base64, to ensure that delimiter or other significant characters do not appear in transmitted data. The purpose is to prevent multilayered escaping, i.e. for doublequotes.
This technique is used, for example, in Microsoft's ASP.NET web development technology, and is closely associated with the "VIEWSTATE" component of that system.[28]

Example[edit]
The following simplified example demonstrates how this technique works in practice.
The first code fragment shows a simple HTML tag in which the VIEWSTATE value contains characters that are incompatible with the delimiters of the HTML tag itself:

<input type="hidden" name="__VIEWSTATE" value="BookTitle:Nancy doesn't say "Hello World!" anymore." />

This first code fragment is not well-formed, and would therefore not work properly in a "real world" deployed system.
To store arbitrary text in an HTML attribute, HTML entities can be used.  In this case "&quot;" stands in for the double-quote:

<input type="hidden" name="__VIEWSTATE" value="BookTitle:Nancy doesn't say &quot;Hello World!&quot; anymore." />

Alternatively, any encoding could be used that doesn't include characters that have special meaning in the context, such as base64:

<input type="hidden" name="__VIEWSTATE" value="Qm9va1RpdGxlOk5hbmN5IGRvZXNuJ3Qgc2F5ICJIZWxsbyBXb3JsZCEiIGFueW1vcmUu" />

Or percent-encoding:

<input type="hidden" name="__VIEWSTATE" value="BookTitle:Nancy%20doesn%27t%20say%20%22Hello%20World!%22%20anymore." />

This prevents delimiter collision and ensures that incompatible characters will not appear inside the HTML code, regardless of what characters appear in the original (decoded) text.[28]

See also[edit]
CDATA
Decimal separator
Delimiter-separated values
Escape sequence
String literal
Tab-separated values
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}"Definition: delimiter". Federal Standard 1037C - Telecommunications: Glossary of Telecommunication Terms. Archived from the original on 2013-03-05. Retrieved 2019-11-25.

^ "What is a Delimiter?". www.computerhope.com. Retrieved 2020-08-09.

^ Rohl, Jeffrey S. (1973). Programming in Fortran. Oxford Oxfordshire: Oxford University Press. ISBNÂ 978-0-7190-0555-8. describing the method in Hollerith notation under the Fortran programming language.

^ Jump up to: a b de Moor, Georges J. (1993). Progress in Standardization in Health Care Informatics. IOS Press. ISBNÂ 90-5199-114-2. p. 141

^ Friedl, Jeffrey E. F. (2002). Mastering Regular Expressions: Powerful Techniques for Perl and Other Tools. O'Reilly. ISBNÂ 0-596-00289-0. p. 319

^ Scott, Michael Lee (1999). Programming Language Pragmatics. Morgan Kaufmann. ISBNÂ 1-55860-442-1.

^ Jump up to: a b c Wall, Larry; Orwant, Jon (July 2000). Programming Perl (ThirdÂ ed.). O'Reilly. ISBNÂ 0-596-00027-8.

^ Kaufmann, Matt (2000). Computer-Aided Reasoning: An Approach. Springer. ISBNÂ 0-7923-7744-3.p. 3

^ Meyer, Mark (2005). Explorations in Computer Science. Oxford Oxfordshire: Oxford University Press. ISBNÂ 978-0-7637-3832-7. references C-style programming languages prominently featuring curly brackets and semicolons.

^ Dilligan, Robert (1998). Computing in the Web Age. Oxford Oxfordshire: Oxford University Press. ISBNÂ 978-0-306-45972-6.Describes syntax and delimiters used in HTML.

^ Jump up to: a b Schwartz, Randal (2005). Learning Perl. Oxford Oxfordshire: Oxford University Press. ISBNÂ 978-0-596-10105-3.Describes string literals.

^ Watt, Andrew (2003). Sams Teach Yourself Xml in 10 Minutes. Oxford Oxfordshire: Oxford University Press. ISBNÂ 978-0-672-32471-0. Describes XML processing instruction. p. 21.

^ Cabrera, Harold (2002). C# for Java Programmers. Oxford Oxfordshire: Oxford University Press. ISBNÂ 978-1-931836-54-8. Describes single-line and multi-line comments. p. 72.

^ "Smarty Template Documentation". Retrieved 2010-03-12. See e.g., Smarty template system documentation, "escaping template delimiters".

^ "The set of control characters for ISO 646" (PDF). International Organization for Standardization. December 1, 1975.

^ "ASCII graphic character set" (PDF). International Organization for Standardization. December 1, 1975.

^ Lewine, Donald (1991). Posix Programmer's Guide. Oxford Oxfordshire: Oxford University Press. ISBNÂ 978-0-937175-73-6. Describes use of control-z. p. 156,

^ Friedl, Jeffrey (2006). Mastering Regular Expressions. Oxford Oxfordshire: Oxford University Press. ISBNÂ 978-0-596-52812-6. describing solutions for embedded-delimiter problems p. 472.

^ Discussion on ASCII Delimited Text vs CSV and Tab Delimited

^ Kahrel, Peter (2006). Automating InDesign with Regular Expressions. O'Reilly. ISBNÂ 0-596-52937-6.p. 11

^ Yukihiro, Matsumoto (2001). Ruby in a Nutshell. O'Reilly. ISBNÂ 0-596-00214-9. In Ruby, these are indicated as general delimited strings. p. 11

^ Javvin Technologies, Incorporated (2005). Network Protocols Handbook. Javvin Technologies Inc. ISBNÂ 0-9740945-2-8. p. 26

^ 200, Cicling (2001). Computational Linguistics and Intelligent Text Processing. Oxford Oxfordshire: Oxford University Press. ISBNÂ 978-3-540-41687-6.{{cite book}}:  CS1 maint: numeric names: authors list (link) Describes whitespace delimiters. p. 258.

^ Friedl, Jeffrey (2006). Mastering Regular Expressions. Oxford Oxfordshire: Oxford University Press. ISBNÂ 978-0-596-52812-6. page 472.

^ Perl operators and precedence

^ Rhee, Man (2003). Internet Security: Cryptographic Principles, Algorithms and Protocols. John Wiley and Sons. ISBNÂ 0-470-85285-2.(an example usage of ASCII armoring in encryption applications)

^ Gross, Christian (2005). Open Source for Windows Administrators. Charles River Media. ISBNÂ 1-58450-347-5.(an example usage of ASCII armoring in encryption applications)

^ Jump up to: a b Kalani, Amit (2004). Developing and Implementing Web Applications with Visual C# . NET and Visual Studio . NET. Que. ISBNÂ 0-7897-2901-6.(describes the use of Base64 encoding and VIEWSTATE inside HTML source code)


External links[edit]
Data File Metaformats from The Art of Unix Programming by Eric Steven Raymond
What is delimiter by Margaret Rouse.




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Delimiter&oldid=1050942119"
		Categories: Markup languagesPattern matchingProgramming constructsString (computer science)Hidden categories: CS1 maint: numeric names: authors listArticles with short descriptionShort description is different from WikidataAll articles with unsourced statementsArticles with unsourced statements from March 2014
	
