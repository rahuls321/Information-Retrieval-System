
Title:
Kotlin (programming language)
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		General-purpose programming language


.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}KotlinParadigmMulti-paradigm: object-oriented, functional, imperative, block structured, declarative, generic, reflective, concurrentDesignedÂ byJetBrainsDeveloperJetBrainsFirstÂ appearedJulyÂ 22, 2011; 10 years agoÂ (2011-07-22)Stable release1.6.10[1]Â 
   / 14 December 2021; 49 days agoÂ (14 December 2021)Preview releasebuild-1.6.20-dev-107
   / AugustÂ 26, 2021; 5 months agoÂ (2021-08-26)
Typing disciplineInferred, static, strongPlatform
Android
JVM
iOS
macOS (incl. Apple silicon support)
watchOS
tvOS
Windows
Linux
JavaScript (Kotlin/JS)
WebAssembly
LLVM (Kotlin/Native)
OSCross-platformLicenseApache License 2.0Filename extensions.kt, .kts, .ktmWebsitekotlinlang.org Influenced byC#EiffelGosuGroovyJavaJavaScriptMLPythonScala
Kotlin (/ËkÉtlÉªn/)[2] is a cross-platform, statically typed, general-purpose programming language with type inference. Kotlin is designed to interoperate fully with Java, and the JVM version of Kotlin's standard library depends on the Java Class Library,[3] but type inference allows its syntax to be more concise. Kotlin mainly targets the JVM, but also compiles to JavaScript (e.g., for frontend web applications using React[4]) or native code via LLVM (e.g., for native iOS apps sharing business logic with Android apps).[5] Language development costs are borne by JetBrains, while the Kotlin Foundation protects the Kotlin trademark.[6]
On 7 May 2019, Google announced that the Kotlin programming language is now its preferred language for Android app developers.[7] Since the release of Android Studio 3.0 in October 2017, Kotlin has been included as an alternative to the standard Java compiler. The Android Kotlin compiler produces Java 8 bytecode by default (which runs in any later JVM), but lets the programmer choose to target Java 9 up to 17, for optimization,[8] or allows for more features; has bidirectional record class interoperability support for JVM, introduced in Java 16, considered stable as of Kotlin 1.5.
Kotlin support for compilation directly to JavaScript (i.e., the classic back-end) is considered stable since version 1.3, while the new Kotlin/JS(IR) is in beta as of version 1.5.30. The new optimized implementations of Kotlin/JVM(IR) and Kotlin/JS (IR-based) were introduced in version 1.4. Kotlin/JVM(IR) is considered stable and enabled by default since version 1.5. Kotlin/Native (for e.g. Apple silicon support) is considered beta since version 1.3.[9][10]

Contents

1 History
2 Design
3 Syntax

3.1 Procedural programming style
3.2 Main entry point
3.3 Extension functions
3.4 Unpack arguments with spread operator
3.5 Destructuring declarations
3.6 Nested functions
3.7 Classes are final by default
3.8 Abstract classes are open by default
3.9 Classes are public by default
3.10 Primary constructor vs. secondary constructors
3.11 Sealed classes
3.12 Data classes
3.13 Kotlin interactive shell
3.14 Kotlin as a scripting language
3.15 Null safety
3.16 Lambdas
3.17 Complex "hello world" example


4 Tools
5 Applications
6 Adoption
7 See also
8 References
9 External links



History[edit]
  A 2D picture of Kotlin mascot
  A 3D picture of Kotlin mascot
In July 2011, JetBrains unveiled Project Kotlin, a new language for the JVM, which had been under development for a year.[11] JetBrains lead Dmitry Jemerov said that most languages did not have the features they were looking for, with the exception of Scala. However, he cited the slow compilation time of Scala as a deficiency.[11] One of the stated goals of Kotlin is to compile as quickly as Java. In February 2012, JetBrains open sourced the project under the Apache 2 license.[12]
The name comes from Kotlin Island, near St. Petersburg. Andrey Breslav mentioned that the team decided to name it after an island, just like Java was named after the Indonesian island of Java[13] (though the programming language Java was perhaps named after the coffee rather than the island).[14]
JetBrains hopes that the new language will drive IntelliJ IDEA sales.[15]
Kotlin 1.0 was released on February 15, 2016.[16] This is considered to be the first officially stable release and JetBrains has committed to long-term backwards compatibility starting with this version.
At Google I/O 2017, Google announced first-class support for Kotlin on Android.[17]
Kotlin 1.2 was released on November 28, 2017.[18] Sharing code between JVM and JavaScript platforms feature was newly added to this release (as of version 1.4 multiplatform programming is an alpha feature[19] upgraded from "experimental"). A full-stack demo has been made with the new Kotlin/JS Gradle Plugin.[20][21]
Kotlin 1.3 was released on October 29, 2018, bringing coroutines for asynchronous programming.
On May 7, 2019, Google announced that the Kotlin programming language is now its preferred language for Android app developers.[7]
Kotlin 1.4 was released in August 2020, with e.g. some slight changes to the support for Apple's platforms, i.e. to the Objective-C/Swift interop.[22]
Kotlin 1.5 was released in May 2021.
Kotlin 1.6 was released in November 2021.

Design[edit]
Development lead Andrey Breslav has said that Kotlin is designed to be an industrial-strength object-oriented language, and a "better language" than Java, but still be fully interoperable with Java code, allowing companies to make a gradual migration from Java to Kotlin.[23]
Semicolons are optional as a statement terminator; in most cases a newline is sufficient for the compiler to deduce that the statement has ended.[24]
Kotlin variable declarations and parameter lists have the data type come after the variable name (and with a colon separator), similar to Ada, BASIC, Pascal, TypeScript and Rust. This, according to an article from Roman Elizarov, current project lead, results in alignment of variable names and is more pleasing to eyes especially when there are a few variable declarations in succession and one or more of the types is too complex for type inference or needs to be declared explicitly for human readers to understand.[25][26]
Variables in Kotlin can be read-only, declared with the .mw-parser-output .monospaced{font-family:monospace,monospace}val keyword, or mutable, declared with the var keyword.[27]
Class members are public by default, and classes themselves are final by default, meaning that creating a derived class is disabled unless the base class is declared with the open keyword.
In addition to the classes and member functions (which are equivalent to methods) of object-oriented programming, Kotlin also supports procedural programming with the use of functions.[28]
Kotlin functions and constructors support default arguments, variable-length argument lists, named arguments and overloading by unique signature. Class member functions are virtual, i.e. dispatched based on the runtime type of the object they are called on.
Kotlin 1.3 adds support for contracts,[29] which are stable for the standard library declarations, but still experimental for user-defined declarations. Contracts are inspired by Eiffel's design by contract[30] programming paradigm.
According to Kotlin developers, you can call JavaScript code from Kotlin, e.g. write full, type-safe React applications, or write and maintain full-stack web applications sharing validation logic with the frontend, or you can "generate libraries from your Kotlin code that can be consumed as modules from any code base written in JavaScript or TypeScript".[31]

Syntax[edit]
Procedural programming style[edit]
Kotlin relaxes Java's restriction of allowing static methods and variables to exist only within a class body. Static objects and functions can be defined at the top level of the package without needing a redundant class level. For compatibility with Java, Kotlin provides a JvmName annotation which specifies a class name used when the package is viewed from a Java project. For example, @file:JvmName("JavaClassName").

Main entry point[edit]
As in C, C++, C#, Java, and Go, the entry point to a Kotlin program is a function named "main", which may be passed an array containing any command-line arguments. This is optional since Kotlin 1.3.[32] Perl, PHP and Unix shell style string interpolation is supported. Type inference is also supported.

// Hello, World! example
fun main() {
    val scope = "World"
    println("Hello, $scope!")
}

fun main(args: Array<String>) {
    for (arg in args)
        println(arg)
}

Extension functions[edit]
Similar to C#, Kotlin allows adding an extension function to any class without the formalities of creating a derived class with new functions. An extension function has access to all the public interface of a class, which it can use to create a new function interface to a target class. An extension function will appear exactly like a function of the class and will be shown in code completion inspection of class functions. For example:

package MyStringExtensions

fun String.lastChar(): Char = get(length - 1)

>>> println("Kotlin".lastChar())

By placing the preceding code in the top-level of a package, the String class is extended to include a lastChar function that was not included in the original definition of the String class.

// Overloading '+' operator using an extension function
operator fun Point.plus(other: Point): Point {
    return Point(x + other.x, y + other.y)
}

>>> val p1 = Point(10, 20)
>>> val p2 = Point(30, 40)
>>> println(p1 + p2)
Point(x=40, y=60)

Unpack arguments with spread operator[edit]
Similar to Python, the spread operator asterisk (*) unpacks an array's contents as comma-separated arguments to a function:

fun main(args: Array<String>) { 
    val list = listOf("args: ", *args)
    println(list)
}

Destructuring declarations[edit]
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}Not to be confused with the destructor method common in object-oriented languages.
Destructuring declarations decompose an object into multiple variables at once, e.g. a 2D coordinate object might be destructured into two integers, x and y.
For example, the Map.Entry object supports destructuring to simplify access to its key and value fields:

for ((key, value) in map)
    println("$key: $value")

Nested functions[edit]
Kotlin allows local functions to be declared inside of other functions or methods.

class User(val id: Int, val name: String, val address: String)
    
fun saveUserToDb(user: User) {
    fun validate(user: User, value: String, fieldName: String) {
        require(value.isNotEmpty()) { "Can't save user ${user.id}: empty $fieldName" }
    }
    
    validate(user, user.name, "Name") 
    validate(user, user.address, "Address")
    // Save user to the database 
    ...
}

Classes are final by default[edit]
In Kotlin, to derive a new class from a base class type, the base class needs to be explicitly marked as "open".  This is in contrast to most object-oriented languages such as Java where classes are open by default.
Example of a base class that is open to deriving a new subclass from it.

// open on the class means this class will allow derived classes
open class MegaButton  {

    // no-open on a function means that 
    //    polymorphic behavior disabled if function overridden in derived class
    fun disable() { ... }

    // open on a function means that
    //    polymorphic behavior allowed if function is overridden in derived class
    open fun animate() { ... }
}

class GigaButton: MegaButton {

    // Explicit use of override keyword required to override a function in derived class
    override fun animate() { println("Giga Click!") } 
}

Abstract classes are open by default[edit]
Abstract classes define abstract or "pure virtual" placeholder functions that will be defined in a derived class. Abstract classes are open by default.

// No need for the open keyword here, itâs already open by default
abstract class Animated {

    // This virtual function is already open by default as well
    abstract fun animate()
  
    open fun stopAnimating() { }

    fun animateTwice() { }
}

Classes are public by default[edit]
Kotlin provides the following keywords to restrict visibility for top-level declaration, such as classes, and for class members: public, internal, protected, and private.
When applied to a class member:



Keyword
Visibility


public (default)
Everywhere


internal
Within a module


protected
Within subclasses


private
Within a class

When applied to a top-level declaration:



Keyword
Visibility


public (default)
Everywhere


internal
Within a module


private
Within a file

Example:

// Class is visible only to current module
internal open class TalkativeButton : Focusable {
    // method is only visible to current class 
    private fun yell() = println("Hey!")

    // method is visible to current class and derived classes
    protected fun whisper() = println("Let's talk!")
}

Primary constructor vs. secondary constructors[edit]
Kotlin supports the specification of a "primary constructor" as part of the class definition itself, consisting of an argument list following the class name. This argument list supports an expanded syntax on Kotlin's standard function argument lists, that enables declaration of class properties in the primary constructor, including visibility, extensibility and mutability attributes. Additionally, when defining a subclass, properties in super-interfaces and super-classes can be overridden in the primary constructor.

// Example of class using primary constructor syntax
// (Only one constructor required for this class)
open class PowerUser(
    protected val nickname: String, 
    final override var isSubscribed: Boolean = true) 
  : User(...) {
    ...
}

However, in cases where more than one constructor is needed for a class,  a more general constructor can be used called secondary constructor syntax which closely resembles the constructor syntax used in most object-oriented languages like C++, C#, and Java.

// Example of class using secondary constructor syntax
// (more than one constructor required for this class)
class MyButton : View {

    // Constructor #1 
    constructor(ctx: Context) : super(ctx) { 
        // ... 
    } 
  
    // Constructor #2
    constructor(ctx: Context, attr: AttributeSet) : super(ctx, attr) { 
        // ... 
    }
}

Sealed classes[edit]
The Sealed classes and interfaces restrict the subclass hierarchies, meaning more control over the inheritance hierarchy.
Declaration of sealed interface and class:

sealed interface Expr
sealed class Job

All the subclasses of the sealed class are defined at compile time. 
No new subclasses can be added to it after the compilation of the module having the sealed class.
For example, a sealed class in a compiled jar file cannot be subclassed.

sealed class Vehicle
data class Car(val brandName: String, val owner: String, val color: String): Vehicle()
class Bike(val brandName: String, val owner: String, val color: String): Vehicle()
class Tractor(val brandName: String, val owner: String, val color: String): Vehicle()
val kiaCar = Car("KIA", "John", "Blue")
val hyundaiCar = Car("Hyundai", "Britto", "Green")

Data classes[edit]
Kotlin's data class construct defines classes whose primary purpose is storing data. This construct is similar to normal classes except that the key functions equals, toString, and hashCode are automatically generated from the class properties. In Java, such classes are expected to provide a standard assortment of functions such as those. Data classes are not required to declare any methods, though each must have at least one property. A data class often is written without a body, though it is possible to give a data class any methods or secondary constructors that are valid for any other class. The data keyword is used before the class keyword to define a data class.[33]

fun main(args: Array) {
    // create a data class object like any other class object
    var book1 = Book("Kotlin Programming", 250)
    println(book1)
    // output: Book(name=Kotlin Programming, price=250)
}
     
// data class with parameters and their optional default values
data class Book(val name: String = "", val price: Int = 0)

Kotlin interactive shell[edit]
$ kotlinc-jvm
type :help for help; :quit for quit
>>> 2 + 2
4
>>> println("Hello, World!")
Hello, World!

Kotlin as a scripting language[edit]
Kotlin can also be used as a scripting language. A script is a Kotlin source file (.kts) with top level executable code.

// list_folders.kts
import java.io.File
val folders = File(args[0]).listFiles { file -> file.isDirectory() }
folders?.forEach(::println)

Scripts can be run by passing the -script option and the corresponding script file to the compiler.

$ kotlinc -script list_folders.kts "path_to_folder_to_inspect"

Null safety[edit]
Kotlin makes a distinction between nullable and non-nullable data types. All nullable objects must be declared with a "?" postfix after the type name. Operations on nullable objects need special care from developers: null-check must be performed before using the value. Kotlin provides null-safe operators to help developers:

?. (safe navigation operator) can be used to safely access a method or property of a possibly null object. If the object is null, the method will not be called and the expression evaluates to null.
?: (null coalescing operator) often referred to as the Elvis operator:
fun sayHello(maybe: String?, neverNull: Int) {
    // use of elvis operator
    val name: String = maybe ?: "stranger"
    println("Hello $name")
}

An example of the use of the safe navigation operator:

// returns null if...
// - foo() returns null,
// - or if foo() is non-null, but bar() returns null,
// - or if foo() and bar() are non-null, but baz() returns null.
// vice versa, return value is non-null if and only if foo(), bar() and baz() are non-null
foo()?.bar()?.baz()

Lambdas[edit]
Kotlin provides support for higher-order functions and anonymous functions or lambdas.[34]

// the following function takes a lambda, f, and executes f passing it the string "lambda"
// note that (String) -> Unit indicates a lambda with a String parameter and Unit return type
fun executeLambda(f: (String) -> Unit) {
    f("lambda")
}

Lambdas are declared using braces, {  } . If a lambda takes parameters, they are declared within the braces and followed by the -> operator.

// the following statement defines a lambda that takes a single parameter and passes it to the println function
val l = { c : Any? -> println(c) }
// lambdas with no parameters may simply be defined using { }
val l2 = { print("no parameters") }

Complex "hello world" example[edit]
fun main(args: Array<String>) {
    greet {
        to.place
    }.print()
}

// Inline higher-order functions
inline fun greet(s: () -> String) : String = greeting andAnother s()

// Infix functions, extensions, type inference, nullable types, 
// lambda expressions, labeled this, Elvis operator (?:)
infix fun String.andAnother(other : Any?) = buildString() 
{ 
    append(this@andAnother); append(" "); append(other ?: "") 
}

// Immutable types, delegated properties, lazy initialization, string templates
val greeting by lazy { val doubleEl: String = "ll"; "he${doubleEl}o" }

// Sealed classes, companion objects
sealed class to { companion object { val place = "world"} }

// Extensions, Unit
fun String.print() = println(this)

Tools[edit]
IntelliJ IDEA has plug-in support for Kotlin.[35] IntelliJ IDEA 15 was the first version to bundle the Kotlin plugin in the IntelliJ Installer, and provide Kotlin support out of the box.[36]
JetBrains also provides a plugin for Eclipse.[37][38]
Integration with common Java build tools is supported including Apache Maven,[39] Apache Ant,[40] and Gradle.[41]
Android Studio  (based on IntelliJ IDEA) has official support for Kotlin, starting from Android Studio 3.[42]
Emacs has a Kotlin Mode in its Melpa package repository.
Vim has a plugin maintained on GitHub.[43]
Json2Kotlin generates POJO style native Kotlin code for web service response mapping.
Applications[edit]
When Kotlin was announced as an official Android development language at Google I/O in May 2017, it became the third language fully supported for Android, in addition to Java and C++.[44] As of 2020, Kotlin is still most widely used on Android, with Google estimating that 70% of the top 1000 apps on the Play Store are written in Kotlin. Google itself has 60 apps written in Kotlin, including Maps and Drive. Many Android apps, such as Google's Home, are in the process of being migrated to Kotlin, and so use both Kotlin and Java. Kotlin on Android is seen as beneficial for its null-pointer safety as well as for its features that make for shorter, more readable code.[45]
In addition to its prominent use on Android, Kotlin is gaining traction in server-side development. The Spring Framework officially added Kotlin support with version 5 on 4 January 2017.[46] To further support Kotlin, Spring has translated all its documentation to Kotlin and added built-in support for many Kotlin-specific features such as coroutines.[47] In addition to Spring, JetBrains has produced a Kotlin-first framework called Ktor for building web applications.[48]
In 2020, JetBrains found in a survey of developers who use Kotlin that 56% were using Kotlin for mobile apps, while 47% were using it for a web back-end. Just over a third of all Kotlin developers said that they were migrating to Kotlin from another language. Most Kotlin users were targeting Android (or otherwise on the JVM), with only 6% using Kotlin Native.[49]

Adoption[edit]
In 2018, Kotlin was the fastest growing language on GitHub with 2.6 times more developers compared to 2017.[50] It is the fourth most loved programming language according to the 2020 Stack Overflow Developer Survey.[51]
Kotlin was also awarded the O'Reilly Open Source Software Conference Breakout Award for 2019.[52]
Many companies/organizations have used Kotlin for backend development:

Google[53]
Norwegian Tax Administration[54]
Gradle[55]
Amazon[56]
Cash App[57]
JetBrains[58]
Flux[59]
Allegro[60]
OLX[61]
Shazam[62]
Pivotal[63]
Rocket Travel[64]
Meshcloud[65]
Zalando[66]
Some companies/organizations have used Kotlin for web development:

JetBrains[67]
Data2viz[68]
Fritz2[69]
Barclay's Bank[70]
A number of companies have publicly stated they were using Kotlin:

DripStat[71]
Basecamp[72]
Pinterest[73]
Coursera[74]
Netflix[75]
Uber[76]
Cash App[77]
Trello[78]
Duolingo[79]
Corda, a distributed ledger developed by a consortium of well-known banks (such as Goldman Sachs, Wells Fargo, J.P. Morgan, Deutsche Bank, UBS, HSBC, BNP Paribas, SociÃ©tÃ© GÃ©nÃ©rale), has over 90% Kotlin code in its codebase.[80]
See also[edit]
.mw-parser-output .portalbox{float:right;border:solid #aaa 1px;padding:0}.mw-parser-output .portalbox.tleft{margin:0.5em 1em 0.5em 0}.mw-parser-output .portalbox.tright{margin:0.5em 0 0.5em 1em}.mw-parser-output .portalbox>ul{display:table;box-sizing:border-box;padding:0.1em;max-width:175px;background:#f9f9f9;font-size:85%;line-height:110%;font-style:italic;font-weight:bold}.mw-parser-output .portalbox>ul>li{display:table-row}.mw-parser-output .portalbox>ul>li>span:first-child{display:table-cell;padding:0.2em;vertical-align:middle;text-align:center}.mw-parser-output .portalbox>ul>li>span:last-child{display:table-cell;padding:0.2em 0.2em 0.2em 0.3em;vertical-align:middle}

Free and open-source software portal
Computer programming portal
Comparison of programming languages
References[edit]
This article contains quotations from Kotlin tutorials which are released under an Apache 2.0 license.
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ https://github.com/JetBrains/kotlin/releases/tag/v1.6.10; publication date: 14 December 2021; retrieved: 1 January 2022.

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}"What is the correct English pronunciation of Kotlin?". 16 October 2019. Retrieved 9 November 2019.

^ "kotlin-stdlib". kotlinlang.org. JetBrains. Retrieved 20 April 2018.

^ "Kotlin for JavaScript - Kotlin Programming Language". Kotlin. Retrieved 20 August 2020.

^ "Kotlin for cross-platform mobile development". JetBrains: Developer Tools for Professionals and Teams. Retrieved 20 August 2020.

^ "Kotlin Foundation - Kotlin Programming Language". Kotlin.

^ Jump up to: a b "Kotlin is now Google's preferred language for Android app development". TechCrunch. Retrieved 8 May 2019.

^ "Kotlin FAQ". Retrieved 26 August 2021. Kotlin lets you choose the version of JVM for execution. By default, the Kotlin/JVM compiler produces Java 8 compatible bytecode. If you want to make use of optimizations available in newer versions of Java, you can explicitly specify the target Java version from 9 to 17. Note that in this case the resulting bytecode might not run on lower versions.

^ "Stability of Kotlin Components". Kotlin. 21 May 2021. Retrieved 29 July 2021.

^ "Kotlin 1.5.0 â the First Big Release of 2021". Kotlin. 4 May 2021. Retrieved 29 July 2021.

^ Jump up to: a b Krill, Paul (22 July 2011). "JetBrains readies JVM language Kotlin". InfoWorld. Archived from the original on 7 September 2019. Retrieved 2 February 2014.

^ Waters, John (22 February 2012). "Kotlin Goes Open Source". ADTmag.com. 1105 Enterprise Computing Group. Archived from the original on 18 February 2014. Retrieved 2 February 2014.

^ Mobius (8 January 2015), ÐÐ½Ð´ÑÐµÐ¹ ÐÑÐµÑÐ»Ð°Ð² â Kotlin Ð´Ð»Ñ Android: ÐºÐ¾ÑÐ¾ÑÐºÐ¾ Ð¸ ÑÑÐ½Ð¾, retrieved 28 May 2017

^ Kieron Murphy (4 October 1996). "So why did they decide to call it Java?". JavaWorld. Archived from the original on 15 March 2019. Retrieved 14 October 2017.

^ "Why JetBrains needs Kotlin". we expect Kotlin to drive the sales of IntelliJ IDEA

^ "Kotlin 1.0 Released: Pragmatic Language for JVM and Android | Kotlin Blog". Blog.jetbrains.com. 15 February 2016. Retrieved 11 April 2017.

^ Shafirov, Maxim (17 May 2017). "Kotlin on Android. Now official". Today, at the Google I/O keynote, the Android team announced first-class support for Kotlin.

^ "Kotlin 1.2 Released: Sharing Code between Platforms | Kotlin Blog". blog.jetbrains.com. 28 November 2017.

^ "Multiplatform Projects - Kotlin Programming Language". Kotlin. Retrieved 20 August 2020. Working on all platforms is an explicit goal for Kotlin, but we see it as a premise to a much more important goal: sharing code between platforms. With support for JVM, Android, JavaScript, iOS, Linux, Windows, Mac and even embedded systems like STM32, Kotlin can handle any and all components of a modern application.

^ "Kotlin/kotlin-full-stack-application-demo". Kotlin. 3 April 2020. Retrieved 4 April 2020.

^ "Kotlin full stack app demo: update all involving versions to work with 1.3.70 release". youtrack.jetbrains.com. Retrieved 4 April 2020.

^ "What's New in Kotlin 1.4 - Kotlin Programming Language". Kotlin. Retrieved 20 August 2020. In 1.4.0, we slightly change the Swift API generated from Kotlin with respect to the way exceptions are translated.

^ "JVM Languages Report extended interview with Kotlin creator Andrey Breslav". Zeroturnaround.com. 22 April 2013. Retrieved 2 February 2014.

^ "Semicolons". jetbrains.com. Retrieved 8 February 2014.

^ "Types are moving to the right". Medium. Medium. 16 July 2020. Retrieved 6 November 2021.

^ "Roman Elizarov is the new Project Lead for Kotlin". The Kotlin Blog. JetBrains. Retrieved 7 November 2021.

^ "Basic Syntax". Kotlin. Jetbrains. Retrieved 19 January 2018.

^ "functions". jetbrains.com. Retrieved 8 February 2014.

^ "What's New in Kotlin 1.3 - Kotlin Programming Language". Kotlin. Retrieved 4 April 2020.

^ "Design by Contract (DbC) design considerations". Kotlin Discussions. 16 August 2012. Retrieved 4 April 2020. Implement the full semantics of Eiffel DbC and improve upon it.

^ "Kotlin for JavaScript | Kotlin". Kotlin Help. 21 January 2021. Retrieved 19 March 2021.

^ "Kotlin Examples: Learn Kotlin Programming By Example".

^ "Introduction to Data Classes in Kotlin".

^ "Higher-Order Functions and Lambdas". Kotlin. Jetbrains. Retrieved 19 January 2018.

^ "KotlinÂ :: JetBrains Plugin Repository". Plugins.jetbrains.com. 31 March 2017. Retrieved 11 April 2017.

^ "What's New in IntelliJ IDEA 2017.1". Jetbrains.com. Retrieved 11 April 2017.

^ "Getting Started with Eclipse Neon â Kotlin Programming Language". Kotlinlang.org. 10 November 2016. Retrieved 11 April 2017.

^ "JetBrains/kotlin-eclipse: Kotlin Plugin for Eclipse". GitHub. Retrieved 11 April 2017.

^ "Using Maven â Kotlin Programming Language". kotlinlang.org. Retrieved 9 May 2017.

^ "Using Ant â Kotlin Programming Language". kotlinlang.org. Retrieved 9 May 2017.

^ "Using Gradle â Kotlin Programming Language". kotlinlang.org. Retrieved 9 May 2017.

^ "Kotlin and Android". Android Developers.

^ "udalov/kotlin-vim: Kotlin plugin for Vim. Featuring: syntax highlighting, basic indentation, Syntastic support". GitHub. Retrieved 30 August 2019.

^ Lardinois, Frederic (17 May 2017). "Google makes Kotlin a first-class language for writing Android apps". techcrunch.com. Retrieved 28 June 2018.

^ "Kotlin programming language: How Google is using it to squash the code bugs that cause most crashes". ZDNet.

^ "Introducing Kotlin support in Spring Framework 5.0". Spring. Pivotal. 4 January 2017. Retrieved 29 September 2020.

^ "The State of Kotlin Support in Spring". JetBrains. Retrieved 6 December 2020.

^ "Review of Microservices Frameworks: A Look at Spring Boot Alternatives". DZone.

^ "Kotlin Programming - The State of Developer Ecosystem 2020". JetBrains. Retrieved 29 September 2020.

^ "The state of the Octoverse". Archived from the original on 22 March 2019. Retrieved 24 July 2019.

^ "Stack Overflow Developer Survey 2020". Retrieved 28 May 2020.

^ "Kotlin wins Breakout Project of the Year award at OSCON '19". Retrieved 24 July 2019.

^ "State of Kotlin on Android". YouTube. Retrieved 29 September 2020.

^ "KotlinConf 2019: Kotlin Runs Taxes in Norway by Jarle Hansen & Anders Mikkelsen". YouTube. Retrieved 29 September 2020.

^ "Gradle Kotlin DSL Primer". docs.gradle.org. Retrieved 29 September 2020.

^ "QLDB at Amazon". Talking Kotlin. Retrieved 29 September 2020.

^ "Going Full Kotlin Multiplatform". Talking Kotlin. Retrieved 29 September 2020.

^ "Kotless". Talking Kotlin. Retrieved 29 September 2020.

^ "Using Kotlin for backend development at Flux". Talking Kotlin. Retrieved 29 September 2020.

^ "Kotlin at Allegro". Talking Kotlin. Retrieved 29 September 2020.

^ "Greenfield Kotlin at OLX". Talking Kotlin. Retrieved 29 September 2020.

^ "Kotlin at Shazam". Talking Kotlin. Retrieved 29 September 2020.

^ "Application Monitoring with Micrometer". Talking Kotlin. Retrieved 29 September 2020.

^ "Groovy and Kotlin Interop at Rocket Travel". Talking Kotlin. Retrieved 29 September 2020.

^ "Kotlin on the backend at Meshcloud". Talking Kotlin. Retrieved 29 September 2020.

^ "Zally - An API Linter". Talking Kotlin. Retrieved 29 September 2020.

^ "KotlinConf 2019: Kotlin in Space by Maxim Mazin". YouTube. Retrieved 29 September 2020.

^ "KotlinConf 2017 - Frontend Kotlin from the Trenches by Gaetan Zoritchak". YouTube. Retrieved 29 September 2020.

^ "Fritz2". Talking Kotlin. Retrieved 29 September 2020.

^ "Java/Kotlin Developer - Barclays - Prague - Wizbii". Wizbii.com. Retrieved 29 September 2020.

^ "Kotlin in Production â What works, Whats broken". Blog.dripstat.com. 24 September 2016. Retrieved 11 April 2017.

^ "How we made Basecamp 3's Android app 100% Kotlin â Signal v. Noise". Signal v. Noise. 29 April 2017. Retrieved 1 May 2017.

^ "Droidcon NYC 2016 - Kotlin in Production". YouTube. Retrieved 24 July 2019.

^ "Becoming bilingual@coursera". 26 April 2018. Retrieved 24 July 2019.

^ "Rob Spieldenner on twitter". Retrieved 24 July 2019.

^ "2017 Who's using Kotlin?". 7 February 2017. Retrieved 24 July 2019.

^ "square/sqldelight". GitHub. Retrieved 24 July 2019.

^ "Dan Lew on Twitter". Retrieved 24 July 2019.

^ "Duolingo on Twitter". Retrieved 13 April 2020.

^ "Kotlin 1.1 Released with JavaScript Support, Coroutines and more". Retrieved 1 May 2017.


External links[edit]
Official website 
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteProgramming languages
Comparison
Timeline
History

Ada
ALGOL
APL
Assembly
BASIC
C
C++
C#
COBOL
Erlang
Forth
Fortran
Go
Haskell
Java
JavaScript
Kotlin
Lisp
Lua
ML
Pascal
Perl
PHP
Prolog
Python
R
Ruby
Rust
SQL
Shell
Simula
Smalltalk
Swift
more...

 Category
 Lists: Alphabetical
Categorical
Generational
Non-English-based

vteJava (software platform)Platforms
Java language
JVM
Java ME (Micro)
Java SE (Standard)
Jakarta EE (Enterprise)
Java Card
Android SDK
Oracle technologies
Squawk
Java Development Kit
OpenJDK
Java virtual machine
JavaFX
Maxine VM
Platform technologies
Applets
Servlets
MIDlets
JSP
JSF
Web Start (JNLP)
Major third-party technologies
Blackdown
Eclipse
GNU Classpath
GWT
Harmony
Hibernate
IcedTea
Jazelle
Spring
Struts
TopLink
WildFly
History
Java version history
Java Community Process
Sun Microsystems
Free Java implementations
JVM languages
BeanShell
Clojure
Groovy
JRuby
Jython
Kotlin
Processing
Rhino
Scala
Oxygene
CommunityConferences
JavaOne
Devoxx
Organizations
Apache Software Foundation
Java Community Process
Oracle Corporation
Sun Microsystems, Sun Microsystems Laboratories
People
James Gosling
Arthur van Hoff
Urs HÃ¶lzle
Patrick Naughton
 Category Â 
Â Computer programming portal




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Kotlin_(programming_language)&oldid=1067938317"
		Categories: Java programming language familyJVM programming languagesObject-oriented programming languagesProgramming languagesProgramming languages created in 2011Software using the Apache licenseStatically typed programming languagesHigh-level programming languages2011 softwareFree software projectsHidden categories: Articles with short descriptionShort description is different from WikidataUse dmy dates from July 2020
	
