
Title:
The Art of Computer Programming
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Books about algorithms by Donald Knuth
.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}The Art of Computer Programming The Art of Computer Programming, Volume 1: Fundamental AlgorithmsAuthorDonald KnuthCountryUnited StatesLanguageEnglishGenreNon-fiction MonographPublisherAddison-WesleyPublication date1968â (the book is still incomplete)MediaÂ typePrint (Hardcover)ISBN.mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}0-201-03801-3Dewey Decimal519LCÂ ClassQA76.75
The Art of Computer Programming (TAOCP) is a comprehensive monograph written by the computer scientist Donald Knuth presenting programming algorithms and their analysis.
Knuth began the project, originally conceived as a single book with twelve chapters, in 1962. The first three volumes of what was then expected to be a seven-volume set were published in 1968, 1969, and 1973. Work began in earnest on Volume 4 in 1973, but was suspended in 1977 for work on typesetting prompted by the second edition of Volume 2. Writing of the final copy of Volume 4A began in longhand in 2001, and the first online pre-fascicle, 2A, appeared later in 2001.[1] The first published installment of Volume 4 appeared in paperback as Fascicle 2 in 2005.
The hardback Volume 4A, combining Volume 4, Fascicles 0â4, was published in 2011. Volume 4, Fascicle 6 ("Satisfiability") was released in December 2015; Volume 4, Fascicle 5 ("Mathematical Preliminaries Redux; Backtracking; Dancing Links") was released in November 2019.
Fascicles 5 and 6 are expected to make up the first two-thirds of Volume 4B.  Knuth has not announced any estimated date for release of Volume 4B, although his method used for Volume 4A is to release the hardback volume sometime after release of the paperback fascicles contained in it.  Near-term publisher estimates put the release date at May or June 2019, which proved to be incorrect.[2][3]

Contents

1 History
2 Assembly language in the book
3 Critical response
4 Volumes

4.1 Completed
4.2 Planned


5 Chapter outlines

5.1 Completed

5.1.1 Volume 1Â â Fundamental Algorithms
5.1.2 Volume 2Â â Seminumerical Algorithms
5.1.3 Volume 3Â â Sorting and Searching
5.1.4 Volume 4AÂ â Combinatorial Algorithms, Part 1


5.2 Planned

5.2.1 Volume 4B, 4C, 4D â Combinatorial Algorithms
5.2.2 Volume 5Â â Syntactic Algorithms
5.2.3 Volume 6Â â The Theory of Context-free Languages[12]
5.2.4 Volume 7Â â Compiler Techniques




6 English editions

6.1 Current editions
6.2 Previous editions

6.2.1 Complete volumes
6.2.2 Fascicles
6.2.3 Pre-fascicles




7 See also
8 References
9 External links



History[edit]
  Donald Knuth in 2005
After winning a Westinghouse Talent Search scholarship, Knuth enrolled at the Case Institute of Technology (now Case Western Reserve University), where his performance was so outstanding that the faculty voted to award him a master of science upon his completion of the bachelor degree. During his summer vacations, Knuth was hired by the Burroughs Corporation to write compilers, earning more in his summer months than full professors did for an entire year.[4] Such exploits made Knuth a topic of discussion among the mathematics department, which included Richard S. Varga.
In January 1962, when he was a graduate student in the mathematics department at Caltech, Knuth was approached by Addison-Wesley to write a book about compiler design, and he proposed a larger scope. He came up with a list of 12 chapter titles the same day. In the summer of 1962 he worked on a FORTRAN compiler for UNIVAC. During this time, he also came up with a mathematical analysis of linear probing, which convinced him to present the material with a quantitative approach. After receiving his PhD in June 1963, he began working on his manuscript, of which he finished his first draft in June 1965, at 3000 hand-written pages.[5] He had assumed that about five hand-written pages would translate into one printed page, but his publisher said instead that about .mw-parser-output .frac{white-space:nowrap}.mw-parser-output .frac .num,.mw-parser-output .frac .den{font-size:80%;line-height:0;vertical-align:super}.mw-parser-output .frac .den{vertical-align:sub}.mw-parser-output .sr-only{border:0;clip:rect(0,0,0,0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}1+1â2 hand-written pages translated to one printed page. This meant he had approximately 2000 printed pages of material, which closely matches the size of the first three published volumes. The publisher was nervous about accepting such a project from a graduate student. At this point, Knuth received support from Richard S. Varga, who was the scientific adviser to the publisher. Varga was visiting Olga Taussky-Todd and John Todd at Caltech. With Varga's enthusiastic endorsement, the publisher accepted Knuth's expanded plans. In its expanded version, the book would be published in seven volumes, each with just one or two chapters.[6] Due to the growth in Chapter 7, which was fewer than 100 pages of the 1965 manuscript, per Vol. 4A p. vi, the plan for Volume 4 has since expanded to include Volumes 4A, 4B, 4C, 4D, and possibly more.
In 1976, Knuth prepared a second edition of Volume 2, requiring it to be typeset again, but the style of type used in the first edition (called hot type) was no longer available. In 1977, he decided to spend some time creating something more suitable. Eight years later, he returned with TEX, which is currently used for all volumes.
The offer of a so-called Knuth reward check worth "one hexadecimal dollar" (100HEX base 16 cents, in decimal, is $2.56) for any errors found, and the correction of these errors in subsequent printings, has contributed to the highly polished and still-authoritative nature of the work, long after its first publication. Another characteristic of the volumes is the variation in the difficulty of the exercises. Knuth even has a numerical difficulty scale for rating those exercises, varying from 0 to 50, where 0 is trivial, and 50 is an open question in contemporary research.[7]
Knuth's dedication reads:

This series of books is affectionately dedicatedto the Type 650 computer once installed atCase Institute of Technology,with whom I have spent many pleasant evenings.[a]
Assembly language in the book[edit]
All examples in the books use a language called "MIX assembly language", which runs on the hypothetical MIX computer. Currently, the MIX computer is being replaced by the MMIX computer, which is a RISC version. Software such as GNU MDK exists to provide emulation of the MIX architecture. Knuth considers the use of assembly language necessary for the speed and memory usage of algorithms to be judged.

Critical response[edit]
Knuth was awarded the 1974 Turing Award "for his major contributions to the analysis of algorithms [â¦], and in particular for his contributions to the 'art of computer programming' through his well-known books in a continuous series by this title."[8] American Scientist has included this work among "100 or so Books that shaped a Century of Science", referring to the twentieth century,[9] and within the computer science community it is regarded as the first and still the best comprehensive treatment of its subject.[failed verification] Covers of the third edition of Volume 1 quote Bill Gates as saying, "If you think you're a really good programmerâ¦ read (Knuth's) Art of Computer Programmingâ¦ You should definitely send me a rÃ©sumÃ© if you can read the whole thing."[10] The New York Times referred to it as "the profession's defining treatise".[11]

Volumes[edit]
Completed[edit]
Volume 1Â â Fundamental Algorithms
Chapter 1Â â Basic concepts
Chapter 2Â â Information structures
Volume 2Â â Seminumerical Algorithms
Chapter 3Â â Random numbers
Chapter 4Â â Arithmetic
Volume 3Â â Sorting and Searching
Chapter 5Â â Sorting
Chapter 6Â â Searching
Volume 4AÂ â Combinatorial Algorithms
Chapter 7Â â Combinatorial searching (part 1)
Planned[edit]
Volume 4B...Â â Combinatorial Algorithms (chapters 7 & 8 released in several subvolumes)
Chapter 7Â â Combinatorial searching (continued)
Chapter 8Â â Recursion
Volume 5Â â Syntactic Algorithms
Chapter 9Â â Lexical scanning (also includes string search and data compression)
Chapter 10Â â Parsing techniques
Volume 6Â â The Theory of Context-Free Languages
Volume 7Â â Compiler Techniques
Chapter outlines[edit]
Completed[edit]
Volume 1Â â Fundamental Algorithms[edit]
Chapter 1Â â Basic concepts
1.1. Algorithms
1.2. Mathematical Preliminaries
1.2.1. Mathematical Induction
1.2.2. Numbers, Powers, and Logarithms
1.2.3. Sums and Products
1.2.4. Integer Functions and Elementary Number Theory
1.2.5. Permutations and Factorials
1.2.6. Binomial Coefficients
1.2.7. Harmonic Numbers
1.2.8. Fibonacci Numbers
1.2.9. Generating Functions
1.2.10. Analysis of an Algorithm
1.2.11. Asymptotic Representations
1.2.11.1. The O-notation
1.2.11.2. Euler's summation formula
1.2.11.3. Some asymptotic calculations
1.3 MMIX (MIX in the hardback copy but updated by fascicle 1)
1.3.1. Description of MMIX
1.3.2. The MMIX Assembly Language
1.3.3. Applications to Permutations
1.4. Some Fundamental Programming Techniques
1.4.1. Subroutines
1.4.2. Coroutines
1.4.3. Interpretive Routines
1.4.3.1. A MIX simulator
1.4.3.2. Trace routines
1.4.4. Input and Output
1.4.5. History and Bibliography
Chapter 2Â â Information Structures
2.1. Introduction
2.2. Linear Lists
2.2.1. Stacks, Queues, and Deques
2.2.2. Sequential Allocation
2.2.3. Linked Allocation (topological sorting)
2.2.4. Circular Lists
2.2.5. Doubly Linked Lists
2.2.6. Arrays and Orthogonal Lists
2.3. Trees
2.3.1. Traversing Binary Trees
2.3.2. Binary Tree Representation of Trees
2.3.3. Other Representations of Trees
2.3.4. Basic Mathematical Properties of Trees
2.3.4.1. Free trees
2.3.4.2. Oriented trees
2.3.4.3. The "infinity lemma"
2.3.4.4. Enumeration of trees
2.3.4.5. Path length
2.3.4.6. History and bibliography
2.3.5. Lists and Garbage Collection
2.4. Multilinked Structures
2.5. Dynamic Storage Allocation
2.6. History and Bibliography
Volume 2Â â Seminumerical Algorithms[edit]
Chapter 3Â â Random Numbers
3.1. Introduction
3.2. Generating Uniform Random Numbers
3.2.1. The Linear Congruential Method
3.2.1.1. Choice of modulus
3.2.1.2. Choice of multiplier
3.2.1.3. Potency
3.2.2. Other Methods
3.3. Statistical Tests
3.3.1. General Test Procedures for Studying Random Data
3.3.2. Empirical Tests
3.3.3. Theoretical Tests
3.3.4. The Spectral Test
3.4. Other Types of Random Quantities
3.4.1. Numerical Distributions
3.4.2. Random Sampling and Shuffling
3.5. What Is a Random Sequence?
3.6. Summary
Chapter 4Â â Arithmetic
4.1. Positional Number Systems
4.2. Floating Point Arithmetic
4.2.1. Single-Precision Calculations
4.2.2. Accuracy of Floating Point Arithmetic
4.2.3. Double-Precision Calculations
4.2.4. Distribution of Floating Point Numbers
4.3. Multiple Precision Arithmetic
4.3.1. The Classical Algorithms
4.3.2. Modular Arithmetic
4.3.3. How Fast Can We Multiply?
4.4. Radix Conversion
4.5. Rational Arithmetic
4.5.1. Fractions
4.5.2. The Greatest Common Divisor
4.5.3. Analysis of Euclid's Algorithm
4.5.4. Factoring into Primes
4.6. Polynomial Arithmetic
4.6.1. Division of Polynomials
4.6.2. Factorization of Polynomials
4.6.3. Evaluation of Powers (addition-chain exponentiation)
4.6.4. Evaluation of Polynomials
4.7. Manipulation of Power Series
Volume 3Â â Sorting and Searching[edit]
Chapter 5Â â Sorting
5.1. Combinatorial Properties of Permutations
5.1.1. Inversions
5.1.2. Permutations of a Multiset
5.1.3. Runs
5.1.4. Tableaux and Involutions
5.2. Internal sorting
5.2.1. Sorting by Insertion
5.2.2. Sorting by Exchanging
5.2.3. Sorting by Selection
5.2.4. Sorting by Merging
5.2.5. Sorting by Distribution
5.3. Optimum Sorting
5.3.1. Minimum-Comparison Sorting
5.3.2. Minimum-Comparison Merging
5.3.3. Minimum-Comparison Selection
5.3.4. Networks for Sorting
5.4. External Sorting
5.4.1. Multiway Merging and Replacement Selection
5.4.2. The Polyphase Merge
5.4.3. The Cascade Merge
5.4.4. Reading Tape Backwards
5.4.5. The Oscillating Sort
5.4.6. Practical Considerations for Tape Merging
5.4.7. External Radix Sorting
5.4.8. Two-Tape Sorting
5.4.9. Disks and Drums
5.5. Summary, History, and Bibliography
Chapter 6Â â Searching
6.1. Sequential Searching
6.2. Searching by Comparison of Keys
6.2.1. Searching an Ordered Table
6.2.2. Binary Tree Searching
6.2.3. Balanced Trees
6.2.4. Multiway Trees
6.3. Digital Searching
6.4. Hashing
6.5. Retrieval on Secondary Keys
Volume 4AÂ â Combinatorial Algorithms, Part 1[edit]
Chapter 7Â â Combinatorial Searching
7.1. Zeros and Ones
7.1.1. Boolean Basics
7.1.2. Boolean Evaluation
7.1.3. Bitwise Tricks and Techniques
7.1.4. Binary Decision Diagrams
7.2. Generating All Possibilities
7.2.1. Generating Basic Combinatorial Patterns
7.2.1.1. Generating all n-tuples
7.2.1.2. Generating all permutations
7.2.1.3. Generating all combinations
7.2.1.4. Generating all partitions
7.2.1.5. Generating all set partitions
7.2.1.6. Generating all trees
7.2.1.7. History and further references
Planned[edit]
Volume 4B, 4C, 4D â Combinatorial Algorithms[edit]
Chapter 7Â â Combinatorial Searching (continued)
7.2. Generating all possibilities (continued)
7.2.2. Backtrack programming (published in Fascicle 5)
7.2.2.1. Dancing links (published in Fascicle 5)
7.2.2.2. Satisfiability (published in Fascicle 6)
7.2.2.3. Constraint satisfaction
7.2.2.4. Hamiltonian paths and cycles (online draft in pre-fascicle 8A)
7.2.2.5. Cliques
7.2.2.6. Covers (Vertex cover, Set cover problem, Exact cover, Clique cover)
7.2.2.7. Squares
7.2.2.8. A potpourri of puzzles (online draft in pre-fascicle 9B) (includes Perfect digital invariant)
7.2.2.9. Estimating backtrack costs (chapter 6 of "Selected Papers on Analysis of Algorithms", and Fascicle 5, pp 44â47, under the heading "Running time estimates")
7.2.3. Generating inequivalent patterns (includes discussion of PÃ³lya enumeration theorem) (see "Techniques for Isomorph Rejection", Ch 4 of "Classification Algorithms for Codes and Designs" by Kaski and ÃstergÃ¥rd)
7.3. Shortest paths
7.4. Graph algorithms
7.4.1. Components and traversal
7.4.1.1. Union-find algorithms
7.4.1.2. Depth-first search
7.4.1.3. Vertex and edge connectivity
7.4.2. Special classes of graphs
7.4.3. Expander graphs
7.4.4. Random graphs
7.5. Graphs and optimization
7.5.1. Bipartite matching (including maximum-cardinality matching, Stable marriage problem, Mariages Stables)
7.5.2. The assignment problem
7.5.3. Network flows
7.5.4. Optimum subtrees
7.5.5. Optimum matching
7.5.6. Optimum orderings
7.6. Independence theory
7.6.1. Independence structures
7.6.2. Efficient matroid algorithms
7.7. Discrete dynamic programming (see also Transfer-matrix method)
7.8. Branch-and-bound techniques
7.9. Herculean tasks (aka NP-hard problems)
7.10. Near-optimization
Chapter 8Â â Recursion (chapter 22 of "Selected Papers on Analysis of Algorithms")
Volume 5Â â Syntactic Algorithms[edit]
Chapter 9Â â Lexical scanning (includes also string search and data compression)
Chapter 10Â â Parsing techniques
Volume 6Â â The Theory of Context-free Languages[12][edit]
Volume 7Â â Compiler Techniques[edit]
English editions[edit]
Current editions[edit]
These are the current editions in order by volume number:

The Art of Computer Programming, Volumes 1-4A Boxed Set. Third Edition (Reading, Massachusetts: Addison-Wesley, 2011), 3168pp. ISBNÂ 978-0-321-75104-1, 0-321-75104-3
Volume 1: Fundamental Algorithms. Third Edition (Reading, Massachusetts: Addison-Wesley, 1997), xx+650pp. ISBNÂ 978-0-201-89683-1, 0-201-89683-4. Errata: [1] (2011-01-08), [2] (2020-03-26, 27th printing). Addenda: [3] (2011).
Volume 2: Seminumerical Algorithms. Third Edition (Reading, Massachusetts: Addison-Wesley, 1997), xiv+762pp. ISBNÂ 978-0-201-89684-8, 0-201-89684-2. Errata: [4] (2011-01-08), [5] (2020-03-26, 26th printing). Addenda: [6] (2011).
Volume 3: Sorting and Searching. Second Edition (Reading, Massachusetts: Addison-Wesley, 1998), xiv+780pp.+foldout. ISBNÂ 978-0-201-89685-5, 0-201-89685-0. Errata: [7] (2011-01-08), [8] (2020-03-26, 27th printing). Addenda: [9] (2011).
Volume 4A: Combinatorial Algorithms, Part 1. First Edition (Reading, Massachusetts: Addison-Wesley, 2011), xv+883pp. ISBNÂ 978-0-201-03804-0, 0-201-03804-8. Errata: [10] (2020-03-26,Â ? printing).
Volume 1, Fascicle 1: MMIXÂ â A RISC Computer for the New Millennium. (Addison-Wesley, 2005-02-14) ISBNÂ 0-201-85392-2. Errata: [11] (2020-03-16) (will be in the fourth edition of volume 1)
Volume 4, Fascicle 5: Mathematical Preliminaries Redux; Backtracking; Dancing Links. (Addison-Wesley, 2019-11-22) xiii+382pp, ISBNÂ 978-0-13-467179-6. Errata: [12] (2020-03-27) (will become part of volume 4B)
Volume 4, Fascicle 6: Satisfiability. (Addison-Wesley, 2015-12-08) xiii+310pp, ISBNÂ 978-0-13-439760-3. Errata: [13] (2020-03-26) (will become part of volume 4B)
Previous editions[edit]
Complete volumes[edit]
These volumes were superseded by newer editions and are in order by date.

Volume 1: Fundamental Algorithms. First edition, 1968, xxi+634pp, ISBNÂ 0-201-03801-3.[13]
Volume 2: Seminumerical Algorithms. First edition, 1969, xi+624pp, ISBNÂ 0-201-03802-1.[13]
Volume 3: Sorting and Searching. First edition, 1973, xi+723pp+foldout, ISBNÂ 0-201-03803-X. Errata: [14].
Volume 1: Fundamental Algorithms. Second edition, 1973, xxi+634pp, ISBNÂ 0-201-03809-9. Errata: [15].
Volume 2: Seminumerical Algorithms. Second edition, 1981, xiii+ 688pp, ISBNÂ 0-201-03822-6. Errata: [16].
The Art of Computer Programming, Volumes 1-3 Boxed Set. Second Edition (Reading, Massachusetts: Addison-Wesley, 1998), pp. ISBNÂ 978-0-201-48541-7, 0-201-48541-9
Fascicles[edit]
VolumeÂ 4's fascicles 0â4 were revised and published as VolumeÂ 4A:

Volume 4, Fascicle 0: Introduction to Combinatorial Algorithms and Boolean Functions. (Addison-Wesley Professional, 2008-04-28) vi+240pp, ISBNÂ 0-321-53496-4. Errata: [17] (2011-01-01).
Volume 4, Fascicle 1: Bitwise Tricks & Techniques; Binary Decision Diagrams. (Addison-Wesley Professional, 2009-03-27) viii+260pp, ISBNÂ 0-321-58050-8. Errata: [18] (2011-01-01).
Volume 4, Fascicle 2: Generating All Tuples and Permutations. (Addison-Wesley, 2005-02-14) v+127pp, ISBNÂ 0-201-85393-0. Errata: [19] (2011-01-01).
Volume 4, Fascicle 3: Generating All Combinations and Partitions. (Addison-Wesley, 2005-07-26) vi+150pp, ISBNÂ 0-201-85394-9. Errata: [20] (2011-01-01).
Volume 4, Fascicle 4: Generating All Trees; History of Combinatorial Generation. (Addison-Wesley, 2006-02-06) vi+120pp, ISBNÂ 0-321-33570-8. Errata: [21] (2011-01-01).
VolumeÂ 4's fascicles 5â6 will become part of VolumeÂ 4B:

Volume 4, Fascicle 5: Mathematical Preliminaries Redux; Backtracking; Dancing Links. (Addison-Wesley, 2019-11-22) xiii+382pp, ISBNÂ 978-0-13-467179-6. Errata: [22] (2020-03-27)
Volume 4, Fascicle 6: Satisfiability. (Addison-Wesley, 2015-12-08) xiii+310pp, ISBNÂ 978-0-13-439760-3. Errata: [23] (2020-03-26)
Pre-fascicles[edit]
VolumeÂ 4's pre-fascicles 5A, 5B, and 5C were revised and published as fascicle 5.
VolumeÂ 4's pre-fascicle 6A was revised and published as fascicle 6.

Volume 4, Pre-fascicle 8A: Hamiltonian Paths and Cycles
Volume 4, Pre-fascicle 9B: A Potpourri of Puzzles
See also[edit]
Introduction to Algorithms
References[edit]
Notes

.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ The dedication was worded slightly differently in the first edition.


Citations



^ "note for box 3, folder 1".

^ "Addison-Wesley Pearson webpage".

^ "Pearson Educational".

^ Frana, Philip L. (2001-11-08). "An Interview with Donald E. Knuth". hdl:11299/107413.

^ Donald Knuth, This Week's Citation Classic, Current Contents, Number 34 (August 23, 1993), page 8.

^ 
Albers, Donald J. (2008). "Donald Knuth".  In Albers, Donald J.; Alexanderson, Gerald L. (eds.). Mathematical People: Profiles and Interviews (2Â ed.). A K Peters. ISBNÂ 978-1-56881-340-0.

^ "Reflections on a year of reading Knuth". infinitepartitions.com. Retrieved 2020-07-25. I worked, or at least attempted to work, every single problem in the first volume.  In some cases I settled for just understanding what the question was trying to ask for.  In some cases I failed even to accomplish that (don't judge me until you try it yourself).  Each problem is assigned a difficulty rating from 0-50 where 0 is trivial and 50 is "unsolved research problem" (in the first edition, Fermat's last theorem was listed as a 50, but since Andrew Wiles proved it, it's bumped down to a 45 in the current edition).  I think I was able to solve most of the problems rated < 20 â it was hit and miss beyond that.  Most of the problems fell into the 20-30 difficulty range, but Knuth's idea of "difficult" is subjective, and problems that he considers to be of average difficulty ended up stretching my comparatively tiny brain painfully. I've never climbed Mount Everest, but I imagine the whole ordeal feels similar: painful while you're going through it, but triumphant when you reach the pinnacle.

^ "Donald E. Knuth â A. M. Turing Award Winner". AM Turing. Retrieved 2017-01-25.

^ Morrison, Philip; Morrison, Phylis (NovemberâDecember 1999). "100 or so Books that shaped a Century of Science". American Scientist. Sigma Xi, The Scientific Research Society. 87 (6). Archived from the original on 2008-08-20. Retrieved 2008-01-11.

^ Weinberger, Matt. "Bill Gates once said 'definitely send me a rÃ©sumÃ©' if you finish this fiendishly difficult book". Business Insider. Retrieved 2016-06-13.

^ Lohr, Steve (2001-12-17). "Frances E. Holberton, 84, Early Computer Programmer". The New York Times. Retrieved 2010-05-17.

^ "TAOCP â Future plans".

^ Jump up to: a b Wells, Mark B. (1973). "Review: The Art of Computer Programming, Volume 1. Fundamental Algorithms and Volume 2. Seminumerical Algorithms by Donald E. Knuth" (PDF). Bulletin of the American Mathematical Society. 79 (3): 501â509. doi:10.1090/s0002-9904-1973-13173-8.


Sources

.mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li{margin-left:0;padding-left:3.2em;text-indent:-3.2em}.mw-parser-output .refbegin-hanging-indents ul,.mw-parser-output .refbegin-hanging-indents ul li{list-style:none}@media(max-width:720px){.mw-parser-output .refbegin-hanging-indents>ul>li{padding-left:1.6em;text-indent:-1.6em}}.mw-parser-output .refbegin-columns{margin-top:0.3em}.mw-parser-output .refbegin-columns ul{margin-top:0}.mw-parser-output .refbegin-columns li{page-break-inside:avoid;break-inside:avoid-column}
Slater, Robert (1987). Portraits in Silicon. MIT Press. ISBNÂ 0-262-19262-4.
Shasha, Dennis; Lazere, Cathy (1995). Out of Their Minds: The Lives and Discoveries of 15 Great Computer Scientists. Copernicus. ISBNÂ 0-387-97992-1.

External links[edit]
Overview of topics (Knuth's personal homepage)
Oral history interview with Donald E. Knuth at Charles Babbage Institute, University of Minnesota, Minneapolis. Knuth discusses software patenting, structured programming, collaboration and his development of TeX. The oral history discusses the writing of The Art of Computer Programming.
"Robert W Floyd, In Memoriam", by Donald E. Knuth - (on the influence of Bob Floyd)
TAoCP and its Influence of Computer Science (Softpanorama)
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteDonald KnuthPublications
The Art of Computer Programming
"The Complexity of Songs"
Computers and Typesetting
Concrete Mathematics
Surreal Numbers
Things a Computer Scientist Rarely Talks About
Selected papers series
Software
TeX
Metafont
MIXAL (MIX
MMIX
GNU MDK)
Fonts
AMS Euler
Computer Modern
Concrete Roman
Literate programming
WEB
CWEB
Algorithms
Knuth's Algorithm X
KnuthâBendix completion algorithm
KnuthâMorrisâPratt algorithm
Knuth shuffle
RobinsonâSchenstedâKnuth correspondence
Trabb PardoâKnuth algorithm
Generalization of Dijkstra's algorithm
Knuth's Simpath algorithm
Other
Dancing Links
Knuth reward check
Knuth Prize
Man or boy test
Quater-imaginary base
-yllion
Potrzebie system of weights and measures





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=The_Art_of_Computer_Programming&oldid=1068750521"
		Categories: 1968 non-fiction booksComputer programming booksComputer science booksMonographsBooks by Donald KnuthAnalysis of algorithmsComputer arithmetic algorithmsAmerican non-fiction books1969 non-fiction books1973 non-fiction books1981 non-fiction books2011 non-fiction booksAddison-Wesley booksHidden categories: Articles with short descriptionShort description is different from WikidataAll articles with failed verificationArticles with failed verification from January 2022
	
