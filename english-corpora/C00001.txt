
Title:
JavaScript
Text:

		From Wikipedia, the free encyclopedia
		
This is the latest accepted revision, reviewed on 2 February 2022.



		
		
		
		Jump to navigation
		Jump to search
		.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}Not to be confused with Java (programming language) or Javanese script.
".js" redirects here. For the Microsoft dialect used in Internet Explorer, see JScript.
For the uses of JavaScript on Wikipedia, see Wikipedia:JavaScript.


High-level programming language
.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}JavaScriptParadigmMulti-paradigm: event-driven, functional, imperative, object-oriented programmingDesignedÂ byBrendan Eich of Netscape initially; others have also contributed to the ECMAScript standardFirstÂ appearedDecemberÂ 4, 1995; 26 years agoÂ (1995-12-04)[1]Stable releaseECMAScript 2021[2]Â 
   / June 2021; 8 months agoÂ (June 2021)Preview releaseECMAScript 2022[3]Â 
   / 22 July 2021; 6 months agoÂ (22 July 2021)
Typing disciplineDynamic, weak, duckFilename extensions
.js
.cjs
.mjs[4]
Websitewww.ecma-international.org/publications-and-standards/standards/ecma-262/Major implementationsV8, JavaScriptCore, SpiderMonkey, ChakraInfluenced byJava,[5][6] Scheme,[6] Self,[7] AWK,[8] HyperTalk[9]InfluencedActionScript, AssemblyScript, CoffeeScript, Dart, Haxe, JS++, Objective-J, Opa, TypeScript
 JavaScript at Wikibooks

JavaScript (/ËdÊÉËvÉskrÉªpt/),[10] often abbreviated JS, is a programming language that is one of the core technologies of the World Wide Web, alongside HTML and CSS.[11] Over 97% of websites use JavaScript on the client side for web page behavior,[12] often incorporating third-party libraries.[13] All major web browsers have a dedicated JavaScript engine to execute the code on users' devices.
JavaScript is a high-level, often just-in-time compiled language that conforms to the ECMAScript standard.[14] It has dynamic typing, prototype-based object-orientation, and first-class functions. It is multi-paradigm, supporting event-driven, functional, and imperative programming styles. It has application programming interfaces (APIs) for working with text, dates, regular expressions, standard data structures, and the Document Object Model (DOM).
The ECMAScript standard does not include any input/output (I/O), such as networking, storage, or graphics facilities. In practice, the web browser or other runtime system provides JavaScript APIs for I/O.
JavaScript engines were originally used only in web browsers, but are now core components of some servers and a variety of applications. The most popular runtime system for this usage is Node.js.
Although Java and JavaScript are similar in name, syntax, and respective standard libraries, the two languages are distinct and differ greatly in design.

Contents

1 History

1.1 Creation at Netscape
1.2 Adoption by Microsoft
1.3 The rise of JScript
1.4 Growth and standardization
1.5 Reaching maturity


2 Trademark
3 Website client-side usage

3.1 Examples of scripted behavior
3.2 Libraries and frameworks


4 Other usage
5 Features

5.1 Imperative and structured
5.2 Weakly typed
5.3 Dynamic
5.4 Object-orientation (prototype-based)
5.5 Functional
5.6 Delegative
5.7 Miscellaneous
5.8 Vendor-specific extensions


6 Syntax

6.1 Simple examples
6.2 More advanced example


7 Security

7.1 Cross-site vulnerabilities
7.2 Misplaced trust in the client
7.3 Misplaced trust in developers
7.4 Browser and plugin coding errors
7.5 Sandbox implementation errors
7.6 Hardware vulnerabilities


8 Development tools
9 Related technologies

9.1 Java
9.2 JSON
9.3 WebAssembly
9.4 Transpilers


10 References
11 Further reading
12 External links



History[edit]
Creation at Netscape[edit]
The first web browser with a graphical user interface, Mosaic, was released in 1993. Accessible to non-technical people, it played a prominent role in the rapid growth of the nascent World Wide Web.[15] The lead developers of Mosaic then founded the Netscape corporation, which released a more polished browser, Netscape Navigator, in 1994. This quickly became the most-used.[16][17]
During these formative years of the Web, web pages could only be static, lacking the capability for dynamic behavior after the page was loaded in the browser. There was a desire in the burgeoning web development scene to remove this limitation, so in 1995, Netscape decided to add a scripting language to Navigator. They pursued two routes to achieve this: collaborating with Sun Microsystems to embed the Java programming language, while also hiring Brendan Eich to embed the Scheme language.[6]
Netscape management soon decided that the best option was for Eich to devise a new language, with syntax similar to Java and less like Scheme or other extant scripting languages.[5][6] Although the new language and its interpreter implementation were called LiveScript when first shipped as part of a Navigator beta in September 1995, the name was changed to JavaScript for the official release in December.[6][1][18]
The choice of the JavaScript name has caused confusion, implying that it is directly related to Java. At the time, the dot-com boom had begun and Java was the hot new language, so Eich considered the JavaScript name a marketing ploy by Netscape.[19]

Adoption by Microsoft[edit]
Microsoft debuted Internet Explorer in 1995, leading to a browser war with Netscape. On the JavaScript front, Microsoft reverse-engineered the Navigator interpreter to create its own, called JScript.[20]
JScript was first released in 1996, alongside initial support for CSS and extensions to HTML. Each of these implementations was noticeably different from their counterparts in Navigator.[21][22] These differences made it difficult for developers to make their websites work well in both browsers, leading to widespread use of "best viewed in Netscape" and "best viewed in Internet Explorer" logos for several years.[21][23]

The rise of JScript[edit]
In November 1996, Netscape submitted JavaScript to Ecma International, as the starting point for a standard specification that all browser vendors could conform to. This led to the official release of the first ECMAScript language specification in June 1997.
The standards process continued for a few years, with the release of ECMAScript 2 in June 1998 and ECMAScript 3 in December 1999. Work on ECMAScript 4 began in 2000.[20]
Meanwhile, Microsoft gained an increasingly dominant position in the browser market. By the early 2000s, Internet Explorer's market share reached 95%.[24] This meant that JScript became the de facto standard for client-side scripting on the Web.
Microsoft initially participated in the standards process and implemented some proposals in its JScript language, but eventually it stopped collaborating on Ecma work. Thus ECMAScript 4 was mothballed.

Growth and standardization[edit]
During the period of Internet Explorer dominance in the early 2000s, client-side scripting was stagnant. This started to change in 2004, when the successor of Netscape, Mozilla, released the Firefox browser. Firefox was well received by many, taking significant market share from Internet Explorer.[25]
In 2005, Mozilla joined ECMA International, and work started on the ECMAScript for XML (E4X) standard. This led to Mozilla working jointly with Macromedia (later acquired by Adobe Systems), who were implementing E4X in their ActionScript 3 language, which was based on an ECMAScript 4 draft. The goal became standardizing ActionScript 3 as the new ECMAScript 4. To this end, Adobe Systems released the Tamarin implementation as an open source project. However, Tamarin and ActionScript 3 were too different from established client-side scripting, and without cooperation from Microsoft, ECMAScript 4 never reached fruition.
Meanwhile, very important developments were occurring in open-source communities not affiliated with ECMA work. In 2005, Jesse James Garrett released a white paper in which he coined the term Ajax and described a set of technologies, of which JavaScript was the backbone, to create web applications where data can be loaded in the background, avoiding the need for full page reloads. This sparked a renaissance period of JavaScript, spearheaded by open-source libraries and the communities that formed around them. Many new libraries were created, including jQuery, Prototype, Dojo Toolkit, and MooTools.
Google debuted its Chrome browser in 2008, with the V8 JavaScript engine that was faster than its competition.[26][27] The key innovation was just-in-time compilation (JIT),[28] so other browser vendors needed to overhaul their engines for JIT.[29]
In July 2008, these disparate parties came together for a conference in Oslo. This led to the eventual agreement in early 2009 to combine all relevant work and drive the language forward. The result was the ECMAScript 5 standard, released in December 2009.

Reaching maturity[edit]
Ambitious work on the language continued for several years, culminating in an extensive collection of additions and refinements being formalized with the publication of ECMAScript 6 in 2015.[30]
The creation of Node.js in 2009 by Ryan Dahl sparked a significant increase in the usage of JavaScript outside of web browsers. Node combines the V8 engine, an event loop, and I/O APIs, thereby providing a stand-alone JavaScript runtime system.[31][32] As of 2018, Node had been used by millions of developers,[33] and npm had the most modules of any package manager in the world.[34]
The ECMAScript draft specification is currently maintained openly on GitHub, and editions are produced via regular annual snapshots.[35] Potential revisions to the language are vetted through a comprehensive proposal process.[36][37] Now, instead of edition numbers, developers check the status of upcoming features individually.[35]
The current JavaScript ecosystem has many libraries and frameworks, established programming practices, and substantial usage of JavaScript outside of web browsers. Plus, with the rise of single-page applications and other JavaScript-heavy websites, several transpilers have been created to aid the development process.[38]

Trademark[edit]
"JavaScript" is a trademark of Oracle Corporation in the United States.[39][40]

Website client-side usage[edit]
JavaScript is the dominant client-side scripting language of the Web, with 97% of websites using it for this purpose.[12] Scripts are embedded in or included from HTML documents and interact with the DOM. All major web browsers have a built-in JavaScript engine that executes the code on the user's device.

Examples of scripted behavior[edit]
Loading new web page content without reloading the page, via Ajax or a WebSocket. For example, users of social media can send and receive messages without leaving the current page.
Web page animations, such as fading objects in and out, resizing, and moving them.
Playing browser games.
Controlling the playback of streaming media.
Generating pop-up ads.
Validating input values of a web form before the data is sent to a web server.
Logging data about the user's behavior then sending it to a server. The website owner can use this data for analytics, ad tracking, and personalization.
Redirecting a user to another page.
Libraries and frameworks[edit]
Over 80% of websites use a third-party JavaScript library or web framework for their client-side scripting.[13]
jQuery is by far the most popular library, used by over 75% of websites.[13] Facebook created the React library for its website and later released it as open source; other sites, including Twitter, now use it. Likewise, the Angular framework created by Google for its websites, including YouTube and Gmail, is now an open source project used by others.[13]
In contrast, the term "Vanilla JS" has been coined for websites not using any libraries or frameworks, instead relying entirely on standard JavaScript functionality.[41]

Other usage[edit]
The use of JavaScript has expanded beyond its web browser roots. JavaScript engines are now embedded in a variety of other software systems, both for server-side website deployments and non-browser applications.
Initial attempts at promoting server-side JavaScript usage were Netscape Enterprise Server and Microsoft's Internet Information Services,[42][43] but they were small niches.[44] Server-side usage eventually started to grow in the late 2000s, with the creation of Node.js and other approaches.[44]
Electron, Cordova, React Native, and other application frameworks have been used to create many applications with behavior implemented in JavaScript. Other non-browser applications include Adobe Acrobat support for scripting PDF documents[45] and GNOME Shell extensions written in JavaScript.[46]
JavaScript has recently begun to appear in some embedded systems, usually by leveraging Node.js.[47][48][49]

Features[edit]
The following features are common to all conforming ECMAScript implementations unless explicitly specified otherwise.

Imperative and structured[edit]
JavaScript supports much of the structured programming syntax from C (e.g., if statements, while loops, switch statements, do while loops, etc.). One partial exception is scoping: originally JavaScript only had function scoping with var; then block scoping was added in ECMAScript 2015 with the keywords let and const. Like C, JavaScript makes a distinction between expressions and statements. One syntactic difference from C is automatic semicolon insertion, which allow semicolons (which terminate statements) to be omitted.[50]

Weakly typed[edit]
JavaScript is weakly typed, which means certain types are implicitly cast depending on the operation used.[51]

The binary + operator casts both operands to a string unless both operands are numbers. This is because the addition operator doubles as a concatenation operator
The binary - operator always casts both operands to a number
Both unary operators (+, -) always cast the operand to a number
Values are cast to strings like the following:[51]

Strings are left as-is
Numbers are converted to their string representation
Arrays have their elements cast to strings after which they are joined by commas (,)
Other objects are converted to the string [object Object] where Object is the name of the constructor of the object
Values are cast to numbers by casting to strings and then casting the strings to numbers. These processes can be modified by defining toString and valueOf functions on the prototype for string and number casting respectively.
JavaScript has received criticism for the way it implements these conversions as the complexity of the rules can be mistaken for inconsistency.[52][51] For example, when adding a number to a string, the number will be cast to a string before performing concatenation, but when subtracting a number from a string, the string is cast to a number before performing subtraction.


JavaScript type conversions


left operand

operator

right operand

result


[] (empty array)

+

[] (empty array)

"" (empty string)


[] (empty array)

+

{} (empty object)

"[object Object]" (string)


false (boolean)

+

[] (empty array)

"false" (string)


"123"(string)

+

1 (number)

"1231" (string)


"123" (string)

-

1 (number)

122 (number)


"123" (string)

-

"abc" (string)

NaN (number)

Often also mentioned is {} + [] resulting in 0 (number). This is misleading: the {} is interpreted as an empty code block instead of an empty object, and the empty array is cast to a number by the remaining unary + operator. If you wrap the expression in parentheses ({} + []) the curly brackets are interpreted as an empty object and the result of the expression is "[object Object]" as expected.[51]

Dynamic[edit]
Typing
JavaScript is dynamically typed like most other scripting languages. A type is associated with a value rather than an expression. For example, a variable initially bound to a number may be reassigned to a string.[53]  JavaScript supports various ways to test the type of objects, including duck typing.[54]
Run-time evaluation
JavaScript includes an eval function that can execute statements provided as strings at run-time.
Object-orientation (prototype-based)[edit]
Prototypal inheritance in JavaScript is described by Douglas Crockford as:

.mw-parser-output .templatequote{overflow:hidden;margin:1em 0;padding:0 40px}.mw-parser-output .templatequote .templatequotecite{line-height:1.5em;text-align:left;padding-left:1.6em;margin-top:0}You make prototype objects, and then ... make new instances. Objects are mutable in JavaScript, so we can augment the new instances, giving them new fields and methods. These can then act as prototypes for even newer objects. We don't need classes to make lots of similar objects... Objects inherit from objects. What could be more object oriented than that?[55]

In JavaScript, an object is an associative array, augmented with a prototype (see below); each key provides the name for an object property, and there are two syntactical ways to specify such a name: dot notation (obj.xÂ =Â 10) and bracket notation (obj['x']Â =Â 10). A property may be added, rebound, or deleted at run-time. Most properties of an object (and any property that belongs to an object's prototype inheritance chain) can be enumerated using a for...in loop.

Prototypes
JavaScript uses prototypes where many other object-oriented languages use classes for inheritance.[56] It is possible to simulate many class-based features with prototypes in JavaScript.[57]
Functions as object constructors
Functions double as object constructors, along with their typical role. Prefixing a function call with new will create an instance of a prototype, inheriting properties and methods from the constructor (including properties from the Object prototype).[58] ECMAScript 5 offers the Object.create method, allowing explicit creation of an instance without automatically inheriting from the Object prototype (older environments can assign the prototype to null).[59] The constructor's prototype property determines the object used for the new object's internal prototype. New methods can be added by modifying the prototype of the function used as a constructor. JavaScript's built-in constructors, such as Array or Object, also have prototypes that can be modified. While it is possible to modify the Object prototype, it is generally considered bad practice because most objects in JavaScript will inherit methods and properties from the Object prototype, and they may not expect the prototype to be modified.[60]
Functions as methods
Unlike many object-oriented languages, there is no distinction between a function definition and a method definition. Rather, the distinction occurs during function calling; when a function is called as a method of an object, the function's local this keyword is bound to that object for that invocation.
Functional[edit]
A function is first-class; a function is considered to be an object.[61] As such, a function may have properties and methods, such as .call() and .bind().[62] A nested function is a function defined within another function. It is created each time the outer function is invoked. In addition, each nested function forms a lexical closure: the lexical scope of the outer function (including any constant, local variable, or argument value) becomes part of the internal state of each inner function object, even after execution of the outer function concludes.[63] JavaScript also supports anonymous functions.

Delegative[edit]
JavaScript supports implicit and explicit delegation.

Functions as roles (Traits and Mixins)
JavaScript natively supports various function-based implementations of Role[64] patterns like Traits[65][66] and Mixins.[67] Such a function defines additional behavior by at least one method bound to the this keyword within its function body. A Role then has to be delegated explicitly via call or apply to objects that need to feature additional behavior that is not shared via the prototype chain.
Object composition and inheritance
Whereas explicit function-based delegation does cover composition in JavaScript, implicit delegation already happens every time the prototype chain is walked in order to, e.g., find a method that might be related to but is not directly owned by an object. Once the method is found it gets called within this object's context. Thus inheritance in JavaScript is covered by a delegation automatism that is bound to the prototype property of constructor functions.
Miscellaneous[edit]
JS is a zero-index language.

Run-time environment
JavaScript typically relies on a run-time environment (e.g., a web browser) to provide objects and methods by which scripts can interact with the environment (e.g., a web page DOM). These environments are single-threaded. JavaScript also relies on the run-time environment to provide the ability to include/import scripts (e.g., HTML <script> elements). This is not a language feature per se, but it is common in most JavaScript implementations. JavaScript processes messages from a queue one at a time. JavaScript calls a function associated with each new message, creating a call stack frame with the function's arguments and local variables. The call stack shrinks and grows based on the function's needs. When the call stack is empty upon function completion, JavaScript proceeds to the next message in the queue. This is called the event loop, described as "run to completion" because each message is fully processed before the next message is considered. However, the language's concurrency model describes the event loop as non-blocking: program input/output is performed using events and callback functions. This means, for instance, that JavaScript can process a mouse click while waiting for a database query to return information.[68]
Variadic functions
An indefinite number of parameters can be passed to a function. The function can access them through formal parameters and also through the local arguments object. Variadic functions can also be created by using the bind method.
Array and object literals
Like many scripting languages, arrays and objects (associative arrays in other languages) can each be created with a succinct shortcut syntax. In fact, these literals form the basis of the JSON data format.
Regular expressions
JavaScript also supports regular expressions in a manner similar to Perl, which provide a concise and powerful syntax for text manipulation that is more sophisticated than the built-in string functions.[69]
Promises and Async/await
JavaScript supports promises and Async/await for handling asynchronous operations. A built-in Promise object provides functionality for handling promises and associating handlers with an asynchronous action's eventual result. Recently, combinator methods were introduced in the JavaScript specification, which allows developers to combine multiple JavaScript promises and do operations based on different scenarios. The methods introduced are: Promise.race, Promise.all, Promise.allSettled and Promise.any. Async/await allows an asynchronous, non-blocking function to be structured in a way similar to an ordinary synchronous function. Asynchronous, non-blocking code can be written, with minimal overhead, structured similar to traditional synchronous, blocking code.
Vendor-specific extensions[edit]
Historically, some JavaScript engines supported these non-standard features:

conditional catch clauses (like Java)
array comprehensions and generator expressions (like Python)
concise function expressions (function(args) expr; this experimental syntax predated arrow functions)
ECMAScript for XML (E4X), an extension that adds native XML support to ECMAScript (unsupported in Firefox since version 21[70])
Syntax[edit]
Main article: JavaScript syntax
Simple examples[edit]
Variables in JavaScript can be defined using either the var,[71] let[72] or const[73] keywords.

// Declares a function-scoped variable named `x`, and implicitly assigns the
// special value `undefined` to it. Variables without value are automatically
// set to undefined.
var x;

// Variables can be manually set to `undefined` like so
var x2 = undefined;

// Declares a block-scoped variable named `y`, and implicitly sets it to
// `undefined`. The `let` keyword was introduced in ECMAScript 2015.
let y;

// Declares a block-scoped, un-reassignable variable named `z`, and sets it to
// a string literal. The `const` keyword was also introduced in ECMAScript 2015,
// and must be explicitly assigned to.

// The keyword `const` means constant, hence the variable cannot be reassigned
// as the value is `constant`.
const z = "this value cannot be reassigned!";

// Declares a variable named `myNumber`, and assigns a number literal (the value
// `2`) to it.
let myNumber = 2;

// Reassigns `myNumber`, setting it to a string literal (the value `"foo"`).
// JavaScript is a dynamically-typed language, so this is legal.
myNumber = "foo";

Note the comments in the example above, all of which were preceded with two forward slashes.
There is no built-in Input/output functionality in JavaScript; the run-time environment provides that. The ECMAScript specification in edition 5.1 mentions:[74]

indeed, there are no provisions in this specification for input of external data or output of computed results.
However, most runtime environments have a console object[75] that can be used to print output. Here is a minimalist Hello World program in JavaScript:

console.log("Hello World!");

A simple recursive function:

function factorial(n) {
    if (n === 0)
        return 1; // 0! = 1

    return n * factorial(n - 1);
}

factorial(3); // returns 6

An anonymous function (or lambda):

function counter() {
    let count = 0;

    return function() {
        return ++count;
    };
}

let x = counter();
x(); // returns 1
x(); // returns 2
x(); // returns 3

This example shows that, in JavaScript, function closures capture their non-local variables by reference.
Arrow functions were first introduced in 6th Edition - ECMAScript 2015. They shorten the syntax for writing functions in JavaScript. Arrow functions are anonymous, so a variable is needed to refer to them in order to invoke them after their creation.
Example of arrow function:

// Arrow functions let us omit the `function` keyword.
// Here `long_example` points to an anonymous function value.
const long_example = (input1, input2) => {
    console.log("Hello, World!");
    const output = input1 + input2;

    return output;
};

// If there are no braces, the arrow function simply returns the expression
// So here it's (input1 + input2)
const short_example = (input1, input2) => input1 + input2;

long_example(2, 3); // Prints "Hello, World!" and returns 5
short_example(2, 5);  // Returns 7

// If an arrow function only has one parameter, the parentheses can be removed.
const no_parentheses = input => input + 2;

no_parentheses(3); // Returns 5

In JavaScript, objects are created in the same way as functions; this is known as a function object.
Object example:

function Ball(r) {
    this.radius = r; // the "r" argument is local to the ball object
    this.area = Math.PI * (r ** 2); // parentheses don't do anything but clarify

    // objects can contain functions ("method")
    this.show = function() {
        drawCircle(this.radius); // references another function (that draws a circle)
    };
}

let myBall = new Ball(5); // creates a new instance of the ball object with radius 5
myBall.radius++; // object properties can usually be modified from the outside
myBall.show(); // using the inherited "show" function

Variadic function demonstration (arguments is a special variable):[76]

function sum() {
    let x = 0;

    for (let i = 0; i < arguments.length; ++i)
        x += arguments[i];

    return x;
}

sum(1, 2); // returns 3
sum(1, 2, 3); // returns 6

Immediately-invoked function expressions are often used to create closures. Closures allow gathering properties and methods in a namespace and making some of them private:

let counter = (function() {
    let i = 0; // private property

    return {   // public methods
        get: function() {
            alert(i);
        },
        set: function(value) {
            i = value;
        },
        increment: function() {
            alert(++i);
        }
    };
})(); // module

counter.get();      // shows 0
counter.set(6);
counter.increment(); // shows 7
counter.increment(); // shows 8

Exporting and Importing modules in JavaScript[77]
Export example:

/* mymodule.js */
// This function remains private, as it is not exported
let sum = (a, b) => {
    return a + b;
}

// Export variables
export let name = 'Alice';
export let age = 23;

// Export named functions
export function add(num1, num2) {
    return num1 + num2;
}

// Export class
export class Multiplication {
    constructor(num1, num2) {
        this.num1 = num1;
        this.num2 = num2;
    }

    add() {
        return sum(this.num1, this.num2);
    }
}

Import example:

// Import one property
import { add } from './mymodule.js';

console.log(add(1, 2)); // 3

// Import multiple properties
import { name, age } from './mymodule.js';
console.log(name, age);
//> "Alice", 23

// Import all properties from a module
import * from './module.js'
console.log(name, age);
//> "Alice", 23
console.log(add(1,2));
//> 3

More advanced example[edit]
This sample code displays various JavaScript features.

/* Finds the lowest common multiple (LCM) of two numbers */
function LCMCalculator(x, y) { // constructor function
    const checkInt = function(x) { // inner function
        if (x % 1 !== 0)
            throw new TypeError(x + "is not an integer"); // var a =  mouseX

        return x;
    };

    this.a = checkInt(x)
    //   semicolons   ^^^^  are optional, a newline is enough
    this.b = checkInt(y);
}
// The prototype of object instances created by a constructor is
// that constructor's "prototype" property.
LCMCalculator.prototype = { // object literal
    constructor: LCMCalculator, // when reassigning a prototype, set the constructor property appropriately
    gcd: function() { // method that calculates the greatest common divisor
        // Euclidean algorithm:
        let a = Math.abs(this.a), b = Math.abs(this.b), t;

        if (a < b) {
            // swap variables
            // t = b; b = a; a = t;
            [a, b] = [b, a]; // swap using destructuring assignment (ES6)
        }

        while (b !== 0) {
            t = b;
            b = a % b;
            a = t;
        }

        // Only need to calculate GCD once, so "redefine" this method.
        // (Actually not redefinitionâit's defined on the instance itself,
        // so that this.gcd refers to this "redefinition" instead of LCMCalculator.prototype.gcd.
        // Note that this leads to a wrong result if the LCMCalculator object members "a" and/or "b" are altered afterwards.)
        // Also, 'gcd' === "gcd", this['gcd'] === this.gcd
        this['gcd'] = function() {
            return a;
        };

        return a;
    },

    // Object property names can be specified by strings delimited by double (") or single (') quotes.
    "lcm": function() {
        // Variable names do not collide with object properties, e.g., |lcm| is not |this.lcm|.
        // not using |this.a*this.b| to avoid FP precision issues
        let lcm = this.a / this.gcd() * this.b;

        // Only need to calculate lcm once, so "redefine" this method.
        this.lcm = function() {
            return lcm;
        };

        return lcm;
    },

    // Methods can also be declared using es6 syntax
    toString() {
        // Using both es6 template literals and the (+) operator to concatenate values
        return `LCMCalculator: a = ${this.a}, b = ` + this.b;
    }
};

// Define generic output function; this implementation only works for Web browsers
function output(x) {
    document.body.appendChild(document.createTextNode(x));
    document.body.appendChild(document.createElement('br'));
}

// Note: Array's map() and forEach() are defined in JavaScript 1.6.
// They are used here to demonstrate JavaScript's inherent functional nature.
[
    [25, 55],
    [21, 56],
    [22, 58],
    [28, 56]
].map(function(pair) { // array literal + mapping function
    return new LCMCalculator(pair[0], pair[1]);
}).sort((a, b) => a.lcm() - b.lcm()) // sort with this comparative function; => is a shorthand form of a function, called "arrow function"
    .forEach(printResult);

function printResult(obj) {
    output(obj + ", gcd = " + obj.gcd() + ", lcm = " + obj.lcm());
}

The following output should be displayed in the browser window.

LCMCalculator: a = 28, b = 56, gcd = 28, lcm = 56
LCMCalculator: a = 21, b = 56, gcd = 7, lcm = 168
LCMCalculator: a = 25, b = 55, gcd = 5, lcm = 275
LCMCalculator: a = 22, b = 58, gcd = 2, lcm = 638

Security[edit]
See also: Browser security
JavaScript and the DOM provide the potential for malicious authors to deliver scripts to run on a client computer via the Web. Browser authors minimize this risk using two restrictions. First, scripts run in a sandbox in which they can only perform Web-related actions, not general-purpose programming tasks like creating files. Second, scripts are constrained by the same-origin policy: scripts from one Web site do not have access to information such as usernames, passwords, or cookies sent to another site. Most JavaScript-related security bugs are breaches of either the same origin policy or the sandbox.
There are subsets of general JavaScriptâADsafe, Secure ECMAScript (SES)âthat provide greater levels of security, especially on code created by third parties (such as advertisements).[78][79] Closure Toolkit is another project for safe embedding and isolation of third-party JavaScript and HTML.[80]
Content Security Policy is the main intended method of ensuring that only trusted code is executed on a Web page.

Cross-site vulnerabilities[edit]
Main articles: Cross-site scripting and Cross-site request forgery
A common JavaScript-related security problem is cross-site scripting (XSS), a violation of the same-origin policy. XSS vulnerabilities occur when an attacker can cause a target Web site, such as an online banking website, to include a malicious script in the webpage presented to a victim. The script in this example can then access the banking application with the privileges of the victim, potentially disclosing secret information or transferring money without the victim's authorization. A solution to XSS vulnerabilities is to use HTML escaping whenever displaying untrusted data.
Some browsers include partial protection against reflected XSS attacks, in which the attacker provides a URL including malicious script. However, even users of those browsers are vulnerable to other XSS attacks, such as those where the malicious code is stored in a database. Only correct design of Web applications on the server-side can fully prevent XSS.
XSS vulnerabilities can also occur because of implementation mistakes by browser authors.[81]
Another cross-site vulnerability is cross-site request forgery (CSRF). In CSRF, code on an attacker's site tricks the victim's browser into taking actions the user did not intend at a target site (like transferring money at a bank). When target sites rely solely on cookies for request authentication, requests originating from code on the attacker's site can carry the same valid login credentials of the initiating user. In general, the solution to CSRF is to require an authentication value in a hidden form field, and not only in the cookies, to authenticate any request that might have lasting effects. Checking the HTTP Referrer header can also help.
"JavaScript hijacking" is a type of CSRF attack in which a <script> tag on an attacker's site exploits a page on the victim's site that returns private information such as JSON or JavaScript. Possible solutions include:

requiring an authentication token in the POST and GET parameters for any response that returns private information.
Misplaced trust in the client[edit]
Developers of client-server applications must recognize that untrusted clients may be under the control of attackers. The application author cannot assume that their JavaScript code will run as intended (or at all) because any secret embedded in the code could be extracted by a determined adversary. Some implications are:

Web site authors cannot perfectly conceal how their JavaScript operates because the raw source code must be sent to the client. The code can be obfuscated, but obfuscation can be reverse-engineered.
JavaScript form validation only provides convenience for users, not security. If a site verifies that the user agreed to its terms of service, or filters invalid characters out of fields that should only contain numbers, it must do so on the server, not only the client.
Scripts can be selectively disabled, so JavaScript cannot be relied on to prevent operations such as right-clicking on an image to save it.[82]
It is considered very bad practice to embed sensitive information such as passwords in JavaScript because it can be extracted by an attacker.[83]
Misplaced trust in developers[edit]
Package management systems such as npm and Bower are popular with JavaScript developers. Such systems allow a developer to easily manage their program's dependencies upon other developers' program libraries. Developers trust that the maintainers of the libraries will keep them secure and up to date, but that is not always the case. A vulnerability has emerged because of this blind trust. Relied-upon libraries can have new releases that cause bugs or vulnerabilities to appear in all programs that rely upon the libraries. Inversely, a library can go unpatched with known vulnerabilities out in the wild. In a study done looking over a sample of 133k websites, researchers found 37% of the websites included a library with at least one known vulnerability.[84] "The median lag between the oldest library version used on each website and the newest available version of that library is 1,177 days in ALEXA, and development of some libraries still in active use ceased years ago."[84] Another possibility is that the maintainer of a library may remove the library entirely. This occurred in March 2016 when Azer KoÃ§ulu removed his repository from npm. This caused tens of thousands of programs and websites depending upon his libraries to break.[85][86]

Browser and plugin coding errors[edit]
JavaScript provides an interface to a wide range of browser capabilities, some of which may have flaws such as buffer overflows. These flaws can allow attackers to write scripts that would run any code they wish on the user's system. This code is not by any means limited to another JavaScript application. For example, a buffer overrun exploit can allow an attacker to gain access to the operating system's API with superuser privileges.
These flaws have affected major browsers including Firefox,[87] Internet Explorer,[88] and Safari.[89]
Plugins, such as video players, Adobe Flash, and the wide range of ActiveX controls enabled by default in Microsoft Internet Explorer, may also have flaws exploitable via JavaScript (such flaws have been exploited in the past).[90][91]
In Windows Vista, Microsoft has attempted to contain the risks of bugs such as buffer overflows by running the Internet Explorer process with limited privileges.[92] Google Chrome similarly confines its page renderers to their own "sandbox".

Sandbox implementation errors[edit]
Web browsers are capable of running JavaScript outside the sandbox, with the privileges necessary to, for example, create or delete files. Such privileges are not intended to be granted to code from the Web.
Incorrectly granting privileges to JavaScript from the Web has played a role in vulnerabilities in both Internet Explorer[93] and Firefox.[94] In Windows XP Service Pack 2, Microsoft demoted JScript's privileges in Internet Explorer.[95]
Microsoft Windows allows JavaScript source files on a computer's hard drive to be launched as general-purpose, non-sandboxed programs (see: Windows Script Host). This makes JavaScript (like VBScript) a theoretically viable vector for a Trojan horse, although JavaScript Trojan horses are uncommon in practice.[96][failed verification]

Hardware vulnerabilities[edit]
In 2015, a JavaScript-based proof-of-concept implementation of a rowhammer attack was described in a paper by security researchers.[97][98][99][100]
In 2017, a JavaScript-based attack via browser was demonstrated that could bypass ASLR. It's called "ASLRâCache" or AnC.[101][102]
In 2018, the paper that announced the Spectre attacks against Speculative Execution in Intel and other processors included a JavaScript implementation.[103]

Development tools[edit]
Important tools have evolved with the language.

Every major web browser has built-in web development tools, including a JavaScript debugger.
Static program analysis tools, such as ESLint and JSLint, scan JavaScript code for conformance to a set of standards and guidelines.
Some browsers have built-in profilers. Stand-alone profiling libraries have also been created, such as benchmark.js and jsbench.[104][105]
Many text editors have syntax highlighting support for JavaScript code.
Related technologies[edit]
Java[edit]
A common misconception is that JavaScript is the same as Java.  Both indeed have a C-like syntax (the C language being their most immediate common ancestor language). They are also typically sandboxed (when used inside a browser), and JavaScript was designed with Java's syntax and standard library in mind. In particular, all Java keywords were reserved in original JavaScript, JavaScript's standard library follows Java's naming conventions, and JavaScript's Math and Date objects are based on classes from Java 1.0.[106]
Java and JavaScript both first appeared in 1995, but Java was developed by James Gosling of Sun Microsystems and JavaScript by Brendan Eich of Netscape Communications.
The differences between the two languages are more prominent than their similarities. Java has static typing, while JavaScript's typing is dynamic. Java is loaded from compiled bytecode, while JavaScript is loaded as human-readable source code. Java's objects are class-based, while JavaScript's are prototype-based. Finally, Java did not support functional programming until Java 8, while JavaScript has done so from the beginning, being influenced by Scheme.

JSON[edit]
JSON, or JavaScript Object Notation, is a general-purpose data interchange format that is defined as a subset of JavaScript's object literal syntax.

WebAssembly[edit]
Since 2017, web browsers have supported WebAssembly, a binary format that enables a JavaScript engine to execute performance-critical portions of web page scripts close to native speed.[107] WebAssembly code runs in the same sandbox as regular JavaScript code.
asm.js is a subset of JavaScript that served as the forerunner of WebAssembly.[108]


Transpilers[edit]
JavaScript is the dominant client-side language of the Web, and many websites are script-heavy. Thus transpilers have been created to convert code written in other languages, which can aid the development process.[38]

References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ Jump up to: a b Press release announcing JavaScript, "Netscape and Sun announce JavaScript", PR Newswire, December 4, 1995

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}"ECMAScriptÂ® 2021 language specification". June 2021. Retrieved 27 July 2021.

^ https://tc39.es/ecma262/; retrieved: 27 July 2021; publication date: 22 July 2021.

^ "nodejs/node-eps". GitHub. Archived from the original on 2020-08-29. Retrieved 2018-07-05.

^ Jump up to: a b Seibel, Peter (September 16, 2009). Coders at Work: Reflections on the Craft of Programming. ISBNÂ 9781430219484. Archived from the original on December 24, 2020. Retrieved December 25, 2018. Eich: The immediate concern at Netscape was it must look like Java.

^ Jump up to: a b c d e "Chapter 4. How JavaScript Was Created". speakingjs.com. Archived from the original on 2020-02-27. Retrieved 2017-11-21.

^ "Popularity â Brendan Eich".

^ "Brendan Eich: An Introduction to JavaScript, JSConf 2010". YouTube. p.Â 22m. Archived from the original on August 29, 2020. Retrieved November 25, 2019. Eich: "function", eight letters, I was influenced by AWK.

^ Eich, Brendan (1998). "Foreword".  In Goodman, Danny (ed.). JavaScript Bible (3rdÂ ed.). John Wiley & Sons. ISBNÂ 0-7645-3188-3. LCCNÂ 97078208. OCLCÂ 38888873. OLÂ 712205M.

^ "JavaScript". Dictionary.com. Archived from the original on August 9, 2021. Retrieved August 9, 2021.

^ Flanagan, David. JavaScriptÂ â The definitive guide (6Â ed.). p.Â 1. JavaScript is part of the triad of technologies that all Web developers must learn: HTML to specify the content of web pages, CSS to specify the presentation of web pages and JavaScript to specify the behaviour of web pages.

^ Jump up to: a b "Usage statistics of JavaScript as client-side programming language on websites". w3techs.com. Archived from the original on 2021-08-13. Retrieved 2021-04-09.

^ Jump up to: a b c d "Usage statistics of JavaScript libraries for websites". w3techs.com. Archived from the original on 2018-09-23. Retrieved 2021-04-09.

^ "ECMAScriptÂ® 2020 Language Specification". Archived from the original on 2020-05-08. Retrieved 2020-05-08.

^ "Bloomberg Game Changers: Marc Andreessen". Bloomberg. March 17, 2011. Archived from the original on May 16, 2012. Retrieved December 7, 2011.

^ Enzer, Larry (August 31, 2018). "The Evolution of the Web Browsers". Monmouth Web Developers. Archived from the original on August 31, 2018. Retrieved August 31, 2018.

^ Dickerson, Gordon (August 31, 2018). "Learn the History of Web Browsers". washingtonindependent.com. Retrieved August 31, 2018.

^ "TechVision: Innovators of the Net: Brendan Eich and JavaScript". Archived from the original on February 8, 2008.

^ Fin JS (June 17, 2016), Brendan EichÂ â CEO of Brave, archived from the original on February 10, 2019, retrieved February 7, 2018

^ Jump up to: a b "Chapter 5. Standardization: ECMAScript". speakingjs.com. Retrieved 1 November 2021.

^ Jump up to: a b Champeon, Steve (April 6, 2001). "JavaScript, How Did We Get Here?". oreilly.com. Archived from the original on July 19, 2016. Retrieved July 16, 2016.

^ "Microsoft Internet Explorer 3.0 Beta Now Available". microsoft.com. Microsoft. May 29, 1996. Archived from the original on November 24, 2020. Retrieved July 16, 2016.

^ McCracken, Harry (September 16, 2010). "The Unwelcome Return of "Best Viewed with Internet Explorer"". technologizer.com. Archived from the original on June 23, 2018. Retrieved July 16, 2016.

^ Baker, Loren (November 24, 2004). "Mozilla Firefox Internet Browser Market Share Gains to 7.4%". Search Engine Journal. Archived from the original on May 7, 2021. Retrieved May 8, 2021.

^ Weber, Tim (May 9, 2005). "The assault on software giant Microsoft". BBC News. Archived from the original on September 25, 2017.

^ "Big browser comparison test: Internet Explorer vs. Firefox, Opera, Safari and Chrome". PC Games Hardware. Computec Media AG. 3 July 2009. Archived from the original on May 1, 2012. Retrieved June 28, 2010.

^ Purdy, Kevin (June 11, 2009). "Lifehacker Speed Tests: Safari 4, Chrome 2". Lifehacker. Archived from the original on April 14, 2021. Retrieved May 8, 2021.

^ "TraceMonkey: JavaScript Lightspeed, Brendan Eich's Blog". Archived from the original on December 4, 2015. Retrieved July 22, 2020.

^ "Mozilla asks, 'Are we fast yet?'". Wired. Archived from the original on June 22, 2018. Retrieved January 18, 2019.

^ "ECMAScript 6: New Features: Overview and Comparison". es6-features.org. Archived from the original on March 18, 2018. Retrieved March 19, 2018.

^ Professional Node.js: Building JavaScript Based Scalable Software Archived 2017-03-24 at the Wayback Machine, John Wiley & Sons, 01-Oct-2012

^ Sams Teach Yourself Node.js in 24 Hours Archived 2017-03-23 at the Wayback Machine, Sams Publishing, 05-Sep-2012

^ Lawton, George (19 July 2018). "The secret history behind the success of npm and Node". TheServerSide. Archived from the original on 2 August 2021. Retrieved 2 August 2021.

^ Brown, Paul (13 January 2017). "State of the Union: npm". Linux.com. Archived from the original on 2 August 2021. Retrieved 2 August 2021.

^ Jump up to: a b Branscombe, Mary (2016-05-04). "JavaScript Standard Moves to Yearly Release Schedule; Here is What's New for ES16". The New Stack. Archived from the original on 2021-01-16. Retrieved 2021-01-15.

^ "The TC39 Process". tc39.es. Ecma International. Archived from the original on 2021-02-07. Retrieved 2021-01-15.

^ "ECMAScript proposals". TC39. Archived from the original on 2020-12-04. Retrieved 2021-01-15.

^ Jump up to: a b Ashkenas, Jeremy. "List of languages that compile to JS". GitHub. Archived from the original on January 31, 2020. Retrieved February 6, 2020.

^ "U.S. Trademark Serial No. 75026640". United States Patent and Trademark Office. Archived from the original on 2021-07-13. Retrieved 2021-05-08.

^ "Legal Notices". Oracle Corporation. Archived from the original on 2021-06-05. Retrieved 2021-05-08.

^ "Vanilla JS". vanilla-js.com. Archived from the original on June 16, 2020. Retrieved June 17, 2020.

^ "Server-Side JavaScript Guide". Oracle Corporation. December 11, 1998. Archived from the original on March 11, 2021. Retrieved May 8, 2021.

^ Clinick, Andrew (July 14, 2000). "Introducing JScript .NET". Microsoft Developer Network. Microsoft. Archived from the original on November 10, 2017. Retrieved April 10, 2018. [S]ince the 1996 introduction of JScript version 1.0 ... we've been seeing a steady increase in the usage of JScript on the serverâparticularly in Active Server Pages (ASP)

^ Jump up to: a b Mahemoff, Michael (December 17, 2009). "Server-Side JavaScript, Back with a Vengeance". readwrite.com. Archived from the original on June 17, 2016. Retrieved July 16, 2016.

^ "JavaScript for Acrobat". Archived from the original on August 7, 2009. Retrieved August 18, 2009.

^ "Answering the question: "How do I develop an app for GNOME?"". Archived from the original on 2013-02-11. Retrieved 2013-02-07.

^ "Tessel 2... Leverage all the libraries of Node.JS to create useful devices in minutes with Tessel". Archived from the original on 2021-05-26. Retrieved 2021-05-08.

^ "Node.js Raspberry Pi GPIO Introduction". Archived from the original on 2021-08-13. Retrieved 2020-05-03.

^ "EspruinoÂ â JavaScript for Microcontrollers". Archived from the original on 2020-05-01. Retrieved 2020-05-03.

^ Flanagan, David (August 17, 2006). JavaScript: The Definitive Guide: The Definitive Guide. "O'Reilly Media, Inc.". p.Â 16. ISBNÂ 978-0-596-55447-7. Archived from the original on August 1, 2020. Retrieved March 29, 2019.

^ Jump up to: a b c d "JavaScript quirks in one image from the Internet". The DEV Community. Archived from the original on October 28, 2019. Retrieved October 28, 2019.

^ "Wat". www.destroyallsoftware.com. Archived from the original on October 28, 2019. Retrieved October 28, 2019.

^ "JavaScript data types and data structuresÂ â JavaScript | MDN". Developer.mozilla.org. February 16, 2017. Archived from the original on March 14, 2017. Retrieved February 24, 2017.

^ Flanagan 2006, pp.Â 176â178.

^ Crockford, Douglas. "Prototypal Inheritance in JavaScript". Archived from the original on 13 August 2013. Retrieved 20 August 2013.

^ "Inheritance and the prototype chain". Mozilla Developer Network. Mozilla. Archived from the original on April 25, 2013. Retrieved April 6, 2013.

^ Herman, David (2013). Effective JavaScript. Addison-Wesley. p.Â 83. ISBNÂ 978-0-321-81218-6.

^ Haverbeke, Marijn (2011). Eloquent JavaScript. No Starch Press. pp.Â 95â97. ISBNÂ 978-1-59327-282-1.

^ Katz, Yehuda (12 August 2011). "Understanding "Prototypes" in JavaScript". Archived from the original on 5 April 2013. Retrieved April 6, 2013.

^ Herman, David (2013). Effective JavaScript. Addison-Wesley. pp.Â 125â127. ISBNÂ 978-0-321-81218-6.

^ "FunctionÂ â JavaScript". MDN Web Docs. Retrieved 2021-10-30.{{cite web}}:  CS1 maint: url-status (link)

^ "Properties of the Function Object". Es5.github.com. Archived from the original on January 28, 2013. Retrieved May 26, 2013.

^ Flanagan 2006, p.Â 141.

^ The many talents of JavaScript for generalizing Role-Oriented Programming approaches like Traits and Mixins Archived 2017-10-05 at the Wayback Machine, Peterseliger.blogpsot.de, April 11, 2014.

^ Traits for JavaScript Archived 2014-07-24 at the Wayback Machine, 2010.

^ "Home | CocktailJS". Cocktailjs.github.io. Archived from the original on February 4, 2017. Retrieved February 24, 2017.

^ Angus Croll, A fresh look at JavaScript Mixins Archived 2020-04-15 at the Wayback Machine, published May 31, 2011.

^ "Concurrency model and Event Loop". Mozilla Developer Network. Archived from the original on September 5, 2015. Retrieved August 28, 2015.

^ Haverbeke, Marijn (2011). Eloquent JavaScript. No Starch Press. pp.Â 139â149. ISBNÂ 978-1-59327-282-1.

^ "E4X â Archive of obsolete content | MDN". Mozilla Developer Network. Mozilla Foundation. February 14, 2014. Archived from the original on July 24, 2014. Retrieved July 13, 2014.

^ "var â JavaScript â MDN". The Mozilla Developer Network. Archived from the original on December 23, 2012. Retrieved December 22, 2012.

^ "let". MDN web docs. Mozilla. Archived from the original on May 28, 2019. Retrieved June 27, 2018.

^ "const". MDN web docs. Mozilla. Archived from the original on June 28, 2018. Retrieved June 27, 2018.

^ "ECMAScript Language Specification â ECMA-262 Edition 5.1". Ecma International. Archived from the original on November 26, 2012. Retrieved December 22, 2012.

^ "console". Mozilla Developer Network. Mozilla. Archived from the original on February 28, 2013. Retrieved April 6, 2013.

^ "arguments". Mozilla Developer Network. Mozilla. Archived from the original on April 13, 2013. Retrieved April 6, 2013.

^ "Import & Export Modules in javascript". Learnersbucket.com. Archived from the original on April 23, 2019. Retrieved April 23, 2019.

^ "Making JavaScript Safe for Advertising". ADsafe. Archived from the original on 2021-07-06. Retrieved 2021-05-08.

^ "Secure ECMA Script (SES)". Archived from the original on May 15, 2013. Retrieved May 26, 2013.

^ "Google Caja Project". Google. Archived from the original on 2021-01-22. Retrieved 2021-07-09.

^ "Mozilla Cross-Site Scripting Vulnerability Reported and FixedÂ â MozillaZine Talkback". Mozillazine.org. Archived from the original on August 22, 2011. Retrieved February 24, 2017.

^ "Right-click "protection"? Forget about it". June 17, 2008. ISSNÂ 1797-1993. Archived from the original on August 9, 2011. Retrieved June 17, 2008. {{cite journal}}: Cite journal requires |journal= (help)

^ Rehorik, Jan. "Why You Should Never Put Sensitive Data in Your JavaScript". ServiceObjects Blog. ServiceObjects. Archived from the original on June 3, 2019. Retrieved June 3, 2019.

^ Jump up to: a b 
Lauinger, Tobias; Chaabane, Abdelberi; Arshad, Sajjad; Robertson, William; Wilson, Christo; Kirda, Engin (December 21, 2016). "Thou Shalt Not Depend on Me: Analysing the Use of Outdated JavaScript Libraries on the Web" (PDF). Proceedings 2017 Network and Distributed System Security Symposium. arXiv:1811.00918. doi:10.14722/ndss.2017.23414. ISBNÂ 978-1-891562-46-4. S2CIDÂ 17885720. Archived from the original (PDF) on March 29, 2017. Retrieved February 22, 2017.

^ Collins, Keith (March 27, 2016). "How one programmer broke the internet by deleting a tiny piece of code". Quartz. Archived from the original on February 22, 2017. Retrieved February 22, 2017.

^ SC Magazine UK, Developer's 11 lines of deleted code 'breaks the internet' Archived February 23, 2017, at the Wayback Machine

^ Mozilla Corporation, Buffer overflow in crypto.signText() Archived 2014-06-04 at the Wayback Machine

^ Festa, Paul (August 19, 1998). "Buffer-overflow bug in IE". CNET. Archived from the original on December 25, 2002.

^ SecurityTracker.com, Apple Safari JavaScript Buffer Overflow Lets Remote Users Execute Arbitrary Code and HTTP Redirect Bug Lets Remote Users Access Files Archived 2010-02-18 at the Wayback Machine

^ SecurityFocus, Microsoft WebViewFolderIcon ActiveX Control Buffer Overflow Vulnerability Archived 2011-08-22 at WebCite

^ Fusion Authority, Macromedia Flash ActiveX Buffer Overflow Archived August 13, 2011, at the Wayback Machine

^ "Protected Mode in Vista IE7 â IEBlog". Blogs.msdn.com. February 9, 2006. Archived from the original on January 23, 2010. Retrieved February 24, 2017.

^ US CERT, Vulnerability Note VU#713878: Microsoft Internet Explorer does not properly validate source of redirected frame Archived 2009-10-30 at the Wayback Machine

^ Mozilla Foundation, Mozilla Foundation Security Advisory 2005â41: Privilege escalation via DOM property overrides Archived 2014-06-04 at the Wayback Machine

^ Andersen, Starr (2004-08-09). "Part 5: Enhanced Browsing Security". TechNet. Microsoft Docs. Changes to Functionality in Windows XP Service Pack 2. Retrieved 2021-10-20.

^ For one example of a rare JavaScript Trojan Horse, see Symantec Corporation, JS.Seeker.K Archived 2011-08-22 at WebCite

^ Gruss, Daniel; Maurice, ClÃ©mentine; Mangard, Stefan (July 24, 2015). "Rowhammer.js: A Remote Software-Induced Fault Attack in JavaScript". arXiv:1507.06955 [cs.CR].

^ Jean-Pharuns, Alix (July 30, 2015). "Rowhammer.js Is the Most Ingenious Hack I've Ever Seen". Motherboard. Vice. Archived from the original on January 27, 2018. Retrieved January 26, 2018.

^ Goodin, Dan (August 4, 2015). "DRAM 'Bitflipping' exploit for attacking PCs: Just add JavaScript". Ars Technica. Archived from the original on January 27, 2018. Retrieved January 26, 2018.

^ Auerbach, David (July 28, 2015). "Rowhammer security exploit: Why a new security attack is truly terrifying". slate.com. Archived from the original on July 30, 2015. Retrieved July 29, 2015.

^ AnC Archived 2017-03-16 at the Wayback Machine VUSec, 2017

^ New ASLR-busting JavaScript is about to make drive-by exploits much nastier Archived 2017-03-16 at the Wayback Machine Ars Technica, 2017

^ Spectre Attack Archived 2018-01-03 at the Wayback Machine Spectre Attack

^ "Benchmark.js". benchmarkjs.com. Archived from the original on 2016-12-19. Retrieved 2016-11-06.

^ JSBEN.CH. "JSBEN.CH Performance Benchmarking Playground for JavaScript". jsben.ch. Archived from the original on 2021-02-27. Retrieved 2021-08-13.

^ Eich, Brendan (April 3, 2008). "Popularity". Archived from the original on July 3, 2011. Retrieved January 19, 2012.

^ "Edge Browser Switches WebAssembly to 'On' -- Visual Studio Magazine". Visual Studio Magazine. Archived from the original on 2018-02-10. Retrieved 2018-02-09.

^ "frequently asked questions". asm.js. Archived from the original on June 4, 2014. Retrieved April 13, 2014.


Further reading[edit]
See also: ECMAScript Specification Documents
Flanagan, David. JavaScript: The Definitive Guide. 7th edition. Sebastopol, California: O'Reilly, 2020.
Haverbeke, Marijn. Eloquent JavaScript. 3rd edition. No Starch Press, 2018. 472 pages. ISBNÂ 978-1593279509.(download)
Zakas, Nicholas. Principles of Object-Oriented JavaScript, 1st edition. No Starch Press, 2014. 120 pages. ISBNÂ 978-1593275402.
External links[edit]
.mw-parser-output .sister-box{border:1px solid #aaa;padding:0;background:#f9f9f9}.mw-parser-output .sister-box>div{padding:0.75em 0;text-align:center}.mw-parser-output .sister-box>div>b{display:block}.mw-parser-output .sister-box>ul{border-top:1px solid #aaa;padding:0.75em 0;width:217px;margin:0 auto}.mw-parser-output .sister-box>ul>li{min-height:31px}.mw-parser-output .sister-logo{display:inline-block;width:31px;line-height:31px;vertical-align:middle;text-align:center}.mw-parser-output .sister-link{display:inline-block;margin-left:4px;width:182px;vertical-align:middle}.mw-parser-output .sister-bar{display:flex;justify-content:center;align-items:baseline;font-size:88%;background-color:#fdfdfd;border:1px solid #a2a9b1;clear:both;margin:1em 0 0;padding:0 2em}.mw-parser-output .sister-bar-header{margin:0 1em 0 0.5em;padding:0.2em 0;flex:0 0 auto;min-height:24px;line-height:22px}.mw-parser-output .sister-bar-content{display:flex;flex-flow:row wrap;flex:0 1 auto;align-items:baseline;padding:0.2em 0;column-gap:1em}.mw-parser-output .sister-bar-item{display:flex;align-items:baseline;margin:0.15em 0;min-height:24px;text-align:left}.mw-parser-output .sister-bar-logo{width:22px;line-height:22px;margin:0 0.2em;text-align:right}.mw-parser-output .sister-bar-link{margin:0 0.2em;text-align:left}@media screen and (max-width:960px){.mw-parser-output .sister-bar{display:flex;flex-flow:column wrap;font-size:88%;background-color:#fdfdfd;clear:both;margin:1em auto 0;padding:0 2em}.mw-parser-output .sister-bar-header{padding:0.2em 0;flex:0 1}.mw-parser-output .sister-bar-content{display:flex;flex-flow:row wrap;flex:1;align-items:baseline;padding:0.2em 0;border-top:1px solid #a2a9b1}.mw-parser-output .sister-bar-item{display:flex;align-items:baseline;flex:0 0 20em;min-width:20em;margin:0.15em 0;min-height:24px}}.mw-parser-output .navbox+link+.sister-bar{margin-top:-1px}.mw-parser-output .navbox+style+.sister-bar{margin-top:-1px}.mw-parser-output .portal-bar+link+.sister-bar{margin-top:-1px}.mw-parser-output .portal-bar+style+.sister-bar{margin-top:-1px}.mw-parser-output .sister-bar+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .sister-bar+.navbox-styles+.portal-bar{margin-top:-1px}JavaScriptat Wikipedia's sister projectsDefinitions from WiktionaryMedia from CommonsTextbooks from WikibooksResources from WikiversityDocumentation from MediaWiki
.mw-parser-output .spoken-wikipedia{border:1px solid #a2a9b1;background-color:#f8f9fa;margin:0.5em 0;padding:0.2em;line-height:1.5em;font-size:90%}.mw-parser-output .spoken-wikipedia-header{text-align:center}.mw-parser-output .spoken-wikipedia-listen-to{font-weight:bold}.mw-parser-output .spoken-wikipedia-files{text-align:center;margin-top:10px;margin-bottom:0.4em}.mw-parser-output .spoken-wikipedia-icon{float:left;margin-left:5px;margin-top:10px}.mw-parser-output .spoken-wikipedia-disclaimer{margin-left:60px;margin-top:10px;font-size:95%;line-height:1.4em}.mw-parser-output .spoken-wikipedia-footer{margin-top:10px;text-align:center}@media(min-width:720px){.mw-parser-output .spoken-wikipedia{width:20em;float:right;clear:right;margin-left:1em}}Listen to this article (48 minutes)
This audio file was created from a revision of this article dated 20Â AugustÂ 2013Â (2013-08-20), and does not reflect subsequent edits.(Audio helpÂ Â· More spoken articles)
JavaScript at Curlie
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteJavaScriptCode analysis
ESLint
JSHint
JSLint
Supersets
JS++
Objective-J
TypeScript
Transpilers
AtScript
Babel
ClojureScript
CoffeeScript
Dart
Elm
Emscripten
Google Closure Compiler
Google Web Toolkit
Haxe
LiveScript
Morfik
Nim
Opa
PureScript
Reason
WebSharper
Concepts
Client-side
JavaScript library
JavaScript syntax
Debuggers
Chrome DevTools
Firefox Inspector
Komodo IDE
Microsoft Edge DevTools
Opera DevTools
Safari Web Inspector
Doc generators
JSDoc
Editors (comparison)
Ace
Cloud9 IDE
Atom
CodeMirror
Brackets
Light Table
PhpStorm
Orion
Visual Studio
Visual Studio Express
Visual Studio Code
Visual Studio Team Services
Vim
Engines
Comparison of engines
DOM support
List of ECMAScript engines
Frameworks
Comparison of JavaScript frameworks
List of JavaScript libraries
Related technologies
Ajax
AssemblyScript
asm.js
Cascading Style Sheets
Document Object Model
HTML
HTML5
JSON
WebAssembly
WebAuthn
Package managers
npm
Module bundlers
Webpack
Server-side
Active Server Pages
CommonJS
Deno
JSGI
Node.js
Wakanda
Unit testing frameworks (list)
Jasmine
Jest
Mocha
QUnit
People
Douglas Crockford
Brendan Eich
John Resig

vteProgramming languages
Comparison
Timeline
History

Ada
ALGOL
APL
Assembly
BASIC
C
C++
C#
COBOL
Erlang
Forth
Fortran
Go
Haskell
Java
JavaScript
Kotlin
Lisp
Lua
ML
Pascal
Perl
PHP
Prolog
Python
R
Ruby
Rust
SQL
Shell
Simula
Smalltalk
Swift
more...

 Category
 Lists: Alphabetical
Categorical
Generational
Non-English-based

vteECMAScriptDialects
ActionScript
Caja
JavaScript
engines
asm.js
JScript
JScript .NET
QtScript
TypeScript
WMLScript
Engines(comparison)
Carakan
Futhark
InScript
JavaScriptCore
JScript
KJS
Linear B
Narcissus
QtScript
Rhino
SpiderMonkey
TraceMonkey
JÃ¤gerMonkey
Tamarin
V8
ChakraCore
Chakra
JScript .NET
Nashorn
FrameworksClient-side
Chaplin.js
Dojo
Echo
Ext JS
Google Web Toolkit
jQuery
Lively Kernel
midori
MochiKit
MooTools
Prototype
Pyjs
qooxdoo

SproutCore
Spry
Wakanda Framework
Server-side
AppJet
Deno
Jaxer
Node.js
WakandaDB
Multiple
Cappuccino
Objective-J
PureMVC
Libraries
Backbone.js
SWFObject
SWFAddress
Underscore.js
People
Brendan Eich
Douglas Crockford
John Resig
Scott Isaacs
Other
DHTML
Ecma International
JSDoc
JSGI
JSHint
JSLint
JSON
JSSS
Sputnik
SunSpider
Asynchronous module definition
CommonJS

 Lists
JavaScript libraries
Ajax frameworks
 Comparisons
JavaScript frameworks
server-side JavaScript

vteWeb browsersFeaturesÂ Â·  standardsÂ Â·  protocolsFeatures
Bookmarks
Extensions
Privacy mode
Sync
Web standards
HTML
v5
CSS
DOM
JavaScript
IndexedDB
Web storage
WebAssembly
WebGL
Protocols
HTTP
v2
v3
Cookies
Encryption
OCSP
WebRTC
WebSocket
ActiveBlink-based
Aloha
Avast
Beaker
Blisk
Brave
Chrome
Chromium
Citrio
Coc Coc
Dragon
Edge
Epic
Falkon
Maxthon
Opera
Otter
Puffin 
SalamWeb
Samsung Internet
Silk
Sleipnir
Sputnik
SRWare
Torch
UC
Vivaldi
Whale
Yandex
Gecko-based
Firefox
Conkeror
GNU IceCat
IceDragon
K-Meleon
PirateBrowser
SeaMonkey
Tor
Waterfox
WebKit-based
Dolphin
Dooble
GNOME Web
iCab
Konqueror
Midori
Roccat
Safari
surf
Other
360
Avant
Basilisk
Cake Browser
CM Browser
eww
Flow
Internet Explorer
Links
Lunascape
Lynx
NetFront
NetSurf
Pale Moon
QQ browser
qutebrowser
SlimBrowser
w3m
DiscontinuedGecko-based
Beonex Communicator
Camino
Classilla
Firefox Lite
Galeon
Ghostzilla
Kazehakase
Kylo
Lotus
MicroB
Minimo
Mozilla suite
Pogo
Strata
Swiftfox
Swiftweasel
TenFourFox
Timberwolf
xB
MSHTML-based
AOL
Deepnet
GreenBrowser
MediaBrowser
NeoPlanet
NetCaptor
SpaceTime
ZAC
WebKit-based
Arora
BOLT
Opera Coast
Flock
Fluid
Google TV
Iris
Mercury
OmniWeb
Origyn
QtWeb
rekonq
Rockmelt
Shiira
Steel
Browser for Symbian
Uzbl
WebPositive
xombrero
Other
abaco
Amaya
Arachne
Arena
Blazer
Charon
Deepfish
Dillo
Edge
ELinks
Gazelle
HotJava
IBM Home Page Reader
IBM WebExplorer
IBrowse
KidZui
Line Mode
Mosaic
MSN TV
NetPositive
Netscape
Skweezer
Skyfire
Teashark
ThunderHawk
Vision
WinWAP
WorldWideWeb

Category
Comparisons
List

vteNode.jsPlatform
Node.js
NPM
V8
CommonJS
Frameworks
MEAN
MongoDB
Express.js
AngularJS/Angular
MEEN (substituted with Ember.js)
Backbone.js
Meteor
Sails.js (uses Express.js)
Next.js
Libraries
Lodash
Underscore.js
React.js
Vue.js
Languages
JavaScript
CoffeeScript
TypeScript

.mw-parser-output .portal-bar{font-size:88%;font-weight:bold;display:flex;justify-content:center;align-items:baseline}.mw-parser-output .portal-bar-bordered{padding:0 2em;background-color:#fdfdfd;border:1px solid #a2a9b1;clear:both;margin:1em auto 0}.mw-parser-output .portal-bar-unbordered{padding:0 1.7em;margin-left:0}.mw-parser-output .portal-bar-header{margin:0 1em 0 0.5em;padding:0.2em 0;flex:0 0 auto;min-height:24px;line-height:22px}.mw-parser-output .portal-bar-content{display:flex;flex-flow:row wrap;align-items:baseline;flex:0 1 auto;padding:0.15em 0;column-gap:1em}.mw-parser-output .portal-bar-item{display:flex;align-items:baseline;margin:0.15em 0;min-height:24px;text-align:left}.mw-parser-output .portal-bar-logo{width:22px;line-height:22px;margin:0 0.2em;text-align:right}.mw-parser-output .portal-bar-link{margin:0 0.2em;text-align:left}@media screen and (max-width:768px){.mw-parser-output .portal-bar{font-size:88%;font-weight:bold;display:flex;flex-flow:column wrap}.mw-parser-output .portal-bar-header{text-align:center;flex:0;padding-left:0.5em;margin:0 auto}.mw-parser-output .portal-bar-content{display:flex;flex-flow:row wrap;align-items:baseline;flex:0;margin:0 auto;column-gap:1em;border-top:1px solid #a2a9b1}}.mw-parser-output .navbox+link+.portal-bar-bordered{margin-top:-1px}.mw-parser-output .navbox+style+.portal-bar-bordered{margin-top:-1px}.mw-parser-output .portal-bar+.navbox-styles+.navbox{margin-top:-1px}Portal:Computer programming
Authority control General
Integrated Authority File (Germany)
National libraries
Spain
France (data)
United States
Czech Republic
Other
Faceted Application of Subject Terminology
SUDOC (France)
1
<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=JavaScript&oldid=1069559187"
		Categories: JavaScriptAmerican inventionsCross-platform softwareDynamically typed programming languagesFunctional languagesObject-based programming languagesHigh-level programming languagesProgramming languages created in 1995Programming languages with an ISO standardPrototype-based programming languagesScripting languagesWeb programmingHidden categories: Webarchive template wayback linksCS1 maint: url-statusCS1 errors: missing periodicalWebarchive template webcite linksWikipedia pending changes protected pagesArticles with short descriptionShort description is different from WikidataAll articles with failed verificationArticles with failed verification from March 2017Pages using Sister project links with wikidata namespace mismatchPages using Sister project links with hidden wikidataPages using Sister project links with default searchArticles with hAudio microformatsSpoken articlesArticles with Curlie linksArticles with GND identifiersArticles with BNE identifiersArticles with BNF identifiersArticles with LCCN identifiersArticles with NKC identifiersArticles with FAST identifiersArticles with SUDOC identifiersArticles with example JavaScript code
	
