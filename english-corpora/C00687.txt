
Title:
Short-circuit evaluation
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Programming language construct
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}Not to be confused with Short-circuit test.
This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources:Â "Short-circuit evaluation"Â âÂ newsÂ Â· newspapersÂ Â· booksÂ Â· scholarÂ Â· JSTOR  (August 2013) (Learn how and when to remove this template message)
.mw-parser-output .sidebar{width:22em;float:right;clear:right;margin:0.5em 0 1em 1em;background:#f8f9fa;border:1px solid #aaa;padding:0.2em;text-align:center;line-height:1.4em;font-size:88%;border-collapse:collapse;display:table}body.skin-minerva .mw-parser-output .sidebar{display:table!important;float:right!important;margin:0.5em 0 1em 1em!important}.mw-parser-output .sidebar-subgroup{width:100%;margin:0;border-spacing:0}.mw-parser-output .sidebar-left{float:left;clear:left;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-none{float:none;clear:both;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-outer-title{padding:0 0.4em 0.2em;font-size:125%;line-height:1.2em;font-weight:bold}.mw-parser-output .sidebar-top-image{padding:0.4em}.mw-parser-output .sidebar-top-caption,.mw-parser-output .sidebar-pretitle-with-top-image,.mw-parser-output .sidebar-caption{padding:0.2em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-pretitle{padding:0.4em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-title,.mw-parser-output .sidebar-title-with-pretitle{padding:0.2em 0.8em;font-size:145%;line-height:1.2em}.mw-parser-output .sidebar-title-with-pretitle{padding:0.1em 0.4em}.mw-parser-output .sidebar-image{padding:0.2em 0.4em 0.4em}.mw-parser-output .sidebar-heading{padding:0.1em 0.4em}.mw-parser-output .sidebar-content{padding:0 0.5em 0.4em}.mw-parser-output .sidebar-content-with-subgroup{padding:0.1em 0.4em 0.2em}.mw-parser-output .sidebar-above,.mw-parser-output .sidebar-below{padding:0.3em 0.8em;font-weight:bold}.mw-parser-output .sidebar-collapse .sidebar-above,.mw-parser-output .sidebar-collapse .sidebar-below{border-top:1px solid #aaa;border-bottom:1px solid #aaa}.mw-parser-output .sidebar-navbar{text-align:right;font-size:115%;padding:0 0.4em 0.4em}.mw-parser-output .sidebar-list-title{padding:0 0.4em;text-align:left;font-weight:bold;line-height:1.6em;font-size:105%}.mw-parser-output .sidebar-list-title-c{padding:0 0.4em;text-align:center;margin:0 3.3em}@media(max-width:720px){body.mediawiki .mw-parser-output .sidebar{width:100%!important;clear:both;float:none!important;margin-left:0!important;margin-right:0!important}}Evaluation strategies
Eager evaluation
Lazy evaluation
Partial evaluation
Remote evaluation
Short-circuit evaluation
.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vte
Short-circuit evaluation, minimal evaluation, or McCarthy evaluation (after John McCarthy) is the semantics of some Boolean operators in some programming languages in which the second argument is executed or evaluated only if the first argument does not suffice to determine the value of the expression: when the first argument of the AND function evaluates to false, the overall value must be false; and when the first argument of the OR function evaluates to true, the overall value must be true.
In programming languages with lazy evaluation (Lisp, Perl, Haskell), the usual Boolean operators are short-circuit.  In others (Ada, Java, Delphi), both short-circuit and standard Boolean operators are available. For some Boolean operations, like exclusive or (XOR), it is not possible to short-circuit, because both operands are always required to determine the result.
Short-circuit operators are, in effect, control structures rather than simple arithmetic operators, as they are not strict. In imperative language terms (notably C and C++), where side effects are important, short-circuit operators introduce a sequence point â they completely evaluate the first argument, including any side effects, before (optionally) processing the second argument. ALGOL 68 used proceduring to achieve user-defined short-circuit operators and procedures.
The use of short-circuit operators has been criticized as problematic:

.mw-parser-output .templatequote{overflow:hidden;margin:1em 0;padding:0 40px}.mw-parser-output .templatequote .templatequotecite{line-height:1.5em;text-align:left;padding-left:1.6em;margin-top:0}The conditional connectives â "cand" and "cor" for short â are ... less innocent than they might seem at first sight. For instance, cor does not distribute over cand: compare
(A cand B) cor C  with (A cor C) cand (B cor C);
in the case Â¬A â§ C , the second expression requires B to be defined, the first one does not. Because the conditional connectives thus complicate the formal reasoning about programs, they are better avoided.ââEdsger W. Dijkstra[1]
Contents

1 Definition

1.1 Precedence
1.2 Formalization


2 Support in common programming and scripting languages
3 Common use

3.1 Avoiding undesired side effects of the second argument
3.2 Idiomatic conditional construct


4 Possible problems

4.1 Untested second condition leads to unperformed side effect
4.2 Reduced efficiency due to constraining optimizations


5 See also
6 References



Definition[edit]
In any programming language that implements short-circuit evaluation, the expression x and y is equivalent to the conditional expression if x then y else x, and the expression x or y is equivalent to if x then x else y. In either case, x is only evaluated once.
The generalized definition above accommodates loosely typed languages that have more than the two truth-values True and False, where short-circuit operators may return the last evaluated subexpression. This is called "last value" in the table below. For a strictly-typed language, the expression is simplified to if x then y else false and if x then true else y respectively for the boolean case.

Precedence[edit]
Although AND takes precedence over OR in many languages, this is not a universal property of short-circuit evaluation. An example of the two operator taking the same precedence and being left-associative with each other is POSIX shell's command-list syntax.[2]:âÂ§2.9.3â
The following simple left-to-right evaluator enforces a precedence of AND over OR by a continue:

function short-circuit-eval (operators, values)
    let resultÂ := True
    for each (op, val) in (operators, values):
        if op = "AND" && result = False
            continue
        else if op = "OR" && result = True
            return result
        else
            resultÂ := val
    return result

Formalization[edit]
Short-circuit logic, with or without side-effects, have been formalized based on Hoare's conditional. A result is that non-short-circuiting operators can be defined out of short-circuit logic to have the same sequence of evaluation.[3]

Support in common programming and scripting languages[edit]

Boolean operators in various languages


Language
Eager operators
Short-circuit operators
Result type


Advanced Business Application Programming (ABAP)

none

and, or

Boolean1


Ada

and, or

and then, or else

Boolean


ALGOL 68

and, &, â§Â ; or, â¨

andf , orf (both user defined)

Boolean


APL

â§, â¨, â² (nand), â± (nor), etc.

:AndIf, :OrIf

Boolean1


awk

none

&&, ||

Boolean


Bash

none

&&, ||

Boolean


C, Objective-C

none

&&, ||, ?[4]

int (&&,||), opnd-dependent (?)


C++2

none

&&, ||, ?[5]

Boolean (&&,||), opnd-dependent (?)


C#

&, |

&&, ||, ?, ??

Boolean (&&,||), opnd-dependent (?, ??)


ColdFusion Markup Language (CFML)

none

AND, OR, &&, ||

Boolean


D3

&, |

&&, ||, ?

Boolean (&&,||), opnd-dependent (?)


Eiffel

and, or

and then, or else

Boolean


Erlang

and, or

andalso, orelse

Boolean


Fortran4

.and., .or.

.and., .or.

Boolean


Go, Haskell, OCaml

none

&&, ||

Boolean


Java, MATLAB, R, Swift

&, |

&&, ||

Boolean


JavaScript, Julia

&, |

&&, ||

Last value


Lasso

none

and, or, &&, ||

Last value


Kotlin

and, or

&&, ||

Boolean


Lisp, Lua, Scheme

none

and, or

Last value


MUMPS (M)

&, !

none

Numeric


Modula-2

none

AND, OR

Boolean


Oberon

none

&, OR

Boolean


OCaml

none

&&, ||

Boolean


Pascal

and, or5,9

and_then, or_else6,9

Boolean


Perl

&, |

&&, and, ||, or

Last value


Ruby

and, or

&&, ||

Last value


PHP

&, |

&&, and, ||, or

Boolean


POSIX shell (command list)

none

&&, ||

Last value (exit)


Python

&, |

and, or

Last value


Rust

&, |

&&, ||[6]

Boolean


Smalltalk

&, |

and:, or:7

Boolean


Standard ML

UnÂ­known

andalso, orelse

Boolean


TTCN-3

none

and, or[7]

Boolean


Beckhoff TwinCATÂ® (IEC 61131-3)10

AND, OR

AND_THEN,[8] OR_ELSE[9]

Boolean


Visual Basic .NET

And, Or

AndAlso, OrElse

Boolean


Visual Basic, Visual Basic for Applications (VBA)

And, Or

Select Case8

Numeric


Wolfram Language

And @@ {...}, Or @@ {...}

And, Or, &&, ||

Boolean


ZTT

&, |

none

Boolean

1 ABAP and APL have no distinct boolean type.
2 When overloaded, the operators && and || are eager and can return any type.
3 This only applies to runtime-evaluated expressions, static if and static assert. Expressions in static initializers or manifest constants use eager evaluation.
4 Fortran operators are neither short-circuit nor eager: the language specification allows the compiler to select the method for optimization.
5 ISO/IEC 10206:1990 Extended Pascal allows, but does not require, short-circuiting.
6 ISO/IEC 10206:1990 Extended Pascal supports and_then and or_else.[10]
7 Smalltalk uses short-circuit semantics as long as the argument to and: is a block (e.g., false and: [Transcript show: 'Wont see me']).
8 BASIC languages that supported CASE statements did so by using the conditional evaluation system, rather than as jump tables limited to fixed labels.
9 Delphi and Free Pascal default to short circuit evaluation. This may be changed by compiler options but does not seem to be used widely.
10 The norm IEC 61131-3 doesn't actually define if AND and OR use short-circuit evaluation and it doesn't define the operators AND_THEN and OR_ELSE. The entries in the table show how it works for Beckhoff TwinCATÂ®.

Common use[edit]
Avoiding undesired side effects of the second argument[edit]
Usual example, using a C-based language:

int denom = 0;
if (denom != 0 && num / denom)
{
    ... // ensures that calculating num/denom never results in divide-by-zero error   
}

Consider the following example:

int a = 0;
if (a != 0 && myfunc(b))
{
    do_something();
}

In this example, short-circuit evaluation guarantees that myfunc(b) is never called. This is because aÂ != 0 evaluates to false.  This feature permits two useful programming constructs.

If the first sub-expression checks whether an expensive computation is needed and the check evaluates to false, one can eliminate expensive computation in the second argument.
It permits a construct where the first expression guarantees a condition without which the second expression may cause a run-time error.
Both are illustrated in the following C snippet where minimal evaluation prevents both null pointer dereference and excess memory fetches:

bool is_first_char_valid_alpha_unsafe(const char *p)
{
    return isalpha(p[0]); // SEGFAULT highly possible with p == NULL
}

bool is_first_char_valid_alpha(const char *p)
{
    return p != NULL && isalpha(p[0]); // 1) no unneeded isalpha() execution with p == NULL, 2) no SEGFAULT risk
}

Idiomatic conditional construct[edit]
Since minimal evaluation is part of an operator's semantic definition and not an (optional) optimization, many coding patterns[which?] have come to rely on it as a succinct (if idiomatic) conditional construct. Examples include:
Perl idioms:

some_condition or die;    # Abort execution if some_condition is false
some_condition and die;   # Abort execution if some_condition is true

POSIX shell idioms:[11]

modprobe -q some_module && echo "some_module installed" || echo "some_module not installed"

This idiom presumes that echo cannot fail.

Possible problems[edit]
Untested second condition leads to unperformed side effect[edit]
Despite these benefits, minimal evaluation may cause problems for programmers who do not realize (or forget) it is happening. For example, in the code

if (expressionA && myfunc(b)) {
    do_something();
}

if myfunc(b) is supposed to perform some required operation regardless of whether do_something() is executed, such as allocating system resources, and expressionA evaluates as false, then myfunc(b) will not execute, which could cause problems. Some programming languages, such as Java, have two operators, one that employs minimal evaluation and one that does not, to avoid this problem.
Problems with unperformed side effect statements can be easily solved with proper programming style, i.e., not using side effects in boolean statements, as using values with side effects in evaluations tends to generally make the code opaque and error-prone.[12]

Reduced efficiency due to constraining optimizations[edit]
Short-circuiting can lead to errors in branch prediction on modern central processing units (CPUs), and dramatically reduce performance. A notable example is highly optimized ray with axis aligned box intersection code in ray tracing.[clarification needed] Some compilers can detect such cases and emit faster code, but programming language semantics may constrain such optimizations.[citation needed]
An example of a compiler unable to optimize for such a case is Java's Hotspot VM as of 2012.[13]

See also[edit]
Don't-care condition
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ Edsger W. Dijkstra "On a somewhat disappointing correspondence", EWD1009-0, 25 May 1987 full text

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}"Shell Command Language". pubs.opengroup.org.

^ Jan A. Bergstra, A. Ponse, D.J.C. Staudt (2010). "Short-circuit logic". arXiv:1010.3674 [cs.LO].{{cite arxiv}}:  CS1 maint: uses authors parameter (link)

^ ISO/IEC 9899 standard, section 6.5.13

^ ISO/IEC IS 14882 draft.

^ "std::ops - Rust". doc.rust-lang.org. Retrieved 2019-02-12.

^ ETSI ES 201 873-1 V4.10.1, section 7.1.4

^ "Beckhoff Information System - English". infosys.beckhoff.com. Retrieved 2021-08-16.

^ "Beckhoff Information System - English". infosys.beckhoff.com. Retrieved 2021-08-16.

^ "and_then - The GNU Pascal Manual". Gnu-pascal.de. Retrieved 2013-08-24.

^ "What does || mean in bash?". stackexchange.com. Retrieved 2019-01-09.

^ "Referential Transparency, Definiteness and Unfoldability" (PDF). Itu.dk. Retrieved 2013-08-24.

^ Wasserman, Louis. "java - What are the cases in which it is better to use unconditional AND (& instead of &&)". Stack Overflow.






<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Short-circuit_evaluation&oldid=1067208237"
		Categories: Compiler optimizationsConditional constructsEvaluation strategyImplementation of functional programming languagesHidden categories: CS1 maint: uses authors parameterArticles with short descriptionShort description is different from WikidataArticles needing additional references from August 2013All articles needing additional referencesAll articles with specifically marked weasel-worded phrasesArticles with specifically marked weasel-worded phrases from July 2010Wikipedia articles needing clarification from November 2010All articles with unsourced statementsArticles with unsourced statements from October 2016Articles with example C codeArticles with example Perl code
	
