
Title:
Don't repeat yourself
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Principle of software development
Some of this article's listed sources may not be reliable. Please help this article by looking for better, more reliable sources. Unreliable citations may be challenged or deleted.  (November 2021) (Learn how and when to remove this template message)
"Don't repeat yourself" (DRY, or sometimes "do not repeat yourself") is a principle of software development aimed at reducing repetition of software patterns,[1] replacing it with abstractions or using data normalization to avoid redundancy.
The DRY principle is stated as "Every piece of knowledge must have a single, unambiguous, authoritative representation within a system". The principle has been formulated by Andy Hunt and Dave Thomas in their book The Pragmatic Programmer.[2] They apply it quite broadly to include "database schemas, test plans, the build system, even  documentation".[3]  When the DRY principle is applied successfully, a modification of any single element of a system does not require a change in other logically unrelated elements. Additionally, elements that are logically related all change predictably and uniformly, and are thus kept in sync. Besides using methods and subroutines in their code, Thomas and Hunt rely on code generators, automatic build systems, and scripting languages to observe the DRY principle across layers.

Contents

1 Alternatives

1.1 WET
1.2 AHA


2 See also
3 References
4 External links



Alternatives[edit]
WET[edit]
Violations of DRY are typically referred to as WET solutions, commonly taken to stand for "write everything twice"[4] (alternatively "write every time", "we enjoy typing" or "waste everyone's time"). WET solutions are common in multi-tiered architectures where a developer may be tasked with, for example, adding a comment field on a form in a web application. The text string "comment" might be repeated in the label, the HTML tag, in a read function name, a private variable, database DDL, queries, and so on. A DRY approach eliminates that redundancy by using frameworks that reduce or eliminate all those editing tasks except the most important ones, leaving the extensibility of adding new knowledge variables in one place.[5]
Kevin Greer named and described this programming principle.[6][7]

AHA[edit]
Another approach to abstractions is the AHA principle. AHA stands for "avoid hasty abstractions", described by Kent C. Dodds as optimizing for change first, and avoiding premature optimization.[8] and was influenced by Sandi Metz's "prefer duplication over the wrong abstraction".[9]
AHA is rooted in the understanding that the deeper the investment we've made into abstracting a piece of software, the more we perceive that the cost of that investment can never be recovered (Sunk cost fallacy). Thus, engineers tend to continue to iterate on the same abstraction each time the requirement changes. AHA programming assumes that both WET and DRY solutions inevitably create software that is rigid and difficult to maintain. Instead of starting with an abstraction, or abstracting at a specific number of duplications, software can be more flexible and robust if abstraction is done when it is needed, or, when the duplication itself has become the barrier and it is known how the abstraction needs to function.
AHA programming was originally named MOIST by Dodds, later again by Daniel Bartholomae,[10] and originally referred to as DAMP by Matt Ryer.[11] There was a different programming principal already named DAMP and described by Jay Fields,[12] and the community pushed back against the usage of MOIST, due to the cultural aversion to the word "moist".[13] Dodds called for alternatives on Twitter, and suggested DATE as an alternative before settling on Cher Scarlett's suggestion of AHA.[8][14][15]

See also[edit]
Abstraction principle (programming)
Code duplication
Code reuse
Copy and paste programming
Database normalization and denormalization
Disk mirroring
Redundancy (engineering)
Rule of three (computer programming)
Separation of concerns
Single source of truth (SSOT/SPOT)
Structured programming
Two or more, use a for
You aren't gonna need it
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Foote, Steven (2014). Learning to Program. Addison-Wesley Professional. p.Â 336. ISBNÂ 9780133795226.

^ Hunt, Andrew; Thomas, David (1999). The Pragmatic ProgrammerÂ : From Journeyman to Master (1Â ed.). USA: Addison-Wesley. pp.Â 320. ISBNÂ 978-0201616224.

^  Dave Thomas, interviewed by Bill Venners (2003-10-10). "Orthogonality and the DRY Principle". Retrieved 2006-12-01.

^ Pai, Praseed; Xavier, Shine (2017-01-31). .NET Design Patterns. Packt Publishing Ltd. ISBNÂ 978-1-78646-186-5.

^ Justin Lee (2006-03-08). "DRY is for losers". Retrieved 2013-08-31.

^ Alex Papadimoulis (2011-12-08). "The WET Cart". Retrieved 2012-05-21.

^ Kevin Greer (2016-02-05). "FOAM DRY + WET". YouTube. Archived from the original on 2021-12-21. Retrieved 2016-03-09.

^ Jump up to: a b Kent C. Dodds (2019-04-01). "AHA Programming". Retrieved 2021-05-08.

^ Sandi Metz (2016-01-20). "The Wrong Abstraction". Retrieved 2021-05-08.

^ Bartholomae, Daniel (21 August 2020). "Moist code - Why code should not be completely DRY". The Startup CTO. Retrieved 11 November 2021.

^ Haus, Ev (24 December 2020). "Using DRY, WET & DAMP code". Medium. Retrieved 11 November 2021.

^ Fields, Jay. "DRY code, DAMP DSLs". Jay Fields' Thoughts. Retrieved 11 November 2021.

^ Resnick, Brian (28 April 2016). "Why do so many people dislike the word "moist"? This scientist has a theory". Vox Media. Retrieved 11 November 2021.

^ Dodds, Kent (27 March 2021). "3 Minutes with Kent: Write the code first, then make the abstraction". Briefs. Retrieved 11 November 2021.

^ Dodds, Kent; Bostian, Emma; Nisi, Nick (30 July 2021). "JS Party â Episode #186: Getting hooked on React". The Changelog. Retrieved 11 November 2021.


External links[edit]
Don't Repeat Yourself at WikiWikiWeb
Once and Only Once at WikiWikiWeb
97 Things Every Programmer Should Know (O'Reilly)
The myth of over-normalization (discussion of academic extremes vs. real-world database scenarios)
Wilson G, Aruliah DA, Brown CT, Chue Hong NP, Davis M, Guy RT,  etÂ al. (2014). "Best Practices for Scientific Computing". PLOS Biol. 12 (1): e1001745. arXiv:1210.0530. doi:10.1371/journal.pbio.1001745. PMCÂ 3886731. PMIDÂ 24415924. Don't Repeat Yourself (or Others)




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Don%27t_repeat_yourself&oldid=1061450331"
		Categories: Software engineering folkloreComputer programming folkloreProgramming principlesHidden categories: Articles with short descriptionShort description is different from WikidataArticles lacking reliable references from November 2021All articles lacking reliable references
	
