
Title:
Approximation algorithm
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Class of algorithms that find approximate solutions to optimization problems
In computer science and operations research, approximation algorithms are efficient algorithms that find approximate solutions to optimization problems (in particular NP-hard problems) with provable guarantees on the distance of the returned solution to the optimal one.[1] Approximation algorithms naturally arise in the field of theoretical computer science as a consequence of the widely believed P â  NP conjecture. Under this conjecture, a wide class of optimization problems cannot be solved exactly in polynomial time. The field of approximation algorithms, therefore, tries to understand how closely it is possible to approximate optimal solutions to such problems in polynomial time. In an overwhelming majority of the cases, the guarantee of such algorithms is a multiplicative one expressed as an approximation ratio or approximation factor i.e., the optimal solution is always guaranteed to be within a (predetermined) multiplicative factor of the returned solution. However, there are also many approximation algorithms that provide an additive guarantee on the quality of the returned solution. A notable example of an approximation algorithm that provides both is the classic approximation algorithm of Lenstra, Shmoys and Tardos[2] for scheduling on unrelated parallel machines.
The design and analysis of approximation algorithms crucially involves a mathematical proof certifying the quality of the returned solutions in the worst case.[1] This distinguishes them from heuristics such as annealing or genetic algorithms, which find reasonably good solutions on some inputs, but provide no clear indication at the outset on when they may succeed or fail.
There is widespread interest in theoretical computer science to better understand the limits to which we can approximate certain famous optimization problems. For example, one of the long-standing open questions in computer science is to determine whether there is an algorithm that outperforms the 1.5 approximation algorithm of Christofides to the metric traveling salesman problem. The desire to understand hard optimization problems from the perspective of approximability is motivated by the discovery of surprising mathematical connections and broadly applicable techniques to design algorithms for hard optimization problems. One well-known example of the former is the GoemansâWilliamson algorithm for maximum cut, which solves a graph theoretic problem using high dimensional geometry.[3]

Contents

1 Introduction
2 Algorithm design techniques
3 A posteriori guarantees
4 Hardness of approximation
5 Practicality
6 Performance guarantees
7 Epsilon terms
8 See also
9 Citations
10 References
11 External links



Introduction[edit]
A simple example of an approximation algorithm is one for the minimum vertex cover problem, where the goal is to choose the smallest set of vertices such that every edge in the input graph contains at least one chosen vertex. One way to find a vertex cover is to repeat the following process: find an uncovered edge, add both its endpoints to the cover, and remove all edges incident to either vertex from the graph. As any vertex cover of the input graph must use a distinct vertex to cover each edge that was considered in the process (since it forms a matching), the vertex cover produced, therefore, is at most twice as large as the optimal one. In other words, this is a constant factor approximation algorithm with an approximation factor of 2. Under the recent unique games conjecture, this factor is even the best possible one.[4]
NP-hard problems vary greatly in their approximability; some, such as the knapsack problem, can be approximated within a multiplicative factor 
  
    
      
        1
        +
        Ïµ
      
    
    {\displaystyle 1+\epsilon }
  
, for any fixed 
  
    
      
        Ïµ
        >
        0
      
    
    {\displaystyle \epsilon >0}
  
, and therefore produce solutions arbitrarily close to the optimum (such a family of approximation algorithms is called a polynomial time approximation scheme or PTAS). Others are impossible to approximate within any constant, or even polynomial, factor unless P = NP, as in the case of the maximum clique problem. Therefore, an important benefit of studying approximation algorithms is a fine-grained classification of the difficulty of various NP-hard problems beyond the one afforded by the theory of NP-completeness. In other words, although NP-complete problems may be equivalent (under polynomial time reductions) to each other from the perspective of exact solutions, the corresponding optimization problems behave very differently from the perspective of approximate solutions.

Algorithm design techniques[edit]
By now there are several established techniques to design approximation algorithms. These include the following ones.

Greedy algorithm
Local search
Enumeration and dynamic programming
Solving a convex programming relaxation to get a fractional solution. Then converting this fractional solution into a feasible solution by some appropriate rounding. The popular relaxations include the following.
Linear programming relaxations
Semidefinite programming relaxations
Primal-dual methods
Dual fitting
Embedding the problem in some metric and then solving the problem on the metric. This is also known as metric embedding.
Random sampling and the use of randomness in general in conjunction with the methods above.
A posteriori guarantees[edit]
While approximation algorithms always provide an a priori worst case guarantee (be it additive or multiplicative), in some cases they also provide an a posteriori guarantee that is often much better. This is often the case for algorithms that work by solving a convex relaxation of the optimization problem on the given input. For example, there is a different approximation algorithm for minimum vertex cover that solves a linear programming relaxation to find a vertex cover that is at most twice the value of the relaxation. Since the value of the relaxation is never larger than the size of the optimal vertex cover, this yields another 2-approximation algorithm. While this is similar to the a priori guarantee of the previous approximation algorithm, the guarantee of the latter can be much better (indeed when the value of the LP relaxation is far from the size of the optimal vertex cover).

Hardness of approximation[edit]
Approximation algorithms as a research area is closely related to and informed by inapproximability theory where the non-existence of efficient algorithms with certain approximation ratios is proved (conditioned on widely believed hypotheses such as the P â  NP conjecture) by means of reductions. In the case of the metric traveling salesman problem, the best known inapproximability result rules out algorithms with an approximation ratio less than 123/122 â 1.008196 unless P = NP, Karpinski, Lampis, Schmied.[5] Coupled with the knowledge of the existence of Christofides' 1.5 approximation algorithm, this tells us that the threshold of approximability for metric traveling salesman (if it exists) is somewhere between 123/122 and 1.5.
While inapproximability results have been proved since the 1970s, such results were obtained by ad hoc means and no systematic understanding was available at the time. It is only since the 1990 result of Feige, Goldwasser, LovÃ¡sz, Safra and Szegedy on the inapproximability of Independent Set[6] and the famous PCP theorem,[7] that modern tools for proving inapproximability results were uncovered. The PCP theorem, for example, shows that Johnson's 1974 approximation algorithms for Max SAT, set cover, independent set and coloring all achieve the optimal approximation ratio, assuming P â  NP.[8]

Practicality[edit]
Not all approximation algorithms are suitable for direct practical applications. Some involve solving non-trivial linear programming/semidefinite relaxations (which may themselves invoke the ellipsoid algorithm), complex data structures, or sophisticated algorithmic techniques, leading to difficult implementation issues or improved running time performance (over exact algorithms) only on impractically large inputs. Implementation and running time issues aside, the guarantees provided by approximation algorithms may themselves not be strong enough to justify their consideration in practice. Despite their inability to be used "out of the box" in practical applications, the ideas and insights behind the design of such algorithms can often be incorporated in other ways in practical algorithms. In this way, the study of even very expensive algorithms is not a completely theoretical pursuit as they can yield valuable insights.
In other cases, even if the initial results are of purely theoretical interest, over time, with an improved understanding, the algorithms may be refined to become more practical. One such example is the initial PTAS for Euclidean TSP by Sanjeev Arora (and independently by Joseph Mitchell) which had a prohibitive running time of 
  
    
      
        
          n
          
            O
            (
            1
            
              /
            
            Ïµ
            )
          
        
      
    
    {\displaystyle n^{O(1/\epsilon )}}
  
 for a 
  
    
      
        1
        +
        Ïµ
      
    
    {\displaystyle 1+\epsilon }
  
 approximation.[9] Yet, within a year these ideas were incorporated into a near-linear time 
  
    
      
        O
        (
        n
        log
        â¡
        n
        )
      
    
    {\displaystyle O(n\log n)}
  
 algorithm for any constant 
  
    
      
        Ïµ
        >
        0
      
    
    {\displaystyle \epsilon >0}
  
.[10]

Performance guarantees[edit]
For some approximation algorithms it is possible to prove certain properties about the approximation of the optimum result. For example, a Ï-approximation algorithm A is defined to be an algorithm for which it has been proven that the value/cost, f(x), of the approximate solution A(x) to an instance x will not be more (or less, depending on the situation) than a factor Ï times the value, OPT, of an optimum solution.


  
    
      
        
          
            {
            
              
                
                  
                    O
                    P
                    T
                  
                  â¤
                  f
                  (
                  x
                  )
                  â¤
                  Ï
                  
                    O
                    P
                    T
                  
                  ,
                  
                  
                    
                      ifÂ 
                    
                  
                  Ï
                  >
                  1
                  ;
                
              
              
                
                  Ï
                  
                    O
                    P
                    T
                  
                  â¤
                  f
                  (
                  x
                  )
                  â¤
                  
                    O
                    P
                    T
                  
                  ,
                  
                  
                    
                      ifÂ 
                    
                  
                  Ï
                  <
                  1.
                
              
            
            
          
        
      
    
    {\displaystyle {\begin{cases}\mathrm {OPT} \leq f(x)\leq \rho \mathrm {OPT} ,\qquad {\mbox{if }}\rho >1;\\\rho \mathrm {OPT} \leq f(x)\leq \mathrm {OPT} ,\qquad {\mbox{if }}\rho <1.\end{cases}}}
  

The factor Ï is called the relative performance guarantee. An approximation algorithm has an absolute performance guarantee or bounded error c, if it has been proven for every instance x that


  
    
      
        (
        
          O
          P
          T
        
        â
        c
        )
        â¤
        f
        (
        x
        )
        â¤
        (
        
          O
          P
          T
        
        +
        c
        )
        .
      
    
    {\displaystyle (\mathrm {OPT} -c)\leq f(x)\leq (\mathrm {OPT} +c).}
  

Similarly, the performance guarantee, R(x,y), of a solution y to an instance x is defined as


  
    
      
        R
        (
        x
        ,
        y
        )
        =
        max
        
          (
          
            
              
                
                  O
                  P
                  T
                
                
                  f
                  (
                  y
                  )
                
              
            
            ,
            
              
                
                  f
                  (
                  y
                  )
                
                
                  O
                  P
                  T
                
              
            
          
          )
        
        ,
      
    
    {\displaystyle R(x,y)=\max \left({\frac {OPT}{f(y)}},{\frac {f(y)}{OPT}}\right),}
  

where f(y) is the value/cost of the solution y for the instance x. Clearly, the performance guarantee is greater than or equal to 1 and equal to 1 if and only if y is an optimal solution. If an algorithm A guarantees to return solutions with a performance guarantee of at most r(n), then A is said to be an r(n)-approximation algorithm and has an approximation ratio of r(n). Likewise, a problem with an r(n)-approximation algorithm is said to be r(n)-approximable or have an approximation ratio of r(n).[11][12]
For minimization problems, the two different guarantees provide the same result and that for maximization problems, a relative performance guarantee of Ï is equivalent to a performance guarantee of 
  
    
      
        r
        =
        
          Ï
          
            â
            1
          
        
      
    
    {\displaystyle r=\rho ^{-1}}
  
. In the literature, both definitions are common but it is clear which definition is used since, for maximization problems, as Ï â¤ 1 while r â¥ 1.
The absolute performance guarantee 
  
    
      
        
          
            P
          
          
            A
          
        
      
    
    {\displaystyle \mathrm {P} _{A}}
  
 of some approximation algorithm A, where x refers to an instance of a problem, and where 
  
    
      
        
          R
          
            A
          
        
        (
        x
        )
      
    
    {\displaystyle R_{A}(x)}
  
 is the performance guarantee of A on x (i.e. Ï for problem instance x) is:


  
    
      
        
          
            P
          
          
            A
          
        
        =
        inf
        {
        r
        â¥
        1
        â£
        
          R
          
            A
          
        
        (
        x
        )
        â¤
        r
        ,
        â
        x
        }
        .
      
    
    {\displaystyle \mathrm {P} _{A}=\inf\{r\geq 1\mid R_{A}(x)\leq r,\forall x\}.}
  

That is to say that 
  
    
      
        
          
            P
          
          
            A
          
        
      
    
    {\displaystyle \mathrm {P} _{A}}
  
 is the largest bound on the approximation ratio, r, that one sees over all possible instances of the problem. Likewise, the asymptotic performance ratio 
  
    
      
        
          R
          
            A
          
          
            â
          
        
      
    
    {\displaystyle R_{A}^{\infty }}
  
 is:


  
    
      
        
          R
          
            A
          
          
            â
          
        
        =
        inf
        {
        r
        â¥
        1
        â£
        â
        n
        â
        
          
            Z
          
          
            +
          
        
        ,
        
          R
          
            A
          
        
        (
        x
        )
        â¤
        r
        ,
        â
        x
        ,
        
          |
        
        x
        
          |
        
        â¥
        n
        }
        .
      
    
    {\displaystyle R_{A}^{\infty }=\inf\{r\geq 1\mid \exists n\in \mathbb {Z} ^{+},R_{A}(x)\leq r,\forall x,|x|\geq n\}.}
  

That is to say that it is the same as the absolute performance ratio, with a lower bound n on the size of problem instances. These two types of ratios are used because there exist algorithms where the difference between these two is significant.


Performance guarantees



r-approx[11][12]
Ï-approx
rel. error[12]
rel. error[11]
norm. rel. error[11][12]
abs. error[11][12]


max: 
  
    
      
        f
        (
        x
        )
        â¥
      
    
    {\displaystyle f(x)\geq }
  



  
    
      
        
          r
          
            â
            1
          
        
        
          O
          P
          T
        
      
    
    {\displaystyle r^{-1}\mathrm {OPT} }
  


  
    
      
        Ï
        
          O
          P
          T
        
      
    
    {\displaystyle \rho \mathrm {OPT} }
  


  
    
      
        (
        1
        â
        c
        )
        
          O
          P
          T
        
      
    
    {\displaystyle (1-c)\mathrm {OPT} }
  


  
    
      
        (
        1
        â
        c
        )
        
          O
          P
          T
        
      
    
    {\displaystyle (1-c)\mathrm {OPT} }
  


  
    
      
        (
        1
        â
        c
        )
        
          O
          P
          T
        
        +
        c
        
          W
          O
          R
          S
          T
        
      
    
    {\displaystyle (1-c)\mathrm {OPT} +c\mathrm {WORST} }
  


  
    
      
        
          O
          P
          T
        
        â
        c
      
    
    {\displaystyle \mathrm {OPT} -c}
  



min: 
  
    
      
        f
        (
        x
        )
        â¤
      
    
    {\displaystyle f(x)\leq }
  



  
    
      
        r
        
          O
          P
          T
        
      
    
    {\displaystyle r\mathrm {OPT} }
  


  
    
      
        Ï
        
          O
          P
          T
        
      
    
    {\displaystyle \rho \mathrm {OPT} }
  


  
    
      
        (
        1
        +
        c
        )
        
          O
          P
          T
        
      
    
    {\displaystyle (1+c)\mathrm {OPT} }
  


  
    
      
        (
        1
        â
        c
        
          )
          
            â
            1
          
        
        
          O
          P
          T
        
      
    
    {\displaystyle (1-c)^{-1}\mathrm {OPT} }
  


  
    
      
        (
        1
        â
        c
        
          )
          
            â
            1
          
        
        
          O
          P
          T
        
        +
        c
        
          W
          O
          R
          S
          T
        
      
    
    {\displaystyle (1-c)^{-1}\mathrm {OPT} +c\mathrm {WORST} }
  


  
    
      
        
          O
          P
          T
        
        +
        c
      
    
    {\displaystyle \mathrm {OPT} +c}
  



Epsilon terms[edit]
In the literature, an approximation ratio for a maximization (minimization) problem of c - Ïµ (min: c + Ïµ) means that the algorithm has an approximation ratio of c â Ïµ  for arbitrary Ïµ > 0 but that the ratio has not (or cannot) be shown for Ïµ = 0. An example of this is the optimal inapproximability â inexistence of approximation â ratio of 7 / 8 + Ïµ for satisfiable MAX-3SAT instances due to Johan HÃ¥stad.[13] As mentioned previously, when c = 1, the problem is said to have a polynomial-time approximation scheme.
An Ïµ-term may appear when an approximation algorithm introduces a multiplicative error and a constant error while the minimum optimum of instances of size n goes to infinity as n does. In this case, the approximation ratio is c â k / OPT = c â o(1) for some constants c and k. Given arbitrary Ïµ > 0, one can choose a large enough N such that the term k / OPT < Ïµ for every n â¥ N. For every fixed Ïµ, instances of size n < N can be solved by brute force, thereby showing an approximation ratio â existence of approximation algorithms with a guarantee â of c â Ïµ for every Ïµ > 0.

See also[edit]
Domination analysis considers guarantees in terms of the rank of the computed solution.
PTAS - a type of approximation algorithm that takes the approximation ratio as a parameter
APX is the class of problems with some constant-factor approximation algorithm
Approximation-preserving reduction
Exact algorithm
Citations[edit]
This article includes a list of general references, but it remains largely unverified because it lacks sufficient corresponding inline citations. Please help to improve this article by introducing more precise citations.  (April 2009) (Learn how and when to remove this template message)
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ Jump up to: a b .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Bernard., Shmoys, David (2011). The design of approximation algorithms. Cambridge University Press. ISBNÂ 9780521195270. OCLCÂ 671709856.

^ Lenstra, Jan Karel; Shmoys, David B.; Tardos, Ãva (1990-01-01). "Approximation algorithms for scheduling unrelated parallel machines". Mathematical Programming. 46 (1â3): 259â271. CiteSeerXÂ 10.1.1.115.708. doi:10.1007/BF01585745. ISSNÂ 0025-5610. S2CIDÂ 206799898.

^ Goemans, Michel X.; Williamson, David P. (November 1995). "Improved Approximation Algorithms for Maximum Cut and Satisfiability Problems Using Semidefinite Programming". J. ACM. 42 (6): 1115â1145. CiteSeerXÂ 10.1.1.34.8500. doi:10.1145/227683.227684. ISSNÂ 0004-5411. S2CIDÂ 15794408.

^ Khot, Subhash; Regev, Oded (2008-05-01). "Vertex cover might be hard to approximate to within 2âÎµ". Journal of Computer and System Sciences. Computational Complexity 2003. 74 (3): 335â349. doi:10.1016/j.jcss.2007.06.019.

^ Karpinski, Marek; Lampis, Michael; Schmied, Richard (2015-12-01). "New inapproximability bounds for TSP". Journal of Computer and System Sciences. 81 (8): 1665â1677. arXiv:1303.6437. doi:10.1016/j.jcss.2015.06.003.

^ Feige, Uriel; Goldwasser, Shafi; LovÃ¡sz, Laszlo; Safra, Shmuel; Szegedy, Mario (March 1996). "Interactive Proofs and the Hardness of Approximating Cliques". J. ACM. 43 (2): 268â292. doi:10.1145/226643.226652. ISSNÂ 0004-5411.

^ Arora, Sanjeev; Safra, Shmuel (January 1998). "Probabilistic Checking of Proofs: A New Characterization of NP". J. ACM. 45 (1): 70â122. doi:10.1145/273865.273901. ISSNÂ 0004-5411. S2CIDÂ 751563.

^ Johnson, David S. (1974-12-01). "Approximation algorithms for combinatorial problems". Journal of Computer and System Sciences. 9 (3): 256â278. doi:10.1016/S0022-0000(74)80044-9.

^ Arora, S. (October 1996). "Polynomial time approximation schemes for Euclidean TSP and other geometric problems". Proceedings of 37th Conference on Foundations of Computer Science. pp.Â 2â11. CiteSeerXÂ 10.1.1.32.3376. doi:10.1109/SFCS.1996.548458. ISBNÂ 978-0-8186-7594-2. S2CIDÂ 1499391. {{cite book}}: Missing or empty |title= (help)

^ Arora, S. (October 1997). "Nearly linear time approximation schemes for Euclidean TSP and other geometric problems". Proceedings 38th Annual Symposium on Foundations of Computer Science. pp.Â 554â563. doi:10.1109/SFCS.1997.646145. ISBNÂ 978-0-8186-8197-4. S2CIDÂ 10656723. {{cite book}}: Missing or empty |title= (help)

^ Jump up to: a b c d e G. Ausiello; P. Crescenzi; G. Gambosi; V. Kann; A. Marchetti-Spaccamela; M. Protasi (1999). Complexity and Approximation: Combinatorial Optimization Problems and their Approximability Properties.

^ Jump up to: a b c d e Viggo Kann (1992). On the Approximability of NP-complete Optimization Problems (PDF).

^ Johan HÃ¥stad (1999). "Some Optimal Inapproximability Results". Journal of the ACM. 48 (4): 798â859. CiteSeerXÂ 10.1.1.638.2808. doi:10.1145/502090.502098. S2CIDÂ 5120748.


References[edit]
Vazirani, Vijay V. (2003). Approximation Algorithms. Berlin: Springer. ISBNÂ 978-3-540-65367-7.
Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. Introduction to Algorithms, Second Edition. MIT Press and McGraw-Hill, 2001. ISBNÂ 0-262-03293-7. Chapter 35: Approximation Algorithms, pp.Â 1022â1056.
Dorit S. Hochbaum, ed. Approximation Algorithms for NP-Hard problems, PWS Publishing Company, 1997. ISBNÂ 0-534-94968-1. Chapter 9: Various Notions of Approximations: Good, Better, Best, and More
Williamson, David P.; Shmoys, David B. (April 26, 2011), The Design of Approximation Algorithms, Cambridge University Press, ISBNÂ 978-0521195270
External links[edit]
Pierluigi Crescenzi, Viggo Kann, MagnÃºs HalldÃ³rsson, Marek Karpinski and Gerhard Woeginger, A compendium of NP optimization problems.
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}hide.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteOptimization: Algorithms, methods, and heuristicsshowUnconstrained nonlinearFunctions
Golden-section search
Interpolation methods
Line search
NelderâMead method
Successive parabolic interpolation
GradientsConvergence
Trust region
Wolfe conditions
QuasiâNewton
BerndtâHallâHallâHausman
BroydenâFletcherâGoldfarbâShanno and L-BFGS
DavidonâFletcherâPowell
Symmetric rank-one (SR1)
Other methods
Conjugate gradient
GaussâNewton
Gradient
LevenbergâMarquardt
Powell's dog leg method
Truncated Newton
Hessians
Newton's method
showConstrained nonlinearGeneral
Barrier methods
Penalty methods
Differentiable
Augmented Lagrangian methods
Sequential quadratic programming
Successive linear programming
showConvex optimizationConvex minimization
Cutting-plane method
Reduced gradient (FrankâWolfe)
Subgradient method
Linear andquadraticInterior point
Affine scaling
Ellipsoid algorithm of Khachiyan
Projective algorithm of Karmarkar
Basis-exchange
Simplex algorithm of Dantzig
Revised simplex algorithm
Criss-cross algorithm
Principal pivoting algorithm of Lemke
hideCombinatorialParadigms
Approximation algorithm
Dynamic programming
Greedy algorithm
Integer programming
Branch and bound/cut
Graph algorithmsMinimum spanning tree
BorÅ¯vka
Prim
Kruskal

    Shortest path
BellmanâFord
SPFA
Dijkstra
FloydâWarshall
Network flows
Dinic
EdmondsâKarp
FordâFulkerson
Pushârelabel maximum flow
showMetaheuristics
Evolutionary algorithm
Hill climbing
Local search
Simulated annealing
Tabu search

Software

showAuthority control General
Integrated Authority File (Germany)
National libraries
France (data)
United States





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Approximation_algorithm&oldid=1055163274"
		Categories: Computational complexity theoryApproximation algorithmsHidden categories: CS1 errors: missing titleArticles with short descriptionShort description matches WikidataArticles lacking in-text citations from April 2009All articles lacking in-text citationsArticles with GND identifiersArticles with BNF identifiersArticles with LCCN identifiers
	
