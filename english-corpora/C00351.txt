
Title:
Formal language
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Sequence of words formed by specific rules
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}This article is about a technical term in mathematics and computer science. For related studies about natural languages, see Formal semantics (linguistics). For formal modes of speech in natural languages, see Register (sociolinguistics).


  Structure of the syntactically well-formed, although nonsensical, English sentence, "Colorless green ideas sleep furiously" (historical example from Chomsky 1957).
In logic, mathematics, computer science, and linguistics, a formal language consists of words whose letters are taken from an alphabet and are well-formed according to a specific set of rules.
The alphabet of a formal language consists of symbols, letters, or tokens that concatenate into strings of the language.[1] Each string concatenated from symbols of this alphabet is called a word, and the words that belong to a particular formal language are sometimes called well-formed words or well-formed formulas. A formal language is often defined by means of a formal grammar such as a regular grammar or context-free grammar, which consists of its formation rules.
The field of formal language theory studies primarily the purely syntactical aspects of such languagesâthat is, their internal structural patterns. Formal language theory sprang out of linguistics, as a way of understanding the syntactic regularities of natural languages.
In computer science, formal languages are used among others as the basis for defining the grammar of programming languages and formalized versions of subsets of natural languages in which the words of the language represent concepts that are associated with particular meanings or semantics. In computational complexity theory, decision problems are typically defined as formal languages, and complexity classes are defined as the sets of the formal languages that can be parsed by machines with limited computational power. In logic and the foundations of mathematics, formal languages are used to represent the syntax of axiomatic systems, and mathematical formalism is the philosophy that all of mathematics can be reduced to the syntactic manipulation of formal languages in this way.

Contents

1 History
2 Words over an alphabet
3 Definition
4 Examples

4.1 Constructions


5 Language-specification formalisms
6 Operations on languages
7 Applications

7.1 Programming languages
7.2 Formal theories, systems, and proofs

7.2.1 Interpretations and models




8 See also
9 Notes
10 References

10.1 Citations
10.2 Sources


11 External links



History[edit]
This section needs expansion. You can help by adding to it.  (March 2021)
The first use of formal language is thought to be Gottlob Frege's 1879 Begriffsschrift, meaning "concept writing", which described a "formal language, modeled upon that of arithmetic, for pure thought."[2]
Axel Thue's early semi-Thue system, which can be used for rewriting strings, was influential on formal grammars.

Words over an alphabet[edit]
An alphabet, in the context of formal languages, can be any set, although it often makes sense to use an alphabet in the usual sense of the word, or more generally a character set such as ASCII or Unicode.  The elements of an alphabet are called its letters.  An alphabet may contain an infinite number of elements;[note 1] however, most definitions in formal language theory specify alphabets with a finite number of elements, and most results apply only to them.
A word over an alphabet can be any finite sequence (i.e., string) of letters. The set of all words over an alphabet Î£ is usually denoted by Î£* (using the Kleene star). The length of a word is the number of letters it is composed of. For any alphabet, there is only one word of length 0, the empty word, which is often denoted by e, Îµ, Î» or even Î. By concatenation one can combine two words to form a new word, whose length is the sum of the lengths of the original words. The result of concatenating a word with the empty word is the original word.
In some applications, especially in logic, the alphabet is also known as the vocabulary and words are known as formulas or sentences; this breaks the letter/word metaphor and replaces it by a word/sentence metaphor.

Definition[edit]
A formal language L over an alphabet Î£ is a subset of Î£*, that is, a set of words over that alphabet. Sometimes the sets of words are grouped into expressions, whereas rules and constraints may be formulated for the creation of 'well-formed expressions'.
In computer science and mathematics, which do not usually deal with natural languages, the adjective "formal" is often omitted as redundant.
While formal language theory usually concerns itself with formal languages that are described by some syntactical rules, the actual definition of the concept "formal language" is only as above: a (possibly infinite) set of finite-length strings composed from a given alphabet, no more and no less.  In practice, there are many languages that can be described by rules, such as regular languages or context-free languages.  The notion of a formal grammar may be closer to the intuitive concept of a "language," one described by syntactic rules. By an abuse of the definition, a particular formal language is often thought of as being equipped with a formal grammar that describes it.

Examples[edit]
The following rules describe a formal languageÂ L over the alphabet Î£Â =Â {0,â1,â2,â3,â4,â5,â6,â7,â8,â9,â+,â=}:

Every nonempty string that does not contain "+" or "=" and does not start with "0" is inÂ L.
The string "0" is inÂ L.
A string containing "=" is inÂ L if and only if there is exactly one "=", and it separates two valid strings ofÂ L.
A string containing "+" but not "=" is inÂ L if and only if every "+" in the string separates two valid strings ofÂ L.
No string is inÂ L other than those implied by the previous rules.
Under these rules, the string "23+4=555" is inÂ L, but the string "=234=+" is not. This formal language expresses natural numbers, well-formed additions, and well-formed addition equalities, but it expresses only what they look like (their syntax), not what they mean (semantics). For instance, nowhere in these rules is there any indication that "0" means the number zero,   "+" means addition, "23+4=555" is false, etc.

Constructions[edit]
For finite languages, one can explicitly enumerate all well-formed words. For example, we can describe a languageÂ L as just LÂ =Â {a,âb,âab,âcba}. The degenerate case of this construction is the empty language, which contains no words at all (LÂ =Â â).
However, even over a finite (non-empty) alphabet such as Î£Â =Â {a,Â b} there are an infinite number of finite-length words that can potentially be expressed: "a", "abb", "ababba", "aaababbbbaab",Â .... Therefore, formal languages are typically infinite, and describing an infinite formal language is not as simple as writing LÂ =Â {a,âb,âab,âcba}. Here are some examples of formal languages:

L = Î£*, the set of all words over Î£;
L = {a}* = {an}, where n ranges over the natural numbers and "an" means "a" repeated n times (this is the set of words consisting only of the symbol "a");
the set of syntactically correct programs in a given programming language (the syntax of which is usually defined by a context-free grammar);
the set of inputs upon which a certain Turing machine halts; or
the set of maximal strings of alphanumeric ASCII characters on this line, i.e., the set {the, set, of, maximal, strings, alphanumeric, ASCII, characters, on, this, line, i, e}.
Language-specification formalisms[edit]
Formal languages are used as tools in multiple disciplines. However, formal language theory rarely concerns itself with particular languages (except as examples), but is mainly concerned with the study of various types of formalisms to describe languages. For instance, a language can be given as

those strings generated by some formal grammar;
those strings described or matched by a particular regular expression;
those strings accepted by some automaton, such as a Turing machine or finite-state automaton;
those strings for which some decision procedure (an algorithm that asks a sequence of related YES/NO questions) produces the answer YES.
Typical questions asked about such formalisms include:

What is their expressive power? (Can formalism X describe every language that formalism Y can describe? Can it describe other languages?)
What is their recognizability? (How difficult is it to decide whether a given word belongs to a language described by formalism X?)
What is their comparability? (How difficult is it to decide whether two languages, one described in formalism X and one in formalism Y, or in X again, are actually the same language?).
Surprisingly often, the answer to these decision problems is "it cannot be done at all", or "it is extremely expensive" (with a characterization of how expensive). Therefore, formal language theory is a major application area of computability theory and complexity theory. Formal languages may be classified in the Chomsky hierarchy based on the expressive power of their generative grammar as well as the complexity of their recognizing automaton. Context-free grammars and regular grammars provide a good compromise between expressivity and ease of parsing, and are widely used in practical applications.

Operations on languages[edit]
Certain operations on languages are common. This includes the standard set operations, such as union, intersection, and complement. Another class of operation is the element-wise application of string operations.
Examples: suppose 
  
    
      
        
          L
          
            1
          
        
      
    
    {\displaystyle L_{1}}
  
 and 
  
    
      
        
          L
          
            2
          
        
      
    
    {\displaystyle L_{2}}
  
 are languages over some common alphabet 
  
    
      
        Î£
      
    
    {\displaystyle \Sigma }
  
.

The concatenation 
  
    
      
        
          L
          
            1
          
        
        â
        
          L
          
            2
          
        
      
    
    {\displaystyle L_{1}\cdot L_{2}}
  
 consists of all strings of the form 
  
    
      
        v
        w
      
    
    {\displaystyle vw}
  
 where 
  
    
      
        v
      
    
    {\displaystyle v}
  
 is a string from 
  
    
      
        
          L
          
            1
          
        
      
    
    {\displaystyle L_{1}}
  
 and 
  
    
      
        w
      
    
    {\displaystyle w}
  
 is a string from 
  
    
      
        
          L
          
            2
          
        
      
    
    {\displaystyle L_{2}}
  
.
The intersection 
  
    
      
        
          L
          
            1
          
        
        â©
        
          L
          
            2
          
        
      
    
    {\displaystyle L_{1}\cap L_{2}}
  
 of 
  
    
      
        
          L
          
            1
          
        
      
    
    {\displaystyle L_{1}}
  
 and 
  
    
      
        
          L
          
            2
          
        
      
    
    {\displaystyle L_{2}}
  
 consists of all strings that are contained in both languages
The complement 
  
    
      
        Â¬
        
          L
          
            1
          
        
      
    
    {\displaystyle \neg L_{1}}
  
 of 
  
    
      
        
          L
          
            1
          
        
      
    
    {\displaystyle L_{1}}
  
 with respect to 
  
    
      
        Î£
      
    
    {\displaystyle \Sigma }
  
 consists of all strings over 
  
    
      
        Î£
      
    
    {\displaystyle \Sigma }
  
 that are not in 
  
    
      
        
          L
          
            1
          
        
      
    
    {\displaystyle L_{1}}
  
.
The Kleene star: the language consisting of all words that are concatenations of zero or more words in the original language;
Reversal:
Let Îµ be the empty word, then 
  
    
      
        
          Îµ
          
            R
          
        
        =
        Îµ
      
    
    {\displaystyle \varepsilon ^{R}=\varepsilon }
  
, and
for each non-empty word 
  
    
      
        w
        =
        
          Ï
          
            1
          
        
        â¯
        
          Ï
          
            n
          
        
      
    
    {\displaystyle w=\sigma _{1}\cdots \sigma _{n}}
  
 (where 
  
    
      
        
          Ï
          
            1
          
        
        ,
        â¦
        ,
        
          Ï
          
            n
          
        
      
    
    {\displaystyle \sigma _{1},\ldots ,\sigma _{n}}
  
are elements of some alphabet), let 
  
    
      
        
          w
          
            R
          
        
        =
        
          Ï
          
            n
          
        
        â¯
        
          Ï
          
            1
          
        
      
    
    {\displaystyle w^{R}=\sigma _{n}\cdots \sigma _{1}}
  
,
then for a formal language 
  
    
      
        L
      
    
    {\displaystyle L}
  
, 
  
    
      
        
          L
          
            R
          
        
        =
        {
        
          w
          
            R
          
        
        â£
        w
        â
        L
        }
      
    
    {\displaystyle L^{R}=\{w^{R}\mid w\in L\}}
  
.
String homomorphism
Such string operations are used to investigate closure properties of classes of languages. A class of languages is closed under a particular operation when the operation, applied to languages in the class, always produces a language in the same class again. For instance, the context-free languages are known to be closed under union, concatenation, and intersection with regular languages, but not closed under intersection or complement. The theory of trios and abstract families of languages studies the most common closure properties of language families in their own right.[3]


Closure properties of language families (
  
    
      
        
          L
          
            1
          
        
      
    
    {\displaystyle L_{1}}
  
 Op 
  
    
      
        
          L
          
            2
          
        
      
    
    {\displaystyle L_{2}}
  
 where both 
  
    
      
        
          L
          
            1
          
        
      
    
    {\displaystyle L_{1}}
  
 and 
  
    
      
        
          L
          
            2
          
        
      
    
    {\displaystyle L_{2}}
  
 are in the language family given by the column). After Hopcroft and Ullman.


Operation



Regular

DCFL

CFL

IND

CSL

recursive

RE


Union


  
    
      
        
          L
          
            1
          
        
        âª
        
          L
          
            2
          
        
        =
        {
        w
        â£
        w
        â
        
          L
          
            1
          
        
        â¨
        w
        â
        
          L
          
            2
          
        
        }
      
    
    {\displaystyle L_{1}\cup L_{2}=\{w\mid w\in L_{1}\lor w\in L_{2}\}}
  


Yes

No

Yes

Yes

Yes

Yes

Yes


Intersection


  
    
      
        
          L
          
            1
          
        
        â©
        
          L
          
            2
          
        
        =
        {
        w
        â£
        w
        â
        
          L
          
            1
          
        
        â§
        w
        â
        
          L
          
            2
          
        
        }
      
    
    {\displaystyle L_{1}\cap L_{2}=\{w\mid w\in L_{1}\land w\in L_{2}\}}
  


Yes

No

No

No

Yes

Yes

Yes


Complement


  
    
      
        Â¬
        
          L
          
            1
          
        
        =
        {
        w
        â£
        w
        â
        
          L
          
            1
          
        
        }
      
    
    {\displaystyle \neg L_{1}=\{w\mid w\not \in L_{1}\}}
  


Yes

Yes

No

No

Yes

Yes

No


Concatenation


  
    
      
        
          L
          
            1
          
        
        â
        
          L
          
            2
          
        
        =
        {
        w
        z
        â£
        w
        â
        
          L
          
            1
          
        
        â§
        z
        â
        
          L
          
            2
          
        
        }
      
    
    {\displaystyle L_{1}\cdot L_{2}=\{wz\mid w\in L_{1}\land z\in L_{2}\}}
  


Yes

No

Yes

Yes

Yes

Yes

Yes


Kleene star


  
    
      
        
          L
          
            1
          
          
            â
          
        
        =
        {
        Îµ
        }
        âª
        {
        w
        z
        â£
        w
        â
        
          L
          
            1
          
        
        â§
        z
        â
        
          L
          
            1
          
          
            â
          
        
        }
      
    
    {\displaystyle L_{1}^{*}=\{\varepsilon \}\cup \{wz\mid w\in L_{1}\land z\in L_{1}^{*}\}}
  


Yes

No

Yes

Yes

Yes

Yes

Yes


(String) homomorphism 
  
    
      
        h
      
    
    {\displaystyle h}
  



  
    
      
        h
        (
        
          L
          
            1
          
        
        )
        =
        {
        h
        (
        w
        )
        â£
        w
        â
        
          L
          
            1
          
        
        }
      
    
    {\displaystyle h(L_{1})=\{h(w)\mid w\in L_{1}\}}
  


Yes

No

Yes

Yes

No

No

Yes


Îµ-free (string) homomorphism 
  
    
      
        h
      
    
    {\displaystyle h}
  



  
    
      
        h
        (
        
          L
          
            1
          
        
        )
        =
        {
        h
        (
        w
        )
        â£
        w
        â
        
          L
          
            1
          
        
        }
      
    
    {\displaystyle h(L_{1})=\{h(w)\mid w\in L_{1}\}}
  


Yes

No

Yes

Yes

Yes

Yes

Yes


Substitution 
  
    
      
        Ï
      
    
    {\displaystyle \varphi }
  



  
    
      
        Ï
        (
        
          L
          
            1
          
        
        )
        =
        
          â
          
            
              Ï
              
                1
              
            
            â¯
            
              Ï
              
                n
              
            
            â
            
              L
              
                1
              
            
          
        
        Ï
        (
        
          Ï
          
            1
          
        
        )
        â
        â¦
        â
        Ï
        (
        
          Ï
          
            n
          
        
        )
      
    
    {\displaystyle \varphi (L_{1})=\bigcup _{\sigma _{1}\cdots \sigma _{n}\in L_{1}}\varphi (\sigma _{1})\cdot \ldots \cdot \varphi (\sigma _{n})}
  


Yes

No

Yes

Yes

Yes

No

Yes


Inverse homomorphism 
  
    
      
        
          h
          
            â
            1
          
        
      
    
    {\displaystyle h^{-1}}
  



  
    
      
        
          h
          
            â
            1
          
        
        (
        
          L
          
            1
          
        
        )
        =
        
          â
          
            w
            â
            
              L
              
                1
              
            
          
        
        
          h
          
            â
            1
          
        
        (
        w
        )
      
    
    {\displaystyle h^{-1}(L_{1})=\bigcup _{w\in L_{1}}h^{-1}(w)}
  


Yes

Yes

Yes

Yes

Yes

Yes

Yes


Reverse


  
    
      
        
          L
          
            R
          
        
        =
        {
        
          w
          
            R
          
        
        â£
        w
        â
        L
        }
      
    
    {\displaystyle L^{R}=\{w^{R}\mid w\in L\}}
  


Yes

No

Yes

Yes

Yes

Yes

Yes


Intersection with a regular language 
  
    
      
        R
      
    
    {\displaystyle R}
  



  
    
      
        L
        â©
        R
        =
        {
        w
        â£
        w
        â
        L
        â§
        w
        â
        R
        }
      
    
    {\displaystyle L\cap R=\{w\mid w\in L\land w\in R\}}
  


Yes

Yes

Yes

Yes

Yes

Yes

Yes

Applications[edit]
Programming languages[edit]
Main articles: Syntax (programming languages) and Compiler-compiler
A compiler usually has two distinct components. A lexical analyzer, sometimes generated by a tool like lex, identifies the tokens of the programming language grammar, e.g. identifiers or keywords, numeric and string literals, punctuation and operator symbols, which are themselves specified by a simpler formal language, usually by means of regular expressions. At the most basic conceptual level, a parser, sometimes generated by a parser generator like yacc, attempts to decide if the source program is syntactically valid, that is if it is well formed with respect to the programming language grammar for which the compiler was built.
Of course, compilers do more than just parse the source code â they usually translate it into some executable format. Because of this, a parser usually outputs more than a yes/no answer, typically an abstract syntax tree. This is used by subsequent stages of the compiler to eventually generate an executable containing machine code that runs directly on the hardware, or some intermediate code that requires a virtual machine to execute.

Formal theories, systems, and proofs[edit]
  This diagram shows the syntactic divisions within a formal system. Strings of symbols may be broadly divided into nonsense and well-formed formulas.  The set of well-formed formulas is divided into theorems and non-theorems.
Main articles: Theory (mathematical logic) and Formal system
In mathematical logic, a formal theory is a set of sentences expressed in a formal language.
A formal system (also called a logical calculus, or a logical system) consists of a formal language together with a deductive apparatus (also called a deductive system). The deductive apparatus may consist of a set of transformation rules, which may be interpreted as valid rules of inference, or a set of axioms, or have both. A formal system is used to derive one expression from one or more other expressions. Although a formal language can be identified with its formulas, a formal system cannot be likewise identified by its theorems. Two formal systems 
  
    
      
        
          
            F
            S
          
        
      
    
    {\displaystyle {\mathcal {FS}}}
  
 and 
  
    
      
        
          
            F
            
              S
              â²
            
          
        
      
    
    {\displaystyle {\mathcal {FS'}}}
  
 may have all the same theorems and yet differ in some significant proof-theoretic way (a formula A may be a syntactic consequence of a formula B in one but not another for instance).
A formal proof or derivation is a finite sequence of well-formed formulas (which may be interpreted as sentences, or propositions) each of which is an axiom or follows from the preceding formulas in the sequence by a rule of inference. The last sentence in the sequence is a theorem of a formal system. Formal proofs are useful because their theorems can be interpreted as true propositions.

Interpretations and models[edit]
Main articles: Formal semantics (logic), Interpretation (logic), and Model theory
Formal languages are entirely syntactic in nature, but may be given semantics that give meaning to the elements of the language. For instance, in mathematical logic, the set of possible formulas of a particular logic is a formal language, and an interpretation assigns a meaning to each of the formulasâusually, a truth value.
The study of interpretations of formal languages is called formal semantics.  In mathematical logic, this is often done in terms of model theory.  In model theory, the terms that occur in a formula are interpreted as objects within mathematical structures, and fixed compositional interpretation rules determine how the truth value of the formula can be derived from the interpretation of its terms; a model for a formula is an interpretation of terms such that the formula becomes true.

See also[edit]
Combinatorics on words
Free monoid
Formal method
Grammar framework
Mathematical notation
Associative array
String (computer science)
Notes[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ For example, first-order logic is often expressed using an alphabet that, besides symbols such as â§, Â¬, â and parentheses, contains infinitely many elements x0,Â x1,Â x2,Â â¦ that play the role of variables.


References[edit]
Citations[edit]


^ See e.g. .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Reghizzi, Stefano Crespi (2009), Formal Languages and Compilation, Texts in Computer Science, Springer, p.Â 8, Bibcode:2009flc..book.....C, ISBNÂ 9781848820500, An alphabet is a finite set.

^ Martin Davis (1995). "Influences of Mathematical Logic on Computer Science".  In Rolf Herken (ed.). The universal Turing machine: a half-century survey. Springer. p.Â 290. ISBNÂ 978-3-211-82637-9.

^ Hopcroft & Ullman (1979), Chapter 11: Closure properties of families of languages.


Sources[edit]
Works cited
.mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li{margin-left:0;padding-left:3.2em;text-indent:-3.2em}.mw-parser-output .refbegin-hanging-indents ul,.mw-parser-output .refbegin-hanging-indents ul li{list-style:none}@media(max-width:720px){.mw-parser-output .refbegin-hanging-indents>ul>li{padding-left:1.6em;text-indent:-1.6em}}.mw-parser-output .refbegin-columns{margin-top:0.3em}.mw-parser-output .refbegin-columns ul{margin-top:0}.mw-parser-output .refbegin-columns li{page-break-inside:avoid;break-inside:avoid-column}
.mw-parser-output .citation{word-wrap:break-word}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}John E. Hopcroft and Jeffrey D. Ullman, Introduction to Automata Theory, Languages, and Computation, Addison-Wesley Publishing, Reading Massachusetts, 1979. ISBNÂ 81-7808-347-7.

General references

A. G. Hamilton, Logic for Mathematicians, Cambridge University Press, 1978, ISBNÂ 0-521-21838-1.
Seymour Ginsburg, Algebraic and automata theoretic properties of formal languages, North-Holland, 1975, ISBNÂ 0-7204-2506-9.
Michael A. Harrison, Introduction to Formal Language Theory, Addison-Wesley, 1978.
Rautenberg, Wolfgang (2010). A Concise Introduction to Mathematical Logic (3rdÂ ed.). New York, NY: Springer Science+Business Media. doi:10.1007/978-1-4419-1221-3. ISBNÂ 978-1-4419-1220-6..
Grzegorz Rozenberg, Arto Salomaa, Handbook of Formal Languages: Volume I-III, Springer, 1997, ISBNÂ 3-540-61486-9.
Patrick Suppes, Introduction to Logic, D. Van Nostrand, 1957, ISBNÂ 0-442-08072-7.

External links[edit]



Wikimedia Commons has media related to Formal languages.

"Formal language", Encyclopedia of Mathematics, EMS Press, 2001 [1994]
University of Maryland, Formal Language Definitions
James Power, "Notes on Formal Language Theory and Parsing", 29 November 2002.
Drafts of some chapters in the "Handbook of Formal Language Theory", Vol. 1â3, G. Rozenberg and A. Salomaa (eds.), Springer Verlag, (1997):
Alexandru Mateescu and Arto Salomaa, "Preface" in Vol.1, pp. vâviii, and "Formal Languages: An Introduction and a Synopsis", Chapter 1 in Vol. 1, pp.1â39
Sheng Yu, "Regular Languages", Chapter 2 in Vol. 1
Jean-Michel Autebert, Jean Berstel, Luc Boasson, "Context-Free Languages and Push-Down Automata", Chapter 3 in Vol. 1
Christian Choffrut and Juhani KarhumÃ¤ki, "Combinatorics of Words", Chapter 6 in Vol. 1
Tero Harju and Juhani KarhumÃ¤ki, "Morphisms", Chapter 7 in Vol. 1, pp. 439â510
Jean-Eric Pin, "Syntactic semigroups", Chapter 10 in Vol. 1, pp. 679â746
M. Crochemore and C. Hancart, "Automata for matching patterns", Chapter 9 in Vol. 2
Dora Giammarresi, Antonio Restivo, "Two-dimensional Languages", Chapter 4 in Vol. 3, pp. 215â267
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}show.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteAutomata theory: formal languages and formal grammarsChomsky hierarchyGrammarsLanguagesAbstract machines
Type-0
â
Type-1
â
â
â
â
â
Type-2
â
â
Type-3
â
â

Unrestricted
(no common name)
Context-sensitive
Positive range concatenation
Indexed
â
Linear context-free rewriting systems
Tree-adjoining
Context-free
Deterministic context-free
Visibly pushdown
Regular
â
Non-recursive

Recursively enumerable
Decidable
Context-sensitive
Positive range concatenation*
Indexed*
â
Linear context-free rewriting language
Tree-adjoining
Context-free
Deterministic context-free
Visibly pushdown
Regular
Star-free
Finite

Turing machine
Decider
Linear-bounded
PTIME Turing Machine
Nested stack
Thread automaton
restricted Tree stack automaton
Embedded pushdown
Nondeterministic pushdown
Deterministic pushdown
Visibly pushdown
Finite
Counter-free (with aperiodic finite monoid)
Acyclic finite
Each category of languages, except those marked by a *, is a proper subset of the category directly above it. Any language in each category is generated by a grammar and by an automaton in the category in the same line.
showvteMathematical logicGeneral
Axiom
First-order logic
Formal proof
Logical consequence
Formal semantics
Foundations of mathematics
Model
Set
Theorem
Theory
Type theory
TheoremsÂ (list)
GÃ¶del's completenessÂ andÂ incompleteness theorems
Tarski's undefinability
BanachâTarski paradox
Cantor'sÂ theorem,Â paradoxÂ andÂ diagonal argument
LindstrÃ¶m's
LÃ¶wenheimâSkolem
Compactness
LogicsTraditional
Classical logic
Proposition
Inference
Logical equivalence
Argument
Validity
Syllogism
Square of opposition
Venn diagram
Propositional
Boolean algebra
Boolean functions
Logical connectives
Propositional calculus
Propositional formula
Truth tables
Many-valued logic
Predicate
First-order
Quantifiers
Predicate
Second-order
Monadic predicate calculus
Set theory
Set
Element
Ordered pair
Ordinal number
Russell's paradox
Power set
Subset
Relation
Function/Map
Domain
Codomain
Image
Extensionality
Forcing
Cardinality
Empty set
Inhabited set
Enumeration
Countable set
Uncountable set
Finite set
Infinite set
Class
SchrÃ¶derâBernstein theorem
Set theories
ZermeloâFraenkel
Axiom of choice
Continuum hypothesis
General
KripkeâPlatek
MorseâKelley
Naive
TarskiâGrothendieck
Von NeumannâBernaysâGÃ¶del
SyntaxÂ &Â Language
Alphabet
Arity
Expression
Ground
Extension
Relation
Formal
Grammar
Language
Proof
System
Theory
Formation rule
Formula
Atomic
Open
Free/bound variable
Logical connective
Â¬
â¨
â§
â
â
=
Predicate
Functional
Variable
Propositional variable
Quantifier
â
â
Sentence
Atomic
Signature
String
Substitution
Symbol
Function
Logical/Constant
Non-logical
Variable
Term
Proof theory
Formal proof
Natural deduction
Logical consequence
Rule of inference
Sequent calculus
Theorem
Systems
Formal
Axiomatic
Deductive
Hilbert
Complete theory
IndependenceÂ (fromÂ ZFC)
Model theory
Interpretation
Model
Equivalence
Finite
Saturated
Substructure
Non-standard model
of arithmetic
Diagram
Elementary
Categorical theory
Model complete theory
Strength
Semantics of logic
Theories of truth
Semantic
Tarski's
Kripke's
T-schema
Transfer principle
Truth predicate
Truth value
Type
Ultraproduct
Validity
Computability theory
ChurchâTuring thesis
Computably enumerable
Computable function
Computable set
Decision problem
Halting problem
Primitive recursive function
Recursion
Recursive set

showAuthority control General
Integrated Authority File (Germany)
National libraries
France (data)
United States
Japan





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Formal_language&oldid=1069224063"
		Categories: Formal languagesTheoretical computer scienceCombinatorics on wordsHidden categories: Articles with short descriptionShort description is different from WikidataUse dmy dates from July 2013Articles to be expanded from March 2021All articles to be expandedArticles using small message boxesCommons category link is on WikidataArticles with GND identifiersArticles with BNF identifiersArticles with LCCN identifiersArticles with NDL identifiers
	
