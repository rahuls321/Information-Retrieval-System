
Title:
Linear search
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Sequentially looking in an array
This article has multiple issues. Please help improve it or discuss these issues on the talk page. (Learn how and when to remove these template messages)

      This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources:Â "Linear search"Â âÂ newsÂ Â· newspapersÂ Â· booksÂ Â· scholarÂ Â· JSTOR  (November 2010) (Learn how and when to remove this template message)
This article relies largely or entirely on a single source. Relevant discussion may be found on the talk page. Please help improve this article by introducing  citations to additional sources.Find sources:Â "Linear search"Â âÂ newsÂ Â· newspapersÂ Â· booksÂ Â· scholarÂ Â· JSTOR  (November 2010)
    
 (Learn how and when to remove this template message)
.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}Linear searchClassSearch algorithmWorst-case performanceO(n)Best-case performanceO(1)Average performanceO(n/2)Worst-case space complexityO(1) iterative
In computer science, a linear search or sequential search is a method for finding an element within a list. It sequentially checks each element of the list until a match is found or the whole list has been searched.[1]
A linear search runs in at worst linear time and makes at most n comparisons, where n is the length of the list. If each element is equally likely to be searched, then linear search has an average case of .mw-parser-output .sfrac{white-space:nowrap}.mw-parser-output .sfrac.tion,.mw-parser-output .sfrac .tion{display:inline-block;vertical-align:-0.5em;font-size:85%;text-align:center}.mw-parser-output .sfrac .num,.mw-parser-output .sfrac .den{display:block;line-height:1em;margin:0 0.1em}.mw-parser-output .sfrac .den{border-top:1px solid}.mw-parser-output .sr-only{border:0;clip:rect(0,0,0,0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}n+1/2 comparisons, but the average case can be affected if the search probabilities for each element vary. Linear search is rarely practical because other search algorithms and schemes, such as the binary search algorithm and hash tables, allow significantly faster searching for all but short lists.[2]

Contents

1 Algorithm

1.1 Basic algorithm
1.2 With a sentinel
1.3 In an ordered table


2 Analysis

2.1 Non-uniform probabilities


3 Application
4 See also
5 References

5.1 Citations
5.2 Works





Algorithm[edit]
A linear search sequentially checks each element of the list until it finds an element that matches the target value. If the algorithm reaches the end of the list, the search terminates unsuccessfully.[1]

Basic algorithm[edit]
Given a list L of n elements with values or records L0 .... Lnâ1, and target value T, the following subroutine uses linear search to find the index of the target T in L.[3]

Set i to 0.
If Li = T, the search terminates successfully; return i.
Increase i by 1.
If i < n, go to step 2. Otherwise, the search terminates unsuccessfully.
With a sentinel[edit]
The basic algorithm above makes two comparisons per iteration: one to check if Li equals T, and the other to check if i still points to a valid index of the list. By adding an extra record Ln to the list (a sentinel value) that equals the target, the second comparison can be eliminated until the end of the search, making the algorithm faster. The search will reach the sentinel if the target is not contained within the list.[4]

Set i to 0.
If Li = T, go to step 4.
Increase i by 1 and go to step 2.
If i < n, the search terminates successfully; return i. Else, the search terminates unsuccessfully.
In an ordered table[edit]
If the list is ordered such that L0 â¤ L1 ... â¤ Lnâ1, the search can establish the absence of the target more quickly by concluding the search once Li exceeds the target. This variation requires a sentinel that is greater than the target.[5]

Set i to 0.
If Li â¥ T, go to step 4.
Increase i by 1 and go to step 2.
If Li = T, the search terminates successfully; return i. Else, the search terminates unsuccessfully.
Analysis[edit]
For a list with n items, the best case is when the value is equal to the first element of the list, in which case only one comparison is needed. The worst case is when the value is not in the list (or occurs only once at the end of the list), in which case n comparisons are needed.
If the value being sought occurs k times in the list, and all orderings of the list are equally likely, the expected number of comparisons is


  
    
      
        
          
            {
            
              
                
                  n
                
                
                  
                    
                      ifÂ 
                    
                  
                  k
                  =
                  0
                
              
              
                
                  
                    
                      
                        
                          n
                          +
                          1
                        
                        
                          k
                          +
                          1
                        
                      
                    
                  
                
                
                  
                    
                      ifÂ 
                    
                  
                  1
                  â¤
                  k
                  â¤
                  n
                  .
                
              
            
            
          
        
      
    
    {\displaystyle {\begin{cases}n&{\mbox{if }}k=0\\[5pt]\displaystyle {\frac {n+1}{k+1}}&{\mbox{if }}1\leq k\leq n.\end{cases}}}
  

For example, if the value being sought occurs once in the list, and all orderings of the list are equally likely, the expected number of comparisons is 
  
    
      
        
          
            
              n
              +
              1
            
            2
          
        
      
    
    {\displaystyle {\frac {n+1}{2}}}
  
. However, if it is known that it occurs once, then at most n - 1 comparisons are needed, and the expected number of comparisons is 


  
    
      
        
          
            
              
                (
                n
                +
                2
                )
                (
                n
                â
                1
                )
              
              
                2
                n
              
            
          
        
      
    
    {\displaystyle \displaystyle {\frac {(n+2)(n-1)}{2n}}}
  

(for example, for n = 2 this is 1, corresponding to a single if-then-else construct).
Either way, asymptotically the worst-case cost and the expected cost of linear search are both O(n).

Non-uniform probabilities[edit]
The performance of linear search improves if the desired value is more likely to be near the beginning of the list than to its end.  Therefore, if some values are much more likely to be searched than others,  it is desirable to place them at the beginning of the list.
In particular, when the list items are arranged in order of decreasing probability, and these probabilities are geometrically distributed, the cost of linear search is only O(1). [6]

Application[edit]
Linear search is usually very simple to implement, and is practical when the list has only a few elements, or when performing a single search in an un-ordered list.
When many values have to be searched in the same list, it often pays to pre-process the list in order to use a faster method. For example, one may sort the list and use binary search, or build an efficient search data structure from it. Should the content of the list change frequently, repeated re-organization may be more trouble than it is worth.
As a result, even though in theory other search algorithms may be faster than linear search (for instance binary search), in practice even on medium-sized arrays (around 100 items or less) it might be infeasible to use anything else. On larger arrays, it only makes sense to use other, faster search methods if the data is large enough, because the initial time to prepare (sort) the data is comparable to many linear searches.[7]

See also[edit]
Ternary search
Hash table
Linear search problem
References[edit]
Citations[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ Jump up to: a b Knuth 1998, Â§6.1 ("Sequential search"). sfn error: no target: CITEREFKnuth1998 (help)

^ Knuth 1998, Â§6.2 ("Searching by Comparison Of Keys"). sfn error: no target: CITEREFKnuth1998 (help)

^ Knuth 1998, Â§6.1 ("Sequential search"), subsection "Algorithm B". sfn error: no target: CITEREFKnuth1998 (help)

^ Knuth 1998, Â§6.1 ("Sequential search"), subsection "Algorithm Q". sfn error: no target: CITEREFKnuth1998 (help)

^ Knuth 1998, Â§6.1 ("Sequential search"), subsection "Algorithm T". sfn error: no target: CITEREFKnuth1998 (help)

^ 
  .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Knuth, Donald (1997). "Section 6.1: Sequential Searching". Sorting and Searching. The Art of Computer Programming. Vol.Â 3 (3rdÂ ed.). Addison-Wesley. pp.Â 396â408. ISBNÂ 0-201-89685-0.

^ Horvath, Adam. "Binary search and linear search performance on the .NET and Mono platform". Retrieved 19 April 2013.


Works[edit]
Knuth, Donald (1998). Sorting and Searching. The Art of Computer Programming. Vol.Â 3 (2ndÂ ed.). Reading, MA: Addison-Wesley Professional. ISBNÂ 0-201-89685-0




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Linear_search&oldid=1048704959"
		Categories: Search algorithmsHidden categories: Harv and Sfn no-target errorsArticles with short descriptionShort description is different from WikidataArticles needing additional references from November 2010All articles needing additional referencesArticles with multiple maintenance issues
	
