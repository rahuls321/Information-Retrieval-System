
Title:
Levenshtein distance
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Computer science metric for string similarity
In information theory, linguistics, and computer science, the Levenshtein distance is a string metric for measuring the difference between two sequences. Informally, the Levenshtein distance between two words is the minimum number of single-character edits (insertions, deletions or substitutions) required to change one word into the other. It is named after the Soviet mathematician Vladimir Levenshtein, who considered this distance in 1965.[1]
Levenshtein distance may also be referred to as edit distance, although that term may also denote a larger family of distance metrics known collectively as edit distance.[2]:â32â It is closely related to pairwise string alignments.

Contents

1 Definition

1.1 Example
1.2 Upper and lower bounds


2 Applications
3 Relationship with other edit distance metrics
4 Computation

4.1 Recursive
4.2 Iterative with full matrix
4.3 Iterative with two matrix rows
4.4 Automata
4.5 Approximation
4.6 Computational complexity


5 See also
6 References
7 External links



Definition[edit]
The Levenshtein distance between two strings 
  
    
      
        a
        ,
        b
      
    
    {\displaystyle a,b}
  
 (of length 
  
    
      
        
          |
        
        a
        
          |
        
      
    
    {\displaystyle |a|}
  
 and 
  
    
      
        
          |
        
        b
        
          |
        
      
    
    {\displaystyle |b|}
  
 respectively) is given by 
  
    
      
        lev
        â¡
        (
        a
        ,
        b
        )
      
    
    {\displaystyle \operatorname {lev} (a,b)}
  
 where


  
    
      
        lev
        â¡
        (
        a
        ,
        b
        )
        =
        
          
            {
            
              
                
                  
                    |
                  
                  a
                  
                    |
                  
                
                
                  
                    Â ifÂ 
                  
                  
                    |
                  
                  b
                  
                    |
                  
                  =
                  0
                  ,
                
              
              
                
                  
                    |
                  
                  b
                  
                    |
                  
                
                
                  
                    Â ifÂ 
                  
                  
                    |
                  
                  a
                  
                    |
                  
                  =
                  0
                  ,
                
              
              
                
                  lev
                  â¡
                  
                    
                      (
                    
                  
                  tail
                  â¡
                  (
                  a
                  )
                  ,
                  tail
                  â¡
                  (
                  b
                  )
                  
                    
                      )
                    
                  
                
                
                  
                    Â ifÂ 
                  
                  a
                  [
                  0
                  ]
                  =
                  b
                  [
                  0
                  ]
                
              
              
                
                  1
                  +
                  min
                  
                    
                      {
                      
                        
                          
                            lev
                            â¡
                            
                              
                                (
                              
                            
                            tail
                            â¡
                            (
                            a
                            )
                            ,
                            b
                            
                              
                                )
                              
                            
                          
                        
                        
                          
                            lev
                            â¡
                            
                              
                                (
                              
                            
                            a
                            ,
                            tail
                            â¡
                            (
                            b
                            )
                            
                              
                                )
                              
                            
                          
                        
                        
                          
                            lev
                            â¡
                            
                              
                                (
                              
                            
                            tail
                            â¡
                            (
                            a
                            )
                            ,
                            tail
                            â¡
                            (
                            b
                            )
                            
                              
                                )
                              
                            
                          
                        
                      
                      
                    
                  
                
                
                  
                    Â otherwise,
                  
                
              
            
            
          
        
      
    
    {\displaystyle \operatorname {lev} (a,b)={\begin{cases}|a|&{\text{ if }}|b|=0,\\|b|&{\text{ if }}|a|=0,\\\operatorname {lev} {\big (}\operatorname {tail} (a),\operatorname {tail} (b){\big )}&{\text{ if }}a[0]=b[0]\\1+\min {\begin{cases}\operatorname {lev} {\big (}\operatorname {tail} (a),b{\big )}\\\operatorname {lev} {\big (}a,\operatorname {tail} (b){\big )}\\\operatorname {lev} {\big (}\operatorname {tail} (a),\operatorname {tail} (b){\big )}\\\end{cases}}&{\text{ otherwise,}}\end{cases}}}
  

where the 
  
    
      
        tail
      
    
    {\displaystyle \operatorname {tail} }
  
 of some string 
  
    
      
        x
      
    
    {\displaystyle x}
  
 is a string of all but the first character of 
  
    
      
        x
      
    
    {\displaystyle x}
  
, and 
  
    
      
        x
        [
        n
        ]
      
    
    {\displaystyle x[n]}
  
 is the 
  
    
      
        n
      
    
    {\displaystyle n}
  
th character of the string 
  
    
      
        x
      
    
    {\displaystyle x}
  
, counting fromÂ 0.
Note that the first element in the minimum corresponds to deletion (from 
  
    
      
        a
      
    
    {\displaystyle a}
  
 to 
  
    
      
        b
      
    
    {\displaystyle b}
  
), the second to insertion and the third to replacement.
This definition corresponds directly to the naive recursive implementation.

Example[edit]
  Edit distance matrix for two words using cost of substitution as 1 and cost of deletion or insertion as 0.5
For example, the Levenshtein distance between "kitten" and "sitting" is 3, since the following 3 edits change one into the other, and there is no way to do it with fewer than 3 edits:

kitten â sitten (substitution of "s" for "k"),
sitten â sittin (substitution of "i" for "e"),
sittin â sitting (insertion of "g" at the end).
Upper and lower bounds[edit]
The Levenshtein distance has several simple upper and lower bounds. These include:

It is at least the difference of the sizes of the two strings.
It is at most the length of the longer string.
It is zero if and only if the strings are equal.
If the strings have the same size, the Hamming distance is an upper bound on the Levenshtein distance. The Hamming distance is the number of positions at which the corresponding symbols in the two strings are different.
The Levenshtein distance between two strings is no greater than the sum of their Levenshtein distances from a third string (triangle inequality).
An example where the Levenshtein distance between two strings of the same length is strictly less than the Hamming distance is given by the pair "flaw" and "lawn". Here the Levenshtein distance equals 2 (delete "f" from the front; insert "n" at the end). The Hamming distance is 4.

Applications[edit]
In approximate string matching, the objective is to find matches for short strings in many longer texts, in situations where a small number of differences is to be expected. The short strings could come from a dictionary, for instance. Here, one of the strings is typically short, while the other is arbitrarily long. This has a wide range of applications, for instance, spell checkers, correction systems for optical character recognition, and software to assist natural-language translation based on translation memory.
The Levenshtein distance can also be computed between two longer strings, but the cost to compute it, which is roughly proportional to the product of the two string lengths, makes this impractical. Thus, when used to aid in fuzzy string searching in applications such as record linkage, the compared strings are usually short to help improve speed of comparisons.[citation needed]
In linguistics, the Levenshtein distance is used as a metric to quantify the linguistic distance, or how different two languages are from one another.[3] It is related to mutual intelligibility: the higher the linguistic distance, the lower the mutual intelligibility, and the lower the linguistic distance, the higher the mutual intelligibility.

Relationship with other edit distance metrics[edit]
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}Main article: Edit distance
There are other popular measures of edit distance, which are calculated using a different set of allowable edit operations. For instance,

the DamerauâLevenshtein distance allows the transposition of two adjacent characters alongside insertion, deletion, substitution;
the longest common subsequence (LCS) distance allows only insertion and deletion, not substitution;
the Hamming distance allows only substitution, hence, it only applies to strings of the same length.
the Jaro distance allows only transposition.
Edit distance is usually defined as a parameterizable metric calculated with a specific set of allowed edit operations, and each operation is assigned a cost (possibly infinite). This is further generalized by DNA sequence alignment algorithms such as the SmithâWaterman algorithm, which make an operation's cost depend on where it is applied.

Computation[edit]
Recursive[edit]
This is a straightforward, but inefficient, recursive Haskell implementation of a lDistance function that takes two strings, s and t, together with their lengths, and returns the Levenshtein distance between them:

lDistance :: Eq a => [a] -> [a] -> Int
lDistance [] t = length t -- If s is empty, the distance is the number of characters in t
lDistance s [] = length s -- If t is empty, the distance is the number of characters in s
lDistance (a : s') (b : t') =
  if a == b
    then lDistance s' t' -- If the first characters are the same, they can be ignored
    else
      1
        + minimum -- Otherwise try all three possible actions and select the best one
          [ lDistance (a : s') t', -- Character is inserted (b inserted)
            lDistance s' (b : t'), -- Character is deleted  (a deleted)
            lDistance s' t' -- Character is replaced (a replaced with b)
          ]

This implementation is very inefficient because it recomputes the Levenshtein distance of the same substrings many times.
A more efficient method would never repeat the same distance calculation. For example, the Levenshtein distance of all possible prefixes might be stored in an array 
  
    
      
        M
      
    
    {\displaystyle M}
  
, where 
  
    
      
        M
        [
        i
        ]
        [
        j
        ]
      
    
    {\displaystyle M[i][j]}
  
 is the distance between the last 
  
    
      
        i
      
    
    {\displaystyle i}
  
 characters of string s and the last 
  
    
      
        j
      
    
    {\displaystyle j}
  
 characters of string t. The table is easy to construct one row at a time starting with rowÂ 0. When the entire table has been built, the desired distance is in the table in the last row and column, representing the distance between all of the characters in s and all the characters in t.

Iterative with full matrix[edit]
Main article: WagnerâFischer algorithm
(Note: This section uses 1-based strings instead of 0-based strings.)
Computing the Levenshtein distance is based on the observation that if we reserve a matrix to hold the Levenshtein distances between all prefixes of the first string and all prefixes of the second, then we can compute the values in the matrix in a dynamic programming fashion, and thus find the distance between the two full strings as the last value computed.
This algorithm, an example of bottom-up dynamic programming, is discussed, with variants, in the 1974 article The String-to-string correction problem by Robert A.Â Wagner and Michael J.Â Fischer.[4]
This is a straightforward pseudocode implementation for a function LevenshteinDistance that takes two strings, s of length m, and t of length n, and returns the Levenshtein distance between them:

function LevenshteinDistance(char s[1..m], char t[1..n]):
  // for all i and j, d[i,j] will hold the Levenshtein distance between
  // the first i characters of s and the first j characters of t
  declare int d[0..m, 0..n]
 
  set each element in d to zero
 
  // source prefixes can be transformed into empty string by
  // dropping all characters
  for i from 1 to m:
    d[i, 0] := i
 
  // target prefixes can be reached from empty source prefix
  // by inserting every character
  for j from 1 to n:
    d[0, j] := j
 
  for j from 1 to n:
    for i from 1 to m:
      if s[i] = t[j]:
        substitutionCost := 0
      else:
        substitutionCost := 1

      d[i, j] := minimum(d[i-1, j] + 1,                   // deletion
                         d[i, j-1] + 1,                   // insertion
                         d[i-1, j-1] + substitutionCost)  // substitution
 
  return d[m, n]

Two examples of the resulting matrix (hovering over a tagged number reveals the operation performed to get that number):













k

i

t

t

e

n



0
1
2
3
4
5
6


s

1
1
2
3
4
5
6


i

2
2
1
2
3
4
5


t

3
3
2
1
2
3
4


t

4
4
3
2
1
2
3


i

5
5
4
3
2
2
3


n

6
6
5
4
3
3
2


g

7
7
6
5
4
4
3









S

a

t

u

r

d

a

y




0
1
2
3
4
5
6
7
8


S

1
0
1
2
3
4
5
6
7


u

2
1
1
2
2
3
4
5
6


n

3
2
2
2
3
3
4
5
6


d

4
3
3
3
3
4
3
4
5


a

5
4
3
4
4
4
4
3
4


y

6
5
4
4
5
5
5
4
3

 


The invariant maintained throughout the algorithm is that we can transform the initial segment s[1..i] into t[1..j] using a minimum of d[i, j] operations. At the end, the bottom-right element of the array contains the answer.

Iterative with two matrix rows[edit]
It turns out that only two rows of the tableÂ â  the previous row and the current row being calculatedÂ â  are needed for the construction, if one does not want to reconstruct the edited input strings.
The Levenshtein distance may be calculated iteratively using the following algorithm:[5]

function LevenshteinDistance(char s[0..m-1], char t[0..n-1]):
    // create two work vectors of integer distances
    declare int v0[n + 1]
    declare int v1[n + 1]

    // initialize v0 (the previous row of distances)
    // this row is A[0][i]: edit distance from an empty s to t;
    // that distance is the number of characters to append to  s to make t.
    for i from 0 to n:
        v0[i] = i

    for i from 0 to m - 1:
        // calculate v1 (current row distances) from the previous row v0

        // first element of v1 is A[i + 1][0]
        //   edit distance is delete (i + 1) chars from s to match empty t
        v1[0] = i + 1

        // use formula to fill in the rest of the row
        for j from 0 to n - 1:
            // calculating costs for A[i + 1][j + 1]
            deletionCost := v0[j + 1] + 1
            insertionCost := v1[j] + 1
            if s[i] = t[j]:
                substitutionCost := v0[j]
            else:
                substitutionCost := v0[j] + 1

            v1[j + 1] := minimum(deletionCost, insertionCost, substitutionCost)

        // copy v1 (current row) to v0 (previous row) for next iteration
        // since data in v1 is always invalidated, a swap without copy could be more efficient
        swap v0 with v1
    // after the last swap, the results of v1 are now in v0
    return v0[n]


Hirschberg's algorithm combines this method with divide and conquer. It can compute the optimal edit sequence, and not just the edit distance, in the same asymptotic time and space bounds.[6]

Automata[edit]
Levenshtein automata efficiently determine whether a string has an edit distance lower than a given constant from a given string.[7]

Approximation[edit]
The Levenshtein distance between two strings of length n can be approximated to within a factor


  
    
      
        (
        log
        â¡
        n
        
          )
          
            O
            (
            1
            
              /
            
            Îµ
            )
          
        
        ,
      
    
    {\displaystyle (\log n)^{O(1/\varepsilon )},}
  

where Îµ > 0 is a free parameter to be tuned, in time O(n1 + Îµ).[8]

Computational complexity[edit]
It has been shown that the Levenshtein distance of two strings of length n cannot be computed in time O(n2 â Îµ) for any Îµ greater than zero unless the strong exponential time hypothesis is false.[9]

See also[edit]
.mw-parser-output .div-col{margin-top:0.3em;column-width:30em}.mw-parser-output .div-col-small{font-size:90%}.mw-parser-output .div-col-rules{column-rule:1px solid #aaa}.mw-parser-output .div-col dl,.mw-parser-output .div-col ol,.mw-parser-output .div-col ul{margin-top:0}.mw-parser-output .div-col li,.mw-parser-output .div-col dd{page-break-inside:avoid;break-inside:avoid-column}
agrep
DamerauâLevenshtein distance
diff
Dynamic time warping
Euclidean distance
Homology of sequences in genetics
Hamming distance
HuntâSzymanski algorithm
Jaccard index
Locality-sensitive hashing
Longest common subsequence problem
Lucene (an open source search engine that implements edit distance)
Manhattan distance
Metric space
MinHash
Optimal matching algorithm
Numerical taxonomy
SÃ¸rensen similarity index

References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Ð. Ð. ÐÐµÐ²ÐµÐ½ÑÑÐµÐ¹Ð½ (1965). ÐÐ²Ð¾Ð¸ÑÐ½ÑÐµ ÐºÐ¾Ð´Ñ Ñ Ð¸ÑÐ¿ÑÐ°Ð²Ð»ÐµÐ½Ð¸ÐµÐ¼ Ð²ÑÐ¿Ð°Ð´ÐµÐ½Ð¸Ð¹, Ð²ÑÑÐ°Ð²Ð¾Ðº Ð¸ Ð·Ð°Ð¼ÐµÑÐµÐ½Ð¸Ð¹ ÑÐ¸Ð¼Ð²Ð¾Ð»Ð¾Ð² [Binary codes capable of correcting deletions, insertions, and reversals]. ÐÐ¾ÐºÐ»Ð°Ð´Ñ ÐÐºÐ°Ð´ÐµÐ¼Ð¸Ð¸ ÐÐ°ÑÐº Ð¡Ð¡Ð¡Ð  (in Russian). 163 (4): 845â848. Appeared in English as: Levenshtein, Vladimir I. (February 1966). "Binary codes capable of correcting deletions, insertions, and reversals". Soviet Physics Doklady. 10 (8): 707â710. Bibcode:1966SPhD...10..707L.

^ Navarro, Gonzalo (2001). "A guided tour to approximate string matching" (PDF). ACM Computing Surveys. 33 (1): 31â88. CiteSeerXÂ 10.1.1.452.6317. doi:10.1145/375360.375365. S2CIDÂ 207551224.

^ Jan D. ten Thije; Ludger Zeevaert (1 January 2007), Receptive multilingualism: linguistic analyses, language policies, and didactic concepts, John Benjamins Publishing Company, ISBNÂ 978-90-272-1926-8, Assuming that intelligibility is inversely related to linguistic distance ... the content words the percentage of cognates (related directly or via a synonym) ... lexical relatedness ... grammatical relatedness{{citation}}:  CS1 maint: date and year (link).

^ Wagner, Robert A.; Fischer, Michael J. (1974), "The String-to-String Correction Problem", Journal of the ACM, 21 (1): 168â173, doi:10.1145/321796.321811, S2CIDÂ 13381535

^ Hjelmqvist, Sten (26 March 2012), Fast, memory efficient Levenshtein algorithm.

^ Hirschberg, D. S. (1975). "A linear space algorithm for computing maximal common subsequences" (PDF). Communications of the ACM (Submitted manuscript). 18 (6): 341â343. CiteSeerXÂ 10.1.1.348.4774. doi:10.1145/360825.360861. MRÂ 0375829. S2CIDÂ 207694727.

^ Schulz, Klaus U.; Mihov, Stoyan (2002). "Fast String Correction with Levenshtein-Automata". International Journal of Document Analysis and Recognition. 5 (1): 67â85. CiteSeerXÂ 10.1.1.16.652. doi:10.1007/s10032-002-0082-8. S2CIDÂ 207046453.

^ Andoni, Alexandr; Krauthgamer, Robert; Onak, Krzysztof (2010). Polylogarithmic approximation for edit distance and the asymmetric query complexity. IEEE Symp. Foundations of Computer Science (FOCS). arXiv:1005.4033. Bibcode:2010arXiv1005.4033A. CiteSeerXÂ 10.1.1.208.2079.

^ Backurs, Arturs; Indyk, Piotr (2015). Edit Distance Cannot Be Computed in Strongly Subquadratic Time (unless SETH is false). Forty-Seventh Annual ACM on Symposium on Theory of Computing (STOC). arXiv:1412.0348. Bibcode:2014arXiv1412.0348B.


External links[edit]



The Wikibook Algorithm implementation has a page on the topic of: Levenshtein distance

Black, Paul E., ed. (14 August 2008), "Levenshtein distance", Dictionary of Algorithms and Data Structures [online], U.S. National Institute of Standards and Technology, retrieved 2 November 2016
Rosseta Code implementations of Levenshtein distance
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteNatural language processingGeneral terms
AI-complete
Bag-of-words
n-gram
Bigram
Trigram
Computational linguistics
Natural-language understanding
Stop words
Text processing
Text analysis
Collocation extraction
Concept mining
Coreference resolution
Deep linguistic processing
Distant reading
Information extraction
Named-entity recognition
Ontology learning
Parsing
Part-of-speech tagging
Semantic role labeling
Semantic similarity
Sentiment analysis
Terminology extraction
Text mining
Textual entailment
Truecasing
Word-sense disambiguation
Word-sense induction
Text segmentation
Compound-term processing
Lemmatisation
Lexical analysis
Text chunking
Stemming
Sentence segmentation
Word segmentation

Automatic summarization
Multi-document summarization
Sentence extraction
Text simplification
Machine translation
Computer-assisted
Example-based
Rule-based
Statistical
Transfer-based
Neural
Distributional semantics models
BERT
Document-term matrix
Explicit semantic analysis
fastText
GloVe
Latent semantic analysis
Word embedding
Word2vec
Language resources, datasets and corporaTypes and standards
Corpus linguistics
Lexical resource
Linguistic Linked Open Data
Machine-readable dictionary
Parallel text
PropBank
Semantic network
Simple Knowledge Organization System
Speech corpus
Text corpus
Thesaurus (information retrieval)
Treebank
Universal Dependencies
Data
BabelNet
Bank of English
DBpedia
FrameNet
Google Ngram Viewer
ThoughtTreasure
UBY
WordNet
Automatic identificationand data capture
Speech recognition
Speech segmentation
Speech synthesis
Natural language generation
Optical character recognition
Topic model
Document classification
Latent Dirichlet allocation
Pachinko allocation
Computer-assistedreviewing
Automated essay scoring
Concordancer
Grammar checker
Predictive text
Spell checker
Syntax guessing
Natural languageuser interface
Chatbot
Interactive fiction
Question answering
Virtual assistant
Voice user interface
Other software
Natural Language Toolkit
spaCy

vteStringsString metric
Approximate string matching
Bitap algorithm
DamerauâLevenshtein distance
Edit distance
Gestalt Pattern Matching
Hamming distance
JaroâWinkler distance
Lee distance
Levenshtein automaton
Levenshtein distance
WagnerâFischer algorithm 
String-searching algorithm
ApostolicoâGiancarlo algorithm
BoyerâMoore string-search algorithm
BoyerâMooreâHorspool algorithm
KnuthâMorrisâPratt algorithm
RabinâKarp algorithm
Multiple string searching
AhoâCorasick
Commentz-Walter algorithm
Regular expression
Comparison of regular-expression engines
Regular grammar
Thompson's construction
Nondeterministic finite automaton
Sequence alignment
Hirschberg's algorithm
NeedlemanâWunsch algorithm
SmithâWaterman algorithm
Data structure
DAFSA
Suffix array
Suffix automaton
Suffix tree
Generalized suffix tree
Rope
Ternary search tree
Trie
Other
Parsing
Pattern matching
Compressed pattern matching
Longest common subsequence
Longest common substring
Sequential pattern mining
Sorting







<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Levenshtein_distance&oldid=1067984406"
		Categories: String metricsDynamic programmingQuantitative linguisticsHidden categories: CS1 uses Russian-language script (ru)CS1 Russian-language sources (ru)CS1 maint: date and yearArticles with short descriptionShort description matches WikidataAll articles with unsourced statementsArticles with unsourced statements from January 2019Use dmy dates from April 2017Articles with example pseudocode
	
