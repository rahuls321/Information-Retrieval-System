
Title:
Monte Carlo method
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}Not to be confused with Monte Carlo algorithm.
Probabilistic problem-solving algorithm
Monte Carlo methods, or Monte Carlo experiments, are a broad class of computational algorithms that rely on repeated random sampling to obtain numerical results. The underlying concept is to use randomness to solve problems that might be deterministic in principle. They are often used in physical and mathematical problems and are most useful when it is difficult or impossible to use other approaches. Monte Carlo methods are mainly used in three problem classes:[1] optimization, numerical integration, and generating draws from a probability distribution.
In physics-related problems, Monte Carlo methods are useful for simulating systems with many coupled degrees of freedom, such as fluids, disordered materials, strongly coupled solids, and cellular structures (see cellular Potts model, interacting particle systems, McKeanâVlasov processes, kinetic models of gases).
Other examples include modeling phenomena with significant uncertainty in inputs such as the calculation of risk in business and, in mathematics, evaluation of multidimensional definite integrals with complicated boundary conditions.  In application to systems engineering problems (space, oil exploration, aircraft design, etc.), Monte Carloâbased predictions of failure, cost overruns and schedule overruns are routinely better than human intuition or alternative "soft" methods.[2]
In principle, Monte Carlo methods can be used to solve any problem having a probabilistic interpretation. By the law of large numbers, integrals described by the expected value of some random variable can be approximated by taking the empirical mean (a.k.a. the sample mean) of independent samples of the variable. When the probability distribution of the variable is parametrized, mathematicians often use a Markov chain Monte Carlo (MCMC) sampler.[3][4][5] The central idea is to design a judicious Markov chain model with a prescribed stationary probability distribution. That is, in the limit, the samples being generated by the MCMC method will be samples from the desired (target) distribution.[6][7] By the ergodic theorem, the stationary distribution is approximated by the empirical measures of the random states of the MCMC sampler.
In other problems, the objective is generating draws from a sequence of probability distributions satisfying a nonlinear evolution equation. These flows of probability distributions can always be interpreted as the distributions of the random states of a Markov process whose transition probabilities depend on the distributions of the current random states (see McKeanâVlasov processes, nonlinear filtering equation).[8][9] In other instances we are given a flow of probability distributions with an increasing level of sampling complexity (path spaces models with an increasing time horizon, BoltzmannâGibbs measures associated with decreasing temperature parameters, and many others). These models can also be seen as the evolution of the law of the random states of a nonlinear Markov chain.[9][10] A natural way to simulate these sophisticated nonlinear Markov processes is to sample multiple copies of the process, replacing in the evolution equation the unknown distributions of the random states by the sampled empirical measures. In contrast with traditional Monte Carlo and MCMC methodologies, these mean-field particle techniques rely on sequential interacting samples. The terminology mean field reflects the fact that each of the samples (a.k.a. particles, individuals, walkers, agents, creatures, or phenotypes) interacts with the empirical measures of the process. When the size of the system tends to infinity, these random empirical measures converge to the deterministic distribution of the random states of the nonlinear Markov chain, so that the statistical interaction between particles vanishes.
Despite its conceptual and algorithmic simplicity, the computational cost associated with a Monte Carlo simulation can be staggeringly high. In general the method requires many samples to get a good approximation, which may incur an arbitrarily large total runtime if the processing time of a single sample is high.[11] Although this is a severe limitation in very complex problems, the embarrassingly parallel nature of the algorithm allows this large cost to be reduced (perhaps to a feasible level) through parallel computing strategies in local processors, clusters, cloud computing, GPU, FPGA etc.[12][13][14][15]

Contents

1 Overview
2 History
3 Definitions

3.1 Monte Carlo and random numbers
3.2 Monte Carlo simulation versus "what if" scenarios


4 Applications

4.1 Physical sciences
4.2 Engineering
4.3 Climate change and radiative forcing
4.4 Computational biology
4.5 Computer graphics
4.6 Applied statistics
4.7 Artificial intelligence for games
4.8 Design and visuals
4.9 Search and rescue
4.10 Finance and business
4.11 Law
4.12 Library Science


5 Use in mathematics

5.1 Integration
5.2 Simulation and optimization
5.3 Inverse problems
5.4 Philosophy


6 See also
7 References

7.1 Citations
7.2 Sources


8 External links



Overview[edit]
Monte Carlo methods vary, but tend to follow a particular pattern:

Define a domain of possible inputs
Generate inputs randomly from a probability distribution over the domain
Perform a deterministic computation on the inputs
Aggregate the results
  Monte Carlo method applied to approximating the value of Ï.
For example, consider a quadrant (circular sector) inscribed in a unit square. Given that the ratio of their areas is .mw-parser-output .sfrac{white-space:nowrap}.mw-parser-output .sfrac.tion,.mw-parser-output .sfrac .tion{display:inline-block;vertical-align:-0.5em;font-size:85%;text-align:center}.mw-parser-output .sfrac .num,.mw-parser-output .sfrac .den{display:block;line-height:1em;margin:0 0.1em}.mw-parser-output .sfrac .den{border-top:1px solid}.mw-parser-output .sr-only{border:0;clip:rect(0,0,0,0);height:1px;margin:-1px;overflow:hidden;padding:0;position:absolute;width:1px}Ï/4, the value of Ï can be approximated using a Monte Carlo method:[16]

Draw a square, then inscribe a quadrant within it
Uniformly scatter a given number of points over the square
Count the number of points inside the quadrant, i.e. having a distance from the origin of less than 1
The ratio of the inside-count and the total-sample-count is an estimate of the ratio of the two areas, Ï/4. Multiply the result by 4 to estimate Ï.
In this procedure the domain of inputs is the square that circumscribes the quadrant.  We generate random inputs by scattering grains over the square then perform a computation on each input (test whether it falls within the quadrant). Aggregating the results yields our final result, the approximation of Ï.
There are two important considerations:

If the points are not uniformly distributed, then the approximation will be poor.
There are many points. The approximation is generally poor if only a few points are randomly placed in the whole square. On average, the approximation improves as more points are placed.
Uses of Monte Carlo methods require large amounts of random numbers, and it was their use that spurred the development of pseudorandom number generators[citation needed], which were far quicker to use than the tables of random numbers that had been previously used for statistical sampling.

History[edit]
Before the Monte Carlo method was developed, simulations tested a previously understood deterministic problem, and statistical sampling was used to estimate uncertainties in the simulations. Monte Carlo simulations invert this approach, solving deterministic problems using probabilistic metaheuristics (see simulated annealing).
An early variant of the Monte Carlo method was devised to solve the Buffon's needle problem, in which Ï can be estimated by dropping needles on a floor made of parallel equidistant strips. In the 1930s, Enrico Fermi first experimented with the Monte Carlo method while studying neutron diffusion, but he did not publish this work.[17] 
In the late 1940s, Stanislaw Ulam invented the modern version of the Markov Chain Monte Carlo method while he was working on nuclear weapons projects at the Los Alamos National Laboratory. Immediately after Ulam's breakthrough, John von Neumann understood its importance. In 1946, nuclear weapons physicists at Los Alamos were investigating neutron diffusion in the core of a nuclear weapon.[17] Despite having most of the necessary data, such as the average distance a neutron would travel in a substance before it collided with an atomic nucleus and how much energy the neutron was likely to give off following a collision, the Los Alamos physicists were unable to solve the problem using conventional, deterministic mathematical methods. Ulam proposed using random experiments. He recounts his inspiration as follows:

.mw-parser-output .templatequote{overflow:hidden;margin:1em 0;padding:0 40px}.mw-parser-output .templatequote .templatequotecite{line-height:1.5em;text-align:left;padding-left:1.6em;margin-top:0}The first thoughts and attempts I made to practice [the Monte Carlo Method] were suggested by a question which occurred to me in 1946 as I was convalescing from an illness and playing solitaires. The question was what are the chances that a Canfield solitaire laid out with 52 cards will come out successfully? After spending a lot of time trying to estimate them by pure combinatorial calculations, I wondered whether a more practical method than "abstract thinking" might not be to lay it out say one hundred times and simply observe and count the number of successful plays. This was already possible to envisage with the beginning of the new era of fast computers, and I immediately thought of problems of neutron diffusion and other questions of mathematical physics, and more generally how to change processes described by certain differential equations into an equivalent form interpretable as a succession of random operations. Later [in 1946], I described the idea to John von Neumann, and we began to plan actual calculations.[18]
Being secret, the work of von Neumann and Ulam required a code name.[19] A colleague of von Neumann and Ulam, Nicholas Metropolis, suggested using the name Monte Carlo, which refers to the Monte Carlo Casino in Monaco where Ulam's uncle would borrow money from relatives to gamble.[17] 
Monte Carlo methods were central to the simulations required for the Manhattan Project, though severely limited by the computational tools at the time.  Von Neumann, Nicholas Metropolis and others programmed the ENIAC computer to perform the first fully automated Monte Carlo calculations, of a fission weapon core, in the spring of 1948.[20] In the 1950s Monte Carlo methods were used at Los Alamos for the development of the hydrogen bomb, and became popularized in the fields of physics, physical chemistry, and operations research. The Rand Corporation and the U.S. Air Force were two of the major organizations responsible for funding and disseminating information on Monte Carlo methods during this time, and they began to find a wide application in many different fields.
The theory of more sophisticated mean-field type particle Monte Carlo methods had certainly started by the mid-1960s, with the work of Henry P. McKean Jr. on Markov interpretations of a class of nonlinear parabolic partial differential equations arising in fluid mechanics.[21][22] We also quote an earlier pioneering article by Theodore E. Harris and Herman Kahn, published in 1951, using mean-field genetic-type Monte Carlo methods for estimating particle transmission energies.[23] Mean-field genetic type Monte Carlo methodologies are also used as heuristic natural search algorithms (a.k.a. metaheuristic) in evolutionary computing. The origins of these mean-field computational techniques can be traced to 1950 and 1954 with the work of Alan Turing on genetic type mutation-selection learning machines[24] and the articles by Nils Aall Barricelli at the Institute for Advanced Study in Princeton, New Jersey.[25][26]
Quantum Monte Carlo, and more specifically diffusion Monte Carlo methods can also be interpreted as a mean-field particle Monte Carlo approximation of FeynmanâKac path integrals.[27][28][29][30][31][32][33] The origins of Quantum Monte Carlo methods are often attributed to Enrico Fermi and Robert Richtmyer who developed in 1948 a mean-field particle interpretation of neutron-chain reactions,[34] but the first heuristic-like and genetic type particle algorithm (a.k.a. Resampled or Reconfiguration Monte Carlo methods) for estimating ground state energies of quantum systems (in reduced matrix models) is due to Jack H. Hetherington in 1984[33] In molecular chemistry, the use of genetic heuristic-like particle methodologies (a.k.a. pruning and enrichment strategies) can be traced back to 1955 with the seminal work of Marshall N. Rosenbluth and Arianna W. Rosenbluth.[35]
The use of Sequential Monte Carlo in advanced signal processing and Bayesian inference is more recent. It was in 1993, that Gordon et al., published in their seminal work[36] the first application of a Monte Carlo resampling algorithm in Bayesian statistical inference. The authors named their algorithm 'the bootstrap filter', and demonstrated that compared to other filtering methods, their bootstrap algorithm does not require any assumption about that state-space or the noise of the system. We also quote another pioneering article in this field of Genshiro Kitagawa on a related "Monte Carlo filter",[37] and the ones by Pierre Del Moral[38] and Himilcon Carvalho, Pierre Del Moral, AndrÃ© Monin and GÃ©rard Salut[39] on particle filters published in the mid-1990s. Particle filters were also developed in signal processing in 1989â1992 by P. Del Moral, J. C. Noyer, G. Rigal, and G. Salut in the LAAS-CNRS in a series of restricted and classified research reports with STCAN (Service Technique des Constructions et Armes Navales), the IT company DIGILOG, and the LAAS-CNRS (the Laboratory for Analysis and Architecture of Systems) on radar/sonar and GPS signal processing problems.[40][41][42][43][44][45] These Sequential Monte Carlo methodologies can be interpreted as an acceptance-rejection sampler equipped with an interacting recycling mechanism.
From 1950 to 1996, all the publications on Sequential Monte Carlo methodologies, including the pruning and resample Monte Carlo methods introduced in computational physics and molecular chemistry, present natural and heuristic-like algorithms applied to different situations without a single proof of their consistency, nor a discussion on the bias of the estimates and on genealogical and ancestral tree based algorithms. The mathematical foundations and the first rigorous analysis of these particle algorithms were written by Pierre Del Moral in 1996.[38][46]
Branching type particle methodologies with varying population sizes were also developed in the end of the 1990s by Dan Crisan, Jessica Gaines and Terry Lyons,[47][48][49] and by Dan Crisan, Pierre Del Moral and Terry Lyons.[50] Further developments in this field were developed in 2000 by P. Del Moral, A. Guionnet and L. Miclo.[28][51][52]

Definitions[edit]
There is no consensus on how Monte Carlo should be defined. For example, Ripley[53] defines most probabilistic modeling as stochastic simulation, with Monte Carlo being reserved for Monte Carlo integration and Monte Carlo statistical tests. Sawilowsky[54] distinguishes between a simulation, a Monte Carlo method, and a Monte Carlo simulation: a simulation is a fictitious representation of reality, a Monte Carlo method is a technique that can be used to solve a mathematical or statistical problem, and a Monte Carlo simulation uses repeated sampling to obtain the statistical properties of some phenomenon (or behavior). Examples:

Simulation: Drawing one pseudo-random uniform variable from the interval [0,1] can be used to simulate the tossing of a coin: If the value is less than or equal to 0.50 designate the outcome as heads, but if the value is greater than 0.50 designate the outcome as tails. This is a simulation, but not a Monte Carlo simulation.
Monte Carlo method: Pouring out a box of coins on a table, and then computing the ratio of coins that land heads versus tails is a Monte Carlo method of determining the behavior of repeated coin tosses, but it is not a simulation.
Monte Carlo simulation: Drawing a large number of pseudo-random uniform variables from the interval [0,1] at one time, or once at many different times, and assigning values less than or equal to 0.50 as heads and greater than 0.50 as tails, is a Monte Carlo simulation of the behavior of repeatedly tossing a coin.
Kalos and Whitlock[55] point out that such distinctions are not always easy to maintain. For example, the emission of radiation from atoms is a natural stochastic process. It can be simulated directly, or its average behavior can be described by stochastic equations that can themselves be solved using Monte Carlo methods. "Indeed, the same computer code can be viewed simultaneously as a 'natural simulation' or as a solution of the equations by natural sampling."

Monte Carlo and random numbers[edit]
The main idea behind this method is that the results are computed based on repeated random sampling and statistical analysis. The Monte Carlo simulation is, in fact, random experimentations, in the case that, the results of these experiments are not well known.
Monte Carlo simulations are typically characterized by many unknown parameters, many of which are difficult to obtain experimentally.[56] Monte Carlo simulation methods do not always require truly random numbers to be useful (although, for some applications such as primality testing, unpredictability is vital).[57] Many of the most useful techniques use deterministic, pseudorandom sequences, making it easy to test and re-run simulations. The only quality usually necessary to make good simulations is for the pseudo-random sequence to appear "random enough" in a certain sense.
What this means depends on the application, but typically they should pass a series of statistical tests. Testing that the numbers are uniformly distributed or follow another desired distribution when a large enough number of elements of the sequence are considered is one of the simplest and most common ones. Weak correlations between successive samples are also often desirable/necessary.
Sawilowsky lists the characteristics of a high-quality Monte Carlo simulation:[54]

the (pseudo-random) number generator has certain characteristics (e.g. a long "period" before the sequence repeats)
the (pseudo-random) number generator produces values that pass tests for randomness
there are enough samples to ensure accurate results
the proper sampling technique is used
the algorithm used is valid for what is being modeled
it simulates the phenomenon in question.
Pseudo-random number sampling algorithms are used to transform uniformly distributed pseudo-random numbers into numbers that are distributed according to a given probability distribution.
Low-discrepancy sequences are often used instead of random sampling from a space as they ensure even coverage and normally have a faster order of convergence than Monte Carlo simulations using random or pseudorandom sequences. Methods based on their use are called quasi-Monte Carlo methods.
In an effort to assess the impact of random number quality on Monte Carlo simulation outcomes, astrophysical researchers tested cryptographically-secure pseudorandom numbers generated via Intel's RDRAND instruction set, as compared to those derived from algorithms, like the Mersenne Twister, in Monte Carlo simulations of radio flares from brown dwarfs.  RDRAND is the closest pseudorandom number generator to a true random number generator. No statistically significant difference was found between models generated with typical pseudorandom number generators and RDRAND for trials consisting of the generation of 107 random numbers.[58]

Monte Carlo simulation versus "what if" scenarios[edit]
There are ways of using probabilities that are definitely not Monte Carlo simulations â for example, deterministic modeling using single-point estimates. Each uncertain variable within a model is assigned a "best guess" estimate.  Scenarios (such as best, worst, or most likely case) for each input variable are chosen and the results recorded.[59]
By contrast, Monte Carlo simulations sample from a probability distribution for each variable to produce hundreds or thousands of possible outcomes. The results are analyzed to get probabilities of different outcomes occurring.[60] For example, a comparison of a spreadsheet cost construction model run using traditional "what if" scenarios, and then running the comparison again with Monte Carlo simulation and triangular probability distributions shows that the Monte Carlo analysis has a narrower range than the "what if" analysis.[example  needed]  This is because the "what if" analysis gives equal weight to all scenarios (see quantifying uncertainty in corporate finance), while the Monte Carlo method hardly samples in the very low probability regions. The samples in such regions are called "rare events".

Applications[edit]
Monte Carlo methods are especially useful for simulating phenomena with significant uncertainty in inputs and systems with many coupled degrees of freedom. Areas of application include:

Physical sciences[edit]
.mw-parser-output .sidebar{width:22em;float:right;clear:right;margin:0.5em 0 1em 1em;background:#f8f9fa;border:1px solid #aaa;padding:0.2em;text-align:center;line-height:1.4em;font-size:88%;border-collapse:collapse;display:table}body.skin-minerva .mw-parser-output .sidebar{display:table!important;float:right!important;margin:0.5em 0 1em 1em!important}.mw-parser-output .sidebar-subgroup{width:100%;margin:0;border-spacing:0}.mw-parser-output .sidebar-left{float:left;clear:left;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-none{float:none;clear:both;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-outer-title{padding:0 0.4em 0.2em;font-size:125%;line-height:1.2em;font-weight:bold}.mw-parser-output .sidebar-top-image{padding:0.4em}.mw-parser-output .sidebar-top-caption,.mw-parser-output .sidebar-pretitle-with-top-image,.mw-parser-output .sidebar-caption{padding:0.2em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-pretitle{padding:0.4em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-title,.mw-parser-output .sidebar-title-with-pretitle{padding:0.2em 0.8em;font-size:145%;line-height:1.2em}.mw-parser-output .sidebar-title-with-pretitle{padding:0.1em 0.4em}.mw-parser-output .sidebar-image{padding:0.2em 0.4em 0.4em}.mw-parser-output .sidebar-heading{padding:0.1em 0.4em}.mw-parser-output .sidebar-content{padding:0 0.5em 0.4em}.mw-parser-output .sidebar-content-with-subgroup{padding:0.1em 0.4em 0.2em}.mw-parser-output .sidebar-above,.mw-parser-output .sidebar-below{padding:0.3em 0.8em;font-weight:bold}.mw-parser-output .sidebar-collapse .sidebar-above,.mw-parser-output .sidebar-collapse .sidebar-below{border-top:1px solid #aaa;border-bottom:1px solid #aaa}.mw-parser-output .sidebar-navbar{text-align:right;font-size:115%;padding:0 0.4em 0.4em}.mw-parser-output .sidebar-list-title{padding:0 0.4em;text-align:left;font-weight:bold;line-height:1.6em;font-size:105%}.mw-parser-output .sidebar-list-title-c{padding:0 0.4em;text-align:center;margin:0 3.3em}@media(max-width:720px){body.mediawiki .mw-parser-output .sidebar{width:100%!important;clear:both;float:none!important;margin-left:0!important;margin-right:0!important}}Computational physics
MechanicsÂ Â· ElectromagneticsÂ Â· ThermodynamicsÂ Â· Simulation

PotentialsMorse/Long-range potentialÂ Â· Lennard-Jones potentialÂ Â· Yukawa potentialÂ Â· Morse potential

Fluid dynamicsFinite differenceÂ Â· Finite volume
Finite elementÂ Â· Boundary element 
Lattice BoltzmannÂ Â· Riemann solver
Dissipative particle dynamics
Smoothed particle hydrodynamics

Turbulence models

Monte Carlo methodsIntegrationÂ Â· Gibbs samplingÂ Â· Metropolis algorithm

ParticleN-bodyÂ Â· Particle-in-cell
Molecular dynamics

ScientistsGodunovÂ Â· UlamÂ Â·  von NeumannÂ Â· GalerkinÂ Â·  LorenzÂ Â· WilsonÂ Â· Alder Â Â· Richtmyer
.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vte
See also: Monte Carlo method in statistical physics
Monte Carlo methods are very important in computational physics, physical chemistry, and related applied fields, and have diverse applications from complicated quantum chromodynamics calculations to designing heat shields and aerodynamic forms as well as in modeling radiation transport for radiation dosimetry calculations.[61][62][63]  In statistical physics Monte Carlo molecular modeling is an alternative to computational molecular dynamics, and Monte Carlo methods are used to compute statistical field theories of simple particle and polymer systems.[35][64] Quantum Monte Carlo methods solve the many-body problem for quantum systems.[8][9][27] In radiation materials science, the binary collision approximation for simulating ion implantation is usually based on a Monte Carlo approach to select the next colliding atom.[65] In experimental particle physics, Monte Carlo methods are used for designing detectors, understanding their behavior and comparing experimental data to theory. In astrophysics, they are used in such diverse manners as to model both galaxy evolution[66] and microwave radiation transmission through a rough planetary surface.[67] Monte Carlo methods are also used in the ensemble models that form the basis of modern weather forecasting.

Engineering[edit]
Monte Carlo methods are widely used in engineering for sensitivity analysis and quantitative probabilistic analysis in process design. The need arises from the interactive, co-linear and non-linear behavior of typical process simulations. For example,

In microelectronics engineering, Monte Carlo methods are applied to analyze correlated and uncorrelated variations in analog and digital integrated circuits.
In geostatistics and geometallurgy, Monte Carlo methods underpin the design of mineral processing flowsheets and contribute to quantitative risk analysis.[19]
In wind energy yield analysis, the predicted energy output of a wind farm during its lifetime is calculated giving different levels of uncertainty (P90, P50, etc.)
impacts of pollution are simulated[68] and diesel compared with petrol.[69]
In fluid dynamics, in particular rarefied gas dynamics, where the Boltzmann equation is solved for finite Knudsen number fluid flows using the direct simulation Monte Carlo[70] method in combination with highly efficient computational algorithms.[71]
In autonomous robotics, Monte Carlo localization can determine the position of a robot. It is often applied to stochastic filters such as the Kalman filter or particle filter that forms the heart of the SLAM (simultaneous localization and mapping) algorithm.
In telecommunications, when planning a wireless network, design must be proved to work for a wide variety of scenarios that depend mainly on the number of users, their locations and the services they want to use. Monte Carlo methods are typically used to generate these users and their states. The network performance is then evaluated and, if results are not satisfactory, the network design goes through an optimization process.
In reliability engineering, Monte Carlo simulation is used to compute system-level response given the component-level response. For example, for a transportation network subject to an earthquake event, Monte Carlo simulation can be used to assess the k-terminal reliability of the network given the failure probability of its components, e.g. bridges, roadways, etc.[72][73][74] Another profound example is the application of the Monte Carlo method to solve the G-Renewal equation of the generalized renewal process.[75]
In signal processing and Bayesian inference, particle filters and sequential Monte Carlo techniques are a class of mean-field particle methods for sampling and computing the posterior distribution of a signal process given some noisy and partial observations using interacting empirical measures.
In groundwater modeling, Monte Carlo methods are utilized to generate a large number of realizations of heterogeneous parameter field for model uncertainty quantification or parameter inversion.[76]
Climate change and radiative forcing[edit]
The Intergovernmental Panel on Climate Change relies on Monte Carlo methods in probability density function analysis of radiative forcing.

Probability density function (PDF) of ERF due to total GHG, aerosol forcing and total anthropogenic forcing. The GHG consists of WMGHG, ozone and stratospheric water vapour. The PDFs are generated based on uncertainties provided in Table 8.6. The combination of the individual RF agents to derive total forcing over the Industrial Era are done by Monte Carlo simulations and based on the method in Boucher and Haywood (2001). PDF of the ERF from surface albedo changes and combined contrails and contrail-induced cirrus are included in the total anthropogenic forcing, but not shown as a separate PDF. We currently do not have ERF estimates for some forcing mechanisms: ozone, land use, solar, etc.[77]
Computational biology[edit]
Monte Carlo methods are used in various fields of computational biology, for example for Bayesian inference in phylogeny, or for studying biological systems such as genomes, proteins,[78] or membranes.[79]
The systems can be studied in the coarse-grained or ab initio frameworks depending on the desired accuracy. 
Computer simulations allow us to monitor the local environment of a particular molecule to see if some chemical reaction is happening for instance. In cases where it is not feasible to conduct a physical experiment, thought experiments can be conducted (for instance: breaking bonds, introducing impurities at specific sites, changing the local/global structure, or introducing external fields).

Computer graphics[edit]
Path tracing, occasionally referred to as Monte Carlo ray tracing, renders a 3D scene by randomly tracing samples of possible light paths. Repeated sampling of any given pixel will eventually cause the average of the samples to converge on the correct solution of the rendering equation, making it one of the most physically accurate 3D graphics rendering methods in existence.

Applied statistics[edit]
The standards for Monte Carlo experiments in statistics were set by Sawilowsky.[80] In applied statistics, Monte Carlo methods may be used for at least four purposes:

To compare competing statistics for small samples under realistic data conditions. Although type I error and power properties of statistics can be calculated for data drawn from classical theoretical distributions (e.g., normal curve, Cauchy distribution) for asymptotic conditions (i. e, infinite sample size and infinitesimally small treatment effect), real data often do not have such distributions.[81]
To provide implementations of hypothesis tests that are more efficient than exact tests such as permutation tests (which are often impossible to compute) while being more accurate than critical values for asymptotic distributions.
To provide a random sample from the posterior distribution in Bayesian inference. This sample then approximates and summarizes all the essential features of the posterior.
To provide efficient random estimates of the Hessian matrix of the negative log-likelihood function that may be averaged to form an estimate of the Fisher information matrix.[82][83]
Monte Carlo methods are also a compromise between approximate randomization and permutation tests. An approximate randomization test is based on a specified subset of all permutations (which entails potentially enormous housekeeping of which permutations have been considered). The Monte Carlo approach is based on a specified number of randomly drawn permutations (exchanging a minor loss in precision if a permutation is drawn twiceâor more frequentlyâfor the efficiency of not having to track which permutations have already been selected).


Artificial intelligence for games[edit]
Main article: Monte Carlo tree search
Monte Carlo methods have been developed into a technique called Monte-Carlo tree search that is useful for searching for the best move in a game. Possible moves are organized in a search tree and many random simulations are used to estimate the long-term potential of each move. A black box simulator represents the opponent's moves.[84]
The Monte Carlo tree search (MCTS) method has four steps:[85]

Starting at root node of the tree, select optimal child nodes until a leaf node is reached.
Expand the leaf node and choose one of its children.
Play a simulated game starting with that node.
Use the results of that simulated game to update the node and its ancestors.
The net effect, over the course of many simulated games, is that the value of a node representing a move will go up or down, hopefully corresponding to whether or not that node represents a good move.
Monte Carlo Tree Search has been used successfully to play games such as Go,[86] Tantrix,[87] Battleship,[88] Havannah,[89] and Arimaa.[90]

See also: Computer Go
Design and visuals[edit]
Monte Carlo methods are also efficient in solving coupled integral differential equations of radiation fields and energy transport, and thus these methods have been used in global illumination computations that produce photo-realistic images of virtual 3D models, with applications in video games, architecture, design, computer generated films, and cinematic special effects.[91]

Search and rescue[edit]
The US Coast Guard utilizes Monte Carlo methods within its computer modeling software SAROPS in order to calculate the probable locations of vessels during search and rescue operations. Each simulation can generate as many as ten thousand data points that are randomly distributed based upon provided variables.[92] Search patterns are then generated based upon extrapolations of these data in order to optimize the probability of containment (POC) and the probability of detection (POD), which together will equal an overall probability of success (POS). Ultimately this serves as a practical application of probability distribution in order to provide the swiftest and most expedient method of rescue, saving both lives and resources.[93]

Finance and business[edit]
See also: Monte Carlo methods in finance, Quasi-Monte Carlo methods in finance, Monte Carlo methods for option pricing, Stochastic modelling (insurance), and Stochastic asset model
Monte Carlo simulation is commonly used to evaluate the risk and uncertainty that would affect the outcome of different decision options. Monte Carlo simulation allows the business risk analyst to incorporate the total effects of uncertainty in variables like sales volume, commodity and labour prices, interest and exchange rates, as well as the effect of distinct risk events like the cancellation of a contract or the change of a tax law.
Monte Carlo methods in finance are often used to evaluate investments in projects at a business unit or corporate level, or other financial valuations. They can be used to model project schedules, where simulations aggregate estimates for worst-case, best-case, and most likely durations for each task to determine outcomes for the overall project.[1] Monte Carlo methods are also used in option pricing, default risk analysis.[94][95][96] Additionally, they can be used to estimate the financial impact of medical interventions.[97]

Law[edit]
A Monte Carlo approach was used for evaluating the potential value of a proposed program to help female petitioners in Wisconsin be successful in their applications for harassment and domestic abuse restraining orders.  It was proposed to help women succeed in their petitions by providing them with greater advocacy thereby potentially reducing the risk of rape and physical assault.  However, there were many variables in play that could not be estimated perfectly, including the effectiveness of restraining orders, the success rate of petitioners both with and without advocacy, and many others.  The study ran trials that varied these variables to come up with an overall estimate of the success level of the proposed program as a whole.[98]

Library Science[edit]
Monte Carlo approach had also been used to simulate the number of book publications based on book genre in Malaysia. The Monte Carlo simulation utilized previous published National Book publication data and book's price according to book genre in the local market. The Monte Carlo results were used to determine what kind of book genre that Malaysians are fond of and was used to compare book publications between Malaysia and Japan.[99] 

Use in mathematics[edit]
In general, the Monte Carlo methods are used in mathematics to solve various problems by generating suitable random numbers (see also Random number generation) and observing that fraction of the numbers that obeys some property or properties. The method is useful for obtaining numerical solutions to problems too complicated to solve analytically.  The most common application of the Monte Carlo method is Monte Carlo integration.

Integration[edit]
Main article: Monte Carlo integration
  Monte-Carlo integration works by comparing random points with the value of the function
  Errors reduce by a factor of 
  
    
      
        
          1
          
            /
          
          
            
              N
            
          
        
      
    
    {\displaystyle \scriptstyle 1/{\sqrt {N}}}
  

Deterministic numerical integration algorithms work well in a small number of dimensions, but encounter two problems when the functions have many variables. First, the number of function evaluations needed increases rapidly with the number of dimensions. For example, if 10 evaluations provide adequate accuracy in one dimension, then 10100 points are needed for 100 dimensionsâfar too many to be computed. This is called the curse of dimensionality. Second, the boundary of a multidimensional region may be very complicated, so it may not be feasible to reduce the problem to an iterated integral.[100] 100 dimensions is by no means unusual, since in many physical problems, a "dimension" is equivalent to a degree of freedom.
Monte Carlo methods provide a way out of this exponential increase in computation time. As long as the function in question is reasonably well-behaved, it can be estimated by randomly selecting points in 100-dimensional space, and taking some kind of average of the function values at these points. By the central limit theorem, this method displays 
  
    
      
        
          1
          
            /
          
          
            
              N
            
          
        
      
    
    {\displaystyle \scriptstyle 1/{\sqrt {N}}}
  
 convergenceâi.e., quadrupling the number of sampled points halves the error, regardless of the number of dimensions.[100]
A refinement of this method, known as importance sampling in statistics, involves sampling the points randomly, but more frequently where the integrand is large. To do this precisely one would have to already know the integral, but one can approximate the integral by an integral of a similar function or use adaptive routines such as stratified sampling, recursive stratified sampling, adaptive umbrella sampling[101][102] or the VEGAS algorithm.
A similar approach, the quasi-Monte Carlo method, uses low-discrepancy sequences. These sequences "fill" the area better and sample the most important points more frequently, so quasi-Monte Carlo methods can often converge on the integral more quickly.
Another class of methods for sampling points in a volume is to simulate random walks over it (Markov chain Monte Carlo). Such methods include the MetropolisâHastings algorithm, Gibbs sampling, Wang and Landau algorithm, and interacting type MCMC methodologies such as the sequential Monte Carlo samplers.[103]

Simulation and optimization[edit]
Main article: Stochastic optimization
Another powerful and very popular application for random numbers in numerical simulation is in numerical optimization. The problem is to minimize (or maximize) functions of some vector that often has many dimensions. Many problems can be phrased in this way: for example, a computer chess program could be seen as trying to find the set of, say, 10 moves that produces the best evaluation function at the end. In the traveling salesman problem the goal is to minimize distance traveled. There are also applications to engineering design, such as multidisciplinary design optimization. It has been applied with quasi-one-dimensional models to solve particle dynamics problems by efficiently exploring large configuration space. Reference[104] is a comprehensive review of many issues related to simulation and optimization.
The traveling salesman problem is what is called a conventional optimization problem. That is, all the facts (distances between each destination point) needed to determine the optimal path to follow are known with certainty and the goal is to run through the possible travel choices to come up with the one with the lowest total distance. However, let's assume that instead of wanting to minimize the total distance traveled to visit each desired destination, we wanted to minimize the total time needed to reach each destination. This goes beyond conventional optimization since travel time is inherently uncertain (traffic jams, time of day, etc.). As a result, to determine our optimal path we would want to use simulation - optimization to first understand the range of potential times it could take to go from one point to another (represented by a probability distribution in this case rather than a specific distance) and then optimize our travel decisions to identify the best path to follow taking that uncertainty into account.

Inverse problems[edit]
Probabilistic formulation of inverse problems leads to the definition of a probability distribution in the model space. This probability distribution combines prior information with new information obtained by measuring some observable parameters (data).
As, in the general case, the theory linking data with model parameters is nonlinear, the posterior probability in the model space may not be easy to describe (it may be multimodal, some moments may not be defined, etc.).
When analyzing an inverse problem, obtaining a maximum likelihood model is usually not sufficient, as we normally also wish to have information on the resolution power of the data. In the general case we may have many model parameters, and an inspection of the marginal probability densities of interest may be impractical, or even useless. But it is possible to pseudorandomly generate a large collection of models according to the posterior probability distribution and to analyze and display the models in such a way that information on the relative likelihoods of model properties is conveyed to the spectator. This can be accomplished by means of an efficient Monte Carlo method, even in cases where no explicit formula for the a priori distribution is available.
The best-known importance sampling method, the Metropolis algorithm, can be generalized, and this gives a method that allows analysis of (possibly highly nonlinear) inverse problems with complex a priori information and data with an arbitrary noise distribution.[105][106]

Philosophy[edit]
Popular exposition of the Monte Carlo Method was conducted by McCracken.[107] Method's general philosophy was discussed by Elishakoff[108] and GrÃ¼ne-Yanoff and Weirich.[109]

See also[edit]
.mw-parser-output .portalbox{float:right;border:solid #aaa 1px;padding:0}.mw-parser-output .portalbox.tleft{margin:0.5em 1em 0.5em 0}.mw-parser-output .portalbox.tright{margin:0.5em 0 0.5em 1em}.mw-parser-output .portalbox>ul{display:table;box-sizing:border-box;padding:0.1em;max-width:175px;background:#f9f9f9;font-size:85%;line-height:110%;font-style:italic;font-weight:bold}.mw-parser-output .portalbox>ul>li{display:table-row}.mw-parser-output .portalbox>ul>li>span:first-child{display:table-cell;padding:0.2em;vertical-align:middle;text-align:center}.mw-parser-output .portalbox>ul>li>span:last-child{display:table-cell;padding:0.2em 0.2em 0.2em 0.3em;vertical-align:middle}

Mathematics portal
.mw-parser-output .div-col{margin-top:0.3em;column-width:30em}.mw-parser-output .div-col-small{font-size:90%}.mw-parser-output .div-col-rules{column-rule:1px solid #aaa}.mw-parser-output .div-col dl,.mw-parser-output .div-col ol,.mw-parser-output .div-col ul{margin-top:0}.mw-parser-output .div-col li,.mw-parser-output .div-col dd{page-break-inside:avoid;break-inside:avoid-column}
Auxiliary field Monte Carlo
Biology Monte Carlo method
Comparison of risk analysis Microsoft Excel add-ins
Direct simulation Monte Carlo
Dynamic Monte Carlo method
Genetic algorithms
Kinetic Monte Carlo
List of software for Monte Carlo molecular modeling
Mean-field particle methods
Monte Carlo method for photon transport
Monte Carlo methods for electron transport
Morris method
Multilevel Monte Carlo method
Particle filter
Quasi-Monte Carlo method
Sobol sequence
Temporal difference learning

References[edit]
Citations[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Kroese, D. P.; Brereton, T.; Taimre, T.; Botev, Z. I. (2014). "Why the Monte Carlo method is so important today". WIREs Comput Stat. 6 (6): 386â392. doi:10.1002/wics.1314. S2CIDÂ 18521840.

^ Hubbard, Douglas; Samuelson, Douglas A. (October 2009). "Modeling Without Measurements". OR/MS Today: 28â33.

^ Metropolis, Nicholas; Rosenbluth, Arianna W.; Rosenbluth, Marshall N.; Teller, Augusta H.; Teller, Edward (1953-06-01). "Equation of State Calculations by Fast Computing Machines". The Journal of Chemical Physics. 21 (6): 1087â1092. Bibcode:1953JChPh..21.1087M. doi:10.1063/1.1699114. ISSNÂ 0021-9606. OSTIÂ 4390578. S2CIDÂ 1046577.

^ Hastings, W. K. (1970-04-01). "Monte Carlo sampling methods using Markov chains and their applications". Biometrika. 57 (1): 97â109. Bibcode:1970Bimka..57...97H. doi:10.1093/biomet/57.1.97. ISSNÂ 0006-3444. S2CIDÂ 21204149.

^ Liu, Jun S.; Liang, Faming; Wong, Wing Hung (2000-03-01). "The Multiple-Try Method and Local Optimization in Metropolis Sampling". Journal of the American Statistical Association. 95 (449): 121â134. doi:10.1080/01621459.2000.10473908. ISSNÂ 0162-1459. S2CIDÂ 123468109.

^ Spall, J. C. (2003). "Estimation via Markov Chain Monte Carlo". IEEE Control Systems Magazine. 23 (2): 34â45. doi:10.1109/MCS.2003.1188770.

^ Hill, Stacy D.; Spall, James C. (2019). "Stationarity and Convergence of the Metropolis-Hastings Algorithm: Insights into Theoretical Aspects". IEEE Control Systems Magazine. 39: 56â67. doi:10.1109/MCS.2018.2876959. S2CIDÂ 58672766.

^ a b Kolokoltsov, Vassili (2010). Nonlinear Markov processes. Cambridge Univ. Press. p.Â 375.

^ a b c Del Moral, Pierre (2013). Mean field simulation for Monte Carlo integration. Chapman & Hall/CRC Press. p.Â 626. Monographs on Statistics & Applied Probability

^ Del Moral, P; Doucet, A; Jasra, A (2006). "Sequential Monte Carlo samplers". Journal of the Royal Statistical Society, Series B. 68 (3): 411â436. arXiv:cond-mat/0212648. doi:10.1111/j.1467-9868.2006.00553.x. S2CIDÂ 12074789.

^ Shonkwiler, R. W.; Mendivil, F. (2009). Explorations in Monte Carlo Methods. Springer.

^ Atanassova, E.; Gurov, T.; Karaivanova, A.; Ivanovska, S.; Durchova, M.; Dimitrov, D. (2016). "On the parallelization approaches for Intel MIC architecture". AIP Conference Proceedings. 1773 (1): 070001. Bibcode:2016AIPC.1773g0001A. doi:10.1063/1.4964983.

^ Cunha Jr, A.; Nasser, R.; Sampaio, R.; Lopes, H.; Breitman, K. (2014). "Uncertainty quantification through the Monte Carlo method in a cloud computing setting". Computer Physics Communications. 185 (5): 1355â1363. arXiv:2105.09512. Bibcode:2014CoPhC.185.1355C. doi:10.1016/j.cpc.2014.01.006. S2CIDÂ 32376269.

^ Wei, J.; Kruis, F.E. (2013). "A GPU-based parallelized Monte-Carlo method for particle coagulation using an acceptanceârejection strategy". Chemical Engineering Science. 104: 451â459. doi:10.1016/j.ces.2013.08.008.

^ Lin, Y.; Wang, F.; Liu, B. (2018). "Random number generators for large-scale parallel Monte Carlo simulations on FPGA". Journal of Computational Physics. 360: 93â103. Bibcode:2018JCoPh.360...93L. doi:10.1016/j.jcp.2018.01.029.

^ Kalos & Whitlock 2008.

^ a b c Metropolis 1987.

^ Eckhardt 1987.

^ a b Mazhdrakov, Benov & Valkanov 2018, p.Â 250.

^ Haigh, Thomas; Priestley, Mark; Rope, Crispin (2014). "Los Alamos Bets on ENIAC: Nuclear Monte Carlo Simulations, 1947-1948". IEEE Annals of the History of Computing. 36 (3): 42â63. doi:10.1109/MAHC.2014.40. S2CIDÂ 17470931.

^ McKean, Henry, P. (1967). "Propagation of chaos for a class of non-linear parabolic equations". Lecture Series in Differential Equations, Catholic Univ. 7: 41â57.

^ McKean, Henry, P. (1966). "A class of Markov processes associated with nonlinear parabolic equations". Proc. Natl. Acad. Sci. USA. 56 (6): 1907â1911. Bibcode:1966PNAS...56.1907M. doi:10.1073/pnas.56.6.1907. PMCÂ 220210. PMIDÂ 16591437.

^ Herman, Kahn; Theodore, Harris E. (1951). "Estimation of particle transmission by random sampling" (PDF). Natl. Bur. Stand. Appl. Math. Ser. 12: 27â30.

^ Turing, Alan M. (1950). "Computing machinery and intelligence". Mind. LIX (238): 433â460. doi:10.1093/mind/LIX.236.433.

^ Barricelli, Nils Aall (1954). "Esempi numerici di processi di evoluzione". Methodos: 45â68.

^ Barricelli, Nils Aall (1957). "Symbiogenetic evolution processes realized by artificial methods". Methodos: 143â182.

^ a b Del Moral, Pierre (2004). FeynmanâKac formulae. Genealogical and interacting particle approximations. Probability and Its Applications. Springer. p.Â 575. ISBNÂ 9780387202686. Series: Probability and Applications

^ a b Del Moral, P.; Miclo, L. (2000). "Branching and interacting particle systems approximations of FeynmanâKac formulae with applications to non-linear filtering". SÃ©minaire de ProbabilitÃ©s, XXXIV. Lecture Notes in Mathematics. Vol.Â 1729. Berlin: Springer. pp.Â 1â145. doi:10.1007/BFb0103798. ISBNÂ 978-3-540-67314-9. MRÂ 1768060.

^ Del Moral, Pierre; Miclo, Laurent (2000). "A Moran particle system approximation of FeynmanâKac formulae". Stochastic Processes and Their Applications. 86 (2): 193â216. doi:10.1016/S0304-4149(99)00094-0.

^ Del Moral, Pierre (2003). "Particle approximations of Lyapunov exponents connected to SchrÃ¶dinger operators and FeynmanâKac semigroups". ESAIM Probability & Statistics. 7: 171â208. doi:10.1051/ps:2003001.

^ Assaraf, Roland; Caffarel, Michel; Khelif, Anatole (2000). "Diffusion Monte Carlo Methods with a fixed number of walkers" (PDF). Phys. Rev. E. 61 (4): 4566â4575. Bibcode:2000PhRvE..61.4566A. doi:10.1103/physreve.61.4566. PMIDÂ 11088257. Archived from the original (PDF) on 2014-11-07.

^ Caffarel, Michel; Ceperley, David; Kalos, Malvin (1993). "Comment on FeynmanâKac Path-Integral Calculation of the Ground-State Energies of Atoms". Phys. Rev. Lett. 71 (13): 2159. Bibcode:1993PhRvL..71.2159C. doi:10.1103/physrevlett.71.2159. PMIDÂ 10054598.

^ a b Hetherington, Jack, H. (1984). "Observations on the statistical iteration of matrices". Phys. Rev. A. 30 (2713): 2713â2719. Bibcode:1984PhRvA..30.2713H. doi:10.1103/PhysRevA.30.2713.

^ Fermi, Enrique; Richtmyer, Robert, D. (1948). "Note on census-taking in Monte Carlo calculations" (PDF). LAM. 805 (A). Declassified report Los Alamos Archive

^ a b Rosenbluth, Marshall, N.; Rosenbluth, Arianna, W. (1955). "Monte-Carlo calculations of the average extension of macromolecular chains". J. Chem. Phys. 23 (2): 356â359. Bibcode:1955JChPh..23..356R. doi:10.1063/1.1741967. S2CIDÂ 89611599.

^ Gordon, N.J.; Salmond, D.J.; Smith, A.F.M. (April 1993). "Novel approach to nonlinear/non-Gaussian Bayesian state estimation". IEE Proceedings F - Radar and Signal Processing. 140 (2): 107â113. doi:10.1049/ip-f-2.1993.0015. ISSNÂ 0956-375X. S2CIDÂ 12644877.

^ Kitagawa, G. (1996). "Monte carlo filter and smoother for non-Gaussian nonlinear state space models". Journal of Computational and Graphical Statistics. 5 (1): 1â25. doi:10.2307/1390750. JSTORÂ 1390750.

^ a b Del Moral, Pierre (1996). "Non Linear Filtering: Interacting Particle Solution" (PDF). Markov Processes and Related Fields. 2 (4): 555â580.

^ Carvalho, Himilcon; Del Moral, Pierre; Monin, AndrÃ©; Salut, GÃ©rard (July 1997). "Optimal Non-linear Filtering in GPS/INS Integration" (PDF). IEEE Transactions on Aerospace and Electronic Systems. 33 (3): 835. Bibcode:1997ITAES..33..835C. doi:10.1109/7.599254. S2CIDÂ 27966240.

^ P. Del Moral, G. Rigal, and G. Salut. "Estimation and nonlinear optimal control: An unified framework for particle solutions". LAAS-CNRS, Toulouse, Research Report no. 91137, DRET-DIGILOG- LAAS/CNRS contract, April (1991).

^ P. Del Moral, G. Rigal, and G. Salut. "Nonlinear and non Gaussian particle filters applied to inertial platform repositioning." LAAS-CNRS, Toulouse, Research Report no. 92207, STCAN/DIGILOG-LAAS/CNRS Convention STCAN no. A.91.77.013, (94p.) September (1991).

^ P. Del Moral, G. Rigal, and G. Salut. "Estimation and nonlinear optimal control: Particle resolution in filtering and estimation: Experimental results". Convention DRET no. 89.34.553.00.470.75.01, Research report no.2 (54p.), January (1992).

^ P. Del Moral, G. Rigal, and G. Salut. "Estimation and nonlinear optimal control: Particle resolution in filtering and estimation: Theoretical results".
Convention DRET no. 89.34.553.00.470.75.01, Research report no.3 (123p.), October (1992).

^ P. Del Moral, J.-Ch. Noyer, G. Rigal, and G. Salut. "Particle filters in radar signal processing: detection, estimation and air targets recognition". LAAS-CNRS, Toulouse, Research report no. 92495, December (1992).

^ P. Del Moral, G. Rigal, and G. Salut. "Estimation and nonlinear optimal control: Particle resolution in filtering and estimation". Studies on: Filtering, optimal control, and maximum likelihood estimation. Convention DRET no. 89.34.553.00.470.75.01. Research report no.4 (210p.), January (1993).

^ Del Moral, Pierre (1998). "Measure Valued Processes and Interacting Particle Systems. Application to Non Linear Filtering Problems". Annals of Applied Probability (Publications du Laboratoire de Statistique et ProbabilitÃ©s, 96-15 (1996)Â ed.). 8 (2): 438â495. CiteSeerXÂ 10.1.1.55.5257. doi:10.1214/aoap/1028903535.

^ Crisan, Dan; Gaines, Jessica; Lyons, Terry (1998). "Convergence of a branching particle method to the solution of the Zakai". SIAM Journal on Applied Mathematics. 58 (5): 1568â1590. doi:10.1137/s0036139996307371. S2CIDÂ 39982562.

^ Crisan, Dan; Lyons, Terry (1997). "Nonlinear filtering and measure-valued processes". Probability Theory and Related Fields. 109 (2): 217â244. doi:10.1007/s004400050131. S2CIDÂ 119809371.

^ Crisan, Dan; Lyons, Terry (1999). "A particle approximation of the solution of the KushnerâStratonovitch equation". Probability Theory and Related Fields. 115 (4): 549â578. doi:10.1007/s004400050249. S2CIDÂ 117725141.

^ Crisan, Dan; Del Moral, Pierre; Lyons, Terry (1999). "Discrete filtering using branching and interacting particle systems" (PDF). Markov Processes and Related Fields. 5 (3): 293â318.

^ Del Moral, Pierre; Guionnet, Alice (1999). "On the stability of Measure Valued Processes with Applications to filtering". C. R. Acad. Sci. Paris. 39 (1): 429â434.

^ Del Moral, Pierre; Guionnet, Alice (2001). "On the stability of interacting processes with applications to filtering and genetic algorithms". Annales de l'Institut Henri PoincarÃ©. 37 (2): 155â194. Bibcode:2001AnIHP..37..155D. doi:10.1016/s0246-0203(00)01064-5.

^ Ripley 1987

^ a b Sawilowsky 2003

^ Kalos & Whitlock 2008

^ Shojaeefard, MH; Khalkhali, A; Yarmohammadisatri, Sadegh (2017). "An efficient sensitivity analysis method for modified geometry of Macpherson suspension based on Pearson Correlation Coefficient". Vehicle System Dynamics. 55 (6): 827â852. Bibcode:2017VSD....55..827S. doi:10.1080/00423114.2017.1283046. S2CIDÂ 114260173.

^ Davenport 1992

^ Route, Matthew (August 10, 2017). "Radio-flaring Ultracool Dwarf Population Synthesis". The Astrophysical Journal. 845 (1): 66. arXiv:1707.02212. Bibcode:2017ApJ...845...66R. doi:10.3847/1538-4357/aa7ede. S2CIDÂ 118895524.

^ Vose 2008, p.Â 13.

^ Vose 2008, p.Â 16.

^ Jia, Xun; Ziegenhein, Peter; Jiang, Steve B (2014). "GPU-based high-performance computing for radiation therapy". Physics in Medicine and Biology. 59 (4): R151âR182. Bibcode:2014PMB....59R.151J. doi:10.1088/0031-9155/59/4/R151. PMCÂ 4003902. PMIDÂ 24486639.

^ Hill, R; Healy, B; Holloway, L; Kuncic, Z; Thwaites, D; Baldock, C (Mar 2014). "Advances in kilovoltage x-ray beam dosimetry". Physics in Medicine and Biology. 59 (6): R183âR231. Bibcode:2014PMB....59R.183H. doi:10.1088/0031-9155/59/6/R183. PMIDÂ 24584183. S2CIDÂ 18082594.

^ Rogers, D W O (2006). "Fifty years of Monte Carlo simulations for medical physics". Physics in Medicine and Biology. 51 (13): R287âR301. Bibcode:2006PMB....51R.287R. doi:10.1088/0031-9155/51/13/R17. PMIDÂ 16790908. S2CIDÂ 12066026.

^ Baeurle 2009

^ MÃ¶ller, W.; Eckstein, W. (1984-03-01). "Tridyn â A TRIM simulation code including dynamic composition changes". Nuclear Instruments and Methods in Physics Research Section B: Beam Interactions with Materials and Atoms. 2 (1): 814â818. Bibcode:1984NIMPB...2..814M. doi:10.1016/0168-583X(84)90321-5.

^ MacGillivray & Dodd 1982

^ Golden 1979

^ Int Panis et al. 2001.

^ Int Panis et al. 2002.

^ G. A. Bird, Molecular Gas Dynamics, Clarendon, Oxford (1976)

^ Dietrich, S.; Boyd, I. (1996). "A Scalar optimized parallel implementation of the DSMC technique". Journal of Computational Physics. 126 (2): 328â42. Bibcode:1996JCoPh.126..328D. doi:10.1006/jcph.1996.0141.

^ Nabian, Mohammad Amin; Meidani, Hadi (2017-08-28). "Deep Learning for Accelerated Reliability Analysis of Infrastructure Networks". Computer-Aided Civil and Infrastructure Engineering. 33 (6): 443â458. arXiv:1708.08551. Bibcode:2017arXiv170808551N. doi:10.1111/mice.12359. S2CIDÂ 36661983.

^ Nabian, Mohammad Amin; Meidani, Hadi (2018). "Accelerating Stochastic Assessment of Post-Earthquake Transportation Network Connectivity via Machine-Learning-Based Surrogates". Transportation Research Board 97th Annual Meeting.

^ Nabian, Mohammad Amin; Meidani, Hadi (2017). "Uncertainty Quantification and PCA-Based Model Reduction for Parallel Monte Carlo Analysis of Infrastructure System Reliability". Transportation Research Board 96th Annual Meeting.

^ Krivtsov, V. V. (2000). Modeling and estimation of the generalized renewal process in repairable system reliability analysis (PhD). University of Maryland, College Park, ISBN/ISSN: 0599725877. 

^ Chen, Shang-Ying; Hsu, Kuo-Chin; Fan, Chia-Ming (15 March 2021). "Improvement of generalized finite difference method for stochastic subsurface flow modeling". Journal of Computational Physics. 429: 110002. Bibcode:2021JCoPh.42910002C. doi:10.1016/J.JCP.2020.110002. S2CIDÂ 228828681.

^ Climate Change 2013 The Physical Science Basis (PDF). Cambridge University Press. 2013. p.Â 697. ISBNÂ 978-1-107-66182-0. Retrieved 2 March 2016.

^ Ojeda et al. 2009.

^ Milik & Skolnick 1993.

^ Cassey; Smith (2014). "Simulating confidence for the Ellison-Glaeser Index". Journal of Urban Economics. 81: 93. doi:10.1016/j.jue.2014.02.005.

^ Sawilowsky & Fahoome 2003

^ Spall, James C. (2005). "Monte Carlo Computation of the Fisher Information Matrix in Nonstandard Settings". Journal of Computational and Graphical Statistics. 14 (4): 889â909. CiteSeerXÂ 10.1.1.142.738. doi:10.1198/106186005X78800. S2CIDÂ 16090098.

^ Das, Sonjoy; Spall, James C.; Ghanem, Roger (2010). "Efficient Monte Carlo computation of Fisher information matrix using prior information". Computational Statistics & Data Analysis. 54 (2): 272â289. doi:10.1016/j.csda.2009.09.018.

^ Guillaume Chaslot; Sander Bakkes; Istvan Szita; Pieter Spronck. "Monte-Carlo Tree Search: A New Framework for Game AI" (PDF). Sander.landofsand.com. Retrieved 28 October 2017.

^ "Monte Carlo Tree Search - About". Archived from the original on 2015-11-29. Retrieved 2013-05-15.

^ Chaslot, Guillaume M. J. -B; Winands, Mark H. M; Van Den Herik, H. Jaap (2008). Parallel Monte-Carlo Tree Search. Lecture Notes in Computer Science. Vol.Â 5131. pp.Â 60â71. CiteSeerXÂ 10.1.1.159.4373. doi:10.1007/978-3-540-87608-3_6. ISBNÂ 978-3-540-87607-6.

^ Bruns, Pete. Monte-Carlo Tree Search in the game of Tantrix: Cosc490 Final Report (PDF) (Report).

^ David Silver; Joel Veness. "Monte-Carlo Planning in Large POMDPs" (PDF). 0.cs.ucl.ac.uk. Retrieved 28 October 2017.

^ Lorentz, Richard J (2011). "Improving MonteâCarlo Tree Search in Havannah". Computers and Games. Lecture Notes in Computer Science. Vol.Â 6515. pp.Â 105â115. Bibcode:2011LNCS.6515..105L. doi:10.1007/978-3-642-17928-0_10. ISBNÂ 978-3-642-17927-3.

^ Tomas Jakl. "Arimaa challenge â comparison study of MCTS versus alpha-beta methods" (PDF). Arimaa.com. Retrieved 28 October 2017.

^ Szirmay-Kalos 2008.

^ "How the Coast Guard Uses Analytics to Search for Those Lost at Sea". Dice Insights. 2014-01-03.

^ Lawrence D. Stone; Thomas M. Kratzke; John R. Frost. "Search Modeling and Optimization in USCG's Search and Rescue Optimal Planning System (SAROPS)" (PDF). Ifremer.fr. Retrieved 28 October 2017.

^ Carmona, RenÃ©; Del Moral, Pierre; Hu, Peng; Oudjane, Nadia (2012).  Carmona, RenÃ© A.; Moral, Pierre Del; Hu, Peng;  etÂ al. (eds.). An Introduction to Particle Methods with Financial Applications. Numerical Methods in Finance. Springer Proceedings in Mathematics. Vol.Â 12. Springer Berlin Heidelberg. pp.Â 3â49. CiteSeerXÂ 10.1.1.359.7957. doi:10.1007/978-3-642-25746-9_1. ISBNÂ 978-3-642-25745-2.

^ Carmona, RenÃ©; Del Moral, Pierre; Hu, Peng; Oudjane, Nadia (2012). Numerical Methods in Finance. Springer Proceedings in Mathematics. Vol.Â 12. doi:10.1007/978-3-642-25746-9. ISBNÂ 978-3-642-25745-2.

^ Kroese, D. P.; Taimre, T.; Botev, Z. I. (2011). Handbook of Monte Carlo Methods. John Wiley & Sons.

^ Arenas, Daniel J.; Lett, Lanair A.; Klusaritz, Heather; Teitelman, Anne M. (2017). "A Monte Carlo simulation approach for estimating the health and economic impact of interventions provided at a student-run clinic". PLOS ONE. 12 (12): e0189718. Bibcode:2017PLoSO..1289718A. doi:10.1371/journal.pone.0189718. PMCÂ 5746244. PMIDÂ 29284026.

^ Elwart, Liz; Emerson, Nina; Enders, Christina; Fumia, Dani; Murphy, Kevin (December 2006). "Increasing Access to Restraining Orders for Low Income Victims of Domestic Violence: A Cost-Benefit Analysis of the Proposed Domestic Abuse Grant Program" (PDF). State Bar of Wisconsin. Archived from the original (PDF) on 6 November 2018. Retrieved 2016-12-12.

^ Dahlan, Hadi Akbar (2021-10-29). "Perbandingan Penerbitan dan Harga Buku Mengikut Genre di Malaysia dan Jepun Menggunakan Data Akses Terbuka dan Simulasi Monte Carlo" (PDF). Kajian Malaysia. 39 (2): 179â202. doi:10.21315/km2021.39.2.8.

^ a b Press et al. 1996

^ MEZEI, M (31 December 1986). "Adaptive umbrella sampling: Self-consistent determination of the non-Boltzmann bias". Journal of Computational Physics. 68 (1): 237â248. Bibcode:1987JCoPh..68..237M. doi:10.1016/0021-9991(87)90054-4.

^ Bartels, Christian; Karplus, Martin (31 December 1997). "Probability Distributions for Complex Systems: Adaptive Umbrella Sampling of the Potential Energy". The Journal of Physical Chemistry B. 102 (5): 865â880. doi:10.1021/jp972280j.

^ Del Moral, Pierre; Doucet, Arnaud; Jasra, Ajay (2006). "Sequential Monte Carlo samplers". Journal of the Royal Statistical Society, Series B. 68 (3): 411â436. arXiv:cond-mat/0212648. doi:10.1111/j.1467-9868.2006.00553.x. S2CIDÂ 12074789.

^ Spall, J. C. (2003), Introduction to Stochastic Search and Optimization: Estimation, Simulation, and Control, Wiley, Hoboken, NJ. http://www.jhuapl.edu/ISSO

^ Mosegaard & Tarantola 1995

^ Tarantola 2005

^ McCracken, D. D., (1955) The Monte Carlo Method, Scientific American, 192(5), pp. 90-97

^ Elishakoff, I., (2003) Notes on Philosophy of the Monte Carlo Method, International Applied Mechanics, 39(7), pp.753-762

^ GrÃ¼ne-Yanoff, T., & Weirich, P. (2010). The philosophy and epistemology of simulation: A review, Simulation & Gaming, 41(1), pp. 20-50


Sources[edit]
.mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li{margin-left:0;padding-left:3.2em;text-indent:-3.2em}.mw-parser-output .refbegin-hanging-indents ul,.mw-parser-output .refbegin-hanging-indents ul li{list-style:none}@media(max-width:720px){.mw-parser-output .refbegin-hanging-indents>ul>li{padding-left:1.6em;text-indent:-1.6em}}.mw-parser-output .refbegin-columns{margin-top:0.3em}.mw-parser-output .refbegin-columns ul{margin-top:0}.mw-parser-output .refbegin-columns li{page-break-inside:avoid;break-inside:avoid-column}
Anderson, Herbert L. (1986). "Metropolis, Monte Carlo and the MANIAC" (PDF). Los Alamos Science. 14: 96â108.
Benov, Dobriyan M. (2016). "The Manhattan Project, the first electronic computer and the Monte Carlo method". Monte Carlo Methods and Applications. 22 (1): 73â79. doi:10.1515/mcma-2016-0102. S2CIDÂ 30198383.
Baeurle, Stephan A. (2009). "Multiscale modeling of polymer materials using field-theoretic methodologies: A survey about recent developments". Journal of Mathematical Chemistry. 46 (2): 363â426. doi:10.1007/s10910-008-9467-3. S2CIDÂ 117867762.
Berg, Bernd A. (2004). Markov Chain Monte Carlo Simulations and Their Statistical Analysis (With Web-Based Fortran Code). Hackensack, NJ: World Scientific. ISBNÂ 978-981-238-935-0.
Binder, Kurt (1995). The Monte Carlo Method in Condensed Matter Physics. New York: Springer. ISBNÂ 978-0-387-54369-7.
Caflisch, R. E. (1998). Monte Carlo and quasi-Monte Carlo methods. Acta Numerica. Vol.Â 7. Cambridge University Press. pp.Â 1â49.
Davenport, J. H. (1992). "Primality testing revisited". Papers from the international symposium on Symbolic and algebraic computation - ISSAC '92. Proceeding ISSAC '92 Papers from the International Symposium on Symbolic and Algebraic Computation. pp.Â 123â129. CiteSeerXÂ 10.1.1.43.9296. doi:10.1145/143242.143290. ISBNÂ 978-0-89791-489-5. S2CIDÂ 17322272.
Doucet, Arnaud; Freitas, Nando de; Gordon, Neil (2001). Sequential Monte Carlo methods in practice. New York: Springer. ISBNÂ 978-0-387-95146-1.
Eckhardt, Roger (1987). "Stan Ulam, John von Neumann, and the Monte Carlo method" (PDF). Los Alamos Science (15): 131â137.
Fishman, G. S. (1995). Monte Carlo: Concepts, Algorithms, and Applications. New York: Springer. ISBNÂ 978-0-387-94527-9.
C. Forastero and L. Zamora and D. Guirado and A. Lallena (2010). "A Monte Carlo tool to simulate breast cancer screening programmes". Phys. Med. Biol. 55 (17): 5213â5229. Bibcode:2010PMB....55.5213F. doi:10.1088/0031-9155/55/17/021. PMIDÂ 20714045.
Golden, Leslie M. (1979). "The Effect of Surface Roughness on the Transmission of Microwave Radiation Through a Planetary Surface". Icarus. 38 (3): 451â455. Bibcode:1979Icar...38..451G. doi:10.1016/0019-1035(79)90199-4.
Gould, Harvey; Tobochnik, Jan (1988). An Introduction to Computer Simulation Methods, Part 2, Applications to Physical Systems. Reading: Addison-Wesley. ISBNÂ 978-0-201-16504-3.
Grinstead, Charles; Snell, J. Laurie (1997). Introduction to Probability. American Mathematical Society. pp.Â 10â11.
Hammersley, J. M.; Handscomb, D. C. (1975). Monte Carlo Methods. London: Methuen. ISBNÂ 978-0-416-52340-9.
Hartmann, A.K. (2009). Practical Guide to Computer Simulations. World Scientific. ISBNÂ 978-981-283-415-7. Archived from the original on 2009-02-11.
Hubbard, Douglas (2007). How to Measure Anything: Finding the Value of Intangibles in Business. John Wiley & Sons. p.Â 46. ISBNÂ 9780470110126.
Hubbard, Douglas (2009). The Failure of Risk Management: Why It's Broken and How to Fix It. John Wiley & Sons.
Kahneman, D.; Tversky, A. (1982). Judgement under Uncertainty: Heuristics and Biases. Cambridge University Press.
Kalos, Malvin H.; Whitlock, Paula A. (2008). Monte Carlo Methods. Wiley-VCH. ISBNÂ 978-3-527-40760-6.
Kroese, D. P.; Taimre, T.; Botev, Z.I. (2011). Handbook of Monte Carlo Methods. New York: John Wiley & Sons. p.Â 772. ISBNÂ 978-0-470-17793-8.
MacGillivray, H. T.; Dodd, R. J. (1982). "Monte-Carlo simulations of galaxy systems". Astrophysics and Space Science. 86 (2): 419â435. doi:10.1007/BF00683346. S2CIDÂ 189849365.
MacKeown, P. Kevin (1997). Stochastic Simulation in Physics. New York: Springer. ISBNÂ 978-981-3083-26-4.
Metropolis, N. (1987). "The beginning of the Monte Carlo method" (PDF). Los Alamos Science (1987 Special Issue dedicated to Stanislaw Ulam): 125â130.
Metropolis, N.; Rosenbluth, Arianna W.; Rosenbluth, Marshall N.; Teller, Augusta H.; Teller, Edward (1953). "Equation of State Calculations by Fast Computing Machines". Journal of Chemical Physics. 21 (6): 1087. Bibcode:1953JChPh..21.1087M. doi:10.1063/1.1699114. OSTIÂ 4390578.
Metropolis, N.; Ulam, S. (1949). "The Monte Carlo Method". Journal of the American Statistical Association. 44 (247): 335â341. doi:10.1080/01621459.1949.10483310. JSTORÂ 2280232. PMIDÂ 18139350.
Milik, M.; Skolnick, J. (Jan 1993). "Insertion of peptide chains into lipid membranes: an off-lattice Monte Carlo dynamics model". Proteins. 15 (1): 10â25. doi:10.1002/prot.340150104. PMIDÂ 8451235. S2CIDÂ 7450512.
Mosegaard, Klaus; Tarantola, Albert (1995). "Monte Carlo sampling of solutions to inverse problems" (PDF). J. Geophys. Res. 100 (B7): 12431â12447. Bibcode:1995JGR...10012431M. doi:10.1029/94JB03097.
Ojeda, P.; Garcia, M.; Londono, A.; Chen, N.Y. (Feb 2009). "Monte Carlo Simulations of Proteins in Cages: Influence of Confinement on the Stability of Intermediate States". Biophys. J. 96 (3): 1076â1082. Bibcode:2009BpJ....96.1076O. doi:10.1529/biophysj.107.125369. PMCÂ 2716574. PMIDÂ 18849410.
Int Panis, L.; De Nocker, L.; De Vlieger, I.; Torfs, R. (2001). "Trends and uncertainty in air pollution impacts and external costs of Belgian passenger car traffic". International Journal of Vehicle Design. 27 (1â4): 183â194. doi:10.1504/IJVD.2001.001963.
Int Panis, L.; Rabl, A.; De Nocker, L.; Torfs, R. (2002).  Sturm, P. (ed.). "Diesel or PetrolÂ ? An environmental comparison hampered by uncertainty". Mitteilungen Institut fÃ¼r Verbrennungskraftmaschinen und Thermodynamik. Technische UniversitÃ¤t Graz Austria. Heft 81 Vol 1: 48â54.
Press, William H.; Teukolsky, Saul A.; Vetterling, William T.; Flannery, Brian P. (1996) [1986]. Numerical Recipes in Fortran 77: The Art of Scientific Computing. Fortran Numerical Recipes. Vol.Â 1 (2ndÂ ed.). Cambridge University Press. ISBNÂ 978-0-521-43064-7.
Ripley, B. D. (1987). Stochastic Simulation. Wiley & Sons.
Robert, C.; Casella, G. (2004). Monte Carlo Statistical Methods (2ndÂ ed.). New York: Springer. ISBNÂ 978-0-387-21239-5.
Rubinstein, R. Y.; Kroese, D. P. (2007). Simulation and the Monte Carlo Method (2ndÂ ed.). New York: John Wiley & Sons. ISBNÂ 978-0-470-17793-8.
Savvides, Savvakis C. (1994). "Risk Analysis in Investment Appraisal" (PDF). Project Appraisal Journal. 9 (1). doi:10.2139/ssrn.265905. S2CIDÂ 2809643.
Sawilowsky, Shlomo S.; Fahoome, Gail C. (2003). Statistics via Monte Carlo Simulation with Fortran. Rochester Hills, MI: JMASM. ISBNÂ 978-0-9740236-0-1.
Sawilowsky, Shlomo S. (2003). "You think you've got trivials?". Journal of Modern Applied Statistical Methods. 2 (1): 218â225. doi:10.22237/jmasm/1051748460.
Silver, David; Veness, Joel (2010). "Monte-Carlo Planning in Large POMDPs" (PDF).  In Lafferty, J.; Williams, C. K. I.; Shawe-Taylor, J.; Zemel, R. S.; Culotta, A. (eds.). Advances in Neural Information Processing Systems 23. Neural Information Processing Systems 2010. Neural Information Processing Systems Foundation.
Szirmay-Kalos, LÃ¡szlÃ³ (2008). Monte Carlo Methods in Global Illumination - Photo-realistic Rendering with Randomization. VDM Verlag Dr. Mueller e.K. ISBNÂ 978-3-8364-7919-6.
Tarantola, Albert (2005). Inverse Problem Theory. Philadelphia: Society for Industrial and Applied Mathematics. ISBNÂ 978-0-89871-572-9.
Vose, David (2008). Risk Analysis, A Quantitative Guide (3rdÂ ed.). John Wiley & Sons. ISBNÂ 9780470512845.
Mazhdrakov, Metodi; Benov, Dobriyan; Valkanov, Nikolai (2018). The Monte Carlo Method. Engineering Applications. ACMO Academic Press. ISBNÂ 978-619-90684-3-4.

External links[edit]
 Media related to Monte Carlo method at Wikimedia Commons

.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}vteStatistics
Outline
Index
Descriptive statisticsContinuous dataCenter
Mean
arithmetic
geometric
harmonic
cubic
generalized/power
Median
Mode
Dispersion
Variance
Standard deviation
Average absolute deviation
Coefficient of variation
Percentile
Range
Interquartile range
Shape
Central limit theorem
Moments
Skewness
Kurtosis
L-moments
Count data
Index of dispersion
Summary tables
Grouped data
Frequency distribution
Contingency table
Dependence
Pearson product-moment correlation
Rank correlation
Spearman's Ï
Kendall's Ï
Partial correlation
Scatter plot
Graphics
Bar chart
Biplot
Box plot
Control chart
Correlogram
Fan chart
Forest plot
Histogram
Pie chart
QâQ plot
Run chart
Scatter plot
Stem-and-leaf display
Radar chart
Violin plot
Data collectionStudy design
Population
Statistic
Effect size
Statistical power
Optimal design
Sample size determination
Replication
Missing data
Survey methodology
Sampling
stratified
cluster
Standard error
Opinion poll
Questionnaire
Controlled experiments
Scientific control
Randomized experiment
Randomized controlled trial
Random assignment
Blocking
Interaction
Factorial experiment
Adaptive Designs
Adaptive clinical trial
Up-and-Down Designs
Stochastic approximation
Observational Studies
Cross-sectional study
Cohort study
Natural experiment
Quasi-experiment
Statistical inferenceStatistical theory
Population
Statistic
Probability distribution
Sampling distribution
Order statistic
Empirical distribution
Density estimation
Statistical model
Model specification
Lp space
Parameter
location
scale
shape
Parametric family
LikelihoodÂ (monotone)
Locationâscale family
Exponential family
Completeness
Sufficiency
Statistical functional
Bootstrap
U
V
Optimal decision
loss function
Efficiency
Statistical distance
divergence
Asymptotics
Robustness
Frequentist inferencePoint estimation
Estimating equations
Maximum likelihood
Method of moments
M-estimator
Minimum distance
Unbiased estimators
Mean-unbiased minimum-variance
RaoâBlackwellization
LehmannâScheffÃ© theorem
Median unbiased
Plug-in
Interval estimation
Confidence interval
Pivot
Likelihood interval
Prediction interval
Tolerance interval
Resampling
Bootstrap
Jackknife
Testing hypotheses
1- & 2-tails
Power
Uniformly most powerful test
Permutation test
Randomization test
Multiple comparisons
Parametric tests
Likelihood-ratio
Score/Lagrange multiplier
Wald
Specific tests
Z-test (normal)
Student's t-test
F-test
Goodness of fit
Chi-squared
G-test
KolmogorovâSmirnov
AndersonâDarling
Lilliefors
JarqueâBera
Normality (ShapiroâWilk)
Likelihood-ratio test
Model selection
Cross validation
AIC
BIC
Rank statistics
Sign
Sample median
Signed rank (Wilcoxon)
HodgesâLehmann estimator
Rank sum (MannâWhitney)
Nonparametric anova
1-way (KruskalâWallis)
2-way (Friedman)
Ordered alternative (JonckheereâTerpstra)
Bayesian inference
Bayesian probability
prior
posterior
Credible interval
Bayes factor
Bayesian estimator
Maximum posterior estimator
CorrelationRegression analysisCorrelation
Pearson product-moment
Partial correlation
Confounding variable
Coefficient of determination
Regression analysis
Errors and residuals
Regression validation
Mixed effects models
Simultaneous equations models
Multivariate adaptive regression splines (MARS)
Linear regression
Simple linear regression
Ordinary least squares
General linear model
Bayesian regression
Non-standard predictors
Nonlinear regression
Nonparametric
Semiparametric
Isotonic
Robust
Heteroscedasticity
Homoscedasticity
Generalized linear model
Exponential families
Logistic (Bernoulli)Â / BinomialÂ / Poisson regressions
Partition of variance
Analysis of variance (ANOVA, anova)
Analysis of covariance
Multivariate ANOVA
Degrees of freedom
CategoricalÂ / MultivariateÂ / Time-seriesÂ / Survival analysisCategorical
Cohen's kappa
Contingency table
Graphical model
Log-linear model
McNemar's test
Cochran-Mantel-Haenszel statistics
Multivariate
Regression
Manova
Principal components
Canonical correlation
Discriminant analysis
Cluster analysis
Classification
Structural equation model
Factor analysis
Multivariate distributions
Elliptical distributions
Normal
Time-seriesGeneral
Decomposition
Trend
Stationarity
Seasonal adjustment
Exponential smoothing
Cointegration
Structural break
Granger causality
Specific tests
DickeyâFuller
Johansen
Q-statistic (LjungâBox)
DurbinâWatson
BreuschâGodfrey
Time domain
Autocorrelation (ACF)
partial (PACF)
Cross-correlation (XCF)
ARMA model
ARIMA model (BoxâJenkins)
Autoregressive conditional heteroskedasticity (ARCH)
Vector autoregression (VAR)
Frequency domain
Spectral density estimation
Fourier analysis
Wavelet
Whittle likelihood
SurvivalSurvival function
KaplanâMeier estimator (product limit)
Proportional hazards models
Accelerated failure time (AFT) model
First hitting time
Hazard function
NelsonâAalen estimator
Test
Log-rank test
ApplicationsBiostatistics
Bioinformatics
Clinical trialsÂ / studies
Epidemiology
Medical statistics
Engineering statistics
Chemometrics
Methods engineering
Probabilistic design
ProcessÂ / quality control
Reliability
System identification
Social statistics
Actuarial science
Census
Crime statistics
Demography
Econometrics
Jurimetrics
National accounts
Official statistics
Population statistics
Psychometrics
Spatial statistics
Cartography
Environmental statistics
Geographic information system
Geostatistics
Kriging

Category
Â Mathematics portal
Commons
 WikiProject

Authority control General
Integrated Authority File (Germany)
National libraries
United States
Japan





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Monte_Carlo_method&oldid=1066704511"
		Categories: Monte Carlo methodsNumerical analysisStatistical mechanicsComputational physicsSampling techniquesStatistical approximationsStochastic simulationRandomized algorithmsRisk analysis methodologiesHidden categories: Articles with short descriptionShort description is different from WikidataAll articles with unsourced statementsArticles with unsourced statements from November 2019All articles needing examplesArticles needing examples from May 2012CS1: long volume valueCommons category link is on WikidataArticles with GND identifiersArticles with LCCN identifiersArticles with NDL identifiers
	
