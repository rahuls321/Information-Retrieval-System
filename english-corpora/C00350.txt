
Title:
Nim
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Game of strategy
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}For the programming language, see Nim (programming language).
For the chimpanzee, see Nim Chimpsky.
For other uses, see Nim (disambiguation).
This article's lead section may be too long for the length of the article. Please help by moving some material from it into the body of the article. Please read the layout guide and lead section guidelines to ensure the section will still be inclusive of all essential details. Please discuss this issue on the article's talk page.  (October 2020)
  Matches set up in rows for a game of Nim. Players take turns to choose a row and remove any number of matches from it.
Nim is a mathematical game of strategy in which two players take turns removing (or "nimming") objects from distinct heaps or piles. On each turn, a player must remove at least one object, and may remove any number of objects provided they all come from the same heap or pile. Depending on the version being played, the goal of the game is either to avoid taking the last object or to take the last object.
Variants of Nim have been played since ancient times.[1] The game is said to have originated in Chinaâit closely resembles the Chinese game of æ¡ç³å­ jiÇn-shÃ­zi, or "picking stones"[2]âbut the origin is uncertain; the earliest European references to Nim are from the beginning of the 16th century. Its current name was coined by Charles L. Bouton of Harvard University, who also developed the complete theory of the game in 1901,[3] but the origins of the name were never fully explained.
Nim is typically played as a misÃ¨re game, in which the player to take the last object loses. Nim can also be played as a normal play game whereby the player taking the last object wins. This is called normal play because the last move is a winning move in most games, even though it is not the normal way that Nim is played. In either normal play or a misÃ¨re game, when the number of heaps with at least two objects is exactly equal to one, the player who takes next can easily win. If this removes either all or all but one objects from the heap that has two or more, then no heaps will have more than one object, so the players are forced to alternate removing exactly one object until the game ends. If the player leaves an even number of non-zero heaps (as the player would do in normal play), the player takes last; if the player leaves an odd number of heaps (as the player would do in misÃ¨re play), then the other player takes last.
Normal play Nim (or more precisely the system of nimbers) is fundamental to the SpragueâGrundy theorem, which essentially says that in normal play every impartial game is equivalent to a Nim heap that yields the same outcome when played in parallel with other normal play impartial games (see disjunctive sum).
While all normal play impartial games can be assigned a Nim value, that is not the case under the misÃ¨re convention. Only tame games can be played using the same strategy as misÃ¨re Nim.
Nim is a special case of a poset game where the poset consists of disjoint chains (the heaps).
The evolution graph of the game of Nim with three heaps is the same as three branches of the evolution graph of the Ulam-Warburton automaton.[4]
At the 1940 New York World's Fair Westinghouse displayed a machine, the Nimatron, that played Nim.[5] From MayÂ 11, 1940, to OctoberÂ 27, 1940, only a few people were able to beat the machine in that six-week period; if they did, they were presented with a coin that said Nim Champ.[6][7] It was also one of the first-ever electronic computerized games. Ferranti built a Nim playing computer which was displayed at the Festival of Britain in 1951. In 1952 Herbert Koppel, Eugene Grant and Howard Bailer, engineers from the W. L. Maxon Corporation, developed a machine weighing 23 kilograms (50Â lb) which played Nim against a human opponent and regularly won.[8] A Nim Playing Machine has been described made from TinkerToy.[9]
The game of Nim was the subject of Martin Gardner's February 1958 Mathematical Games column in Scientific American. A version of Nim is playedâand has symbolic importanceâin the French New Wave film Last Year at Marienbad (1961).[10]

Contents

1 Game play and illustration
2 Winning positions
3 Mathematical theory

3.1 Example implementation


4 Proof of the winning formula
5 Variations

5.1 The subtraction game
5.2 The 21 game
5.3 The 100 game
5.4 A multiple-heap rule
5.5 Circular Nim
5.6 Grundy's game
5.7 Greedy Nim
5.8 Index-k Nim
5.9 Building Nim
5.10 Higher dimensional Nim
5.11 Graph Nim
5.12 Candy Nim
5.13 Wordnim


6 See also
7 References
8 Further reading
9 External links



Game play and illustration[edit]
The normal game is between two players and is played with three heaps of any number of objects. The two players alternate taking any number of objects from any one of the heaps. The goal is to be the last to take an object. In misÃ¨re play, the goal is instead to ensure that the opponent is forced to take the last remaining object.
The following example of a normal game is played between fictional players Bob and Alice, who start with heaps of three, four and five objects.




Heap A

Heap B

Heap C

Move


3
4
5
Game begins


1
4
5
Bob takes 2 from A


1
4
2
Alice takes 3 from C


1
3
2
Bob takes 1 from B


1
2
2
Alice takes 1 from B


0
2
2
Bob takes entire A heap, leaving two 2s


0
1
2
Alice takes 1 from B


0
1
1
Bob takes 1 from C leaving two 1s. (In misÃ¨re play he would take 2 from C leaving (0, 1, 0).)


0
0
1
Alice takes 1 from B


0
0
0
Bob takes entire C heap and wins

Winning positions[edit]
The practical strategy to win at the game of Nim is for a player to get the other into one of the following positions, and every successive turn afterwards they should be able to make one of the smaller positions. Only the last move changes between misere and normal play.




2 Heaps

3 Heaps

4 Heaps


1 1 *

1 1 1 **

1 1 1 1 *


2 2

1 2 3

1 1 n n


3 3

1 4 5

1 2 4 7


4 4

1 6 7

1 2 5 6


5 5

1 8 9

1 3 4 6


6 6

2 4 6

1 3 5 7


7 7

2 5 7

2 3 4 5


8 8

3 4 7

2 3 6 7


9 9

3 5 6

2 3 8 9


n n

4 8 12

4 5 6 7




4 9 13

4 5 8 9




5 8 13

n n m m




5 9 12

n n n n

* Only valid for normal play.
** Only valid for misere.
For the generalisations, n and m can be any value > 0, and they may be the same.

Mathematical theory[edit]
Nim has been mathematically solved for any number of initial heaps and objects, and there is an easily calculated way to determine which player will win and which winning moves are open to that player.
The key to the theory of the game is the binary digital sum of the heap sizes, i.e., the sum (in binary), neglecting all carries from one digit to another. This operation is also known as "bitwise xor" or "vector addition over GF(2)" (bitwise addition modulo 2). Within combinatorial game theory it is usually called the nim-sum, as it will be called here. The nim-sum of x and y is written xÂ âÂ y to distinguish it from the ordinary sum, xÂ +Â y. An example of the calculation with heaps of size 3, 4, and 5 is as follows:

Binary Decimal
Â 
  0112    310    Heap A
  1002    410    Heap B
  1012    510    Heap C
  ---
  0102    210    The nim-sum of heaps A, B, and C, 3 â 4 â 5 = 2

An equivalent procedure, which is often easier to perform mentally, is to express the heap sizes as sums of distinct powers of 2, cancel pairs of equal powers, and then add what is left:

3 = 0 + 2 + 1 =     2   1      Heap A
4 = 4 + 0 + 0 = 4              Heap B
5 = 4 + 0 + 1 = 4       1      Heap C
--------------------------------------------------------------------
2 =                 2          What is left after canceling 1s and 4s

In normal play, the winning strategy is to finish every move with a nim-sum of 0. This is always possible if the nim-sum is not zero before the move. If the nim-sum is zero, then the next player will lose if the other player does not make a mistake. To find out which move to make, let X be the nim-sum of all the heap sizes. Find a heap where the nim-sum of X and heap-size is less than the heap-size; the winning strategy is to play in such a heap, reducing that heap to the nim-sum of its original size with X. In the example above, taking the nim-sum of the sizes is XÂ =Â 3Â âÂ 4Â âÂ 5Â =Â 2. The nim-sums of the heap sizes A=3, B=4, and C=5 with X=2 are

A â X = 3 â 2 = 1      [Since (011) â (010) = 001 ]
B â X = 4 â 2 = 6
C â X = 5 â 2 = 7
The only heap that is reduced is heap A, so the winning move is to reduce the size of heap A to 1 (by removing two objects).
As a particular simple case, if there are only two heaps left, the strategy is to reduce the number of objects in the bigger heap to make the heaps equal. After that, no matter what move your opponent makes, you can make the same move on the other heap, guaranteeing that you take the last object.
When played as a misÃ¨re game, Nim strategy is different only when the normal play move would leave only heaps of size one. In that case, the correct move is to leave an odd number of heaps of size one (in normal play, the correct move would be to leave an even number of such heaps).
These strategies for normal play and a misÃ¨re game are the same until the number of heaps with at least two objects is exactly equal to one. At that point, the next player removes either all objects (or all but one) from the heap that has two or more, so no heaps will have more than one object (in other words, so all remaining heaps have exactly one object each), so the players are forced to alternate removing exactly one object until the game ends. In normal play, the player leaves an even number of non-zero heaps, so the same player takes last; in misÃ¨re play, the player leaves an odd number of non-zero heaps, so the other player takes last.
In a misÃ¨re game with heaps of sizes three, four and five, the strategy would be applied like this:

A B C nim-sum 
Â 
3 4 5 0102=210   I take 2 from A, leaving a sum of 000, so I will win.
1 4 5 0002=010   You take 2 from C
1 4 3 1102=610   I take 2 from B
1 2 3 0002=010   You take 1 from C
1 2 2 0012=110   I take 1 from A
0 2 2 0002=010   You take 1 from C
0 2 1 0112=310   The normal play strategy would be to take 1 from B, leaving an even number (2)
                 heaps of size 1.  For misÃ¨re play, I take the entire B heap, to leave an odd
                 number (1) of heaps of size 1.
0 0 1 0012=110   You take 1 from C, and lose.

Example implementation[edit]
The previous strategy for a misÃ¨re game can be easily implemented (for example in Python, below).

import functools

MISERE = 'misere'
NORMAL = 'normal'

def nim(heaps, game_type):
    """Computes next move for Nim, for both game types normal and misere.

    if there is a winning move:
        return tuple(heap_index, amount_to_remove)
    else:
        return "You will loseÂ :("

    - mid-game scenarios are the same for both game types

    >>> print(nim([1, 2, 3], MISERE))
    misere [1, 2, 3] You will loseÂ :(
    >>> print(nim([1, 2, 3], NORMAL))
    normal [1, 2, 3] You will loseÂ :(
    >>> print(nim([1, 2, 4], MISERE))
    misere [1, 2, 4] (2, 1)
    >>> print(nim([1, 2, 4], NORMAL))
    normal [1, 2, 4] (2, 1)

    - endgame scenarios change depending upon game type

    >>> print(nim([1], MISERE))
    misere [1] You will loseÂ :(
    >>> print(nim([1], NORMAL))
    normal [1] (0, 1)
    >>> print(nim([1, 1], MISERE))
    misere [1, 1] (0, 1)
    >>> print(nim([1, 1], NORMAL))
    normal [1, 1] You will loseÂ :(
    >>> print(nim([1, 5], MISERE))
    misere [1, 5] (1, 5)
    >>> print(nim([1, 5], NORMAL))
    normal [1, 5] (1, 4)
    """

    print(game_type, heaps, end=' ')

    is_misere = game_type == MISERE

    is_near_endgame = False
    count_non_0_1 = sum(1 for x in heaps if x > 1)
    is_near_endgame = (count_non_0_1 <= 1)

    # nim sum will give the correct end-game move for normal play but
    # misere requires the last move be forced onto the opponent
    if is_misere and is_near_endgame:
        moves_left = sum(1 for x in heaps if x > 0)
        is_odd = (moves_left % 2 == 1)
        sizeof_max = max(heaps)
        index_of_max = heaps.index(sizeof_max)

        if sizeof_max == 1 and is_odd:
            return "You will loseÂ :("

        # reduce the game to an odd number of 1's
        return index_of_max, sizeof_max - int(is_odd)

    nim_sum = functools.reduce(lambda x, y: x ^ y, heaps)
    if nim_sum == 0:
        return "You will loseÂ :("

    # Calc which move to make
    for index, heap in enumerate(heaps):
        target_size = heap ^ nim_sum
        if target_size < heap:
            amount_to_remove = heap - target_size
            return index, amount_to_remove

if __name__ == "__main__":
    import doctest
    doctest.testmod()

Proof of the winning formula[edit]
The soundness of the optimal strategy described above was demonstrated by C. Bouton.
Theorem. In a normal Nim game, the player making the first move has a winning strategy if and only if the nim-sum of the sizes of the heaps is not zero. Otherwise, the second player has a winning strategy.
Proof: Notice that the nim-sum (â) obeys the usual associative and commutative laws of addition (+) and also satisfies an additional property, xÂ âÂ xÂ =Â 0.
Let x1,Â ...,Â xn be the sizes of the heaps before a move, and y1,Â ...,Â yn the corresponding sizes after a move. Let sÂ =Â x1Â âÂ ...Â âÂ xn and tÂ =Â y1Â âÂ ...Â âÂ yn. If the move was in heap k, we have xiÂ =Â yi for all iÂ â Â k, and xkÂ >Â yk. By the properties of â mentioned above, we have

    t = 0 â t
      = s â s â t
      = s â (x1 â ... â xn) â (y1 â ... â yn)
      = s â (x1 â y1) â ... â (xn â yn)
      = s â 0 â ... â 0 â (xk â yk) â 0 â ... â 0
      = s â xk â yk
Â 
(*) t = s â xk â yk.

The theorem follows by induction on the length of the game from these two lemmas.
Lemma 1. If s = 0, then t â  0 no matter what move is made.
Proof: If there is no possible move, then the lemma is vacuously true (and the first player loses the normal play game by definition). Otherwise, any move in heap k will produce tÂ =Â xkÂ âÂ yk from (*). This number is nonzero, since xkÂ â Â yk.
Lemma 2. If s â  0, it is possible to make a move so that t = 0.
Proof: Let d be the position of the leftmost (most significant) nonzero bit in the binary representation of s, and choose k such that the dth bit of xk is also nonzero. (Such a k must exist, since otherwise the dth bit of s would be 0.)
Then letting ykÂ =Â sÂ âÂ xk, we claim that ykÂ <Â xk: all bits to the left of d are the same in xk and yk, bit d decreases from 1 to 0 (decreasing the value by 2d), and any change in the remaining bits will amount to at most 2dâ1. The first player can thus make a move by taking xkÂ âÂ yk objects from heap k, then

t = s â xk â yk           (by (*))
  = s â xk â (s â xk)
  = 0.

The modification for misÃ¨re play is demonstrated by noting that the modification first arises in a position that has only one heap of size 2 or more. Notice that in such a position s â  0, and therefore this situation has to arise when it is the turn of the player following the winning strategy. The normal play strategy is for the player to reduce this to size 0 or 1, leaving an even number of heaps with size 1, and the misÃ¨re strategy is to do the opposite. From that point on, all moves are forced.

Variations[edit]
The subtraction game[edit]
  Interactive subtraction game: Players take turns removing 1, 2 or 3 objects from an initial pool of 21 objects. The player taking the last object wins.
In another game which is commonly known as Nim (but is better called the subtraction game), an upper bound is imposed on the number of objects that can be removed in a turn. Instead of removing arbitrarily many objects, a player can only remove 1 or 2 or ... or k at a time. This game is commonly played in practice with only one heap (for instance with kÂ =Â 3 in the game Thai 21 on Survivor: Thailand, where it appeared as an Immunity Challenge).
Bouton's analysis carries over easily to the general multiple-heap version of this game. The only difference is that as a first step, before computing the Nim-sums we must reduce the sizes of the heaps modulo kÂ +Â 1. If this makes all the heaps of size zero (in misÃ¨re play), the winning move is to take k objects from one of the heaps. In particular, in ideal play from a single heap of n objects, the second player can win if and only if

0Â =Â nÂ (modÂ kÂ +Â 1) (in normal play), or
1Â =Â nÂ (modÂ kÂ +Â 1) (in misÃ¨re play).
This follows from calculating the nim-sequence of S(1,2,...,k),


  
    
      
        0.123
        â¦
        k
        0123
        â¦
        k
        0123
        â¯
        =
        
          
            
              0
              Ë
            
          
        
        .123
        â¦
        
          
            
              k
              Ë
            
          
        
        ,
      
    
    {\displaystyle 0.123\ldots k0123\ldots k0123\dots ={\dot {0}}.123\ldots {\dot {k}},}
  

from which the strategy above follows by the SpragueâGrundy theorem.

The 21 game[edit]
See also: 21 (drinking game)
The game "21" is played as a misÃ¨re game with any number of players who take turns saying a number. The first player says "1" and each player in turn increases the number by 1, 2, or 3, but may not exceed 21; the player forced to say "21" loses. This can be modeled as a subtraction game with a heap of 21ân objects. The winning strategy for the two-player version of this game is to always say a multiple of 4; it is then guaranteed that the other player will ultimately have to say 21; so in the standard version, wherein the first player opens with "1", they start with a losing move.
The 21 game can also be played with different numbers, e.g., "Add at most 5; lose on 34".
A sample game of 21 in which the second player follows the winning strategy:

Player     Number
  1           1
  2           4
  1        5, 6 or 7
  2           8
  1       9, 10 or 11
  2          12
  1      13, 14 or 15
  2          16
  1      17, 18 or 19
  2          20
  1          21

The 100 game[edit]
A similar version is the "100 game": Two players start from 0 and alternately add a number from 1 to 10 to the sum. The player who reaches 100 wins. The winning strategy is to reach a number in which the digits are subsequent (e.g., 01, 12, 23, 34,...) and control the game by jumping through all the numbers of this sequence. Once a player reaches 89, the opponent can only choose numbers from 90 to 99, and the next answer can in any case be 100.

A multiple-heap rule[edit]
See also: Wythoff's game
In another variation of Nim, besides removing any number of objects from a single heap, one is permitted to remove the same number of objects from each heap.

Circular Nim[edit]
See also: Kayles
Yet another variation of Nim is 'Circular Nim', wherein any number of objects are placed in a circle and two players alternately remove one, two or three adjacent objects. For example, starting with a circle of ten objects,

. . . . . . . . . .

three objects are taken in the first move

_ . . . . . . . _ _

then another three

_ . _ _ _ . . . _ _

then one

_ . _ _ _ . . _ _ _

but then three objects cannot be taken out in one move.

Grundy's game[edit]
In Grundy's game, another variation of Nim, a number of objects are placed in an initial heap and two players alternately divide a heap into two nonempty heaps of different sizes. Thus, six objects may be divided into piles of 5+1 or 4+2, but not 3+3. Grundy's game can be played as either misÃ¨re or normal play.

Greedy Nim[edit]
Greedy Nim is a variation wherein the players are restricted to choosing stones from only the largest pile.[11] It is a finite impartial game. Greedy Nim MisÃ¨re has the same rules as Greedy Nim, but here the last player able to make a move loses.
Let the largest number of stones in a pile be m and the second largest number of stones in a pile be n. Let pm be the number of piles having m stones and pn be the number of piles having n stones. Then there is a theorem that game positions with pm even are P positions.
[12] This theorem can be shown by considering the positions where pm is odd. If pm is larger than 1, all stones may be removed from this pile to reduce pm by 1 and the new pm will be even. If pm = 1 (i.e. the largest heap is unique), there are two cases:

If pn is odd, the size of the largest heap is reduced to n (so now the new pm is even).
If pn is even, the largest heap is removed entirely, leaving an even number of largest heaps.
Thus, there exists a move to a state where pm is even. Conversely, if pm is even, if any move is possible (pm â  0), then it must take the game to a state where pm is odd. The final position of the game is even (pm = 0). Hence, each position of the game with pm even must be a P position.

Index-k Nim[edit]
A generalization of multi-heap Nim was called "Nim
  
    
      
        
          

          
          
            k
          
        
      
    
    {\displaystyle {}_{k}}
  
" or "index-k" Nim by E. H. Moore,[13] who analyzed it in 1910. In index-k Nim, instead of removing objects from only one heap, players can remove objects from at least one but up to k different heaps. The number of elements that may be removed from each heap may be either arbitrary or limited to at most r elements, like in the "subtraction game" above.
The winning strategy is as follows: Like in ordinary multi-heap Nim, one considers the binary representation of the heap sizes (or heap sizes modulo rÂ +Â 1). In ordinary Nim one forms the XOR-sum (or sum modulo 2) of each binary digit, and the winning strategy is to make each XOR sum zero. In the generalization to index-k Nim, one forms the sum of each binary digit modulo kÂ +Â 1.
Again the winning strategy is to move such that this sum is zero for every digit. Indeed, the value thus computed is zero for the final position, and given a configuration of heaps for which this value is zero, any change of at most k heaps will make the value non-zero. Conversely, given a configuration with non-zero value, one can always take from at most k heaps, carefully chosen, so that the value will become zero.

Building Nim[edit]
Building Nim is a variant of Nim wherein the two players first construct the game of Nim. Given n stones and s empty piles, the players, alternating turns, place exactly one stone into a pile of their choice.[14] Once all the stones are placed, a game of Nim begins, starting with the next player that would move. This game is denoted BN(n,s).

Higher dimensional Nim[edit]
n-d Nim is played on a 
  
    
      
        
          k
          
            1
          
        
        Ã
        â¯
        Ã
        
          k
          
            n
          
        
      
    
    {\displaystyle k_{1}\times \dots \times k_{n}}
  
 board, whereon any number of continuous pieces can be removed from any hyper-row. The starting position is usually the full board, but other options are allowed.[15]

Graph Nim[edit]
The starting board is a disconnected graph, and players take turns to remove adjacent vertices.

Candy Nim[edit]
Candy Nim is a version of normal play Nim in which players try to achieve two goals at the same time: taking the last object (in this case, candy) and taking the maximum number of candies by the end of the game.[16]

Wordnim[edit]
Wordnim is the verbal version of Nim where players form words from initial sets or series of letters until none are left or no legitimate word can be formed.[17]

See also[edit]
Dr. NIM
Fibonacci nim
Fuzzy game
Nimber
Octal games
Star (game theory)
Subtract a square
Zero game
Android Nim
Raymond Redheffer
Notakto
Chomp
Turing Tumble
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Jorgensen, Anker Helms (2009), "Context and driving forces in the development of the early computer game Nimbi", IEEE Annals of the History of Computing, 31 (3): 44â53, doi:10.1109/MAHC.2009.41, MRÂ 2767447, S2CIDÂ 2833693, The two-person mathematical game Nim, which many believe originated in China, is probably one of the oldest games in the world.

^ Yaglom, I. M. (2001), "Two games with matchsticks",  in Tabachnikov, Serge (ed.), Kvant Selecta: Combinatorics, I, Volume 1, Mathematical world, vol.Â 17, American Mathematical Society, pp.Â 1â8, ISBNÂ 9780821821718

^ Bouton, C. L. (1901â1902), "Nim, a game with a complete mathematical theory", Annals of Mathematics, 3 (14): 35â39, doi:10.2307/1967631, JSTORÂ 1967631

^ Khovanova, Tanya; Xiong, Joshua (2014). "Nim Fractals". arXiv:1405.5942 [math.CO].

^ Flesch, Rudolf (1951). The Art of Clear Thinking. New York: Harper and Brothers Publishers. p.Â 3.

^ "ExpoMuseum / New York World's Fair, 1939-'40". www.expomuseum.com. Retrieved 20 April 2018.

^ "1940: Nimatron". platinumpiotr.blogspot.com. Retrieved 20 April 2018.

^ Grant, Eugene F.; Lardner, Rex (August 2, 1952). "The Talk of the Town â It". The New Yorker.

^ Cohen, Harvey A. "How to Construct NIM Playing Machine" (PDF).

^ Morrissette, Bruce (1968), "Games and game structures in Robbe-Grillet", Yale French Studies (41): 159â167, doi:10.2307/2929672, JSTORÂ 2929672. Morrissette writes that Alain Robbe-Grillet, one of the screenwriters for the film, "thought he had invented" the game.

^ 
--- (2001). Winning Ways for your Mathematical Plays. Vol.Â 4 vols. (2ndÂ ed.). A K Peters Ltd.{{cite book}}:  CS1 maint: numeric names: authors list (link); Berlekamp, Elwyn R.; Conway, John Horton; Guy, Richard K. (2003-06-15). vol. 1. ISBNÂ 978-1-56881-130-7.; Berlekamp, Elwyn R.; Conway, John Horton; Guy, Richard K. (2003-06-15). vol. 2. ISBNÂ 978-1-56881-142-0.; Berlekamp, Elwyn R.; Conway, John Horton; Guy, Richard K. (2003-06-15). vol. 3. ISBNÂ 978-1-56881-143-7.; Berlekamp, Elwyn R.; Conway, John Horton; Guy, Richard K. (2004-06-15). vol. 4. ISBNÂ 978-1-56881-144-4.

^ 
M H Albert, R. J. Nowakowski (2004). "Nim Restrictions" (PDF). INTEGERS: The Electronic Journal of Combinatorial Number Theory: 2.

^ Moore, E. H. A Generalization of the Game Called Nim. Annals of Mathematics 11 (3), 1910, pp. 93â94

^ Larsson, Urban; Heubach, Silvia; Dufour, Matthieu; DuchÃªne, Eric (2015). "Building Nim". arXiv:1502.04068 [cs.DM].

^ "1021 - 2D-Nim". Poj.org. Retrieved 2019-01-09.

^ Rubinstein-Salzedo, Simon (18 May 2018). "P Play in Candy Nim" (PDF). arXiv:1805.07019. Retrieved 5 July 2020.

^ Waterford, Charles. "Wordnim". Purple Rose Puzzles.


Further reading[edit]
W. W. Rouse Ball: Mathematical Recreations and Essays, The Macmillan Company, 1947.
John D. Beasley: The Mathematics of Games, Oxford University Press, 1989.
Elwyn R. Berlekamp, John H. Conway, and Richard K. Guy: Winning Ways for your Mathematical Plays, Academic Press, Inc., 1982.
Manfred Eigen and Ruthild Winkler: Laws of the Game, Princeton University Press, 1981.
Walter R. Fuchs: Computers: Information Theory and Cybernetics, Rupert Hart-Davis Educational Publications, 1971.
G. H. Hardy and E. M. Wright: An Introduction to the Theory of Numbers, Oxford University Press, 1979.
Edward Kasner and James Newman: Mathematics and the Imagination, Simon and Schuster, 1940.
M. Kaitchik: Mathematical Recreations, W. W. Norton, 1942.
Donald D. Spencer: Game Playing with Computers, Hayden Book Company, Inc., 1968.
External links[edit]



Wikimedia Commons has media related to Nim (game).

50-pound computer plays Nim- The New Yorker magazine "Talk of the Town" August, 1952(subscription required)
The hot game of Nim â Nim theory and connections with other games at cut-the-knot
Nim and 2-dimensional SuperNim at cut-the-knot
Subtraction Game: a Subtraction Game illustration on Appstore.
Classic Nim - Implementation of Nim for iOS.
Matchstick Nim - Implementation of Nim for Android devices.
NIM2 - Implementation of Nim for Android devices.




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Nim&oldid=1069555124"
		Categories: Mathematical gamesCombinatorial game theoryRecreational mathematicsSolved gamesHidden categories: CS1 maint: numeric names: authors listCS1: long volume valueArticles with short descriptionShort description matches WikidataWikipedia introduction cleanup from October 2020All pages needing cleanupArticles covered by WikiProject Wikify from October 2020All articles covered by WikiProject WikifyCommons category link from WikidataPages containing links to subscription-only contentArticles containing proofsArticles with example Python (programming language) code
	
