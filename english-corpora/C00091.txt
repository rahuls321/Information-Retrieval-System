
Title:
AArch64
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		64-bit extension of the ARM architecture
This article may be too technical for most readers to understand. Please help improve it to make it understandable to non-experts, without removing the technical details.  (June 2020) (Learn how and when to remove this template message)
AArch64 or ARM64 is the 64-bit extension of the ARM architecture. 

  ARMv8-A platform with Cortex-A57/A53 MPCore big.LITTLE CPU chip It was first introduced with the ARMv8-A architecture.
Contents

1 ARMv8-A

1.1 Naming conventions
1.2 AArch64 features

1.2.1 Instruction formats


1.3 ARMv8.1-A
1.4 ARMv8.2-A

1.4.1 Scalable Vector Extension (SVE)


1.5 ARMv8.3-A
1.6 ARMv8.4-A
1.7 ARMv8.5-A
1.8 ARMv8.6-A
1.9 ARMv9-A


2 ARMv8-R (real-time architecture)
3 References



ARMv8-A[edit]
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}See also: Comparison of ARMv8-A cores
Announced in October 2011,[1] ARMv8-A represents a fundamental change to the ARM architecture. It adds an optional 64-bit architecture, named "AArch64", and the associated new "A64" instruction set. AArch64 provides user-space compatibility with the existing 32-bit architecture ("AArch32" / ARMv7-A), and instruction set ("A32"). The 16-32bit Thumb instruction set is referred to as "T32" and has no 64-bit counterpart. ARMv8-A allows 32-bit applications to be executed in a 64-bit OS, and a 32-bit OS to be under the control of a 64-bit hypervisor.[2] ARM announced their Cortex-A53 and Cortex-A57 cores on 30 October 2012.[3] Apple was the first to release an ARMv8-A compatible core (Apple A7) in a consumer product (iPhone 5S). AppliedMicro, using an FPGA, was the first to demo ARMv8-A.[4] The first ARMv8-A SoC from Samsung is the Exynos 5433 used in the Galaxy Note 4, which features two clusters of four Cortex-A57 and Cortex-A53 cores in a big.LITTLE configuration; but it will run only in AArch32 mode.[5]
To both AArch32 and AArch64, ARMv8-A makes VFPv3/v4 and advanced SIMD (Neon) standard. It also adds cryptography instructions supporting AES, SHA-1/SHA-256 and finite field arithmetic.[6]

Naming conventions[edit]
64 + 32 bit
Architecture: AArch64
Specification: ARMv8-A
Instruction sets: A64 + A32
Suffixes: v8-A
32 + 16 (Thumb) bit
Architecture: AArch32
Specification: ARMv8-R / ARMv7-A
Instruction sets: A32 + T32
Suffixes: -A32 / -R / v7-A
Example: ARMv8-R, Cortex-A32[7]
AArch64 features[edit]
New instruction set, A64
Has 31 general-purpose 64-bit registers.
Has dedicated zero or stack pointer (SP) register (depending on instruction).
The program counter (PC) is no longer directly accessible as a register.
Instructions are still 32Â bits long and mostly the same as A32 (with LDM/STM instructions and most conditional execution dropped).
Has paired loads/stores (in place of LDM/STM).
No predication for most instructions (except branches).
Most instructions can take 32-bit or 64-bit arguments.
Addresses assumed to be 64-bit.
Advanced SIMD (Neon) enhanced
Has 32 Ã 128-bit registers (up from 16), also accessible via VFPv4.
Supports double-precision floating-point format.
Fully IEEE 754 compliant.
AES encrypt/decrypt and SHA-1/SHA-2 hashing instructions also use these registers.
A new exception system
Fewer banked registers and modes.
Memory translation from 48-bit virtual addresses based on the existing Large Physical Address Extension (LPAE), which was designed to be easily extended to 64-bit.
Extension: Data gathering hint (ARMv8.0-DGH)
AArch64 was introduced in ARMv8-A and is included in subsequent versions of ARMV8-A.  AArch64 is not included in ARMv8-R or ARMv8-M, because they are both 32-bit architectures.

Instruction formats[edit]
The main opcode for selecting which group an A64 instruction belongs to is at bits 25-28.


A64 instruction formats


Type

Bit


31
30
29
28
27
26
25
24
23
22
21
20
19
18
17
16
15
14
13
12
11
10
9
8
7
6
5
4
3
2
1
0


Reserved
op0
0000
op1
Immediate constant 16 bits


Unallocated

0001



SVE Instructions

0010



Unallocated

0011



Data Processing â Immediate PC-rel.
op
immlo
10000
immhi
Rd


Data Processing â Immediate Others
sf

100
01-11

Rd


Branches + System Instructions
op0
101
op1

op2


Load and Store Instructions
op0
1
op1
0
op2

op3

op4



Data Processing â Register
sf
op0

op1
101
op2

op3



Data Processing â Floating Point and SIMD
op0
111
op1
op2
op3


ARMv8.1-A[edit]
In December 2014, ARMv8.1-A,[8] an update with "incremental benefits over v8.0", was announced. The enhancements fell into two categories: changes to the instruction set, and changes to the exception model and memory translation.
Instruction set enhancements included the following:

A set of AArch64 atomic read-write instructions.
Additions to the Advanced SIMD instruction set for both AArch32 and AArch64 to enable opportunities for some library optimizations:
Signed Saturating Rounding Doubling Multiply Accumulate, Returning High Half.
Signed Saturating Rounding Doubling Multiply Subtract, Returning High Half.
The instructions are added in vector and scalar forms.
A set of AArch64 load and store instructions that can provide memory access order that is limited to configurable address regions.
The optional CRC instructions in v8.0 become a requirement in ARMv8.1.
Enhancements for the exception model and memory translation system included the following:

A new Privileged Access Never (PAN) state bit provides control that prevents privileged access to user data unless explicitly enabled.
An increased VMID range for virtualization; supports a larger number of virtual machines.
Optional support for hardware update of the page table access flag, and the standardization of an optional, hardware updated, dirty bit mechanism.
The Virtualization Host Extensions (VHE). These enhancements improve the performance of Type 2 hypervisors by reducing the software overhead associated when transitioning between the Host and Guest operating systems. The extensions allow the Host OS to execute at EL2, as opposed to EL1, without substantial modification.
A mechanism to free up some translation table bits for operating system use, where the hardware support is not needed by the OS.
Top byte ignore for memory tagging.[9]
ARMv8.2-A[edit]
In January 2016, ARMv8.2-A was announced.[10] Its enhancements fell into four categories:

Optional half-precision floating-point data processing (half-precision was already supported, but not for processing, just as a storage format.)
Memory model enhancements
Introduction of Reliability, Availability and Serviceability Extension (RAS Extension)
Introduction of statistical profiling


Scalable Vector Extension (SVE) [edit]
The Scalable Vector Extension (SVE) is "an optional extension to the ARMv8.2-A architecture and newer" developed specifically for vectorization of high-performance computing scientific workloads.[11][12] The specification allows for variable vector lengths to be implemented from 128 to 2048 bits. The extension is complementary to, and does not replace, the NEON extensions.
A 512-bit SVE variant has already been implemented on the Fugaku supercomputer using the Fujitsu A64FX ARM processor. It aims to be the world's highest-performing supercomputer with "the goal of beginning full operations around 2021."[13]
SVE is supported by the GCC compiler, with GCC 8 supporting automatic vectorization[12] and GCC 10 supporting C intrinsics. As of July 2020, LLVM and clang support C and IR intrinsics. ARM's own fork of LLVM supports auto-vectorization.[14]

ARMv8.3-A[edit]
In October 2016, ARMv8.3-A was announced. Its enhancements fell into six categories:[15]

Pointer authentication[16] (AArch64 only); mandatory extension (based on a new block cipher, QARMA[17]) to the architecture (compilers need to exploit the security feature, but as the instructions are in NOP space, they are backwards compatible albeit providing no extra security on older chips).
Nested virtualization (AArch64 only)
Advanced SIMD complex number support (AArch64 and AArch32); e.g. rotations by multiples of 90 degrees.
New FJCVTZS (Floating-point JavaScript Convert to Signed fixed-point, rounding toward Zero) instruction.[18]
A change to the memory consistency model (AArch64 only); to support the (non-default) weaker RCpc (Release Consistent processor consistent) model of C++11/C11 (the default C++11/C11 consistency model was already supported in previous ARMv8).
ID mechanism support for larger system-visible caches (AArch64 and AArch32)
ARMv8.3-A architecture is now supported by (at least) the GCC 7 compiler.[19]

ARMv8.4-A[edit]
In November 2017, ARMv8.4-A was announced. Its enhancements fell into these categories:[20][21][22]

"SHA3 / SHA512 / SM3 / SM4 crypto extensions"
Improved virtualization support
Memory Partitioning and Monitoring (MPAM) capabilities
A new Secure EL2 state and Activity Monitors
Signed and unsigned integer dot product (SDOT and UDOT) instructions.
ARMv8.5-A[edit]
In September 2018, ARMv8.5-A was announced. Its enhancements fell into these categories:[23][24]

Memory Tagging Extension (MTE)[25]
Branch Target Indicators (BTI) to reduce "the ability of an attacker to execute arbitrary code",
Random Number Generator instructions â "providing Deterministic and True Random Numbers conforming to various National and International Standards"
On 2 August 2019, Google announced Android would adopt Memory Tagging Extension (MTE).[26]

ARMv8.6-A[edit]
In September 2019, ARMv8.6-A was announced. It adds:[27]

General Matrix Multiply (GEMM)
Bfloat16 format support
SIMD matrix manipulation instructions, BFDOT, BFMMLA, BFMLAL and BFCVT
enhancements for virtualization, system management and security
and the following extensions (that LLVM 11 already added support for[28]):
Enhanced Counter Virtualization (ARMv8.6-ECV)
Fine Grained Traps (ARMv8.6-FGT)
Activity Monitors virtualization (ARMv8.6-AMU)
For example, fine-grained traps, Wait-for-Event (WFE) instructions, EnhancedPAC2 and FPAC. The Bfloat16 extensions for SVE and Neon are mainly for deep learning use.[29]

ARMv9-A[edit]
In March 2021, ARMv9-A was announced. ARMv9-Aâs baseline is all the features from ARMv8.5.[30][31][32] ARMv9-A also adds:

Scalable Vector Extension 2 (SVE2). SVE2 builds on SVE's scalable vectorization for increased fine-grain Data Level Parallelism (DLP), to allow more work done per instruction. SVE2 aims to bring these benefits to a wider range of software including DSP and multimedia SIMD code that currently use Neon.[33] The LLVM/Clang 9.0 and GCC 10.0 development codes were updated to support SVE2.[33][34]
Transactional Memory Extension (TME). Following the x86 extensions, TME brings support for Hardware Transactional Memory (HTM) and Transactional Lock Elision (TLE). TME aims to bring scalable concurrency to increase coarse-grained Thread Level Parallelism (TLP), to allow more work done per thread.[33] The LLVM/Clang 9.0 and GCC 10.0 development codes were updated to support TME.[34]
Confidential Compute Architecture (CCA)[35][36]
Scalable Matrix Extension (SME).[37] SMX adds new features to process matrices efficiently, such as:
Matrix tile storage
On-the-fly matrix transposition
Load/store/insert/extract tile vectors
Matrix outer product of SVE vectors
"Streaming mode" SVE
ARMv8-R (real-time architecture)[edit]
This section needs expansion with: examples and additional citations. You can help by adding to it. Relevant discussion may be found on Talk:AArch64.  (May 2021)
Optional AArch64 support was added to the ARMv8-R profile, with the first ARM core implementing it being the Cortex-R82.[38]  It adds the A64 instruction set, with some changes to the memory barrier instructions.[39]

References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}"ARM Discloses Technical Details Of The Next Version Of The ARM Architecture" (Press release). Arm Holdings. 27 October 2011. Archived from the original on 1 January 2019. Retrieved 20 September 2013.

^ Grisenthwaite, Richard (2011). "ARMv8-A Technology Preview" (PDF). Archived from the original (PDF) on 11 November 2011. Retrieved 31 October 2011.

^ "ARM Launches Cortex-A50 Series, the World's Most Energy-Efficient 64-bit Processors" (Press release). Arm Holdings. Retrieved 31 October 2012.

^ "AppliedMicro Showcases World's First 64-bit ARM v8 Core" (Press release). AppliedMicro. 28 October 2011. Retrieved 11 February 2014.

^ "Samsung's Exynos 5433 is an A57/A53 ARM SoC". AnandTech. Retrieved 17 September 2014.

^ "ARM Cortex-A53 MPCore Processor Technical Reference Manual: Cryptography Extension". ARM. Retrieved 11 September 2016.

^ "Cortex-A32 Processor â ARM". Retrieved 18 December 2016.

^ Brash, David (2 December 2014). "The ARMv8-A architecture and its ongoing development". Retrieved 23 January 2015.

^ "TBI".

^ Brash, David (5 January 2016). "ARMv8-A architecture evolution". Retrieved 7 June 2016.

^ "The scalable vector extension sve for the Armv8 a architecture". Arm Community. 22 August 2016. Retrieved 8 July 2018.

^ Jump up to: a b "GCC 8 Release Series â Changes, New Features, and Fixes â GNU Project â Free Software Foundation (FSF)". gcc.gnu.org. Retrieved 9 July 2018.

^ "Fujitsu Completes Post-K Supercomputer CPU Prototype, Begins Functionality Trials â Fujitsu Global". www.fujitsu.com (Press release). Retrieved 8 July 2018.

^ "â D71712 Downstream SVE/SVE2 implementation (LLVM)". reviews.llvm.org.

^ David Brash (26 October 2016). "ARMv8-A architecture â 2016 additions".

^ "[Ping~,AArch64] Add commandline support for -march=armv8.3-a". pointer authentication extension is defined to be mandatory extension on ARMv8.3-A and is not optional

^ "Qualcomm releases whitepaper detailing pointer authentication on ARMv8.3". 10 January 2017.

^ "A64 Floating-point Instructions: FJCVTZS". arm.com. Retrieved 11 July 2019.

^ "GCC 7 Release Series â Changes, New Features, and Fixes". The ARMv8.3-A architecture is now supported. It can be used by specifying the -march=armv8.3-a option. [..] The option -msign-return-address= is supported to enable return address protection using ARMv8.3-A Pointer Authentication Extensions.

^ "Introducing 2017's extensions to the Arm Architecture". community.arm.com. Retrieved 15 June 2019.

^ "Exploring dot product machine learning". community.arm.com. Retrieved 15 June 2019.

^ "ARM Preps ARMv8.4-A Support For GCC Compiler â Phoronix". www.phoronix.com. Retrieved 14 January 2018.

^ "Arm Architecture Armv8.5-A Announcement â Processors blog â Processors â Arm Community". community.arm.com. Retrieved 26 April 2019.

^ "Arm Architecture Reference Manual Armv8, for Armv8-A architecture profile". ARM Developer. Retrieved 6 August 2019.

^ "Arm MTE architecture: Enhancing memory safety". community.arm.com. Retrieved 2021-07-27.

^ "Adopting the Arm Memory Tagging Extension in Android". Google Online Security Blog. Retrieved 6 August 2019.

^ "Arm A profile architecture update 2019". community.arm.com. Retrieved 26 September 2019.

^ "LLVM 11.0.0 Release Notes". releases.llvm.org. Retrieved 2021-03-11.

^ "BFloat16 extensions for Armv8-A". community.arm.com. Retrieved 30 August 2019.

^ "Arm's solution to the future needs of AI, security and specialized computing is v9". Arm | The Architecture for the Digital World. Retrieved 2021-07-27.

^ Schor, David (2021-03-30). "Arm Launches ARMv9". WikiChip Fuse. Retrieved 2021-07-27.

^ Frumusanu, Andrei. "Arm Announces Armv9 Architecture: SVE2, Security, and the Next Decade". www.anandtech.com. Retrieved 2021-07-27.

^ Jump up to: a b c "Arm releases SVE2 and TME for A-profile architecture â Processors blog â Processors â Arm Community". community.arm.com. Retrieved 25 May 2019.

^ Jump up to: a b "Arm SVE2 Support Aligning For GCC 10, LLVM Clang 9.0 â Phoronix". www.phoronix.com. Retrieved 26 May 2019.

^ "Unlocking the power of data with Arm CCA". community.arm.com. Retrieved 2021-07-27.

^ "Arm Introduces Its Confidential Compute Architecture". WikiChip Fuse. 2021-06-23. Retrieved 2021-07-27.

^ "Scalable Matrix Extension for the Armv9-A Architecture". community.arm.com. Retrieved 2021-07-27.

^ Frumusanu, Andrei (September 3, 2020). "ARM Announced Cortex-R82: First 64-bit Real Time Processor". AnandTech.

^ "Arm Architecture Reference Manual Supplement - Armv8, for Armv8-R AArch64 architecture profile". Arm Ltd.






<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=AArch64&oldid=1066165444"
		Categories: Computer-related introductions in 2011ARM architectureInstruction set architectures64-bit computersHidden categories: Articles with short descriptionShort description is different from WikidataWikipedia articles that are too technical from June 2020All articles that are too technicalArticles to be expanded from May 2021All articles to be expanded
	
