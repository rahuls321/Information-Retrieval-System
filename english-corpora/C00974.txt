
Title:
Vala (programming language)
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		programming language


.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}ValaParadigmMulti-paradigm: imperative, structured, object-orientedDeveloperJÃ¼rg Billeter, Raffaele SandriniFirstÂ appeared2006; 16Â years agoÂ (2006)Stable release0.54.6[1] / 8Â January 2022; 24 days agoÂ (2022-01-08)
   
Typing disciplineStatic, strong, inferred, structuralOSCross-platform all supported by GLib, but distributed as source code only.LicenseLGPLv2.1+Filename extensions.vala, .vapiWebsitewiki.gnome.org/Projects/ValaInfluenced byC, C++, C#, D, Java, Boo
Vala is an object-oriented programming language with a self-hosting compiler that generates C code and uses the GObject system.
Vala is syntactically similar to C# and includes notable features such as anonymous functions, signals, properties, generics, assisted memory management, exception handling, type inference, and foreach statements.[2] Its developers, JÃ¼rg Billeter and Raffaele Sandrini, wanted to bring these features to the plain C runtime with little overhead and no special runtime support by targeting the GObject object system. Rather than compiling directly to machine code or assembly language, it compiles to a lower-level intermediate language. It source-to-source compiles to C, which is then compiled with a C compiler for a given platform, such as GCC or Clang.[3]
Using functionality from native code libraries requires writing vapi files, defining the library interfaces. Writing these interface definitions is well-documented for C libraries, especially when based on GObject. Bindings are already available for a large number of libraries, including for C libraries that are not based on GObject, such as the multimedia library SDL, OpenGL, etc.

Contents

1 Description
2 History
3 Language design

3.1 Features
3.2 Memory management
3.3 Bindings


4 Tools

4.1 Editors
4.2 Code intelligence
4.3 Build systems
4.4 Debugging


5 Examples

5.1 Hello world
5.2 Object-oriented programming
5.3 Signals and callbacks
5.4 Threading
5.5 Graphical user interface


6 See also
7 References
8 External links



Description[edit]
Vala is a programming language that combines the high-level build-time performance of scripting languages with the run-time performance of low-level programming languages. It aims to bring modern programming language features to GNOME developers without imposing any additional runtime requirements and without using a different ABI, compared to applications and libraries written in C. The syntax of Vala is similar to C#, modified to better fit the GObject type system.[4]

History[edit]
Vala was conceived by JÃ¼rg Billeter and was implemented by him and Raffaele Sandrini, who wished for a higher level alternative for developing GNOME applications instead of C. They did like the syntax and semantics of C# but did not want to use Mono, so they finished a compiler in May 2006. Initially, it was bootstrapped using C, and one year later (with release of version 0.1.0 in July 2007), the Vala compiler became self-hosted. As of 2021, the current stable release branch with long-term support is 0.48, and the language is under active development with the goal of releasing a stable version 1.0.[5]




Version

Release date[6]


Old version, no longer maintained:  0.0.1

2006-07-15


Old version, no longer maintained:  0.1.0

2007-07-09


Old version, no longer maintained:  0.10.0

2010-09-18


Old version, no longer maintained:  0.20.0

2013-05-27


Old version, no longer maintained:  0.30.0

2015-09-18


Old version, no longer maintained:  0.40.0

2018-05-12


Old version, no longer maintained:  0.42.0

2018-09-01


Old version, no longer maintained:  0.44.0

2019-05-09


Old version, no longer maintained:  0.46.0

2019-09-05


Current stable version:  0.48.18

2021-06-09


Current stable version:  0.50.9

2021-06-04


Current stable version:  0.52.4

2021-06-04


Legend:Old versionOlder version, still maintainedLatest versionLatest preview versionFuture release


For old versions, only first point releases are listed

Language design[edit]
Features[edit]
Vala uses GLib and its submodules (GObject, GModule, GThread, GIO) as the core library, which is available for most operating systems and offers things like platform independent threading, input/output, file management, network sockets, plugins, regular expressions, etc. The syntax of Vala currently supports modern language features as follows:

Interfaces
Properties
Signals
Foreach
Lambda expressions
Type inference for local variables
Generics
Non-null types
Assisted memory management
Exception handling
Graphical user interfaces can be developed with the GTK GUI toolkit and the Glade GUI builder.

Memory management[edit]
For memory management, the GType or GObject system provides reference counting. In C, a programmer must manually manage adding and removing references, but in Vala, managing such reference counts is automated if a programmer uses the language's built-in reference types rather than plain pointers. The only detail you need to worry about is to avoid generating reference cycles, because in that case this memory management system will not work correctly.[7]
Vala also allows manual memory management with pointers as an option.

Bindings[edit]
Vala is intended to provide runtime access to existing C libraries, especially GObject-based libraries, without the need for runtime bindings. To use a library with Vala, all that needed is an API file (.vapi) containing the class and method declarations in Vala syntax. However, C++ libraries are not supported. At present, vapi files for a large part of the GNU project and GNOME platform are included with each release of Vala, including GTK. There is also a library called Gee, written in Vala, that provides GObject-based interfaces and classes for commonly used data structures.[8] 
It should also be easily possible to write a bindings generator for access to Vala libraries from applications written in other languages, e.g., C#, as the Vala parser is written as a library, so that all compile-time information is available when generating a binding.

Tools[edit]
Editors[edit]
Tooling for Vala development has seen significant improvement over the recent years. The following is a list of some popular IDEs and text editors with plug-ins that add support for programming in Vala:

GNOME Builder
Visual Studio Code, with Vala plugin[9]
Vim, with arrufat/vala.vim plugin[10]
Emacs, with vala-mode[11]
Atom
Geany
Code intelligence[edit]
Currently, there are two actively developing language servers which offer code intelligence for Vala as follows:

benwaffle/vala-language-server, designed for any editor that supports LSP, including VSCode, vim, and GNOME Builder[12]
esodan/gvls, currently the default language server for Vala in GNOME Builder and provides support to any editor with support for LSP[13]
Build systems[edit]
Currently, there are a number of build systems supporting Vala, including Automake, CMake, Meson, and others.[14]

Debugging[edit]
Debugging for Vala programs can be done with either GDB or LLDB. For debugging in IDEs,

GNOME Builder has built-in debugging support for Vala with GDB.
Visual Studio Code has extensions for GDB and LLDB, such as cpptools and CodeLLDB.[9]
Examples[edit]
Hello world[edit]
A simple "Hello, World!" program in Vala:

void main () {
	print ("Hello World\n");
}

As can be noted, unlike C or C++, there are no header files in Vala. The linking to libraries is done by specifying --pkg parameters during compiling. Moreover, the GLib library is always linked and its namespace can be omitted (print is in fact GLib.print).

Object-oriented programming[edit]
Below is a more complex version which defines a subclass HelloWorld inheriting from the base class GLib.Object, aka the GObject class. It shows some of Vala's object-oriented features:

class HelloWorld: Object {
	private uint year = 0;
	
	public HelloWorld () {
	}
	
	public HelloWorld.with_year (int year) {
		if (year>0)
			this.year = year;
	}

	public void greeting () {
		if (year == 0)
			print ("Hello World\n");
		else
			/* Strings prefixed with '@' are string templates. */
			print (@"Hello World, $(this.year)\n"); 
	}
}

void main (string[] args) {
	var helloworld = new HelloWorld.with_year (2021);
	helloworld.greeting ();
}

As in the case of GObject library, Vala does not support multiple inheritance, but a class in Vala can implement any number of interfaces, which may contain default implementations for their methods. Here is a piece of sample code to demonstrate a Vala interface with default implementation (sometimes referred to as a mixin)

using GLib;

interface Printable {
	public abstract string print ();

	public virtual string pretty_print () {
		return "Please " + print ();
	}
}

class NormalPrint: Object, Printable {
	string print () {
		return "don't forget about me";
	}
}

class OverridePrint: Object, Printable {
	string print () {
		return "Mind the gap";
	}

	public override string pretty_print () {
		return "Override";
	}
}

void main (string[] args) {
	var normal = new NormalPrint ();
	var overridden = new OverridePrint ();

	print (normal.pretty_print ());
	print (overridden.pretty_print ());
}

Signals and callbacks[edit]
Below is a basic example to show how to define a signal in a class that is not compact, which has a signal system built in by Vala through GLib. Then callback functions are registered to the signal of an instance of the class. The instance can emit the signal and each callback function (also referred to as handler) connected to the signal for the instance will get invoked in the order they were connected in:

class Foo {
    public signal void some_event ();   // definition of the signal

    public void method () {
        some_event ();                  // emitting the signal (callbacks get invoked)
    }
}

void callback_a () {
    stdout.printf ("Callback A\n");
}

void callback_b () {
    stdout.printf ("Callback B\n");
}

void main () {
    var foo = new Foo ();
    foo.some_event.connect (callback_a);      // connecting the callback functions
    foo.some_event.connect (callback_b);
    foo.method ();
}

Threading[edit]
A new thread in Vala is a portion of code such as a function that is requested to be executed concurrently at runtime. The creation and synchronization of new threads are done by using the Thread class in GLib, which takes the function as a parameter when creating new threads, as shown in the following (very simplified) example:

int question(){
    // Some print operations 
    for (var i = 0; i < 3; i++){
        print (".");
        Thread.usleep (800000);
        stdout.flush ();
    }

    return 42;
}

void main () {
    if (!Thread.supported ()) {
        stderr.printf ("Cannot run without thread support.\n");
        return;
    }
    print ("The Ultimate Question of Life, the Universe, and Everything");
    // Generic parameter is the type of return value
    var thread = new Thread<int> ("question", question);

    print(@" $(thread.join ())\n");
}

Graphical user interface[edit]
Below is an example using GTK to create a GUI "Hello, World!" program (see also GTK hello world) in Vala:

using Gtk;

int main (string[] args) {
	Gtk.init (ref args);

	var window = new Window ();
	window.title = "Hello, World!";
	window.border_width = 10;
	window.window_position = WindowPosition.CENTER;
	window.set_default_size (350, 70);
	window.destroy.connect (Gtk.main_quit);

	var label = new Label ("Hello, World!");

	window.add (label);
	window.show_all ();

	Gtk.main ();
	return 0;
}

The statement Gtk.main () creates and starts a main loop listening for events, which are passed along via signals to the callback functions. As this example uses the GTK package, it needs an extra --pkg parameter (which invokes pkg-config in the C backend) to compile:

valac --pkg gtk+-3.0 hellogtk.vala

See also[edit]
.mw-parser-output .portalbox{float:right;border:solid #aaa 1px;padding:0}.mw-parser-output .portalbox.tleft{margin:0.5em 1em 0.5em 0}.mw-parser-output .portalbox.tright{margin:0.5em 0 0.5em 1em}.mw-parser-output .portalbox>ul{display:table;box-sizing:border-box;padding:0.1em;max-width:175px;background:#f9f9f9;font-size:85%;line-height:110%;font-style:italic;font-weight:bold}.mw-parser-output .portalbox>ul>li{display:table-row}.mw-parser-output .portalbox>ul>li>span:first-child{display:table-cell;padding:0.2em;vertical-align:middle;text-align:center}.mw-parser-output .portalbox>ul>li>span:last-child{display:table-cell;padding:0.2em 0.2em 0.2em 0.3em;vertical-align:middle}

Free and open-source software portal
Genie, a programming language for the Vala compiler with a syntax closer to Python.
Shotwell, an image organiser written in Vala.
Geary, an email client written in Vala.
elementary OS, a Linux distribution with a desktop environment programmed mostly in Vala.
Budgie, a Linux desktop environment programmed mostly in Vala.
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}"Vala - Compiler Using the GObject Type System". GNOME Project. News section. Retrieved 25 November 2021.

^ "Vala: high-level programming with less fat". Ars Technica. 2 September 2007. Retrieved 13 December 2011.

^ "A look at two new languages: Vala and Clojure".

^ "ValaÂ· GitLab". GNOME. Retrieved 16 March 2021.

^ Michael Lauer (2019). Introducing Vala Programming. doi:10.1007/978-1-4842-5380-9. ISBNÂ 978-1-4842-5379-3. S2CIDÂ 207911698. Retrieved 16 March 2021.

^ "Vala Releases". Vala Project. Retrieved 18 March 2021.

^ "Vala's Memory Management Explained".

^ "Libgee on Gitlab".

^ Jump up to: a b "Coding in Vala with Visual Studio Code". Retrieved 17 March 2021.

^ "Coding in Vala with the Vim Text Editor". Retrieved 17 March 2021.

^ "Enable Vala syntax highlighting and code browser support in GNU Emacs". Retrieved 17 March 2021.

^ "benwaffle/vala-language-server on Github". GitHub. Retrieved 17 March 2021.

^ "esodan/gvls on GitLab". Retrieved 17 March 2021.

^ "Vala Tools". Retrieved 29 March 2021.


External links[edit]



Wikibooks has a book on the topic of: Vala Programming




Wikimedia Commons has media related to Vala (programming language).

Official website
API Documentation
Vala repository on GNOME Â· GitLab
LibGee, a utility library for Vala.
Vala sample code for beginners
List of Vala programs
Autovala, a program that automatizes and simplifies creating CMake and Meson files for Vala/C projects
The Vala community on GitHub
Akira - Linux native designer tool
Kangaroo - Cross-platform database client tool for popular databases
Comparison with other languages
Vala and Java
Vala and C#
Benchmarks of different languages, including Vala
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteGNOMECore Applications
Boxes
Calculator
Character Map
Cheese
Dictionary
Disks
Evince
Eye of GNOME
Files
gedit
Software
Terminal
Videos
Web
ExtrasDevelopment
Anjuta
Builder
Glade Interface Designer
Meld
GNOME Devhelp
Nemiver
Geany
Gtranslator
Office
AbiWord
Dia
Evolution
GNOME LaTeX
Gnumeric
OCRFeeder
Graphics
F-Spot
GIMP
gThumb
Inkscape
Shotwell
Simple Scan
Internet
Balsa
Empathy
Ekiga
Geary
GNOME Connections
GNOME Fractal
Gobby
Jami
Transmission-gtk
Media
Banshee
EasyTag
Pitivi
Rhythmbox
Sound Juicer
SoundConverter
sushi
Games
GNOME Games
Chess
Mines
gbrainy
PyChess
Utilities
Archive Manager
Brasero
dconf-editor
gnote
GParted
Tomboy
ComponentsUser interfaceGNOME 40
Mutter on GSK
â¦
GNOME 3
Client-Side Decoration
Cantarell
GDM
Mutter
GNOME Shell
Tango Desktop Project
Orca
GNOME 2
Metacity
GNOME Panel
Clearlooks
Other
Adwaita
Cinnamon
MATE
Diodon
GNOME Do
Avant Window Navigator
GNOME Base
GTK
GDK
GSK
ATK
Clutter
Pango
GLib
GObject
GIO
IBus
Other
dconf
Genie
Keyring
GNOME-DB
GVfs
GnomeVFS
Librsvg
Tracker
Vala
libxslt
libxml2
freedesktop.org
AppStream
D-Bus
GStreamer
NetworkManager
Poppler
Wayland
X.Org Server
PulseAudio
PackageKit
HarfBuzz
Cairo
Community
GNOME Foundation
GUADEC
The GNOME Project
Outreachy
People
Miguel de Icaza
Luis Villa
Havoc Pennington
Karen Sandler

 Category
 Commons
 WikiProject

vteC programming language
ANSI C
C99
C11
C17
C2x
Embedded C
MISRA C
Features
Functions
Header files
Operators
String
Syntax
Preprocessor
Data types
Standard library
Char
File I/O
Math
Dynamic memory
String
Time
Variadic
POSIX
Standard libraryimplementations
Bionic
libhybris
dietlibc
glibc
EGLIBC
klibc
Windows CRT
musl
Newlib
uClibc
Compilers
ACK
Borland Turbo C
Clang
GCC
ICC
LCC
Norcroft C
PCC
SDCC
TCC
Microsoft Visual Studio / Express / C++
Watcom C/C++
IDEs
Anjuta
CLion
Code::Blocks
CodeLite
Eclipse
Geany
GNOME Builder
KDevelop
Microsoft Visual Studio
NetBeans
Comparison withother languages
Compatibility of C and C++
Comparison with Pascal
Descendantlanguages
C++
C#
D
Objective-C
Alef
Limbo
Go
Vala

 Category





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Vala_(programming_language)&oldid=1067100730"
		Categories: Vala (programming language)Programming languagesObject-oriented programming languagesSoftware using the LGPL licenseSource-to-source compilersStatically typed programming languagesProgramming languages created in 20062006 softwareCross-platform free softwareHidden categories: Articles with short descriptionPages with lower-case short descriptionShort description matches WikidataUse dmy dates from August 2015Commons category link is on Wikidata
	
