
Title:
DamerauâLevenshtein distance
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		In information theory and computer science, the DamerauâLevenshtein distance (named after Frederick J. Damerau and Vladimir I. Levenshtein[1][2][3]) is a string metric for measuring the edit distance between two sequences. Informally, the DamerauâLevenshtein distance between two words is the minimum number of operations (consisting of insertions, deletions or substitutions of a single character, or transposition of two adjacent characters) required to change one word into the other.
The DamerauâLevenshtein distance differs from the classical Levenshtein distance by including transpositions among its allowable operations in addition to the three classical single-character edit operations (insertions, deletions and substitutions).[4][2]
In his seminal paper,[5] Damerau stated that in an investigation of spelling errors for an information-retrieval system, more than 80% were a result of a single error of one of the four types. Damerau's paper considered only misspellings that could be corrected with at most one edit operation. While the original motivation was to measure distance between human misspellings to improve applications such as spell checkers, DamerauâLevenshtein distance has also seen uses in biology to measure the variation between protein sequences.[6]

Contents

1 Definition
2 Algorithm

2.1 Optimal string alignment distance
2.2 Distance with adjacent transpositions


3 Applications

3.1 DNA
3.2 Fraud detection
3.3 Export control


4 See also
5 References
6 Further reading



Definition[edit]
To express the DamerauâLevenshtein distance between two strings 
  
    
      
        a
      
    
    {\displaystyle a}
  
 and 
  
    
      
        b
      
    
    {\displaystyle b}
  
, a function 
  
    
      
        
          d
          
            a
            ,
            b
          
        
        (
        i
        ,
        j
        )
      
    
    {\displaystyle d_{a,b}(i,j)}
  
 is defined, whose value is a distance between an 
  
    
      
        i
      
    
    {\displaystyle i}
  
-symbol prefix (initial substring) of string 
  
    
      
        a
      
    
    {\displaystyle a}
  
 and a 
  
    
      
        j
      
    
    {\displaystyle j}
  
-symbol prefix of 
  
    
      
        b
      
    
    {\displaystyle b}
  
.
The restricted distance function is defined recursively as:[7]:âA:11â

  
    
      
        
          d
          
            a
            ,
            b
          
        
        (
        i
        ,
        j
        )
        =
        min
        
          
            {
            
              
                
                  0
                
                
                  
                    ifÂ 
                  
                  i
                  =
                  j
                  =
                  0
                  ,
                
              
              
                
                  
                    d
                    
                      a
                      ,
                      b
                    
                  
                  (
                  i
                  â
                  1
                  ,
                  j
                  )
                  +
                  1
                
                
                  
                    ifÂ 
                  
                  i
                  >
                  0
                  ,
                
              
              
                
                  
                    d
                    
                      a
                      ,
                      b
                    
                  
                  (
                  i
                  ,
                  j
                  â
                  1
                  )
                  +
                  1
                
                
                  
                    ifÂ 
                  
                  j
                  >
                  0
                  ,
                
              
              
                
                  
                    d
                    
                      a
                      ,
                      b
                    
                  
                  (
                  i
                  â
                  1
                  ,
                  j
                  â
                  1
                  )
                  +
                  
                    1
                    
                      (
                      
                        a
                        
                          i
                        
                      
                      â 
                      
                        b
                        
                          j
                        
                      
                      )
                    
                  
                
                
                  
                    ifÂ 
                  
                  i
                  ,
                  j
                  >
                  0
                  ,
                
              
              
                
                  
                    d
                    
                      a
                      ,
                      b
                    
                  
                  (
                  i
                  â
                  2
                  ,
                  j
                  â
                  2
                  )
                  +
                  1
                
                
                  
                    ifÂ 
                  
                  i
                  ,
                  j
                  >
                  1
                  
                    Â andÂ 
                  
                  
                    a
                    
                      i
                    
                  
                  =
                  
                    b
                    
                      j
                      â
                      1
                    
                  
                  
                    Â andÂ 
                  
                  
                    a
                    
                      i
                      â
                      1
                    
                  
                  =
                  
                    b
                    
                      j
                    
                  
                  ,
                
              
            
            
          
        
      
    
    {\displaystyle d_{a,b}(i,j)=\min {\begin{cases}0&{\text{if }}i=j=0,\\d_{a,b}(i-1,j)+1&{\text{if }}i>0,\\d_{a,b}(i,j-1)+1&{\text{if }}j>0,\\d_{a,b}(i-1,j-1)+1_{(a_{i}\neq b_{j})}&{\text{if }}i,j>0,\\d_{a,b}(i-2,j-2)+1&{\text{if }}i,j>1{\text{ and }}a_{i}=b_{j-1}{\text{ and }}a_{i-1}=b_{j},\\\end{cases}}}
  

where 
  
    
      
        
          1
          
            (
            
              a
              
                i
              
            
            â 
            
              b
              
                j
              
            
            )
          
        
      
    
    {\displaystyle 1_{(a_{i}\neq b_{j})}}
  
 is the indicator function equal to 0 when 
  
    
      
        
          a
          
            i
          
        
        =
        
          b
          
            j
          
        
      
    
    {\displaystyle a_{i}=b_{j}}
  
 and equal to 1 otherwise.
Each recursive call matches one of the cases covered by the DamerauâLevenshtein distance:


  
    
      
        
          d
          
            a
            ,
            b
          
        
        (
        i
        â
        1
        ,
        j
        )
        +
        1
      
    
    {\displaystyle d_{a,b}(i-1,j)+1}
  
 corresponds to a deletion (from a to b),

  
    
      
        
          d
          
            a
            ,
            b
          
        
        (
        i
        ,
        j
        â
        1
        )
        +
        1
      
    
    {\displaystyle d_{a,b}(i,j-1)+1}
  
 corresponds to an insertion (from a to b),

  
    
      
        
          d
          
            a
            ,
            b
          
        
        (
        i
        â
        1
        ,
        j
        â
        1
        )
        +
        
          1
          
            (
            
              a
              
                i
              
            
            â 
            
              b
              
                j
              
            
            )
          
        
      
    
    {\displaystyle d_{a,b}(i-1,j-1)+1_{(a_{i}\neq b_{j})}}
  
 corresponds to a match or mismatch, depending on whether the respective symbols are the same,

  
    
      
        
          d
          
            a
            ,
            b
          
        
        (
        i
        â
        2
        ,
        j
        â
        2
        )
        +
        1
      
    
    {\displaystyle d_{a,b}(i-2,j-2)+1}
  
 corresponds to a transposition between two successive symbols.
The DamerauâLevenshtein distance between a and b is then given by the function value for full strings: 
  
    
      
        
          d
          
            a
            ,
            b
          
        
        
          
            (
          
        
        
          |
        
        a
        
          |
        
        ,
        
          |
        
        b
        
          |
        
        
          
            )
          
        
      
    
    {\displaystyle d_{a,b}{\big (}|a|,|b|{\big )}}
  
, where 
  
    
      
        i
        =
        
          |
        
        a
        
          |
        
      
    
    {\displaystyle i=|a|}
  
 denotes the length of string a, and 
  
    
      
        j
        =
        
          |
        
        b
        
          |
        
      
    
    {\displaystyle j=|b|}
  
 is the length of b.

Algorithm[edit]
Presented here are two algorithms: the first,[8] simpler one, computes what is known as the optimal string alignment distance or restricted edit distance,[7] while the second one[9] computes the DamerauâLevenshtein distance with adjacent transpositions. Adding transpositions adds significant complexity. The difference between the two algorithms consists in that the optimal string alignment algorithm computes the number of edit operations needed to make the strings equal under the condition that no substring is edited more than once, whereas the second one presents no such restriction.
Take for example the edit distance between CA and ABC. The DamerauâLevenshtein distance LD(CA,Â ABC) = 2 because CA â AC â ABC, but the optimal string alignment distance OSA(CA,Â ABC) = 3 because if the operation CA â AC is used, it is not possible to use AC â ABC because that would require the substring to be edited more than once, which is not allowed in OSA, and therefore the shortest sequence of operations is CA â A â AB â ABC. Note that for the optimal string alignment distance, the triangle inequality does not hold: OSA(CA,Â AC) + OSA(AC,Â ABC) < OSA(CA,Â ABC), and so it is not a true metric.

Optimal string alignment distance[edit]
Optimal string alignment distance can be computed using a straightforward extension of the WagnerâFischer dynamic programming algorithm that computes Levenshtein distance. In pseudocode:

algorithm OSA-distance is
    input: strings a[1..length(a)], b[1..length(b)]
    output: distance, integer
    
    let d[0..length(a), 0..length(b)] be a 2-d array of integers, dimensions length(a)+1, length(b)+1
    // note that d is zero-indexed, while a and b are one-indexed.
    
    for iÂ := 0 to length(a) inclusive do
        d[i, 0]Â := i
    for jÂ := 0 to length(b) inclusive do
        d[0, j]Â := j
    
    for iÂ := 1 to length(a) inclusive do
        for jÂ := 1 to length(b) inclusive do
            if a[i] = b[j] then
                costÂ := 0
            else
                costÂ := 1
            d[i, j]Â := minimum(d[i-1, j] + 1,     // deletion
                               d[i, j-1] + 1,     // insertion
                               d[i-1, j-1] + cost)  // substitution
            if i > 1 and j > 1 and a[i] = b[j-1] and a[i-1] = b[j] then
                d[i, j]Â := minimum(d[i, j],
                                   d[i-2, j-2] + 1)  // transposition
    return d[length(a), length(b)]

The difference from the algorithm for Levenshtein distance is the addition of one recurrence:

if i > 1 and j > 1 and a[i] = b[j-1] and a[i-1] = b[j] then
    d[i, j]Â := minimum(d[i, j],
                       d[i-2, j-2] + 1)  // transposition

Distance with adjacent transpositions[edit]
The following algorithm computes the true DamerauâLevenshtein distance with adjacent transpositions; this algorithm requires as an additional parameter the size of the alphabet Î£, so that all entries of the arrays are in [0, |Î£|):[7]:âA:93â

algorithm DL-distance is
    input: strings a[1..length(a)], b[1..length(b)]
    output: distance, integer
    
    daÂ := new array of |Î£| integers
    for iÂ := 1 to |Î£| inclusive do
        da[i]Â := 0
    
    let d[â1..length(a), â1..length(b)] be a 2-d array of integers, dimensions length(a)+2, length(b)+2
    // note that d has indices starting at â1, while a, b and da are one-indexed.
    
    maxdistÂ := length(a) + length(b)
    d[â1, â1]Â := maxdist
    for iÂ := 0 to length(a) inclusive do
        d[i, â1]Â := maxdist
        d[i, 0]Â := i
    for jÂ := 0 to length(b) inclusive do
        d[â1, j]Â := maxdist
        d[0, j]Â := j
    
    for iÂ := 1 to length(a) inclusive do
        dbÂ := 0
        for jÂ := 1 to length(b) inclusive do
            kÂ := da[b[j]]
            âÂ := db
            if a[i] = b[j] then
                costÂ := 0
                dbÂ := j
            else
                costÂ := 1
            d[i, j]Â := minimum(d[iâ1, jâ1] + cost,  //substitution
                               d[i,   jâ1] + 1,     //insertion
                               d[iâ1, j  ] + 1,     //deletion
                               d[kâ1, ââ1] + (iâkâ1) + 1 + (j-ââ1)) //transposition
        da[a[i]]Â := i
    return d[length(a), length(b)]

To devise a proper algorithm to calculate unrestricted DamerauâLevenshtein distance, note that there always exists an optimal sequence of edit operations, where once-transposed letters are never modified afterwards. (This holds as long as the cost of a transposition, 
  
    
      
        
          W
          
            T
          
        
      
    
    {\displaystyle W_{T}}
  
, is at least the average of the cost of an insertion and deletion, i.e., 
  
    
      
        2
        
          W
          
            T
          
        
        â¥
        
          W
          
            I
          
        
        +
        
          W
          
            D
          
        
      
    
    {\displaystyle 2W_{T}\geq W_{I}+W_{D}}
  
.[9]) Thus, we need to consider only two symmetric ways of modifying a substring more than once: (1) transpose letters and insert an arbitrary number of characters between them, or (2) delete a sequence of characters and transpose letters that become adjacent after deletion. The straightforward implementation of this idea gives an algorithm of cubic complexity: 
  
    
      
        O
        
          
            (
          
        
        M
        â
        N
        â
        max
        (
        M
        ,
        N
        )
        
          
            )
          
        
      
    
    {\displaystyle O{\big (}M\cdot N\cdot \max(M,N){\big )}}
  
, where M and N are string lengths. Using the ideas of Lowrance and Wagner,[9] this naive algorithm can be improved to be 
  
    
      
        O
        (
        M
        â
        N
        )
      
    
    {\displaystyle O(M\cdot N)}
  
 in the worst case, which is what the above pseudocode does.
It is interesting that the bitap algorithm can be modified to process transposition. See the information retrieval section of[1] for an example of such an adaptation.

Applications[edit]
DamerauâLevenshtein distance plays an important role in natural language processing. In natural languages, strings are short and the number of errors (misspellings) rarely exceeds 2. In such circumstances, restricted and real edit distance differ very rarely. Oommen and Loke[8] even mitigated the limitation of the restricted edit distance by introducing generalized transpositions. Nevertheless, one must remember that the restricted edit distance usually does not satisfy the triangle inequality, and thus cannot be used with metric trees.

DNA[edit]
Since DNA frequently undergoes insertions, deletions, substitutions, and transpositions, and each of these operations occurs on approximately the same timescale, the DamerauâLevenshtein distance is an appropriate metric of the variation between two strands of DNA. More common in DNA, protein, and other bioinformatics related alignment tasks is the use of closely related algorithms such as NeedlemanâWunsch algorithm or SmithâWaterman algorithm.

Fraud detection[edit]
The algorithm can be used with any set of words, like vendor names. Since entry is manual by nature, there is a risk of entering a false vendor. A fraudster employee may enter one real vendor such as "Rich Heir Estate Services" versus a false vendor "Rich Hier State Services". The fraudster would then create a false bank account and have the company route checks to the real vendor and false vendor. The DamerauâLevenshtein algorithm will detect the transposed and dropped letter and bring attention of the items to a fraud examiner.

Export control[edit]
The U.S. Government uses the DamerauâLevenshtein distance with its Consolidated Screening List API.[10]

See also[edit]
Ispell suggests corrections that are based on a DamerauâLevenshtein distance of 1
Typosquatting
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Brill, Eric; Moore, Robert C. (2000). An Improved Error Model for Noisy Channel Spelling Correction (PDF). Proceedings of the 38th Annual Meeting on Association for Computational Linguistics. pp.Â 286â293. doi:10.3115/1075218.1075255. Archived from the original (PDF) on 2012-12-21.

^ Jump up to: a b Bard, Gregory V. (2007), "Spelling-error tolerant, order-independent pass-phrases via the DamerauâLevenshtein string-edit distance metric", Proceedings of the Fifth Australasian Symposium on ACSW FrontiersÂ : 2007, Ballarat, Australia, January 30 - February 2, 2007, Conferences in Research and Practice in Information Technology, vol.Â 68, Darlinghurst, Australia: Australian Computer Society, Inc., pp.Â 117â124, ISBNÂ 978-1-920682-49-1.

^ Li;  etÂ al. (2006). Exploring distributional similarity based models for query spelling correction (PDF). Proceedings of the 21st International Conference on Computational Linguistics and the 44th annual meeting of the Association for Computational Linguistics. pp.Â 1025â1032. doi:10.3115/1220175.1220304. Archived from the original (PDF) on 2010-04-01.

^ Levenshtein, Vladimir I. (February 1966), "Binary codes capable of correcting deletions, insertions, and reversals", Soviet Physics Doklady, 10 (8): 707â710, Bibcode:1966SPhD...10..707L

^ Damerau, Fred J. (March 1964), "A technique for computer detection and correction of spelling errors", Communications of the ACM, 7 (3): 171â176, doi:10.1145/363958.363994, S2CIDÂ 7713345

^ The method used in: Majorek, Karolina A.; Dunin-Horkawicz, StanisÅaw;  etÂ al. (2013), "The RNase H-like superfamily: new members, comparative structural analysis and evolutionary classification", Nucleic Acids Research, 42 (7): 4160â4179, doi:10.1093/nar/gkt1414, PMCÂ 3985635, PMIDÂ 24464998

^ Jump up to: a b c Boytsov, Leonid (May 2011). "Indexing methods for approximate dictionary searching". Journal of Experimental Algorithmics. 16: 1. doi:10.1145/1963190.1963191. S2CIDÂ 15635688.

^ Jump up to: a b Oommen, B. J.; Loke, R. K. S. (1997). "Pattern recognition of strings with substitutions, insertions, deletions and generalized transpositions". Pattern Recognition. 30 (5): 789â800. Bibcode:1997PatRe..30..789O. CiteSeerXÂ 10.1.1.50.1459. doi:10.1016/S0031-3203(96)00101-X.

^ Jump up to: a b c Lowrance, Roy; Wagner, Robert A. (April 1975), "An Extension of the String-to-String Correction Problem", J ACM, 22 (2): 177â183, doi:10.1145/321879.321880, S2CIDÂ 18892193

^ "Consolidated Screening List API". Trade.gov Developer Portal. International Trade Administration, U.S. Department of Commerce. Archived from the original on 2019-10-30.


Further reading[edit]
Navarro, Gonzalo (March 2001), "A guided tour to approximate string matching", ACM Computing Surveys, 33 (1): 31â88, CiteSeerXÂ 10.1.1.452.6317, doi:10.1145/375360.375365, S2CIDÂ 207551224
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}hide.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteStringsString metric
Approximate string matching
Bitap algorithm
DamerauâLevenshtein distance
Edit distance
Gestalt Pattern Matching
Hamming distance
JaroâWinkler distance
Lee distance
Levenshtein automaton
Levenshtein distance
WagnerâFischer algorithm 
String-searching algorithm
ApostolicoâGiancarlo algorithm
BoyerâMoore string-search algorithm
BoyerâMooreâHorspool algorithm
KnuthâMorrisâPratt algorithm
RabinâKarp algorithm
Multiple string searching
AhoâCorasick
Commentz-Walter algorithm
Regular expression
Comparison of regular-expression engines
Regular grammar
Thompson's construction
Nondeterministic finite automaton
Sequence alignment
Hirschberg's algorithm
NeedlemanâWunsch algorithm
SmithâWaterman algorithm
Data structure
DAFSA
Suffix array
Suffix automaton
Suffix tree
Generalized suffix tree
Rope
Ternary search tree
Trie
Other
Parsing
Pattern matching
Compressed pattern matching
Longest common subsequence
Longest common substring
Sequential pattern mining
Sorting





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=DamerauâLevenshtein_distance&oldid=1050388400"
		Categories: String metricsInformation theoryDynamic programming
	
