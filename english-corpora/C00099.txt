
Title:
Time complexity
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Estimate of time taken for running an algorithm
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}"Running time" redirects here. For the film, see Running Time (film).
  Graphs of functions commonly used in the analysis of algorithms, showing the number of operations N versus input size n for each function
In computer science, the time complexity is the computational complexity that describes the amount of computer time it takes to run an algorithm. Time complexity is commonly estimated by counting the number of elementary operations performed by the algorithm, supposing that each elementary operation takes a fixed amount of time to perform. Thus, the amount of time taken and the number of elementary operations performed by the algorithm are taken to be related by a constant factor.
Since an algorithm's running time may vary among different inputs of the same size, one commonly considers the worst-case time complexity, which is the maximum amount of time required for inputs of a given size. Less common, and usually specified explicitly, is the average-case complexity, which is the average of the time taken on inputs of a given size (this makes sense because there are only a finite number of possible inputs of a given size). In both cases, the time complexity is generally expressed as a function of the size of the input.[1]:â226â Since this function is generally difficult to compute exactly, and the running time for small inputs is usually not consequential, one commonly focuses on the behavior of the complexity when the input size increasesâthat is, the asymptotic behavior of the complexity. Therefore, the time complexity is commonly expressed using big O notation, typically 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
  
, 
  
    
      
        O
        (
        n
        log
        â¡
        n
        )
      
    
    {\displaystyle O(n\log n)}
  
, 
  
    
      
        O
        (
        
          n
          
            Î±
          
        
        )
      
    
    {\displaystyle O(n^{\alpha })}
  
, 
  
    
      
        O
        (
        
          2
          
            n
          
        
        )
      
    
    {\displaystyle O(2^{n})}
  
, etc., where n is the size in units of bits needed to represent the input.
Algorithmic complexities are classified according to the type of function appearing in the big O notation. For example, an algorithm with time complexity 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
  
 is a linear time algorithm and an algorithm with time complexity 
  
    
      
        O
        (
        
          n
          
            Î±
          
        
        )
      
    
    {\displaystyle O(n^{\alpha })}
  
 for some constant 
  
    
      
        Î±
        >
        1
      
    
    {\displaystyle \alpha >1}
  
 is a polynomial time algorithm.

Contents

1 Table of common time complexities
2 Constant time
3 Logarithmic time
4 Polylogarithmic time
5 Sub-linear time
6 Linear time
7 Quasilinear time
8 Sub-quadratic time
9 Polynomial time

9.1 Strongly and weakly polynomial time
9.2 Complexity classes


10 Superpolynomial time
11 Quasi-polynomial time

11.1 Relation to NP-complete problems


12 Sub-exponential time

12.1 First definition
12.2 Second definition

12.2.1 Exponential time hypothesis




13 Exponential time
14 Factorial time
15 Double exponential time
16 See also
17 References



Table of common time complexities[edit]
Further information: Computational complexity of mathematical operations
The following table summarizes some classes of commonly encountered time complexities. In the table, poly(x) = xO(1), i.e., polynomial inÂ x.




Name
Complexity class
Running time (T(n))
Examples of running times
Example algorithms


constant time

O(1)
10
Finding the median value in a sorted array of numbers
Calculating  (â1)n



inverse Ackermann time

O(Î±(n))

Amortized time per operation using a disjoint set


iterated logarithmic time

O(log*Â n)

Distributed coloring of cycles


log-logarithmic

O(log log n)

Amortized time per operation using a bounded priority queue[2]


logarithmic time
DLOGTIME
O(logÂ n)
logÂ n, log(n2)
Binary search


polylogarithmic time

poly(logÂ n)
(logÂ n)2



fractional power

O(nc) where 0 < c < 1
n1/2, n2/3
Searching in a kd-tree


linear time

O(n)
n, 2n + 5
Finding the smallest or largest item in an unsorted array, Kadane's algorithm, linear search


"n log-star n" time

O(n log* n)

Seidel's polygon triangulation algorithm.


linearithmic time

 O(n log n)
n log n, log n!
Fastest possible comparison sort; Fast Fourier transform.


quasilinear time

n poly(log n)




quadratic time

O(n2)
n2
Bubble sort; Insertion sort; Direct convolution


cubic time

O(n3)
n3
Naive multiplication of two nÃn matrices.  Calculating partial correlation.


polynomial time
P
2O(log n) = poly(n)
n2 + n, n10
Karmarkar's algorithm for linear programming; AKS primality test[3][4]


quasi-polynomial time
QP
2poly(logÂ n)
nlog log n, nlogÂ n
Best-known O(log2 n)-approximation algorithm for the directed Steiner tree problem.


sub-exponential time(first definition)
SUBEXP
O(2nÎµ) for all Îµ > 0

Contains BPP unless EXPTIME (see below) equals MA.[5]


sub-exponential time(second definition)

2o(n)
2n1/3
Best-known algorithm for integer factorization; formerly-best algorithm for graph isomorphism


exponential time(with linear exponent)
E
2O(n)
1.1n, 10n
Solving the traveling salesman problem using dynamic programming


exponential time
EXPTIME
2poly(n)
2n, 2n2
Solving matrix chain multiplication via brute-force search


factorial time

O(n!)
n!
Solving the traveling salesman problem via brute-force search


double exponential time
2-EXPTIME
22poly(n)
22n
Deciding the truth of a given statement in Presburger arithmetic

Constant time[edit]
"Constant time" redirects here. For programming technique to avoid a timing attack, see Timing attack Â§Â Avoidance.
An algorithm is said to be constant time (also written as O(1) time) if the value of T(n) is bounded by a value that does not depend on the size of the input. For example, accessing any single element in an array takes constant time as only one operation has to be performed to locate it. In a similar manner, finding the minimal value in an array sorted in ascending order; it is the first element. However, finding the minimal value in an unordered array is not a constant time operation as scanning over each element in the array is needed in order to determine the minimal value. Hence it is a linear time operation, taking O(n) time. If the number of elements is known in advance and does not change, however, such an algorithm can still be said to run in constant time.
Despite the name "constant time", the running time does not have to be independent of the problem size, but an upper bound for the running time has to be bounded independently of the problem size. For example, the task "exchange the values of a and b if necessary so that a â¤ b" is called constant time even though the time may depend on whether or not it is already true that a â¤ b. However, there is some constant t such that the time required is always at most t.
Here are some examples of code fragments that run in constant time:

int index = 5;
int item = list[index];
if (condition true) then
    perform some operation that runs in constant time
else
    perform some other operation that runs in constant time
for i = 1 to 100
    for j = 1 to 200
        perform some operation that runs in constant time

If T(n) is O(any constant value), this is equivalent to and stated in standard notation as T(n) being O(1).

Logarithmic time[edit]
Further information: Logarithmic growth
An algorithm is said to take logarithmic time when T(n)Â = O(log n).  Since logaÂ n and logbÂ n are related by a constant multiplier, and such a multiplier is irrelevant to big-O classification, the standard usage for logarithmic-time algorithms is O(log n) regardless of the base of the logarithm appearing in the expression of T.
Algorithms taking logarithmic time are commonly found in operations on binary trees or when using binary search.
An O(log n) algorithm is considered highly efficient, as the ratio of the number of operations to the size of the input decreases and tends to zero when n increases. An algorithm that must access all elements of its input cannot take logarithmic time, as the time taken for reading an input of size n is of the order of n.
An example of logarithmic time is given by dictionary search. Consider a dictionary D which contains n entries, sorted by alphabetical order. We suppose that, for 1 â¤ k â¤ n, one may access the kth entry of the dictionary in a constant time. Let D(k) denote this kth entry. Under these hypotheses, the test to see if a word w is in the dictionary may be done in logarithmic time: consider 
  
    
      
        D
        (
        â
        n
        
          /
        
        2
        â
        )
      
    
    {\displaystyle D(\lfloor n/2\rfloor )}
  
, where 
  
    
      
        â
        
        â
      
    
    {\displaystyle \lfloor \;\rfloor }
  
 denotes the floor function. If 
  
    
      
        w
        =
        D
        (
        â
        n
        
          /
        
        2
        â
        )
      
    
    {\displaystyle w=D(\lfloor n/2\rfloor )}
  
, then we are done. Else, if 
  
    
      
        w
        <
        D
        (
        â
        n
        
          /
        
        2
        â
        )
      
    
    {\displaystyle w<D(\lfloor n/2\rfloor )}
  
, continue the search in the same way in the left half of the dictionary, otherwise continue similarly with the right half of the dictionary. This algorithm is similar to the method often used to find an entry in a paper dictionary.

Polylogarithmic time[edit]
An algorithm is said to run in polylogarithmic time if its time T(n) is O((log n)k) for some constant k. Another way to write this is O(logk n).
For example, matrix chain ordering can be solved in polylogarithmic time on a parallel random-access machine,[6] and a graph can be determined to be planar in a fully dynamic way in O(log3 n) time per insert/delete operation.[7]

Sub-linear time[edit]
An algorithm is said to run in sub-linear time (often spelled sublinear time) if T(n) = o(n). In particular this includes algorithms with the time complexities defined above.
Typical algorithms that are exact and yet run in sub-linear time use parallel processing (as the NC1 matrix determinant calculation does), or alternatively have guaranteed assumptions on the input structure (as the logarithmic time binary search and many tree maintenance algorithms do). However, formal languages such as the set of all strings that have a 1-bit in the position indicated by the first log(n) bits of the string may depend on every bit of the input and yet be computable in sub-linear time.
The specific term sublinear time algorithm is usually reserved to algorithms that are unlike the above in that they are run over classical serial machine models and are not allowed prior assumptions on the input.[8] They are however allowed to be randomized, and indeed must be randomized for all but the most trivial of tasks.
As such an algorithm must provide an answer without reading the entire input, its particulars heavily depend on the access allowed to the input. Usually for an input that is represented as a binary string b1,â¦,bk it is assumed that the algorithm can in time O(1) request and obtain the value of bi for any i.
Sub-linear time algorithms are typically randomized, and provide only approximate solutions. In fact, the property of a binary string having only zeros (and no ones) can be easily proved not to be decidable by a (non-approximate) sub-linear time algorithm. Sub-linear time algorithms arise naturally in the investigation of property testing.

Linear time[edit]
An algorithm is said to take linear time, or O(n) time, if its time complexity is O(n). Informally, this means that the running time increases at most linearly with the size of the input. More precisely, this means that there is a constant c such that the running time is at most cn for every input of size n. For example, a procedure that adds up all elements of a list requires time proportional to the length of the list, if the adding time is constant, or, at least, bounded by a constant.
Linear time is the best possible time complexity in situations where the algorithm has to sequentially read its entire input. Therefore, much research has been invested into discovering algorithms exhibiting linear time or, at least, nearly linear time. This research includes both software and hardware methods. There are several hardware technologies which exploit parallelism to provide this. An example is content-addressable memory. This concept of linear time is used in string matching algorithms such as the BoyerâMoore algorithm and Ukkonen's algorithm.

 Quasilinear time[edit]
An algorithm is said to run in quasilinear time (also referred to as log-linear time) if T(n)Â = O(n logk n) for some positive constant k;[9] linearithmic time is the case k = 1.[10] Using soft O notation these algorithms are Ã(n). Quasilinear time algorithms are also O(n1+Îµ) for every constant Îµ > 0, and thus run faster than any polynomial time algorithm whose time bound includes a term nc for any c > 1.
Algorithms which run in quasilinear time include:

In-place merge sort, O(n log2 n)
Quicksort, O(n log n), in its randomized version, has a running time that is O(n log n) in expectation on the worst-case input. Its non-randomized version has an O(n log n) running time only when considering average case complexity.
Heapsort, O(n log n), merge sort, introsort, binary tree sort, smoothsort, patience sorting, etc. in the worst case
Fast Fourier transforms, O(n log n)
Monge array calculation, O(n log n)
In many cases, the n log n running time is simply the result of performing a Î(log n) operation n times (for the notation, see Big O notation Â§Â Family of BachmannâLandau notations). For example, binary tree sort creates a binary tree by inserting each element of the n-sized array one by one. Since the insert operation on a self-balancing binary search tree takes O(log n) time, the entire algorithm takes O(n log n) time.
Comparison sorts require at least Î©(n log n) comparisons in the worst case because log(n!) = Î(n log n), by Stirling's approximation. They also frequently arise from the recurrence relation T(n) = 2T(n/2) + O(n).

Sub-quadratic time[edit]
An algorithm is said to be subquadratic time if T(n) = o(n2).
For example, simple, comparison-based sorting algorithms are quadratic (e.g. insertion sort), but more advanced algorithms can be found that are subquadratic (e.g. shell sort). No general-purpose sorts run in linear time, but the change from quadratic to sub-quadratic is of great practical importance.

Polynomial time[edit]
An algorithm is said to be of polynomial time if its running time is upper bounded by a polynomial expression in the size of the input for the algorithm, that is, T(n) = O(nk) for some positive constant k.[1][11] Problems for which a deterministic polynomial time algorithm exists belong to the complexity class P, which is central in the field of computational complexity theory. Cobham's thesis states that polynomial time is a synonym for "tractable", "feasible", "efficient", or "fast".[12]
Some examples of polynomial time algorithms:

The selection sort sorting algorithm on n integers performs 
  
    
      
        A
        
          n
          
            2
          
        
      
    
    {\displaystyle An^{2}}
  
 operations for some constant A. Thus it runs in time 
  
    
      
        O
        (
        
          n
          
            2
          
        
        )
      
    
    {\displaystyle O(n^{2})}
  
 and is a polynomial time algorithm.
All the basic arithmetic operations (addition, subtraction, multiplication, division, and comparison) can be done in polynomial time.
Maximum matchings in graphs can be found in polynomial time.
Strongly and weakly polynomial time[edit]
In some contexts, especially in optimization, one differentiates between strongly polynomial time and weakly polynomial time algorithms. These two concepts are only relevant if the inputs to the algorithms consist of integers.
Strongly polynomial time is defined in the arithmetic model of computation. In this model of computation the basic arithmetic operations (addition, subtraction, multiplication, division, and comparison) take a unit time step to perform, regardless of the sizes of the operands. The algorithm runs in strongly polynomial time if:[13]

the number of operations in the arithmetic model of computation is bounded by a polynomial in the number of integers in the input instance; and
the space used by the algorithm is bounded by a polynomial in the size of the input.
Any algorithm with these two properties can be converted to a polynomial time algorithm by replacing the arithmetic operations by suitable algorithms for performing the arithmetic operations on a Turing machine. The second condition is strictly necessary: given the integer 
  
    
      
        
          2
          
            n
          
        
      
    
    {\displaystyle 2^{n}}
  
 (which takes up space proportional to n in the Turing machine model), it is possible to compute 
  
    
      
        
          2
          
            
              2
              
                n
              
            
          
        
      
    
    {\displaystyle 2^{2^{n}}}
  
 with n multiplications using repeated squaring. However, the space used to represent 
  
    
      
        
          2
          
            
              2
              
                n
              
            
          
        
      
    
    {\displaystyle 2^{2^{n}}}
  
 is proportional to 
  
    
      
        
          2
          
            n
          
        
      
    
    {\displaystyle 2^{n}}
  
, and thus exponential rather than polynomial in the space used to represent the input. Hence, it is not possible to carry out this computation in polynomial time on a Turing machine, but it is possible to compute it by polynomially many arithmetic operations.
However, for the first condition, there are algorithms that run in a number of Turing machine steps bounded by a polynomial in the length of binary-encoded input, but do not take a number of arithmetic operations bounded by a polynomial in the number of input numbers. The Euclidean algorithm for computing the greatest common divisor of two integers is one example. Given two integers 
  
    
      
        a
      
    
    {\displaystyle a}
  
 and 
  
    
      
        b
      
    
    {\displaystyle b}
  
, the algorithm performs 
  
    
      
        O
        (
        log
        â¡
        a
        +
        log
        â¡
        b
        )
      
    
    {\displaystyle O(\log a+\log b)}
  
 arithmetic operations on numbers with 
at most 
  
    
      
        O
        (
        log
        â¡
        a
        +
        log
        â¡
        b
        )
      
    
    {\displaystyle O(\log a+\log b)}
  
 bits. At the same time, the number of arithmetic operations cannot be bounded by the number of integers in the input (which is constant in this case, there are always only two integers in the input). Due to the latter observation, the algorithm does not run in strongly polynomial time. Its real running time depends logarithmically on the magnitudes of 
  
    
      
        a
      
    
    {\displaystyle a}
  
 and 
  
    
      
        b
      
    
    {\displaystyle b}
  
 (that is, on their length in bits) and not only on the number of integers in the input.
An algorithm that runs in polynomial time but that is not strongly polynomial is said to run in weakly polynomial time.[14]
A well-known example of a problem for which a weakly polynomial-time algorithm is known, but is not known to admit a strongly polynomial-time algorithm, is linear programming. Weakly polynomial time should not be confused with pseudo-polynomial time, which depends linearly on the magnitude of values in the problem and is not truly polynomial time.

Complexity classes[edit]
The concept of polynomial time leads to several complexity classes in computational complexity theory. Some important classes defined using polynomial time are the following.




P
The complexity class of decision problems that can be solved on a deterministic Turing machine in polynomial time


NP
The complexity class of decision problems that can be solved on a non-deterministic Turing machine in polynomial time


ZPP
The complexity class of decision problems that can be solved with zero error on a probabilistic Turing machine in polynomial time


RP
The complexity class of decision problems that can be solved with 1-sided error on a probabilistic Turing machine in polynomial time.


BPP
The complexity class of decision problems that can be solved with 2-sided error on a probabilistic Turing machine in polynomial time


BQP
The complexity class of decision problems that can be solved with 2-sided error on a quantum Turing machine in polynomial time

P is the smallest time-complexity class on a deterministic machine which is robust in terms of machine model changes. (For example, a change from a single-tape Turing machine to a multi-tape machine can lead to a quadratic speedup, but any algorithm that runs in polynomial time under one model also does so on the other.) Any given abstract machine will have a complexity class corresponding to the problems which can be solved in polynomial time on that machine.

Superpolynomial time[edit]
An algorithm is said to take superpolynomial time if T(n) is not bounded above by any polynomial. Using little omega notation, it is Ï(nc) time for all constants c, where n is the input parameter, typically the number of bits in the input.
For example, an algorithm that runs for 2n steps on an input of size n requires superpolynomial time (more specifically, exponential time).
An algorithm that uses exponential resources is clearly superpolynomial, but some algorithms are only very weakly superpolynomial. For example, the AdlemanâPomeranceâRumely primality test runs for nO(log log n) time on n-bit inputs; this grows faster than any polynomial for large enough n, but the input size must become impractically large before it cannot be dominated by a polynomial with small degree.
An algorithm that requires superpolynomial time lies outside the complexity class P. Cobham's thesis posits that these algorithms are impractical, and in many cases they are. Since the P versus NP problem is unresolved, it is unknown whether NP-complete problems require superpolynomial time.

Quasi-polynomial time[edit]
Quasi-polynomial time algorithms are algorithms that run longer than polynomial time, yet not so long as to be exponential time. The worst case running time of a quasi-polynomial time algorithm is 
  
    
      
        
          2
          
            O
            (
            
              log
              
                c
              
            
            â¡
            n
            )
          
        
      
    
    {\displaystyle 2^{O(\log ^{c}n)}}
  
 for some fixed 
  
    
      
        c
        >
        0
      
    
    {\displaystyle c>0}
  
. For 
  
    
      
        c
        =
        1
      
    
    {\displaystyle c=1}
  
 we get a polynomial time algorithm, for 
  
    
      
        c
        <
        1
      
    
    {\displaystyle c<1}
  
 we get a sub-linear time algorithm.
Quasi-polynomial time algorithms typically arise in reductions from an NP-hard problem to another problem. For example, one can take an instance of an NP hard problem, say 3SAT, and convert it to an instance of another problem B, but the size of the instance becomes 
  
    
      
        
          2
          
            O
            (
            
              log
              
                c
              
            
            â¡
            n
            )
          
        
      
    
    {\displaystyle 2^{O(\log ^{c}n)}}
  
. In that case, this reduction does not prove that problem B is NP-hard; this reduction only shows that there is no polynomial time algorithm for B unless there is a quasi-polynomial time algorithm for 3SAT (and thus all of NP). Similarly, there are some problems for which we know quasi-polynomial time algorithms, but no polynomial time algorithm is known. Such problems arise in approximation algorithms; a famous example is the directed Steiner tree problem, for which there is a quasi-polynomial time approximation algorithm achieving an approximation factor of 
  
    
      
        O
        (
        
          log
          
            3
          
        
        â¡
        n
        )
      
    
    {\displaystyle O(\log ^{3}n)}
  
 (n being the number of vertices), but showing the existence of such a polynomial time algorithm is an open problem.
Other computational problems with quasi-polynomial time solutions but no known polynomial time solution include the planted clique problem in which the goal is to find a large clique in the union of a clique and a random graph. Although quasi-polynomially solvable, it has been conjectured that the planted clique problem has no polynomial time solution; this planted clique conjecture has been used as a computational hardness assumption to prove the difficulty of several other problems in computational game theory, property testing, and machine learning.[15]
The complexity class QP consists of all problems that have quasi-polynomial time algorithms. It can be defined in terms of DTIME as follows.[16]


  
    
      
        
          
            QP
          
        
        =
        
          â
          
            c
            â
            
              N
            
          
        
        
          
            DTIME
          
        
        
          (
          
            2
            
              
                log
                
                  c
                
              
              â¡
              n
            
          
          )
        
      
    
    {\displaystyle {\mbox{QP}}=\bigcup _{c\in \mathbb {N} }{\mbox{DTIME}}\left(2^{\log ^{c}n}\right)}
  

Relation to NP-complete problems[edit]
In complexity theory, the unsolved P versus NP problem asks if all problems in NP have polynomial-time algorithms. All the best-known algorithms for NP-complete problems like 3SAT etc. take exponential time. Indeed, it is conjectured for many natural NP-complete problems that they do not have sub-exponential time algorithms. Here "sub-exponential time" is taken to mean the second definition presented below. (On the other hand, many graph problems represented in the natural way by adjacency matrices are solvable in subexponential time simply because the size of the input is the square of the number of vertices.) This conjecture (for the k-SAT problem) is known as the exponential time hypothesis.[17] Since it is conjectured that NP-complete problems do not have quasi-polynomial time algorithms, some inapproximability results in the field of approximation algorithms make the assumption that NP-complete problems do not have quasi-polynomial time algorithms. For example, see the known inapproximability results for the set cover problem.

Sub-exponential time[edit]
The term sub-exponential time is used to express that the running time of some algorithm may grow faster than any polynomial but is still significantly smaller than an exponential. In this sense, problems that have sub-exponential time algorithms are somewhat more tractable than those that only have exponential algorithms. The precise definition of "sub-exponential" is not generally agreed upon,[18] and we list the two most widely used ones below.

First definition[edit]
A problem is said to be sub-exponential time solvable if it can be solved in running times whose logarithms grow smaller than any given polynomial. More precisely, a problem is in sub-exponential time if for every Îµ > 0 there exists an algorithm which solves the problem in time O(2nÎµ). The set of all such problems is the complexity class SUBEXP which can be defined in terms of DTIME as follows.[5][19][20][21]


  
    
      
        
          SUBEXP
        
        =
        
          â
          
            Îµ
            >
            0
          
        
        
          DTIME
        
        
          (
          
            2
            
              
                n
                
                  Îµ
                
              
            
          
          )
        
      
    
    {\displaystyle {\text{SUBEXP}}=\bigcap _{\varepsilon >0}{\text{DTIME}}\left(2^{n^{\varepsilon }}\right)}
  

This notion of sub-exponential is non-uniform in terms of Îµ in the sense that Îµ is not part of the input and each Îµ may have its own algorithm for the problem.

Second definition[edit]
Some authors define sub-exponential time as running times in 2o(n).[17][22][23] This definition allows larger running times than the first definition of sub-exponential time. An example of such a sub-exponential time algorithm is the best-known classical algorithm for integer factorization, the general number field sieve, which runs in time about 
  
    
      
        
          2
          
            
              
                
                  O
                  ~
                
              
            
            (
            
              n
              
                1
                
                  /
                
                3
              
            
            )
          
        
      
    
    {\displaystyle 2^{{\tilde {O}}(n^{1/3})}}
  
, where the length of the input is n. Another example was the graph isomorphism problem, which the best known algorithm from 1982 to 2016 solved in 
  
    
      
        
          2
          
            O
            
              (
              
                
                  n
                  log
                  â¡
                  n
                
              
              )
            
          
        
      
    
    {\displaystyle 2^{O\left({\sqrt {n\log n}}\right)}}
  
. However, at STOC 2016 a quasi-polynomial time algorithm was presented.[24]
It makes a difference whether the algorithm is allowed to be sub-exponential in the size of the instance, the number of vertices, or the number of edges. In parameterized complexity, this difference is made explicit by considering pairs 
  
    
      
        (
        L
        ,
        k
        )
      
    
    {\displaystyle (L,k)}
  
 of decision problems and parameters k. SUBEPT is the class of all parameterized problems that run in time sub-exponential in k and polynomial in the input size n:[25]


  
    
      
        
          SUBEPT
        
        =
        
          DTIME
        
        
          (
          
            
              2
              
                o
                (
                k
                )
              
            
            â
            
              poly
            
            (
            n
            )
          
          )
        
        .
      
    
    {\displaystyle {\text{SUBEPT}}={\text{DTIME}}\left(2^{o(k)}\cdot {\text{poly}}(n)\right).}
  

More precisely, SUBEPT is the class of all parameterized problems 
  
    
      
        (
        L
        ,
        k
        )
      
    
    {\displaystyle (L,k)}
  
 for which there is a computable function 
  
    
      
        f
        :
        
          N
        
        â
        
          N
        
      
    
    {\displaystyle f:\mathbb {N} \to \mathbb {N} }
  
 with 
  
    
      
        f
        â
        o
        (
        k
        )
      
    
    {\displaystyle f\in o(k)}
  
 and an algorithm that decides L in time 
  
    
      
        
          2
          
            f
            (
            k
            )
          
        
        â
        
          poly
        
        (
        n
        )
      
    
    {\displaystyle 2^{f(k)}\cdot {\text{poly}}(n)}
  
.

Exponential time hypothesis[edit]
Main article: Exponential time hypothesis
The exponential time hypothesis (ETH) is that 3SAT, the satisfiability problem of Boolean formulas in conjunctive normal form with, at most, three literals per clause and with n variables, cannot be solved in time 2o(n). More precisely, the hypothesis is that there is some absolute constant c > 0 such that 3SAT cannot be decided in time 2cn by any deterministic Turing machine. With m denoting the number of clauses, ETH is equivalent to the hypothesis that kSAT cannot be solved in time 2o(m) for any integer k â¥ 3.[26] The exponential time hypothesis implies P â  NP.

Exponential time[edit]
An algorithm is said to be exponential time, if T(n) is upper bounded by 2poly(n), where poly(n) is some polynomial in n. More formally, an algorithm is exponential time if T(n) is bounded by O(2nk) for some constant k. Problems which admit exponential time algorithms on a deterministic Turing machine form the complexity class known as EXP.


  
    
      
        
          EXP
        
        =
        
          â
          
            c
            â
            
              N
            
          
        
        
          DTIME
        
        
          (
          
            2
            
              
                n
                
                  c
                
              
            
          
          )
        
      
    
    {\displaystyle {\text{EXP}}=\bigcup _{c\in \mathbb {N} }{\text{DTIME}}\left(2^{n^{c}}\right)}
  

Sometimes, exponential time is used to refer to algorithms that have T(n) = 2O(n), where the exponent is at most a linear function of n. This gives rise to the complexity class E.


  
    
      
        
          E
        
        =
        
          â
          
            c
            â
            
              N
            
          
        
        
          DTIME
        
        
          (
          
            2
            
              c
              n
            
          
          )
        
      
    
    {\displaystyle {\text{E}}=\bigcup _{c\in \mathbb {N} }{\text{DTIME}}\left(2^{cn}\right)}
  

Factorial time[edit]
An algorithm is said to be factorial time if T(n) is upper bounded by the factorial function n!. Factorial time is a subset of exponential time (EXP) because 
  
    
      
        n
        !
        =
        O
        
          (
          
            2
            
              
                n
                
                  1
                  +
                  Ïµ
                
              
            
          
          )
        
      
    
    {\displaystyle n!=O\left(2^{n^{1+\epsilon }}\right)}
  
 for all 
  
    
      
        Ïµ
        >
        0
      
    
    {\displaystyle \epsilon >0}
  
. However, it is not a subset of E.
An example of an algorithm that runs in factorial time is bogosort, a notoriously inefficient sorting algorithm based on trial and error.  Bogosort sorts a list of n items by repeatedly shuffling the list until it is found to be sorted. In the average case, each pass through the bogosort algorithm will examine one of the n! orderings of the n items.  If the items are distinct, only one such ordering is sorted. Bogosort shares patrimony with the infinite monkey theorem.

Double exponential time[edit]
An algorithm is said to be double exponential time if T(n) is upper bounded by 22poly(n), where poly(n) is some polynomial in n. Such algorithms belong to the complexity class 2-EXPTIME.


  
    
      
        
          
            2-EXPTIME
          
        
        =
        
          â
          
            c
            â
            
              N
            
          
        
        
          
            DTIME
          
        
        
          (
          
            2
            
              
                2
                
                  
                    n
                    
                      c
                    
                  
                
              
            
          
          )
        
      
    
    {\displaystyle {\mbox{2-EXPTIME}}=\bigcup _{c\in \mathbb {N} }{\mbox{DTIME}}\left(2^{2^{n^{c}}}\right)}
  

Well-known double exponential time algorithms include:

Decision procedures for Presburger arithmetic
Computing a GrÃ¶bner basis (in the worst case[27])
Quantifier elimination on real closed fields takes at least double exponential time,[28] and can be done in this time.[29]
See also[edit]
L-notation
Space complexity
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ Jump up to: a b .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Sipser, Michael (2006). Introduction to the Theory of Computation. Course Technology Inc. ISBNÂ 0-619-21764-2.

^ Mehlhorn, Kurt; Naher, Stefan (1990). "Bounded ordered dictionaries in O(log log N) time and O(n) space". Information Processing Letters. 35 (4): 183â189. doi:10.1016/0020-0190(90)90022-P.

^ Tao, Terence (2010). "1.11 The AKS primality test". An epsilon of room, II: Pages from year three of a mathematical blog. Graduate Studies in Mathematics. Vol.Â 117. Providence, RI: American Mathematical Society. pp.Â 82â86. doi:10.1090/gsm/117. ISBNÂ 978-0-8218-5280-4. MRÂ 2780010.

^ Lenstra, H. W. Jr.; Pomerance, Carl (2019). "Primality testing with Gaussian periods" (PDF). Journal of the European Mathematical Society. 21 (4): 1229â1269. doi:10.4171/JEMS/861. MRÂ 3941463. S2CIDÂ 127807021.

^ Jump up to: a b Babai, LÃ¡szlÃ³; Fortnow, Lance; Nisan, N.; Wigderson, Avi (1993). "BPP has subexponential time simulations unless EXPTIME has publishable proofs". Computational Complexity. Berlin, New York: Springer-Verlag. 3 (4): 307â318. doi:10.1007/BF01275486. S2CIDÂ 14802332.

^ Bradford, Phillip G.; Rawlins, Gregory J. E.; Shannon, Gregory E. (1998). "Efficient matrix chain ordering in polylog time". SIAM Journal on Computing. 27 (2): 466â490. doi:10.1137/S0097539794270698. MRÂ 1616556.

^ Holm, Jacob; Rotenberg, Eva (2020). "Fully-dynamic planarity testing in polylogarithmic time".  In Makarychev, Konstantin; Makarychev, Yury; Tulsiani, Madhur; Kamath, Gautam; Chuzhoy, Julia (eds.). Proceedings of the 52nd Annual ACM SIGACT Symposium on Theory of Computing, STOC 2020, Chicago, IL, USA, June 22-26, 2020. Association for Computing Machinery. pp.Â 167â180. arXiv:1911.03449. doi:10.1145/3357713.3384249.

^ Kumar, Ravi; Rubinfeld, Ronitt (2003). "Sublinear time algorithms" (PDF). SIGACT News. 34 (4): 57â67. doi:10.1145/954092.954103. S2CIDÂ 65359.

^ Naik, Ashish V.; Regan, Kenneth W.; Sivakumar, D. (1995). "On quasilinear-time complexity theory" (PDF).  Theoretical Computer Science. 148 (2): 325â349. doi:10.1016/0304-3975(95)00031-Q. MRÂ 1355592.

^ Sedgewick, Robert; Wayne, Kevin (2011). Algorithms (4thÂ ed.). Pearson Education. p.Â 186.

^ Papadimitriou, Christos H. (1994). Computational complexity. Reading, Mass.: Addison-Wesley. ISBNÂ 0-201-53082-1.

^ Cobham, Alan (1965). "The intrinsic computational difficulty of functions". Proc. Logic, Methodology, and Philosophy of Science II. North Holland.

^ GrÃ¶tschel, Martin; LÃ¡szlÃ³ LovÃ¡sz; Alexander Schrijver (1988). "Complexity, Oracles, and Numerical Computation". Geometric Algorithms and Combinatorial Optimization. Springer. ISBNÂ 0-387-13624-X.

^ Schrijver, Alexander (2003). "Preliminaries on algorithms and Complexity". Combinatorial Optimization: Polyhedra and Efficiency. Vol.Â 1. Springer. ISBNÂ 3-540-44389-4.

^ Braverman, Mark; Kun-Ko, Young; Rubinstein, Aviad; Weinstein, Omri (2017). "ETH hardness for densest-k-subgraph with perfect completeness".  In Klein, Philip N. (ed.). Proceedings of the Twenty-Eighth Annual ACM-SIAM Symposium on Discrete Algorithms, SODA 2017, Barcelona, Spain, Hotel Porta Fira, January 16-19. Society for Industrial and Applied Mathematics. pp.Â 1326â1341. arXiv:1504.08352. doi:10.1137/1.9781611974782.86. MRÂ 3627815.

^ Complexity Zoo: Class QP: Quasipolynomial-Time

^ Jump up to: a b Impagliazzo, Russell; Paturi, Ramamohan (2001). "On the complexity of k-SAT" (PDF). Journal of Computer and System Sciences. 62 (2): 367â375. doi:10.1006/jcss.2000.1727. MRÂ 1820597.

^ Aaronson, Scott (5 April 2009). "A not-quite-exponential dilemma". Shtetl-Optimized. Retrieved 2 December 2009.

^ Complexity Zoo: Class SUBEXP: Deterministic Subexponential-Time

^ Moser, P. (2003). "Baire's Categories on Small Complexity Classes".  In Andrzej Lingas; Bengt J. Nilsson (eds.). Fundamentals of Computation Theory: 14th International Symposium, FCT 2003, MalmÃ¶, Sweden, August 12-15, 2003, Proceedings. Lecture Notes in Computer Science. Vol.Â 2751. Berlin, New York: Springer-Verlag. pp.Â 333â342. doi:10.1007/978-3-540-45077-1_31. ISBNÂ 978-3-540-40543-6. ISSNÂ 0302-9743.

^ Miltersen, P.B. (2001). "Derandomizing Complexity Classes". Handbook of Randomized Computing. Combinatorial Optimization. Kluwer Academic Pub. 9: 843. doi:10.1007/978-1-4615-0013-1_19. ISBNÂ 978-1-4613-4886-3.

^ Kuperberg, Greg (2005). "A Subexponential-Time Quantum Algorithm for the Dihedral Hidden Subgroup Problem". SIAM Journal on Computing. Philadelphia. 35 (1): 188. arXiv:quant-ph/0302112. doi:10.1137/s0097539703436345. ISSNÂ 1095-7111. S2CIDÂ 15965140.

^ Oded Regev (2004). "A Subexponential Time Algorithm for the Dihedral Hidden Subgroup Problem with Polynomial Space". arXiv:quant-ph/0406151v1.

^ Grohe, Martin; Neuen, Daniel (2021). "Recent Advances on the Graph Isomorphism Problem". arXiv:2011.01366. {{cite journal}}: Cite journal requires |journal= (help)

^ Flum, JÃ¶rg; Grohe, Martin (2006). Parameterized Complexity Theory. Springer. p.Â 417. ISBNÂ 978-3-540-29952-3.

^ Impagliazzo, R.; Paturi, R.; Zane, F. (2001). "Which problems have strongly exponential complexity?". Journal of Computer and System Sciences. 63 (4): 512â530. doi:10.1006/jcss.2001.1774.

^ Mayr, Ernst W.; Meyer, Albert R. (1982). "The complexity of the word problems for commutative semigroups and polynomial ideals". Advances in Mathematics. 46 (3): 305â329. doi:10.1016/0001-8708(82)90048-2. MRÂ 0683204.

^ Davenport, James H.; Heintz, Joos (1988). "Real quantifier elimination is doubly exponential". Journal of Symbolic Computation. 5 (1â2): 29â35. doi:10.1016/S0747-7171(88)80004-X. MRÂ 0949111.

^ Collins, George E. (1975). "Quantifier elimination for real closed fields by cylindrical algebraic decomposition".  In Brakhage, H. (ed.). Automata Theory and Formal Languages: 2nd GI Conference, Kaiserslautern, May 20â23, 1975. Lecture Notes in Computer Science. Vol.Â 33. Springer. pp.Â 134â183. doi:10.1007/3-540-07407-4_17. MRÂ 0403962.








<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Time_complexity&oldid=1066594836"
		Categories: Analysis of algorithmsComputational complexity theoryComputational resourcesTimeHidden categories: CS1 errors: missing periodicalArticles with short descriptionShort description matches WikidataUse dmy dates from September 2019
	
