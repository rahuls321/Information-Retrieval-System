
Title:
Machine epsilon
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Machine epsilon or machine precision gives an upper bound on the relative approximation error due to rounding in floating point arithmetic. This value characterizes computer arithmetic in the field of numerical analysis, and by extension in the subject of computational science.  The quantity is also called macheps or unit roundoff, and it has the symbols Greek epsilon 
  
    
      
        Îµ
      
    
    {\displaystyle \varepsilon }
  
 or bold Roman u, respectively.

Contents

1 Values for standard hardware floating point arithmetics
2 Formal definition
3 Arithmetic model
4 Variant definitions
5 How to determine machine epsilon

5.1 Approximation


6 See also
7 Notes and references
8 External links



Values for standard hardware floating point arithmetics[edit]
The following values of machine epsilon apply to standard floating point formats:



IEEE 754 - 2008
Common name
C++ data type
Base 
  
    
      
        b
      
    
    {\displaystyle b}
  

Precision 
  
    
      
        p
      
    
    {\displaystyle p}
  

Machine epsilon[a] 
  
    
      
        
          b
          
            â
            (
            p
            â
            1
            )
          
        
        
          /
        
        2
      
    
    {\displaystyle b^{-(p-1)}/2}
  

Machine epsilon[b] 
  
    
      
        
          b
          
            â
            (
            p
            â
            1
            )
          
        
      
    
    {\displaystyle b^{-(p-1)}}
  



binary16
half precision
N/A
2
11 (one bit is implicit)
2â11 â 4.88e-04
2â10 â 9.77e-04


binary32
single precision
float
2
24 (one bit is implicit)
2â24 â 5.96e-08
2â23 â 1.19e-07


binary64
double precision
double
2
53 (one bit is implicit)
2â53 â 1.11e-16
2â52 â 2.22e-16



extended precision, long double
_float80[1]
2
64
2â64 â 5.42e-20
2â63 â 1.08e-19


binary128
quad(ruple) precision
_float128[1]
2
113 (one bit is implicit)
2â113 â 9.63e-35
2â112 â 1.93e-34


decimal32
single precision decimal
_Decimal32[2]
10
7
5 Ã 10â7
10â6


decimal64
double precision decimal
_Decimal64[2]
10
16
5 Ã 10â16
10â15


decimal128
quad(ruple) precision decimal
_Decimal128[2]
10
34
5 Ã 10â34
10â33

.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^  According to Prof. Demmel, LAPACK, Scilab

^  According to Prof. Higham; ISO C standard; Ada, C, C++ and Python language constants; Mathematica, MATLAB and Octave; various textbooks - see below for the latter definition


Formal definition[edit]
Rounding is a procedure for choosing the representation of a real number in a floating point number system.  For a number system and a rounding procedure, machine epsilon is the maximum relative error of the chosen rounding procedure.
Some background is needed to determine a value from this definition. A floating point number system is characterized by a radix which is also called the base, 
  
    
      
        b
      
    
    {\displaystyle b}
  
, and by the precision 
  
    
      
        p
      
    
    {\displaystyle p}
  
, i.e. the number of radix 
  
    
      
        b
      
    
    {\displaystyle b}
  
 digits of the significand (including any leading implicit bit). All the numbers with the same exponent, 
  
    
      
        e
      
    
    {\displaystyle e}
  
, have the spacing, 
  
    
      
        
          b
          
            e
            â
            (
            p
            â
            1
            )
          
        
      
    
    {\displaystyle b^{e-(p-1)}}
  
. The spacing changes at the numbers that are perfect powers of 
  
    
      
        b
      
    
    {\displaystyle b}
  
; the spacing on the side of larger magnitude is 
  
    
      
        b
      
    
    {\displaystyle b}
  
 times larger than the spacing on the side of smaller magnitude.
Since machine epsilon is a bound for relative error, it suffices to consider numbers with exponent 
  
    
      
        e
        =
        0
      
    
    {\displaystyle e=0}
  
. It also suffices to consider positive numbers. For the usual round-to-nearest kind of rounding, the absolute rounding error is at most half the spacing, or 
  
    
      
        
          b
          
            â
            (
            p
            â
            1
            )
          
        
        
          /
        
        2
      
    
    {\displaystyle b^{-(p-1)}/2}
  
. This value is the biggest possible numerator for the relative error. The denominator in the relative error is the number being rounded, which should be as small as possible to make the relative error large. The worst relative error therefore happens when rounding is applied to numbers of the form 
  
    
      
        1
        +
        a
      
    
    {\displaystyle 1+a}
  
 where 
  
    
      
        a
      
    
    {\displaystyle a}
  
 is between 
  
    
      
        0
      
    
    {\displaystyle 0}
  
 and 
  
    
      
        
          b
          
            â
            (
            p
            â
            1
            )
          
        
        
          /
        
        2
      
    
    {\displaystyle b^{-(p-1)}/2}
  
. All these numbers round to 
  
    
      
        1
      
    
    {\displaystyle 1}
  
 with relative error 
  
    
      
        a
        
          /
        
        (
        1
        +
        a
        )
      
    
    {\displaystyle a/(1+a)}
  
. The maximum occurs when 
  
    
      
        a
      
    
    {\displaystyle a}
  
 is at the upper end of its range. The 
  
    
      
        1
        +
        a
      
    
    {\displaystyle 1+a}
  
 in the denominator is negligible compared to the numerator, so it is left off for expediency, and just 
  
    
      
        
          b
          
            â
            (
            p
            â
            1
            )
          
        
        
          /
        
        2
      
    
    {\displaystyle b^{-(p-1)}/2}
  
 is taken as machine epsilon. As has been shown here, the relative error is worst for numbers that round to 
  
    
      
        1
      
    
    {\displaystyle 1}
  
, so machine epsilon also is called unit roundoff meaning roughly "the maximum error that can occur when rounding to the unit value".
Thus, the maximum spacing between a normalised floating point number, 
  
    
      
        x
      
    
    {\displaystyle x}
  
, and an adjacent normalised number is 
  
    
      
        2
        Îµ
        
          |
        
        x
        
          |
        
      
    
    {\displaystyle 2\varepsilon |x|}
  
.[3]

Arithmetic model[edit]
Numerical analysis uses machine epsilon to study the effects of rounding error. The actual errors of machine arithmetic are far too complicated to be studied directly, so instead, the following simple model is used. The IEEE arithmetic standard says all floating point operations are done as if it were possible to perform the infinite-precision operation, and then, the result is rounded to a floating point number. Suppose (1) 
  
    
      
        x
      
    
    {\displaystyle x}
  
, 
  
    
      
        y
      
    
    {\displaystyle y}
  
 are floating point numbers, (2) 
  
    
      
        â
      
    
    {\displaystyle \bullet }
  
 is an arithmetic operation on floating point numbers such as addition or multiplication, and (3) 
  
    
      
        â
      
    
    {\displaystyle \circ }
  
 is the infinite precision operation. According to the standard, the computer calculates:


  
    
      
        x
        â
        y
        =
        
          
            round
          
        
        (
        x
        â
        y
        )
      
    
    {\displaystyle x\bullet y={\mbox{round}}(x\circ y)}
  

By the meaning of machine epsilon, the relative error of the rounding is at most machine epsilon in magnitude, so:


  
    
      
        x
        â
        y
        =
        (
        x
        â
        y
        )
        (
        1
        +
        z
        )
      
    
    {\displaystyle x\bullet y=(x\circ y)(1+z)}
  

where 
  
    
      
        z
      
    
    {\displaystyle z}
  
 in absolute magnitude is at most 
  
    
      
        Îµ
      
    
    {\displaystyle \varepsilon }
  
 or u. The books by Demmel and Higham in the references can be consulted to see how this model is used to analyze the errors of, say, Gaussian elimination.

Variant definitions[edit]
The IEEE standard does not define the terms machine epsilon and unit roundoff, so differing definitions of these terms are in use, which can cause some confusion.
The definition given here for machine epsilon is the one used by Prof. James Demmel in lecture scripts,[4] the LAPACK linear algebra package,[5] numerics research papers[6] and some scientific computing software.[7]  Most numerical analysts use the words machine epsilon and unit roundoff interchangeably with this meaning.
The following different definition is much more widespread outside academia: Machine epsilon is defined as the difference between 1 and the next larger floating point number.  By this definition, 
  
    
      
        Îµ
      
    
    {\displaystyle \varepsilon }
  
 equals the value of the unit in the last place relative to 1, i.e. 
  
    
      
        
          b
          
            â
            (
            p
            â
            1
            )
          
        
      
    
    {\displaystyle b^{-(p-1)}}
  
,[8] and the unit roundoff is u
  
    
      
        
        =
        Îµ
        
          /
        
        2
      
    
    {\displaystyle \,=\varepsilon /2}
  
, assuming round-to-nearest mode.  The prevalence of this definition is rooted in its use in the ISO C Standard for constants relating to floating-point types[9][10] and corresponding constants in other programming languages.[11][12]  It is also widely used in scientific computing software,[13][14][15] and in the numerics and computing literature.[16][17][18][19]

How to determine machine epsilon[edit]
Where standard libraries do not provide precomputed values (as <float.h> does with FLT_EPSILON, DBL_EPSILON and LDBL_EPSILON for C and <limits> does with std::numeric_limits<T>::epsilon() in C++), the best way to determine machine epsilon is to refer to the table, above, and use the appropriate power formula.  Computing machine epsilon is often given as a textbook exercise. The following examples compute machine epsilon in the sense of the spacing of the floating point numbers at 1 rather than in the sense of the unit roundoff.
Note that results depend on the particular floating-point format used, such as float, double, long double, or similar as supported by the programming language, the compiler, and the runtime library for the actual platform.
Some formats supported by the processor might not be supported by the chosen compiler and operating system. Other formats might be emulated by the runtime library, including arbitrary-precision arithmetic available in some languages and libraries.
In a strict sense the term machine epsilon means the 
  
    
      
        1
        +
        Îµ
      
    
    {\displaystyle 1+\varepsilon }
  
 accuracy directly supported by the processor (or coprocessor), not some 
  
    
      
        1
        +
        Îµ
      
    
    {\displaystyle 1+\varepsilon }
  
 accuracy supported by a specific compiler for a specific operating system, unless it's known to use the best format.
IEEE 754 floating-point formats have the property that, when reinterpreted as a two's complement integer of the same width, they monotonically increase over positive values and monotonically decrease over negative values (see the binary representation of 32 bit floats). They also have the property that 
  
    
      
        0
        <
        
          |
        
        f
        (
        x
        )
        
          |
        
        <
        â
      
    
    {\displaystyle 0<|f(x)|<\infty }
  
, and 
  
    
      
        
          |
        
        f
        (
        x
        +
        1
        )
        â
        f
        (
        x
        )
        
          |
        
        â¥
        
          |
        
        f
        (
        x
        )
        â
        f
        (
        x
        â
        1
        )
        
          |
        
      
    
    {\displaystyle |f(x+1)-f(x)|\geq |f(x)-f(x-1)|}
  
 (where 
  
    
      
        f
        (
        x
        )
      
    
    {\displaystyle f(x)}
  
 is the aforementioned integer reinterpretation of 
  
    
      
        x
      
    
    {\displaystyle x}
  
). In languages that allow type punning and always use IEEE 754-1985, we can exploit this to compute a machine epsilon in constant time. For example, in C:

typedef union {
  long long i64;
  double d64;
} dbl_64;
double machine_eps (double value)
{
    dbl_64 s;
    s.d64 = value;
    s.i64++;
    return s.d64 - value;
}

Example on Python:

def machineEpsilon(func=float):
    machine_epsilon = func(1)
    while func(1)+machine_epsilon != func(1):
        machine_epsilon_last = machine_epsilon
        machine_epsilon = func(machine_epsilon) / func(2)
    return machine_epsilon_last

This will give a result of the same sign as value. If a positive result is always desired, the return statement of machine_eps can be replaced with:

    return (s.i64 < 0 ? value - s.d64 : s.d64 - value);

64-bit doubles give 2.220446e-16, which is 2â52 as expected.

Approximation[edit]
The following simple algorithm can be used to approximate[clarification needed] the machine epsilon, to within a factor of two (one order of magnitude) of its true value, using a linear search.

epsilon = 1.0;

while (1.0 + 0.5 * epsilon) â  1.0:
    epsilon = 0.5 * epsilon

See also[edit]
Floating point, general discussion of accuracy issues in floating point arithmetic
Unit in the last place (ULP)
Notes and references[edit]


^ Jump up to: a b Floating Types - Using the GNU Compiler Collection (GCC)

^ Jump up to: a b c Decimal Float - Using the GNU Compiler Collection (GCC)

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Higham, Nicholas (2002). Accuracy and Stability of Numerical Algorithms (2 ed). SIAM. p.Â 37.

^ "Basic Issues in Floating Point Arithmetic and Error Analysis". 21 Oct 1999. Retrieved 11 Apr 2013.

^ "LAPACK Users' Guide Third Edition". 22 August 1999. Retrieved 9 March 2012.

^ "David Goldberg: What Every Computer Scientist Should Know About Floating-Point Arithmetic, ACM Computing Surveys, Vol 23, No 1, March 1991" (PDF). Retrieved 11 Apr 2013.

^ "Scilab documentation - number_properties - determine floating-point parameters". Retrieved 11 Apr 2013.

^ note that here p is defined as the precision, i.e. the total number of bits in the significand including implicit leading bit, as used in the table above

^ Jones, Derek M. (2009). The New C Standard - An Economic and Cultural Commentary (PDF). p.Â 377.

^ "float.h reference at cplusplus.com". Retrieved 11 Apr 2013.

^ "std::numeric_limits reference at cplusplus.com". Retrieved 11 Apr 2013.

^ "Python documentation - System-specific parameters and functions". Retrieved 11 Apr 2013.

^ "Mathematica documentation: $MachineEpsilon". Retrieved 11 Apr 2013.

^ "Matlab documentation - eps - Floating-point relative accuracy". Archived from the original on 2013-08-07. Retrieved 11 Apr 2013.

^ "Octave documentation - eps function". Retrieved 11 Apr 2013.

^ Higham, Nicholas (2002). Accuracy and Stability of Numerical Algorithms (2 ed). SIAM. pp.Â 27â28.

^ Quarteroni, Alfio; Sacco, Riccardo; Saleri, Fausto (2000). Numerical Mathematics (PDF). Springer. p.Â 49. ISBNÂ 0-387-98959-5. Archived from the original (PDF) on 2017-11-14. Retrieved 2013-04-11.

^ Press, William H.; Teukolsky, Saul A.; Vetterling, William T.; Flannery, Brian P. Numerical Recipes. p.Â 890.

^ Engeln-MÃ¼llges, Gisela; Reutter, Fritz (1996). Numerik-Algorithmen. p.Â 6. ISBNÂ 3-18-401539-4.


.mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li{margin-left:0;padding-left:3.2em;text-indent:-3.2em}.mw-parser-output .refbegin-hanging-indents ul,.mw-parser-output .refbegin-hanging-indents ul li{list-style:none}@media(max-width:720px){.mw-parser-output .refbegin-hanging-indents>ul>li{padding-left:1.6em;text-indent:-1.6em}}.mw-parser-output .refbegin-columns{margin-top:0.3em}.mw-parser-output .refbegin-columns ul{margin-top:0}.mw-parser-output .refbegin-columns li{page-break-inside:avoid;break-inside:avoid-column}
Anderson, E.; LAPACK Users' Guide, Society for Industrial and Applied Mathematics (SIAM), Philadelphia, PA, third edition, 1999.
Cody, William J.; MACHAR: A Soubroutine to Dynamically Determine Machine Parameters, ACM Transactions on Mathematical Software, Vol. 14(4), 1988, 303-311.
Besset, Didier H.; Object-Oriented Implementation of Numerical Methods, Morgan & Kaufmann, San Francisco, CA, 2000.
Demmel, James W., Applied Numerical Linear Algebra, Society for Industrial and Applied Mathematics (SIAM), Philadelphia, PA, 1997.
Higham, Nicholas J.; Accuracy and Stability of Numerical Algorithms, Society for Industrial and Applied Mathematics (SIAM), Philadelphia, PA, second edition, 2002.
Press, William H.; Teukolsky, Saul A.; Vetterling, William T.; and Flannery, Brian P.; Numerical Recipes in Fortran 77, 2nd ed., Chap. 20.2, pp.Â 881â886
Forsythe, George E.; Malcolm, Michael A.; Moler, Cleve B.; "Computer Methods for Mathematical Computations", Prentice-Hall, ISBNÂ 0-13-165332-6, 1977

External links[edit]
MACHAR, a routine (in C and Fortran) to "dynamically compute machine constants" (ACM algorithm 722)
Diagnosing floating point calculations precision, Implementation of MACHAR in Component Pascal and Oberon based on the Fortran 77 version of MACHAR published in Numerical Recipes (Press et al., 1992).




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Machine_epsilon&oldid=1064661487"
		Categories: Computer arithmeticHidden categories: Wikipedia articles needing clarification from March 2021Articles with example C code
	
