
Title:
Graph (abstract data type)
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		A request that this article title be changedÂ to Graph (data type) is under discussion.  Please do not move this article until the discussion is closed.
  A directed graph with three vertices (blue circles) and three edges (black arrows).
In computer science, a graph is an abstract data type that is meant to implement the undirected graph and directed graph concepts from the field of graph theory within mathematics.
A graph data structure consists of a finite (and possibly mutable) set of vertices (also called nodes or points), together with a set of unordered pairs of these vertices for an undirected graph or a set of ordered pairs for a directed graph. These pairs are known as edges (also called links or lines), and for a directed graph are also known as edges but also sometimes arrows or arcs. The vertices may be part of the graph structure, or may be external entities represented by integer indices or references.
A graph data structure may also associate to each edge some edge value, such as a symbolic label or a numeric attribute (cost, capacity, length, etc.).

Contents

1 Operations
2 Common Data Structures for Graph Representation
3 Parallel representations

3.1 Shared memory
3.2 Distributed memory


4 Compressed representations
5 See also
6 References
7 External links



Operations[edit]
The basic operations provided by a graph data structure G usually include:[1]

.mw-parser-output .monospaced{font-family:monospace,monospace}adjacent(G, x, y): tests whether there is an edge from the vertex x to the vertex y;
neighbors(G, x): lists all vertices y such that there is an edge from the vertex x to the vertex y;
add_vertex(G, x): adds the vertex x, if it is not there;
remove_vertex(G, x): removes the vertex x, if it is there;
add_edge(G, x, y): adds the edge from the vertex x to the vertex y, if it is not there;
remove_edge(G, x, y): removes the edge from the vertex x to the vertex y, if it is there;
get_vertex_value(G, x): returns the value associated with the vertex x;
set_vertex_value(G, x, v): sets the value associated with the vertex x to v.
Structures that associate values to the edges usually also provide:[1]

get_edge_value(G, x, y): returns the value associated with the edge (x, y);
set_edge_value(G, x, y, v): sets the value associated with the edge (x, y) to v.
Common Data Structures for Graph Representation[edit]
Adjacency list[2]
Vertices are stored as records or objects, and every vertex stores a list of adjacent vertices. This data structure allows the storage of additional data on the vertices. Additional data can be stored if edges are also stored as objects, in which case each vertex stores its incident edges and each edge stores its incident vertices.
Adjacency matrix[3]
A two-dimensional matrix, in which the rows represent source vertices and columns represent destination vertices. Data on edges and vertices must be stored externally. Only the cost for one edge can be stored between each pair of vertices.
Incidence matrix[4]
A two-dimensional matrix, in which the rows represent the vertices and columns represent the edges. The entries indicate the incidence relation between the vertex at a row and edge at a column.
The following table gives the time complexity cost of performing various operations on graphs, for each of these representations, with |V| the number of vertices and |E| the number of edges.[citation needed] In the matrix representations, the entries encode the cost of following an edge. The cost of edges that are not present are assumed to be â.






Adjacency list

Adjacency matrix

Incidence matrix


Store graph


  
    
      
        O
        (
        
          |
        
        V
        
          |
        
        +
        
          |
        
        E
        
          |
        
        )
      
    
    {\displaystyle O(|V|+|E|)}
  



  
    
      
        O
        (
        
          |
        
        V
        
          
            |
          
          
            2
          
        
        )
      
    
    {\displaystyle O(|V|^{2})}
  



  
    
      
        O
        (
        
          |
        
        V
        
          |
        
        â
        
          |
        
        E
        
          |
        
        )
      
    
    {\displaystyle O(|V|\cdot |E|)}
  



Add vertex


  
    
      
        O
        (
        1
        )
      
    
    {\displaystyle O(1)}
  



  
    
      
        O
        (
        
          |
        
        V
        
          
            |
          
          
            2
          
        
        )
      
    
    {\displaystyle O(|V|^{2})}
  



  
    
      
        O
        (
        
          |
        
        V
        
          |
        
        â
        
          |
        
        E
        
          |
        
        )
      
    
    {\displaystyle O(|V|\cdot |E|)}
  



Add edge


  
    
      
        O
        (
        1
        )
      
    
    {\displaystyle O(1)}
  



  
    
      
        O
        (
        1
        )
      
    
    {\displaystyle O(1)}
  



  
    
      
        O
        (
        
          |
        
        V
        
          |
        
        â
        
          |
        
        E
        
          |
        
        )
      
    
    {\displaystyle O(|V|\cdot |E|)}
  



Remove vertex


  
    
      
        O
        (
        
          |
        
        E
        
          |
        
        )
      
    
    {\displaystyle O(|E|)}
  



  
    
      
        O
        (
        
          |
        
        V
        
          
            |
          
          
            2
          
        
        )
      
    
    {\displaystyle O(|V|^{2})}
  



  
    
      
        O
        (
        
          |
        
        V
        
          |
        
        â
        
          |
        
        E
        
          |
        
        )
      
    
    {\displaystyle O(|V|\cdot |E|)}
  



Remove edge


  
    
      
        O
        (
        
          |
        
        V
        
          |
        
        )
      
    
    {\displaystyle O(|V|)}
  



  
    
      
        O
        (
        1
        )
      
    
    {\displaystyle O(1)}
  



  
    
      
        O
        (
        
          |
        
        V
        
          |
        
        â
        
          |
        
        E
        
          |
        
        )
      
    
    {\displaystyle O(|V|\cdot |E|)}
  



Are vertices x and y adjacent (assuming that their storage positions are known)?


  
    
      
        O
        (
        
          |
        
        V
        
          |
        
        )
      
    
    {\displaystyle O(|V|)}
  



  
    
      
        O
        (
        1
        )
      
    
    {\displaystyle O(1)}
  



  
    
      
        O
        (
        
          |
        
        E
        
          |
        
        )
      
    
    {\displaystyle O(|E|)}
  



Remarks

Slow to remove vertices and edges, because it needs to find all vertices or edges

Slow to add or remove vertices, because matrix must be resized/copied

Slow to add or remove vertices and edges, because matrix must be resized/copied

Adjacency lists are generally preferred for the representation of sparse graphs, while an adjacency matrix is preferred if the graph is dense; that is, the number of edges |E| is close to the number of vertices squared, |V|2, or if one must be able to quickly look up if there is an edge connecting two vertices.[5][6]

Parallel representations[edit]
The parallelization of graph problems faces significant challenges: Data-driven computations, unstructured problems, poor locality and high data access to computation ratio.[7][8] The graph representation used for parallel architectures plays a significant role in facing those challenges. Poorly chosen representations may unnecessarily drive up the communication cost of the algorithm, which will decrease its scalability. In the following, shared and distributed memory architectures are considered.

Shared memory[edit]
In the case of a shared memory model, the graph representations used for parallel processing are the same as in the sequential case,[9] since parallel read-only access to the graph representation (e.g. an adjacency list) is efficient in shared memory.

Distributed memory[edit]
In the distributed memory model, the usual approach is to partition the vertex set 
  
    
      
        V
      
    
    {\displaystyle V}
  
 of the graph into 
  
    
      
        p
      
    
    {\displaystyle p}
  
 sets 
  
    
      
        
          V
          
            0
          
        
        ,
        â¦
        ,
        
          V
          
            p
            â
            1
          
        
      
    
    {\displaystyle V_{0},\dots ,V_{p-1}}
  
. Here, 
  
    
      
        p
      
    
    {\displaystyle p}
  
 is the amount of available processing elements (PE). The vertex set partitions are then distributed to the PEs with matching index, additionally to the corresponding edges. Every PE has its own subgraph representation, where edges with an endpoint in another partition require special attention. For standard communication interfaces like MPI, the ID of the PE owning the other endpoint has to be identifiable. During computation in a distributed graph algorithms, passing information along these edges implies communication.[9]
Partitioning the graph needs to be done carefully - there is a trade-off between low communication and even size partitioning[10] But partitioning a graph is a NP-hard problem, so it is not feasible to calculate them. Instead, the following heuristics are used.
1D partitioning: Every processor gets 
  
    
      
        n
        
          /
        
        p
      
    
    {\displaystyle n/p}
  
 vertices and the corresponding outgoing edges. This can be understood as a row-wise or column-wise decomposition of the adjacency matrix. For algorithms operating on this representation, this requires an All-to-All communication step as well as 
  
    
      
        
          
            O
          
        
        (
        m
        )
      
    
    {\displaystyle {\mathcal {O}}(m)}
  
 message buffer sizes, as each PE potentially has outgoing edges to every other PE.[11]
2D partitioning: Every processor gets a submatrix of the adjacency matrix. Assume the processors are aligned in a rectangle 
  
    
      
        p
        =
        
          p
          
            r
          
        
        Ã
        
          p
          
            c
          
        
      
    
    {\displaystyle p=p_{r}\times p_{c}}
  
, where 
  
    
      
        
          p
          
            r
          
        
      
    
    {\displaystyle p_{r}}
  
 and 
  
    
      
        
          p
          
            c
          
        
      
    
    {\displaystyle p_{c}}
  
 are the amount of processing elements in each row and column, respectively. Then each processor gets a submatrix of the adjacency matrix of dimension 
  
    
      
        (
        n
        
          /
        
        
          p
          
            r
          
        
        )
        Ã
        (
        n
        
          /
        
        
          p
          
            c
          
        
        )
      
    
    {\displaystyle (n/p_{r})\times (n/p_{c})}
  
. This can be visualized as a checkerboard pattern in a matrix.[11] Therefore, each processing unit can only have outgoing edges to PEs in the same row and column. This bounds the amount of communication partners for each PE to 
  
    
      
        
          p
          
            r
          
        
        +
        
          p
          
            c
          
        
        â
        1
      
    
    {\displaystyle p_{r}+p_{c}-1}
  
 out of 
  
    
      
        p
        =
        
          p
          
            r
          
        
        Ã
        
          p
          
            c
          
        
      
    
    {\displaystyle p=p_{r}\times p_{c}}
  
 possible ones.

Compressed representations[edit]
Graphs with trillions of edges occur in machine learning, social network analysis, and other areas. Compressed graph representations have been developed to reduce I/O and memory requirements. General techniques such as Huffman coding are applicable, but the adjacency list or adjacency matrix can be processed in specific ways to increase efficiency.[12]

See also[edit]
Graph traversal for graph walking strategies
Graph database for graph (data structure) persistency
Graph rewriting for rule based transformations of graphs (graph data structures)
Graph drawing software for software, systems, and providers of systems for drawing graphs
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ Jump up to: a b See, e.g. Goodrich & Tamassia (2015), Section 13.1.2: Operations on graphs, p. 360. For a more detailed set of operations, see .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Mehlhorn, K.; NÃ¤her, S. (1999). "Chapter 6: Graphs and their data structures". LEDA: A platform for combinatorial and geometric computing (PDF). Cambridge University Press. pp.Â 240â282.

^ Cormen et al. (2001), pp. 528â529; Goodrich & Tamassia (2015), pp. 361-362.

^ Cormen et al. (2001), pp. 529â530; Goodrich & Tamassia (2015), p.Â 363.

^ Cormen et al. (2001), Exercise 22.1-7, p.Â 531.

^ Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; Stein, Clifford (2001). "Section 22.1: Representations of graphs". Introduction to Algorithms (SecondÂ ed.). MIT Press and McGraw-Hill. pp.Â 527â531. ISBNÂ 0-262-03293-7.

^ Goodrich, Michael T.; Tamassia, Roberto (2015). "Section 13.1: Graph terminology and representations". Algorithm Design and Applications. Wiley. pp.Â 355â364. ISBNÂ 978-1-118-33591-8.

^ Bader, David; Meyerhenke, Henning; Sanders, Peter; Wagner, Dorothea (January 2013). Graph Partitioning and Graph Clustering. Contemporary Mathematics. Vol.Â 588. American Mathematical Society. doi:10.1090/conm/588/11709. ISBNÂ 978-0-8218-9038-7.

^ Lumsdaine, Andrew; Gregor, Douglas; Hendrickson, Bruce; Berry, Jonathan (March 2007). "Challenges in Parallel Graph Processing". Parallel Processing Letters. 17 (1): 5â20. doi:10.1142/s0129626407002843. ISSNÂ 0129-6264.

^ Jump up to: a b Sanders, Peter; Mehlhorn, Kurt; Dietzfelbinger, Martin; Dementiev, Roman (2019). Sequential and Parallel Algorithms and Data Structures: The Basic Toolbox. Springer International Publishing. ISBNÂ 978-3-030-25208-3.

^ "Parallel Processing of Graphs" (PDF).

^ Jump up to: a b BuluÃ§, A.; Madduri, Kamesh (2011). "Applications". Parallel breadth-first search on distributed memory systems. 2011 International Conference for High Performance Computing, Networking, Storage and Analysis. doi:10.1145/2063384.2063471. ISBNÂ 978-1-4503-0771-0. S2CIDÂ 6540738.

^ Besta, Maciej; Hoefler, Torsten (27 April 2019). "Survey and Taxonomy of Lossless Graph Compression and Space-Efficient Graph Representations". arXiv:1806.01799 [cs.DS].


External links[edit]



Wikimedia Commons has media related to Graph (abstract data type).

Boost Graph Library: a powerful C++ graph library s.a. Boost (C++ libraries)
Networkx: a Python graph library
GraphMatcher a java program to align directed/undirected graphs.
GraphBLAS A specification for a library interface for operations on graphs, with a particular focus on sparse graphs.
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}show.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteGraph representationsData structures
Graph (abstract data type)
Adjacency list
Edge list
Adjacency matrix
Incidence matrix
XML-based formats
DGML
DotML
GEXF
GraphML
GXL
XGMML
Text-based formats
DOT
Graph Modelling Language (GML)
LCF notation for cubic Hamiltonian graphs
Newick format for trees
Trivial Graph Format
Related concepts
Graph database
Graph drawing
Linked data

showvteWell-known data structuresTypes
Collection
Container
Abstract
Associative array
Multimap
Retrieval Data Structure
List
Stack
Queue
Double-ended queue
Priority queue
Double-ended priority queue
Set
Multiset
Disjoint-set
Arrays
Bit array
Circular buffer
Dynamic array
Hash table
Hashed array tree
Sparse matrix
Linked
Association list
Linked list
Skip list
Unrolled linked list
XOR linked list
Trees
B-tree
Binary search tree
AA tree
AVL tree
Redâblack tree
Self-balancing tree
Splay tree
Heap
Binary heap
Binomial heap
Fibonacci heap
R-tree
R* tree
R+ tree
Hilbert R-tree
Trie
Hash tree
Graphs
Binary decision diagram
Directed acyclic graph
Directed acyclic word graph

List of data structures





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Graph_(abstract_data_type)&oldid=1068784295"
		Categories: Graph theoryGraph data structuresAbstract data typesGraphsHypergraphsHidden categories: All articles with unsourced statementsArticles with unsourced statements from November 2011Commons category link from Wikidata
	
