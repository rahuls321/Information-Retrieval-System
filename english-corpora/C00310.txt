
Title:
Queue (abstract data type)
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Abstract data type
A request that this article title be changedÂ to Queue (data type) is under discussion.  Please do not move this article until the discussion is closed.
This article includes a list of general references, but it remains largely unverified because it lacks sufficient corresponding inline citations. Please help to improve this article by introducing more precise citations.  (January 2014) (Learn how and when to remove this template message)
.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}QueueTime complexity in big O notationAlgorithm

Average
Worst caseSpace

O(n)
O(n)Search

O(n)
O(n)Insert

O(1)
O(1)Delete

O(1)
O(1)
  Representation of a FIFO (first in, first out) queue
In computer science, a queue is a collection of entities that are maintained in a sequence and can be modified by the addition of entities at one end of the sequence and the removal of entities from the other end of the sequence. By convention, the end of the sequence at which elements are added is called the back, tail, or rear of the queue, and the end at which elements are removed is called the head or front of the queue, analogously to the words used when people line up to wait for goods or services.
The operation of adding an element to the rear of the queue is known as enqueue, and the operation of removing an element from the front is known as dequeue.  Other operations may also be allowed, often including a peek or front operation that returns the value of the next element to be dequeued without dequeuing it.
The operations of a queue make it a first-in-first-out (FIFO) data structure. In a FIFO data structure, the first element added to the queue will be the first one to be removed. This is equivalent to the requirement that once a new element is added, all elements that were added before have to be removed before the new element can be removed.  A queue is an example of a linear data structure, or more abstractly a sequential collection.
Queues are common in computer programs, where they are implemented as data structures coupled with access routines, as an abstract data structure or in object-oriented languages as classes. Common implementations are circular buffers and linked lists.
Queues provide services in computer science, transport, and operations research where various entities such as data, objects, persons, or events are stored and held to be processed later. In these contexts, the queue performs the function of a buffer.
Another usage of queues is in the implementation of breadth-first search.

Contents

1 Queue implementation

1.1 Queues and programming languages
1.2 Example


2 Purely functional implementation

2.1 Amortized queue
2.2 Real-time queue


3 See also
4 References

4.1 General references


5 Further reading
6 External links



Queue implementation[edit]
Theoretically, one characteristic of a queue is that it does not have a specific capacity. Regardless of how many elements are already contained, a new element can always be added. It can also be empty, at which point removing an element will be impossible until a new element has been added again.
Fixed-length arrays are limited in capacity, but it is not true that items need to be copied towards the head of the queue. The simple trick of turning the array into a closed circle and letting the head and tail drift around endlessly in that circle makes it unnecessary to ever move items stored in the array. If n is the size of the array, then computing indices modulo n will turn the array into a circle. This is still the conceptually simplest way to construct a queue in a high-level language, but it does admittedly slow things down a little, because the array indices must be compared to zero and the array size, which is comparable to the time taken to check whether an array index is out of bounds, which some languages do, but this will certainly be the method of choice for a quick and dirty implementation, or for any high-level language that does not have pointer syntax. The array size must be declared ahead of time, but some implementations simply double the declared array size when overflow occurs. Most modern languages with objects or pointers can implement or come with libraries for dynamic lists. Such data structures may have not specified a fixed capacity limit besides memory constraints. Queue overflow results from trying to add an element onto a full queue and queue underflow happens when trying to remove an element from an empty queue.
A bounded queue is a queue limited to a fixed number of items.[1]
There are several efficient implementations of FIFO queues. An efficient implementation is one that can perform the operationsâen-queuing and de-queuingâin O(1) time.

Linked list
A doubly linked list has O(1) insertion and deletion at both ends, so it is a natural choice for queues.
A regular singly linked list only has efficient insertion and deletion at one end. However, a small modificationâkeeping a pointer to the last node in addition to the first oneâwill enable it to implement an efficient queue.
A deque implemented using a modified dynamic array
Queues and programming languages[edit]
Queues may be implemented as a separate data type, or maybe considered a special case of a double-ended queue (deque) and not implemented separately. For example, Perl and Ruby allow pushing and popping an array from both ends, so one can use push and unshift functions to enqueue and dequeue a list (or, in reverse, one can use shift and pop), although in some cases these operations are not efficient.
C++'s Standard Template Library provides a "queue" templated class which is restricted to only push/pop operations. Since J2SE5.0, Java's library contains a Queue interface that specifies queue operations; implementing classes include LinkedList and (since J2SE 1.6) ArrayDeque. PHP has an SplQueue class and third party libraries like beanstalk'd and Gearman.

Example[edit]
A simple queue implemented in JavaScript:

class Queue {
    constructor() {
        this.items = new Array(0);
    }

    enqueue(element) {
        this.items.push(element);
    }

    dequeue() {
        return this.items.shift();
    }
}

Purely functional implementation[edit]
Queues can also be implemented as a purely functional data structure.[2] There are two implementations. The first one only achieves 
  
    
      
        O
        (
        1
        )
      
    
    {\displaystyle O(1)}
  
 per operation on average.  That is, the amortized time is 
  
    
      
        O
        (
        1
        )
      
    
    {\displaystyle O(1)}
  
, but individual operations can take 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
  
 where n is the number of elements in the queue.  The second implementation is called a real-time queue[3] and it allows the queue to be persistent with operations in O(1) worst-case time. It is a more complex implementation and requires lazy lists with memoization. 

Amortized queue[edit]
This queue's data is stored in two singly-linked lists named 
  
    
      
        f
      
    
    {\displaystyle f}
  
 and 
  
    
      
        r
      
    
    {\displaystyle r}
  
.  The list 
  
    
      
        f
      
    
    {\displaystyle f}
  
 holds the front part of the queue.  The list 
  
    
      
        r
      
    
    {\displaystyle r}
  
 holds the remaining elements (a.k.a., the rear of the queue) in reverse order.  It is easy to insert into the front of the queue by adding a node at the head of 
  
    
      
        f
      
    
    {\displaystyle f}
  
.  And, if 
  
    
      
        r
      
    
    {\displaystyle r}
  
 is not empty, it is easy to remove from the end of the queue by removing the node at the head of 
  
    
      
        r
      
    
    {\displaystyle r}
  
.  When 
  
    
      
        r
      
    
    {\displaystyle r}
  
 is empty, the list 
  
    
      
        f
      
    
    {\displaystyle f}
  
 is reversed and assigned to 
  
    
      
        r
      
    
    {\displaystyle r}
  
 and then the head of 
  
    
      
        r
      
    
    {\displaystyle r}
  
 is removed.  
The insert ("enqueue") always takes 
  
    
      
        O
        (
        1
        )
      
    
    {\displaystyle O(1)}
  
 time.  The removal ("dequeue") takes 
  
    
      
        O
        (
        1
        )
      
    
    {\displaystyle O(1)}
  
 when the list 
  
    
      
        r
      
    
    {\displaystyle r}
  
 is not empty.  When 
  
    
      
        r
      
    
    {\displaystyle r}
  
 is empty, the reverse takes 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
  
 where 
  
    
      
        n
      
    
    {\displaystyle n}
  
 is the number of elements in 
  
    
      
        f
      
    
    {\displaystyle f}
  
.  But, we can say it is 
  
    
      
        O
        (
        1
        )
      
    
    {\displaystyle O(1)}
  
 amortized time, because every element in 
  
    
      
        f
      
    
    {\displaystyle f}
  
 had to be inserted and we can assign a constant cost for each element in the reverse to when it was inserted.  

Real-time queue[edit]
The real-time queue achieves 
  
    
      
        O
        (
        1
        )
      
    
    {\displaystyle O(1)}
  
 time for all operations, without amortization.  This discussion will be technical, so recall that, for 
  
    
      
        l
      
    
    {\displaystyle l}
  
 a list, 
  
    
      
        
          |
        
        l
        
          |
        
      
    
    {\displaystyle |l|}
  
 denotes its length, that NIL represents an empty list and 
  
    
      
        CONS
        â¡
        (
        h
        ,
        t
        )
      
    
    {\displaystyle \operatorname {CONS} (h,t)}
  
 represents the list whose head is h and whose tail is t.
The data structure used to implement our queues consists of three singly-linked lists 
  
    
      
        (
        f
        ,
        r
        ,
        s
        )
      
    
    {\displaystyle (f,r,s)}
  
 where f is the front of the queue, r is the rear of the queue in reverse order. The invariant of the structure is that s is the rear of f without its 
  
    
      
        
          |
        
        r
        
          |
        
      
    
    {\displaystyle |r|}
  
 first elements, that is 
  
    
      
        
          |
        
        s
        
          |
        
        =
        
          |
        
        f
        
          |
        
        â
        
          |
        
        r
        
          |
        
      
    
    {\displaystyle |s|=|f|-|r|}
  
. The tail of the queue 
  
    
      
        (
        CONS
        â¡
        (
        x
        ,
        f
        )
        ,
        r
        ,
        s
        )
      
    
    {\displaystyle (\operatorname {CONS} (x,f),r,s)}
  
 is then almost 
  
    
      
        (
        f
        ,
        r
        ,
        s
        )
      
    
    {\displaystyle (f,r,s)}
  
 and
inserting an element x to 
  
    
      
        (
        f
        ,
        r
        ,
        s
        )
      
    
    {\displaystyle (f,r,s)}
  
 is almost 
  
    
      
        (
        f
        ,
        CONS
        â¡
        (
        x
        ,
        r
        )
        ,
        s
        )
      
    
    {\displaystyle (f,\operatorname {CONS} (x,r),s)}
  
. It is said almost, because in both of those results, 
  
    
      
        
          |
        
        s
        
          |
        
        =
        
          |
        
        f
        
          |
        
        â
        
          |
        
        r
        
          |
        
        +
        1
      
    
    {\displaystyle |s|=|f|-|r|+1}
  
. An auxiliary function 
  
    
      
        a
        u
        x
      
    
    {\displaystyle aux}
  
 must then be called for the invariant to be satisfied. Two cases must be considered, depending on whether 
  
    
      
        s
      
    
    {\displaystyle s}
  
 is the empty list, in which case 
  
    
      
        
          |
        
        r
        
          |
        
        =
        
          |
        
        f
        
          |
        
        +
        1
      
    
    {\displaystyle |r|=|f|+1}
  
, or not. The formal definition is 
  
    
      
        aux
        â¡
        (
        f
        ,
        r
        ,
        Cons
        â¡
        (
        _
        ,
        s
        )
        )
        =
        (
        f
        ,
        r
        ,
        s
        )
      
    
    {\displaystyle \operatorname {aux} (f,r,\operatorname {Cons} (\_,s))=(f,r,s)}
  
 and 
  
    
      
        aux
        â¡
        (
        f
        ,
        r
        ,
        
          NIL
        
        )
        =
        (
        
          f
          â²
        
        ,
        
          NIL
        
        ,
        
          f
          â²
        
        )
      
    
    {\displaystyle \operatorname {aux} (f,r,{\text{NIL}})=(f',{\text{NIL}},f')}
  
 where 
  
    
      
        
          f
          â²
        
      
    
    {\displaystyle f'}
  
 is f followed by r reversed.
Let us call 
  
    
      
        reverse
        â¡
        (
        f
        ,
        r
        )
      
    
    {\displaystyle \operatorname {reverse} (f,r)}
  
 the function which returns f followed by r reversed. Let us furthermore assume that 
  
    
      
        
          |
        
        r
        
          |
        
        =
        
          |
        
        f
        
          |
        
        +
        1
      
    
    {\displaystyle |r|=|f|+1}
  
, since it is the case when this function is called. More precisely, we define a lazy function 
  
    
      
        rotate
        â¡
        (
        f
        ,
        r
        ,
        a
        )
      
    
    {\displaystyle \operatorname {rotate} (f,r,a)}
  
 which takes as input three list such that 
  
    
      
        
          |
        
        r
        
          |
        
        =
        
          |
        
        f
        
          |
        
        +
        1
      
    
    {\displaystyle |r|=|f|+1}
  
, and return the concatenation of f, of r reversed and of a. Then 
  
    
      
        reverse
        â¡
        (
        f
        ,
        r
        )
        =
        rotate
        â¡
        (
        f
        ,
        r
        ,
        
          NIL
        
        )
      
    
    {\displaystyle \operatorname {reverse} (f,r)=\operatorname {rotate} (f,r,{\text{NIL}})}
  
.
The inductive definition of rotate is 
  
    
      
        rotate
        â¡
        (
        
          NIL
        
        ,
        Cons
        â¡
        (
        y
        ,
        
          NIL
        
        )
        ,
        a
        )
        =
        Cons
        â¡
        (
        y
        ,
        a
        )
      
    
    {\displaystyle \operatorname {rotate} ({\text{NIL}},\operatorname {Cons} (y,{\text{NIL}}),a)=\operatorname {Cons} (y,a)}
  
 and 
  
    
      
        rotate
        â¡
        (
        CONS
        â¡
        (
        x
        ,
        f
        )
        ,
        CONS
        â¡
        (
        y
        ,
        r
        )
        ,
        a
        )
        =
        Cons
        â¡
        (
        x
        ,
        rotate
        â¡
        (
        f
        ,
        r
        ,
        CONS
        â¡
        (
        y
        ,
        a
        )
        )
        )
      
    
    {\displaystyle \operatorname {rotate} (\operatorname {CONS} (x,f),\operatorname {CONS} (y,r),a)=\operatorname {Cons} (x,\operatorname {rotate} (f,r,\operatorname {CONS} (y,a)))}
  
. Its running time is 
  
    
      
        O
        (
        r
        )
      
    
    {\displaystyle O(r)}
  
, but, since lazy evaluation is used, the computation is delayed until the results is forced by the computation.
The list s in the data structure has two purposes. This list serves as a counter for 
  
    
      
        
          |
        
        f
        
          |
        
        â
        
          |
        
        r
        
          |
        
      
    
    {\displaystyle |f|-|r|}
  
, indeed, 
  
    
      
        
          |
        
        f
        
          |
        
        =
        
          |
        
        r
        
          |
        
      
    
    {\displaystyle |f|=|r|}
  
 if and only if s is the empty list. This counter allows us to ensure that the rear is never longer than the front list. Furthermore, using s, which is a tail of f, forces the computation of a part of the (lazy) list f during each tail and insert operation. Therefore, when 
  
    
      
        
          |
        
        f
        
          |
        
        =
        
          |
        
        r
        
          |
        
      
    
    {\displaystyle |f|=|r|}
  
, the list f is totally forced. If it was not the case, the internal representation of f could be some append of append of... of append, and forcing would not be a constant time operation anymore.

See also[edit]
.mw-parser-output .portalbox{float:right;border:solid #aaa 1px;padding:0}.mw-parser-output .portalbox.tleft{margin:0.5em 1em 0.5em 0}.mw-parser-output .portalbox.tright{margin:0.5em 0 0.5em 1em}.mw-parser-output .portalbox>ul{display:table;box-sizing:border-box;padding:0.1em;max-width:175px;background:#f9f9f9;font-size:85%;line-height:110%;font-style:italic;font-weight:bold}.mw-parser-output .portalbox>ul>li{display:table-row}.mw-parser-output .portalbox>ul>li>span:first-child{display:table-cell;padding:0.2em;vertical-align:middle;text-align:center}.mw-parser-output .portalbox>ul>li>span:last-child{display:table-cell;padding:0.2em 0.2em 0.2em 0.3em;vertical-align:middle}

Computer programming portal
Circular buffer
Double-ended queue (dequeue)
Priority queue
Queuing theory
Stack (abstract data type) â the "opposite" of a queue: LIFO (Last In First Out)
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}"Queue (Java Platform SE 7)". Docs.oracle.com. 2014-03-26. Retrieved 2014-05-22.

^ Okasaki, Chris. "Purely Functional Data Structures" (PDF).

^ Hood, Robert; Melville, Robert (November 1981). "Real-time queue operations in pure Lisp". Information Processing Letters. 13 (2). hdl:1813/6273.


General references[edit]
Â This article incorporates public domain materialÂ from theÂ NIST document:Â Black, Paul E. "Bounded queue". Dictionary of Algorithms and Data Structures.
Further reading[edit]
Donald Knuth. The Art of Computer Programming, Volume 1: Fundamental Algorithms, Third Edition. Addison-Wesley, 1997. ISBNÂ 0-201-89683-4. Section 2.2.1: Stacks, Queues, and Dequeues, pp.Â 238â243.
Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. Introduction to Algorithms, Second Edition. MIT Press and McGraw-Hill, 2001. ISBNÂ 0-262-03293-7. Section 10.1: Stacks and queues, pp.Â 200â204.
William Ford, William Topp. Data Structures with C++ and STL, Second Edition. Prentice Hall, 2002. ISBNÂ 0-13-085850-1. Chapter 8: Queues and Priority Queues, pp.Â 386â390.
Adam Drozdek. Data Structures and Algorithms in C++, Third Edition. Thomson Course Technology, 2005. ISBNÂ 0-534-49182-0. Chapter 4: Stacks and Queues, pp.Â 137â169.
External links[edit]



Wikimedia Commons has media related to Queue data structure.

STL Quick Reference
VBScript implementation of stack, queue, deque, and Red-Black Tree
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}hide.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteWell-known data structuresTypes
Collection
Container
Abstract
Associative array
Multimap
Retrieval Data Structure
List
Stack
Queue
Double-ended queue
Priority queue
Double-ended priority queue
Set
Multiset
Disjoint-set
Arrays
Bit array
Circular buffer
Dynamic array
Hash table
Hashed array tree
Sparse matrix
Linked
Association list
Linked list
Skip list
Unrolled linked list
XOR linked list
Trees
B-tree
Binary search tree
AA tree
AVL tree
Redâblack tree
Self-balancing tree
Splay tree
Heap
Binary heap
Binomial heap
Fibonacci heap
R-tree
R* tree
R+ tree
Hilbert R-tree
Trie
Hash tree
Graphs
Binary decision diagram
Directed acyclic graph
Directed acyclic word graph

List of data structures





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Queue_(abstract_data_type)&oldid=1068168626"
		Categories: Abstract data typesHidden categories: Articles with short descriptionShort description matches WikidataArticles lacking in-text citations from January 2014All articles lacking in-text citationsCommons category link is on WikidataArticles with example C++ code
	
