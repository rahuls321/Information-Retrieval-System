
Title:
Hy
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Dialect of the Lisp programming language designed to interact with Python
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}This article is about the programming language Hy. For other uses, see HY.
.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}HyHy logo - Cuddles the cuttlefishParadigmMulti-paradigm: procedural, functional, object-oriented, meta, reflective, genericFamilyLispDesignedÂ byPaul TagliamonteDevelopersCore teamFirstÂ appeared2013; 9Â years agoÂ (2013)Preview release0.19.0[1]
   / 16Â July 2020; 18 months agoÂ (2020-07-16)[1]
Scopelexical, optionally dynamic[citation needed]PlatformIA-32, x86-64OSCross-platformLicenseMIT-styleFilename extensions.hyWebsitehylang.orgInfluenced byKawa, Clojure, Common Lisp
Hy is a dialect of the Lisp programming language designed to interact with Python by translating s-expressions into Python's abstract syntax tree (AST).[2][3] Hy was introduced at Python Conference (PyCon) 2013 by Paul Tagliamonte.[4] Lisp allows operating on code as data (metaprogramming), thus Hy can be used to write domain-specific languages.[5]
Similar to Kawa's and Clojure's mappings onto the Java virtual machine (JVM),[6] Hy is meant to operate as a transparent Lisp front-end for Python.[7] It allows Python libraries, including the standard library, to be imported and accessed alongside Hy code with a compiling[note 1] step where both languages are converted into Python's AST.[note 2][8][9][10]

Contents

1 Example code
2 See also
3 Notes
4 References
5 External links



Example code[edit]
From the language documentation:[11]

=> (print "Hy!")
Hy!
=> (defn salutationsnm [name] (print (+ "Hy " name "!")))
=> (salutationsnm "YourName")
Hy YourName!

See also[edit]
Common Lisp
Clojure
Kawa (Scheme implementation)
CLPython
Notes[edit]

^ The term "compiled" may apply to expressing Hy code in Python's AST or converting that AST into bytecode, the latter being dependent on the specific Python interpreter used and not Hy.

^ Hy is tested on Python 2.7, 3.4 through 3.6, and PyPy.


References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ Jump up to: a b .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}"Hy 0.19.0". GitHub.

^ Jaworski, MichaÅ; ZiadÃ©, Tarek (2019). Expert Python programming (ThirdÂ ed.). Birmingham, U.K.: Packt Publishing. p.Â 173. ISBNÂ 978-1-78980-677-9. OCLCÂ 1125343555.

^ Danjou, Julien (2018). Serious Python: black-belt advice on deployment, scalability, testing, and more. San Francisco, CA: No Starch Press. pp.Â 145â149. ISBNÂ 9781593278793. OCLCÂ 1057729260.

^ Tagliamonte, Paul (2 April 2013). PyCon lightning talk (Speech). Python Conference (PyCon). Santa Clara. Retrieved 2 September 2014.

^ Tagliamonte, Paul (11 April 2014). Getting Hy on Python: How to implement a Lisp front-end to Python (Speech). PyCon. Montreal. Retrieved 2 September 2014.

^ Turto, Tuukka (14 February 2014). "Programming Can Be Fun with Hy". Open Source For You. Retrieved 2 September 2014.

^ Edge, Jake (30 April 2014). "Getting Hy on Python". LWN.net. Retrieved 2 September 2014.

^ "Hy Documentation". hylang.org. Retrieved 3 September 2014.

^ Danjou, Julien (26 March 2014). "The AST". The Hacker's Guide to Python. pp.Â 165â172.

^ Kitchin, John (31 March 2016). "More on Hy and why I think it is a big deal". The Kitchin Research Group. Carnegie Mellon University. Retrieved 19 September 2018.

^ "Quickstart". Hylang.org. 15 May 2018. Retrieved 19 September 2018.


External links[edit]
Official website
hy on GitHub
Documentation
Video of 2014 PyCon talk

.mw-parser-output .navbar-header{text-align:center;position:relative;white-space:nowrap}.mw-parser-output .navbar-header .navbar{position:absolute;right:0;top:0;margin:0 5px}Timeline of Lisp dialects.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vte


1955

1960

1965

1970

1975

1980

1985

1990

1995

2000

2005

2010

2015

2020


Â LISP 1, 1.5, LISP 2(abandoned)






Â Maclisp






Â Interlisp






Â MDL (programming language)






Â Lisp Machine Lisp






Â Scheme

Â R5RS

Â R6RS

Â R7RS small




Â NIL




Â ZIL (Zork Implementation Language)




Â Franz Lisp




Â Common Lisp




Â Le Lisp




Â T






Â Chez Scheme




Â Emacs Lisp




Â AutoLISP




Â PicoLisp




Â EuLisp




Â ISLISP




Â OpenLisp




Â PLT Scheme

Â Racket




Â GNU Guile




Â Visual LISP




Â Clojure




Â Arc




Â LFE




Â Hy


.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}vteLisp programming languageFeatures
Automatic storage management
Conditionals
Dynamic typing
Higher-order functions
Linked lists
M-expressions (deprecated)
Readâevalâprint loop
Recursion
S-expressions
Self-hosting compiler
Tree data structures
Object systems
Common Lisp Object System (CLOS)
CommonLoops
Flavors
ImplementationsStandardizedCommonLisp
Allegro Common Lisp
Armed Bear Common Lisp (ABCL)
CLISP
Clozure CL
CMU Common Lisp (CMUCL)
Corman Common Lisp
Embeddable Common Lisp (ECL)
GNU Common Lisp (GCL)
LispWorks
Macintosh Common Lisp
Mocl
Movitz
Poplog
Steel Bank Common Lisp (SBCL)
Symbolics Common Lisp
Scheme
History
Bigloo
Chez Scheme
Chicken
Gambit
Game Oriented Assembly Lisp (GOAL)
Ikarus
JScheme
Kawa
Larceny
MIT/GNU Scheme
MultiLisp
Pocket Scheme
Racket
RScheme
Scheme 48
SCM
SIOD
T
TinyScheme
ISLISP
OpenLisp
UnstandardizedLogo
MSWLogo
NetLogo
StarLogo
UCBLogo

Arc
AutoLISP
BBN LISP
Clojure
Dylan (Apple, history)
Emacs Lisp
EuLisp
Franz Lisp, PC-LISP
Hy
Interlisp
Knowledge Engineering Environment
*Lisp
LeLisp
LFE
Lisp Machine Lisp
Maclisp
MDL
MLisp
newLISP
NIL
PC-LISP
Picolisp
Portable Standard Lisp
RPL
S-1 Lisp
SKILL
Spice Lisp
ZetalispOperating system
Common Lisp Interface Manager, McCLIM
Genera
Scsh
Hardware
Lisp machine
TI Explorer
Space-cadet keyboard
Communityof practiceTechnical standards
Scheme Requests for Implementation
Common Lisp HyperSpec
X3J13
EducationBooks
Common Lisp the Language
How to Design Programs (HTDP)
On Lisp
Practical Common Lisp
Structure and Interpretation of Computer Programs (SICP)
Curriculum
ProgramByDesign
OrganizationsBusiness
Apple Computer
Bolt, Beranek and Newman
Harlequin
Lucid Inc.
Symbolics
Xanalys
Education
Massachusetts Institute of Technology (MIT)
MIT Computer Science and Artificial Intelligence Laboratory (CSAIL)
Stanford Artificial Intelligence Laboratory
University of California, Berkeley
People
Edmund Berkeley
Daniel G. Bobrow
William Clinger
R. Kent Dybvig
Matthias Felleisen
Robert Bruce Findler
Matthew Flatt
Phyllis Fox
Paul Graham
Richard Greenblatt
Timothy P. Hart
Louis Hodes
Mike Levin
David Luckham
John McCarthy
Robert Tappan Morris
Joel Moses
David Park
Steve Russell
Richard Stallman
Common Lisp
Scott Fahlman
Richard P. Gabriel
Philip Greenspun (10th rule)
David A. Moon
Kent Pitman
Guy L. Steele Jr.
Daniel Weinreb
Scheme
Matthias Felleisen
Shriram Krishnamurthi
Guy L. Steele Jr.
Gerald Jay Sussman
Julie Sussman
Logo
Hal Abelson
Denison Bollay
Wally Feurzeig
Brian Harvey
Seymour Papert
Mitchel Resnick
Cynthia Solomon

 Category
 Category
 List





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Hy&oldid=1043402606"
		Categories: Lisp (programming language)Cross-platform free softwareLisp programming language familyProgramming languages created in 2013Hidden categories: Articles with short descriptionShort description matches WikidataAll articles with unsourced statementsArticles with unsourced statements from July 2017Official website different in Wikidata and Wikipedia
	
