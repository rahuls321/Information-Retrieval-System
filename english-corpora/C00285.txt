
Title:
NP (complexity)
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Complexity class used to classify decision problems
This article includes a list of general references, but it remains largely unverified because it lacks sufficient corresponding inline citations. Please help to improve this article by introducing more precise citations.  (October 2015) (Learn how and when to remove this template message)
.mw-parser-output .unsolved{margin:0 1em 1em;border:#ccc solid;padding:0.35em 0.35em 0.35em 2.2em;background-color:#eee;background-image:url("https://upload.wikimedia.org/wikipedia/commons/2/26/Question%2C_Web_Fundamentals.svg");background-position:top 50%left 0.35em;background-size:1.5em;background-repeat:no-repeat}@media(min-width:720px){.mw-parser-output .unsolved{float:right;max-width:25%}}.mw-parser-output .unsolved-label{font-weight:bold}.mw-parser-output .unsolved-body{margin:0.35em;font-style:italic}.mw-parser-output .unsolved-more{font-size:smaller}

Unsolved problem in computer science:

  
    
      
        
          
            P
            
              
                =
                ?
              
            
            N
            P
          
        
      
    
    {\displaystyle {\mathsf {P{\overset {?}{=}}NP}}}
  

(more unsolved problems in computer science)

  Euler diagram for P, NP, NP-complete, and NP-hard set of problems. Under the assumption that Pâ NP, the existence of problems within NP but outside both P and NP-complete was established by Ladner.[1]
In computational complexity theory, NP (nondeterministic polynomial time) is a complexity class used to classify decision problems.  NP is the set of decision problems for which the problem instances, where the answer is "yes", have proofs verifiable in polynomial time by a deterministic Turing machine, or alternatively the set of problems that can be solved in polynomial time by a nondeterministic Turing machine.[2][Note 1]
An equivalent definition of NP is the set of decision problems solvable in polynomial time by a nondeterministic Turing machine. This definition is the basis for the abbreviation NP; "nondeterministic, polynomial time."   These two definitions are equivalent because the algorithm based on the Turing machine consists of two phases, the first of which consists of a guess about the solution, which is generated in a nondeterministic way, while the second phase consists of a deterministic algorithm that verifies if the guess is a solution to the problem.[3]
It is easy to see that the complexity class P (all problems solvable, deterministically, in polynomial time) is contained in NP (problems where solutions can be verified in polynomial time), because if a problem is solvable in polynomial time then a solution is also verifiable in polynomial time by simply solving the problem. But NP contains many more problems,[Note 2] the hardest of which are called NP-complete problems. An algorithm solving such a problem in polynomial time is also able to solve any other NP problem in polynomial time. The most important P versus NP (âP = NP?â) problem, asks whether polynomial time algorithms exist for solving NP-complete, and by corollary, all NP problems. It is widely believed that this is not the case.[4]
The complexity class NP is related to the complexity class co-NP for which the answer "no" can be verified in polynomial time. Whether or not NP = co-NP is another outstanding question in complexity theory.[5]

Contents

1 Formal definition
2 Background

2.1 Verifier-based definition
2.2 Machine-definition


3 Properties
4 Why some NP problems are hard to solve
5 Equivalence of definitions
6 Relationship to other classes
7 Other characterizations
8 Example
9 See also
10 Notes
11 References
12 Further reading
13 External links



Formal definition[edit]
The complexity class NP can be defined in terms of NTIME as follows:


  
    
      
        
          
            N
            P
          
        
        =
        
          â
          
            k
            â
            
              N
            
          
        
        
          
            N
            T
            I
            M
            E
          
        
        (
        
          n
          
            k
          
        
        )
        .
      
    
    {\displaystyle {\mathsf {NP}}=\bigcup _{k\in \mathbb {N} }{\mathsf {NTIME}}(n^{k}).}
  

where 
  
    
      
        
          
            N
            T
            I
            M
            E
          
        
        (
        
          n
          
            k
          
        
        )
      
    
    {\displaystyle {\mathsf {NTIME}}(n^{k})}
  
 is the set of decision problems that can be solved by a nondeterministic Turing machine in 
  
    
      
        O
        (
        
          n
          
            k
          
        
        )
      
    
    {\displaystyle O(n^{k})}
  
 time.
Alternatively, NP can be defined using deterministic Turing machines as verifiers. A language L is in NP if and only if there exist polynomials p and q, and a deterministic Turing machine M, such that

For all x and y, the machine M runs in time p(|x|) on input 
  
    
      
        (
        x
        ,
        y
        )
      
    
    {\displaystyle (x,y)}
  

For all x in L, there exists a string y of length q(|x|) such that 
  
    
      
        M
        (
        x
        ,
        y
        )
        =
        1
      
    
    {\displaystyle M(x,y)=1}
  

For all x not in L and all strings y of length q(|x|), 
  
    
      
        M
        (
        x
        ,
        y
        )
        =
        0
      
    
    {\displaystyle M(x,y)=0}
  

Background[edit]
Many computer science problems are contained in NP, like decision versions of many search and optimization problems.

Verifier-based definition[edit]
In order to explain the verifier-based definition of NP, consider the subset sum problem:
Assume that we are given some integers, {â7, â3, â2, 5, 8}, and we wish to know whether some of these integers sum up to zero. Here, the answer is "yes", since the integers {â3, â2, 5} corresponds to the sum (â3) + (â2) + 5 = 0. The task of deciding whether such a subset with zero sum exists is called the subset sum problem.
To answer if some of the integers add to zero we can create an algorithm which obtains all the possible subsets. As the number of integers that we feed into the algorithm becomes larger, both the number of subsets and the computation time grows exponentially.
But notice that if we are given a particular subset we can efficiently verify whether the subset sum is zero, by summing the integers of the subset. If the sum is zero, that subset is a proof or witness for the answer is "yes". An algorithm that verifies whether a given subset has sum zero is a verifier. Clearly, summing the integers of a subset can be done in polynomial time and the subset sum problem is therefore in NP.
The above example can be generalized for any decision problem. Given any instance I of problem 
  
    
      
        Î 
      
    
    {\displaystyle \Pi }
  
 and witness W, if there exists a verifier V so that given the ordered pair (I, W) as input, V returns "yes" in polynomial time if the witness proves that the answer is "yes" or "no" in polynomial time otherwise, then 
  
    
      
        Î 
      
    
    {\displaystyle \Pi }
  
 is in NP.
The "no"-answer version of this problem is stated as: "given a finite set of integers, does every non-empty subset have a nonzero sum?". The verifier-based definition of NP does not require an efficient verifier for the "no"-answers. The class of problems with such verifiers for the "no"-answers is called co-NP. In fact, it is an open question whether all problems in NP also have verifiers for the "no"-answers and thus are in co-NP.
In some literature the verifier is called the "certifier" and the witness the "certificate".[2]

Machine-definition[edit]
Equivalent to the verifier-based definition is the following characterization: NP is the class of decision problems solvable by a nondeterministic Turing machine that runs in polynomial time. That is to say, a decision problem 
  
    
      
        Î 
      
    
    {\displaystyle \Pi }
  
 is in NP whenever 
  
    
      
        Î 
      
    
    {\displaystyle \Pi }
  
 is recognized by some polynomial-time nondeterministic Turing machine 
  
    
      
        M
      
    
    {\displaystyle M}
  
 with an existential acceptance condition, meaning that 
  
    
      
        w
        â
        Î 
      
    
    {\displaystyle w\in \Pi }
  
 if and only if some computation path of 
  
    
      
        M
        (
        w
        )
      
    
    {\displaystyle M(w)}
  
 leads to an accepting state. This definition is equivalent to the verifier-based definition because a nondeterministic Turing machine could solve an NP problem in polynomial time by nondeterministically selecting a certificate and running the verifier on the certificate.  Similarly, if such a machine exists, then a polynomial time verifier can naturally be constructed from it.
In this light, we can define co-NP dually as the class of decision problems recognizable by polynomial-time nondeterministic Turing machines with an existential rejection condition.  Since an existential rejection condition is exactly the same thing as a universal acceptance condition, we can understand the NP vs. co-NP question as asking whether the existential and universal acceptance conditions have the same expressive power for the class of polynomial-time nondeterministic Turing machines.

Properties[edit]
NP is closed under union, intersection, concatenation, Kleene star and reversal. It is not known whether NP is closed under complement (this question is the so-called "NP versus co-NP" question)

Why some NP problems are hard to solve[edit]
Because of the many important problems in this class, there have been extensive efforts to find polynomial-time algorithms for problems in NP.  However, there remain a large number of problems in NP that defy such attempts, seeming to require super-polynomial time. Whether these problems are not decidable in polynomial time is one of the greatest open questions in computer science  (see P versus NP ("P=NP") problem for an in-depth discussion).
An important notion in this context is the set of NP-complete decision problems, which is a subset of NP and might be informally described as the "hardest" problems in NP. If there is a polynomial-time algorithm for even one of them, then there is a polynomial-time algorithm for all the problems in NP. Because of this, and because dedicated research has failed to find a polynomial algorithm for any NP-complete problem, once a problem has been proven to be NP-complete this is widely regarded as a sign that a polynomial algorithm for this problem is unlikely to exist.
However, in practical uses, instead of spending computational resources looking for an optimal solution, a good enough (but potentially suboptimal) solution may often be found in polynomial time. Also, the real life applications of some problems are easier than their theoretical equivalents.

Equivalence of definitions[edit]
The two definitions of NP as the class of problems solvable by a nondeterministic Turing machine (TM) in polynomial time and the class of problems verifiable by a deterministic Turing machine in polynomial time are equivalent. The proof is described by many textbooks, for example, Sipser's Introduction to the Theory of Computation, section 7.3.
To show this, first, suppose we have a deterministic verifier. A non-deterministic machine can simply nondeterministically run the verifier on all possible proof strings (this requires only polynomially many steps because it can nondeterministically choose the next character in the proof string in each step, and the length of the proof string must be polynomially bounded). If any proof is valid, some path will accept; if no proof is valid, the string is not in the language and it will reject.
Conversely, suppose we have a non-deterministic TM called A accepting a given language L. At each of its polynomially many steps, the machine's computation tree branches in at most a finite number of directions. There must be at least one accepting path, and the string describing this path is the proof supplied to the verifier. The verifier can then deterministically simulate A, following only the accepting path, and verifying that it accepts at the end. If A rejects the input, there is no accepting path, and the verifier will always reject.

Relationship to other classes[edit]
NP contains all problems in P, since one can verify any instance of the problem by simply ignoring the proof and solving it. NP is contained in PSPACEâto show this, it suffices to construct a PSPACE machine that loops over all proof strings and feeds each one to a polynomial-time verifier. Since a polynomial-time machine can only read polynomially many bits, it cannot use more than polynomial space, nor can it read a proof string occupying more than polynomial space (so we do not have to consider proofs longer than this). NP is also contained in EXPTIME, since the same algorithm operates in exponential time.
co-NP contains those problems which have a simple proof for no instances, sometimes called counterexamples. For example, primality testing trivially lies in co-NP, since one can refute the primality of an integer by merely supplying a nontrivial factor. NP and co-NP together form the first level in the polynomial hierarchy, higher only than P.
NP is defined using only deterministic machines. If we permit the verifier to be probabilistic (this however, is not necessarily a BPP machine[6]), we get the class MA solvable using an ArthurâMerlin protocol with no communication from Arthur to Merlin.
NP is a class of decision problems; the analogous class of function problems is FNP.
The only known strict inclusions came from the time hierarchy theorem and the space hierarchy theorem, and respectively they are 
  
    
      
        
          
            N
            P
            â
            N
            E
            X
            P
            T
            I
            M
            E
          
        
      
    
    {\displaystyle {\mathsf {NP\subsetneq NEXPTIME}}}
  
 and 
  
    
      
        
          
            N
            P
            â
            E
            X
            P
            S
            P
            A
            C
            E
          
        
      
    
    {\displaystyle {\mathsf {NP\subsetneq EXPSPACE}}}
  
.

Other characterizations[edit]
In terms of descriptive complexity theory, NP corresponds precisely to the set of languages definable by existential second-order logic (Fagin's theorem).
NP can be seen as a very simple type of interactive proof system, where the prover comes up with the proof certificate and the verifier is a deterministic polynomial-time machine that checks it. It is complete because the right proof string will make it accept if there is one, and it is sound because the verifier cannot accept if there is no acceptable proof string.
A major result of complexity theory is that NP can be characterized as the problems solvable by probabilistically checkable proofs where the verifier uses O(log n) random bits and examines only a constant number of bits of the proof string (the class PCP(log n, 1)). More informally, this means that the NP verifier described above can be replaced with one that just "spot-checks" a few places in the proof string, and using a limited number of coin flips can determine the correct answer with high probability. This allows several results about the hardness of approximation algorithms to be proven.

Example[edit]
This is a list of some problems that are in NP:
All problems in P, denoted 
  
    
      
        
          
            P
            â
            N
            P
          
        
      
    
    {\displaystyle {\mathsf {P\subseteq NP}}}
  
. Given a certificate for a problem in P, we can ignore the certificate and just solve the problem in polynomial time.
The decision version of the travelling salesman problem is in NP. Given an input matrix of distances between n cities, the problem is to determine if there is a route visiting all cities with total distance less than k.
A proof can simply be a list of the cities. Then verification can clearly be done in polynomial time. It simply adds the matrix entries corresponding to the paths between the cities.
A nondeterministic Turing machine can find such a route as follows:

At each city it visits it will "guess" the next city to visit, until it has visited every vertex. If it gets stuck, it stops immediately.
At the end it verifies that the route it has taken has cost less than k in O(n) time.
One can think of each guess as "forking" a new copy of the Turing machine to follow each of the possible paths forward, and if at least one machine finds a route of distance less than k, that machine accepts the input. (Equivalently, this can be thought of as a single Turing machine that always guesses correctly)
A binary search on the range of possible distances can convert the decision version of Traveling Salesman to the optimization version, by calling the decision version repeatedly (a polynomial number of times).[7][8]
The decision problem version of the integer factorization problem: given integers n and k, is there a factor f with 1 < f < k and f dividing n?[8]
The Subgraph isomorphism problem of determining whether graph G contains a subgraph that is isomorphic to graph H.[9]
The boolean satisfiability problem, where we want to know whether or not a certain formula in propositional logic with boolean variables is true for some value of the variables.[10]

See also[edit]
Turing machine
Notes[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ polynomial time refers to how quickly the number of operations needed by an algorithm, relative to the size of the problem, grows. It is therefore a measure of efficiency of an algorithm.

^ Under the assumption that Pâ NP.


References[edit]


^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Ladner, R. E. (1975). "On the structure of polynomial time reducibility". J. ACM. 22: 151â171. doi:10.1145/321864.321877. Corollary 1.1.

^ Jump up to: a b Kleinberg, Jon; Tardos, Ãva (2006). Algorithm Design (2ndÂ ed.). Addison-Wesley. p.Â 464. ISBNÂ 0-321-37291-3.

^ Alsuwaiyel, M. H.: Algorithms: Design Techniques and Analysis, p. 283

^ William Gasarch (June 2002). "The P=?NP poll" (PDF). SIGACT News. 33 (2): 34â47. doi:10.1145/1052796.1052804. Retrieved 2008-12-29.

^ Kleinberg, Jon; Tardos, Ãva (2006). Algorithm Design (2ndÂ ed.). p.Â 496. ISBNÂ 0-321-37291-3.

^ "Complexity Zoo:E - Complexity Zoo". complexityzoo.uwaterloo.ca. Retrieved 23 March 2018.

^ Aaronson, Scott. "P=? NP" (PDF). Retrieved 13 Apr 2021.{{cite web}}:  CS1 maint: url-status (link)

^ Jump up to: a b Wigderson, Avi. "P, NP and mathematics â a computational complexity perspective" (PDF). Retrieved 13 Apr 2021.{{cite web}}:  CS1 maint: url-status (link)

^ Garey, Michael R.; Johnson, David S. (1979). Computers and Intractability: A Guide to the Theory of NP-Completeness. W.H. Freeman. ISBNÂ 0-7167-1045-5.

^ Karp, Richard (1972). "Reducibility Among Combinatorial Problems" (PDF). Complexity of Computer Computations.


Further reading[edit]
Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. Introduction to Algorithms, Second Edition. MIT Press and McGraw-Hill, 2001. ISBNÂ 0-262-03293-7. Section 34.2: Polynomial-time verification, pp.Â 979â983.
Michael Sipser (1997). Introduction to the Theory of Computation. PWS Publishing. ISBNÂ 0-534-94728-X. Sections 7.3â7.5 (The Class NP, NP-completeness, Additional NP-complete Problems), pp.Â 241â271.
David Harel, Yishai Feldman. Algorithmics: The Spirit of Computing,  Addison-Wesley, Reading, MA, 3rd edition, 2004.
External links[edit]
Complexity Zoo: NP
American Scientist primer on traditional and recent complexity theory research: "Accidental Algorithms"
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}hide.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteImportant complexity classes (more)Considered feasible
DLOGTIME
AC0
ACC0
TC0
L
SL
RL
NL
NC
SC
CC
P
P-complete
ZPP
RP
BPP
BQP
APX
Suspected infeasible
UP
NP
NP-complete
NP-hard
co-NP
co-NP-complete
AM
QMA
PH
âP
PP
#P
#P-complete
IP
PSPACE
PSPACE-complete
Considered infeasible
EXPTIME
NEXPTIME
EXPSPACE
2-EXPTIME
ELEMENTARY
PR
R
RE
ALL
Class hierarchies
Polynomial hierarchy
Exponential hierarchy
Grzegorczyk hierarchy
Arithmetical hierarchy
Boolean hierarchy
Families of classes
DTIME
NTIME
DSPACE
NSPACE
Probabilistically checkable proof
Interactive proof system





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=NP_(complexity)&oldid=1063841736"
		Categories: Complexity classesHidden categories: CS1 maint: url-statusArticles with short descriptionShort description is different from WikidataArticles lacking in-text citations from October 2015All articles lacking in-text citations
	
