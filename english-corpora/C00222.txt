
Title:
Brute-force attack
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Cryptanalytic method for unauthorized users to access data


.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}This article is about the cryptanalytic method. For similarly named methods in other disciplines, see Brute force.
  The Electronic Frontier Foundation's US$250,000 DES cracking machine contained over 1,800 custom chips and could brute-force a DES key in a matter of days. The photograph shows a DES Cracker circuit board fitted with 64 Deep Crack chips using both sides.
In cryptography, a brute-force attack consists of an attacker submitting many passwords or passphrases with the hope of eventually guessing correctly. The attacker systematically checks all possible passwords and passphrases until the correct one is found. Alternatively, the attacker can attempt to guess the key which is typically created from the password using a key derivation function. This is known as an exhaustive key search.
A brute-force attack is a cryptanalytic attack that can, in theory, be used to attempt to decrypt any encrypted data (except for data encrypted in an information-theoretically secure manner).[1]  Such an attack might be used when it is not possible to take advantage of other weaknesses in an encryption system (if any exist) that would make the task easier.
When password-guessing, this method is very fast when used to check all short passwords, but for longer passwords other methods such as the dictionary attack are used because a brute-force search takes too long. Longer passwords, passphrases and keys have more possible values, making them exponentially more difficult to crack than shorter ones.[2]
Brute-force attacks can be made less effective by obfuscating the data to be encoded making it more difficult for an attacker to recognize when the code has been cracked or by making the attacker do more work to test each guess. One of the measures of the strength of an encryption system is how long it would theoretically take an attacker to mount a successful brute-force attack against it.[3]
Brute-force attacks are an application of brute-force search, the general problem-solving technique of enumerating all candidates and checking each one.

Contents

1 Basic concept
2 Theoretical limits
3 Credential recycling
4 Unbreakable codes
5 Countermeasures
6 Reverse brute-force attack
7 See also
8 Notes
9 References
10 External links



Basic concept[edit]
Brute-force attacks work by calculating every possible combination that could make up a password and testing it to see if it is the correct password. As the password's length increases, the amount of time, on average, to find the correct password increases exponentially.[4]

Theoretical limits[edit]
The resources required for a brute-force attack grow exponentially with increasing key size, not linearly. Although U.S. export regulations historically restricted key lengths to 56-bit symmetric keys (e.g. Data Encryption Standard), these restrictions are no longer in place, so modern symmetric algorithms typically use computationally stronger 128- to 256-bit keys.
There is a physical argument that a 128-bit symmetric key is computationally secure against brute-force attack. The so-called Landauer limit implied by the laws of physics sets a lower limit on the energy required to perform a computation of kT Â Â·  ln 2 per bit erased in a computation, where T is the temperature of the computing device in kelvins, k is the Boltzmann constant, and the natural logarithm of 2 is about 0.693. No irreversible computing device can use less energy than this, even in principle.[5]  Thus, in order to simply flip through the possible values for a 128-bit symmetric key (ignoring doing the actual computing to check it) would, theoretically, require 2128 â 1 bit flips on a conventional processor.  If it is assumed that the calculation occurs near room temperature (~300 K), the Von Neumann-Landauer Limit can be applied to estimate the energy required as ~1018 joules, which is equivalent to consuming 30 gigawatts of power for one year. This is equal to 30Ã109 WÃ365Ã24Ã3600 s = 9.46Ã1017 J or 262.7 TWh (about 0.1% of the yearly world energy production). The full actual computation â checking each key to see if a solution has been found â would consume many times this amount. Furthermore, this is simply the energy requirement for cycling through the key space; the actual time it takes to flip each bit is not considered, which is certainly greater than 0.
However, this argument assumes that the register values are changed using conventional set and clear operations which inevitably generate entropy. It has been shown that computational hardware can be designed not to encounter this theoretical obstruction (see reversible computing), though no such computers are known to have been constructed.[citation needed]

  Modern GPUs are well-suited to the repetitive tasks associated with hardware-based password cracking 
As commercial successors of governmental ASIC solutions have become available, also known as custom hardware attacks,  two emerging technologies have proven their capability in the brute-force attack of certain ciphers. One is modern graphics processing unit (GPU) technology,[6][pageÂ needed] the other is the field-programmable gate array (FPGA) technology.  GPUs benefit from their wide availability and price-performance benefit, FPGAs from their energy efficiency per cryptographic operation. Both technologies try to transport the benefits of parallel processing to brute-force attacks. In case of GPUs some hundreds, in the case of FPGA some thousand processing units making them much better suited to cracking passwords than conventional processors.
Various publications in the fields of cryptographic analysis have proved the energy efficiency of today's FPGA technology, for example, the COPACOBANA FPGA Cluster computer consumes the same energy as a single PC (600Â W), but performs like 2,500 PCs for certain algorithms. A number of firms provide hardware-based FPGA cryptographic analysis solutions from a single FPGA PCI Express card up to dedicated FPGA computers.[citation needed]  WPA and WPA2 encryption have successfully been brute-force attacked by reducing the workload by a factor of 50 in comparison to conventional CPUs[7][8] and some hundred in case of FPGAs.

  A single COPACOBANA board boasting 6 Xilinx Spartans â a cluster is made up of 20 of these
AES permits the use of 256-bit keys. Breaking a symmetric 256-bit key by brute force requires 2128 times more computational power than a 128-bit key. One of the fastest supercomputers in 2019 has a speed of 100 petaFLOPS which could theoretically check 100 million million (1014) AES keys per second (assuming 1000 operations per check), but would still require 3.67Ã1055 years to exhaust the 256-bit key space.[9] 
An underlying assumption of a brute-force attack is that the complete key space was used to generate keys, something that relies on an effective random number generator, and that there are no defects in the algorithm or its implementation.  For example, a number of systems that were originally thought to be impossible to crack by brute force have nevertheless been cracked because the key space to search through was found to be much smaller than originally thought, because of a lack of entropy in their pseudorandom number generators. These include Netscape's implementation of SSL (famously cracked by Ian Goldberg and David Wagner in 1995) and a Debian/Ubuntu edition of OpenSSL discovered in 2008 to be flawed.[10][11]  A similar lack of implemented entropy led to the breaking of Enigma's code.[12][13]

Credential recycling[edit]
Credential recycling refers to the hacking practice of re-using username and password combinations gathered in previous brute-force attacks. A special form of credential recycling is pass the hash, where unsalted hashed credentials are stolen and re-used without first being brute forced.

Unbreakable codes[edit]
Certain types of encryption, by their mathematical properties, cannot be defeated by brute force. An example of this is one-time pad cryptography, where every cleartext bit has a corresponding key from a truly random sequence of key bits. A 140 character one-time-pad-encoded string subjected to a brute-force attack would eventually reveal every 140 character string possible, including the correct answer â but of all the answers given, there would be no way of knowing which was the correct one. Defeating such a system, as was done by the Venona project, generally relies not on pure cryptography, but upon mistakes in its implementation: the key pads not being truly random, intercepted keypads, operators making mistakes â or other errors.[14]

Countermeasures[edit]
In case of an offline attack where the attacker has access to the encrypted material, one can try key combinations without the risk of discovery or interference.  However database and directory administrators can take countermeasures against online attacks, for example by limiting the number of attempts that a password can be tried, by introducing time delays between successive attempts, increasing the answer's complexity (e.g. requiring a CAPTCHA answer or verification code sent via cellphone), and/or locking accounts out after unsuccessful login attempts.[15][pageÂ needed]  Website administrators may prevent a particular IP address from trying more than a predetermined number of password attempts against any account on the site.[16]

Reverse brute-force attack[edit]
In a reverse brute-force attack, a single (usually common) password is tested against multiple usernames or encrypted files.[17] The process may be repeated for a select few passwords. In such a strategy, the attacker is not targeting a specific user.

See also[edit]
Bitcoin mining
Cryptographic key length
Distributed.net
Key derivation function
MD5CRK
Metasploit Express
Side-channel attack
TWINKLE and TWIRL
Unicity distance
RSA Factoring Challenge
Secure Shell
Notes[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ Paar, Pelzl & Preneel 2010, p.Â 7.

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Urbina, Ian (2014). "The Secret Life of Passwords. The New Times". The New York Times.{{cite news}}:  CS1 maint: url-status (link)

^ Schrittwieser, Sebastian; Katzenbeisser, Stefan (2011), "Code Obfuscation against Static and Dynamic Reverse Engineering", Information Hiding, Lecture Notes in Computer Science, Berlin, Heidelberg: Springer Berlin Heidelberg, vol.Â 6958, pp.Â 270â284, doi:10.1007/978-3-642-24178-9_19, ISBNÂ 978-3-642-24177-2, retrieved September 5, 2021

^ "Brute Force Attack: Definition and Examples". www.kaspersky.com. October 20, 2020. Retrieved November 8, 2020.

^ Landauer 1961, p.Â 183-191.

^ Graham 2011.

^ Kingsley-Hughes 2008.

^ Kamerling 2007.

^ "November 2019 | TOP500 Supercomputer Sites". www.top500.org. Archived from the original on November 19, 2019. Retrieved May 15, 2020.

^ Viega, Messier & Chandra 2002, p.Â 18.

^ CERT-2008.

^ Ellis. sfn error: no target: CITEREFEllis (help)

^ NSA-2009.

^ Reynard 1997, p.Â 86.

^ Burnett & Foster 2004.

^ Ristic 2010, p.Â 136.

^ "InfoSecPro.com - Computer, network, application and physical security consultants". www.infosecpro.com. Archived from the original on April 4, 2017. Retrieved May 8, 2018.


References[edit]
.mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li{margin-left:0;padding-left:3.2em;text-indent:-3.2em}.mw-parser-output .refbegin-hanging-indents ul,.mw-parser-output .refbegin-hanging-indents ul li{list-style:none}@media(max-width:720px){.mw-parser-output .refbegin-hanging-indents>ul>li{padding-left:1.6em;text-indent:-1.6em}}.mw-parser-output .refbegin-columns{margin-top:0.3em}.mw-parser-output .refbegin-columns ul{margin-top:0}.mw-parser-output .refbegin-columns li{page-break-inside:avoid;break-inside:avoid-column}
Adleman, Leonard M.; Rothemund, Paul W.K.; Roweis, Sam; Winfree, Erik (June 10â12, 1996). On Applying Molecular Computation To The Data Encryption Standard. Proceedings of the Second Annual Meeting on DNA Based Computers. Princeton University.
Cracking DES â Secrets of Encryption Research, Wiretap Politics & Chip Design. Electronic Frontier Foundation. 1998. ISBNÂ 1-56592-520-3.
Burnett, Mark; Foster, James C. (2004). Hacking the Code: ASP.NET Web Application Security. Syngress. ISBNÂ 1-932266-65-8.
Diffie, W.; Hellman, M.E. (1977). "Exhaustive Cryptanalysis of the NBS Data Encryption Standard". Computer. 10: 74â84. doi:10.1109/c-m.1977.217750. S2CIDÂ 2412454.
Graham, Robert David (June 22, 2011). "Password cracking, mining, and GPUs". erratasec.com. Retrieved August 17, 2011.
Ellis, Claire (March 2005). "Exploring the Enigma". Plus Magazine.
Kamerling, Erik (November 12, 2007). "Elcomsoft Debuts Graphics Processing Unit (GPU) Password Recovery Advancement". Symantec.
Kingsley-Hughes, Adrian (October 12, 2008). "ElcomSoft uses NVIDIA GPUs to Speed up WPA/WPA2 Brute-force Attack". ZDNet.
Landauer, L (1961). "Irreversibility and Heat Generation in the Computing Process". IBM Journal of Research and Development. 5 (3): 183â191. doi:10.1147/rd.53.0183.
Paar, Christof; Pelzl, Jan; Preneel, Bart (2010). Understanding Cryptography: A Textbook for Students and Practitioners. Springer. ISBNÂ 978-3-642-04100-6.
Reynard, Robert (1997). Secret Code Breaker II: A Cryptanalyst's Handbook. Jacksonville, FL: Smith & Daniel Marketing. ISBNÂ 1-889668-06-0. Retrieved September 21, 2008.
Ristic, Ivan (2010). Modsecurity Handbook. Feisty Duck. ISBNÂ 978-1-907117-02-2.
Viega, John; Messier, Matt; Chandra, Pravir (2002). Network Security with OpenSSL. O'Reilly. ISBNÂ 0-596-00270-X. Retrieved November 25, 2008.
Wiener, Michael J. (1996). "Efficient DES Key Search". Practical Cryptography for Data Internetworks. W. Stallings, editor, IEEE Computer Society Press.
"Technical Cyber Security Alert TA08-137A: Debian/Ubuntu OpenSSL Random Number Generator Vulnerability". United States Computer Emergency Readiness Team (CERT). May 16, 2008. Retrieved August 10, 2008.
"NSA's How Mathematicians Helped Win WWII". National Security Agency. January 15, 2009.

External links[edit]
RSA-sponsored DES-III cracking contest
Demonstration of a brute-force device designed to guess the passcode of locked iPhones running iOS 10.3.3
How We Cracked the Code Book Ciphers â Essay by the winning team of the challenge in The Code Book
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteCryptography
History of cryptography
Outline of cryptography
Cryptographic protocol
Authentication protocol
Cryptographic primitive
Cryptanalysis
Cryptocurrency
Cryptosystem
Cryptographic nonce
Cryptovirology
Hash function
Cryptographic hash function
Key derivation function
Digital signature
Kleptography
Key (cryptography)
Key exchange
Key generator
Key schedule
Key stretching
Keygen
Cryptojacking malware
Ransomware
Random number generation
Cryptographically secure pseudorandom number generator (CSPRNG)
Pseudorandom noise (PRN)
Secure channel
Insecure channel
Subliminal channel
Encryption
Decryption
End-to-end encryption
Information-theoretic security
Plaintext
Codetext
Ciphertext
Shared secret
Trapdoor function
Trusted timestamping
Key-based routing
Onion routing
Garlic routing
Kademlia
Mix network

Cryptographic hash function
Block cipher
Stream cipher
Symmetric-key algorithm
Public-key cryptography
Quantum key distribution
Quantum cryptography
Post-quantum cryptography
Message authentication code
Random numbers
Steganography

 Category

vteBlock ciphers (security summary)Commonalgorithms
AES
Blowfish
DES (internal mechanics, Triple DES)
Serpent
Twofish
Less commonalgorithms
ARIA
Camellia
CAST-128
GOST
IDEA
LEA
RC2
RC5
RC6
SEED
Skipjack
TEA
XTEA
Otheralgorithms
3-Way
Akelarre
Anubis
BaseKing
BassOmatic
BATON
BEAR and LION
CAST-256
Chiasmus
CIKS-1
CIPHERUNICORN-A
CIPHERUNICORN-E
CLEFIA
CMEA
Cobra
COCONUT98
Crab
Cryptomeria/C2
CRYPTON
CS-Cipher
DEAL
DES-X
DFC
E2
FEAL
FEA-M
FROG
G-DES
Grand Cru
Hasty Pudding cipher
Hierocrypt
ICE
IDEA NXT
Intel Cascade Cipher
Iraqi
Kalyna
KASUMI
KeeLoq
KHAZAD
Khufu and Khafre
KN-Cipher
Kuznyechik
Ladder-DES
LOKI (97, 89/91)
Lucifer
M6
M8
MacGuffin
Madryga
MAGENTA
MARS
Mercy
MESH
MISTY1
MMB
MULTI2
MultiSwap
New Data Seal
NewDES
Nimbus
NOEKEON
NUSH
PRESENT
Prince
Q
REDOC
Red Pike
S-1
SAFER
SAVILLE
SC2000
SHACAL
SHARK
Simon
SM4
Speck
Spectr-H64
Square
SXAL/MBAL
Threefish
Treyfer
UES
xmx
XXTEA
Zodiac
Design
Feistel network
Key schedule
LaiâMassey scheme
Product cipher
S-box
P-box
SPN
Confusion and diffusion
Avalanche effect
Block size
Key size
Key whitening (Whitening transformation)
Attack(cryptanalysis)
Brute-force (EFF DES cracker)
MITM
Biclique attack
3-subset MITM attack
Linear (Piling-up lemma)
Differential
Impossible
Truncated
Higher-order
Differential-linear
Distinguishing (Known-key)
Integral/Square
Boomerang
Mod n
Related-key
Slide
Rotational
Side-channel
Timing
Power-monitoring
Electromagnetic
Acoustic
Differential-fault
XSL
Interpolation
Partitioning
Rubber-hose
Black-bag
Davies
Rebound
Weak key
Tau
Chi-square
Time/memory/data tradeoff
Standardization
AES process
CRYPTREC
NESSIE
Utilization
Initialization vector
Mode of operation
Padding
vteCryptography
History of cryptography
Outline of cryptography
Cryptographic protocol
Authentication protocol
Cryptographic primitive
Cryptanalysis
Cryptocurrency
Cryptosystem
Cryptographic nonce
Cryptovirology
Hash function
Cryptographic hash function
Key derivation function
Digital signature
Kleptography
Key (cryptography)
Key exchange
Key generator
Key schedule
Key stretching
Keygen
Cryptojacking malware
Ransomware
Random number generation
Cryptographically secure pseudorandom number generator (CSPRNG)
Pseudorandom noise (PRN)
Secure channel
Insecure channel
Subliminal channel
Encryption
Decryption
End-to-end encryption
Information-theoretic security
Plaintext
Codetext
Ciphertext
Shared secret
Trapdoor function
Trusted timestamping
Key-based routing
Onion routing
Garlic routing
Kademlia
Mix network

Cryptographic hash function
Block cipher
Stream cipher
Symmetric-key algorithm
Public-key cryptography
Quantum key distribution
Quantum cryptography
Post-quantum cryptography
Message authentication code
Random numbers
Steganography

 Category





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Brute-force_attack&oldid=1067949651"
		Categories: Cryptographic attacksHidden categories: CS1 maint: url-statusHarv and Sfn no-target errorsArticles with short descriptionShort description is different from WikidataUse mdy dates from March 2019All articles with unsourced statementsArticles with unsourced statements from September 2010Wikipedia articles needing page number citations from March 2012Articles with unsourced statements from November 2010
	
