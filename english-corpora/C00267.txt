
Title:
Activation function
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}For the formalism used to approximate the influence of an extracellular electrical field on neurons, see activating function. For a linear systemâs transfer function, see transfer function.
  Logistic activation function
In artificial neural networks, the activation function of a node defines the output of that node given an input or set of inputs. 
A standard integrated circuit can be seen as a digital network of activation functions that can be "ON" (1) or "OFF" (0), depending on input. This is similar to the linear perceptron in neural networks. However, only nonlinear activation functions allow such networks to compute nontrivial problems using only a small number of nodes, and such activation functions are called nonlinearities.[1][2][3] 

Contents

1 Classification of activation functions

1.1 Ridge activation functions
1.2 Radial activation functions
1.3 Folding activation functions


2 Comparison of activation functions

2.1 Table of activation functions


3 See also
4 References



Classification of activation functions[edit]
The most common activation functions can be divided in three categories: ridge functions, radial functions and fold functions.

Ridge activation functions[edit]
Main article: Ridge function
Ridge functions are multivariate functions acting on a linear combination of the input variables. Often used examples include:

Linear activation: 
  
    
      
        Ï
        (
        
          v
        
        )
        =
        a
        +
        
          
            v
          
          â²
        
        
          b
        
      
    
    {\displaystyle \phi (\mathbf {v} )=a+\mathbf {v} '\mathbf {b} }
  
,
ReLU activation: 
  
    
      
        Ï
        (
        
          v
        
        )
        =
        max
        (
        0
        ,
        a
        +
        
          
            v
          
          â²
        
        
          b
        
        )
      
    
    {\displaystyle \phi (\mathbf {v} )=\max(0,a+\mathbf {v} '\mathbf {b} )}
  
,
Heaviside activation: 
  
    
      
        Ï
        (
        
          v
        
        )
        =
        
          1
          
            a
            +
            
              
                v
              
              â²
            
            
              b
            
            >
            0
          
        
      
    
    {\displaystyle \phi (\mathbf {v} )=1_{a+\mathbf {v} '\mathbf {b} >0}}
  
,
Logistic activation: 
  
    
      
        Ï
        (
        
          v
        
        )
        =
        (
        1
        +
        exp
        â¡
        (
        â
        a
        â
        
          
            v
          
          â²
        
        
          b
        
        )
        
          )
          
            â
            1
          
        
      
    
    {\displaystyle \phi (\mathbf {v} )=(1+\exp(-a-\mathbf {v} '\mathbf {b} ))^{-1}}
  
.
In biologically inspired neural networks, the activation function is usually an abstraction representing the rate of action potential firing in the cell.[4] In its simplest form, this function is binaryâthat is, either the neuron is firing or not. The function looks like 
  
    
      
        Ï
        (
        
          v
        
        )
        =
        U
        (
        a
        +
        
          
            v
          
          â²
        
        
          b
        
        )
      
    
    {\displaystyle \phi (\mathbf {v} )=U(a+\mathbf {v} '\mathbf {b} )}
  
, where 
  
    
      
        U
      
    
    {\displaystyle U}
  
 is the Heaviside step function.
A line of positive slope may be used to reflect the increase in firing rate that occurs as input current increases. Such a function would be of the form 
  
    
      
        Ï
        (
        
          v
        
        )
        =
        a
        +
        
          
            v
          
          â²
        
        
          b
        
      
    
    {\displaystyle \phi (\mathbf {v} )=a+\mathbf {v} '\mathbf {b} }
  
.

  Rectified linear unit and Gaussian error linear unit activation functions
Neurons also cannot fire faster than a certain rate, motivating sigmoid activation functions whose range is a finite interval.

Radial activation functions[edit]
Main article: Radial function
A special class of activation functions known as radial basis functions (RBFs) are used in RBF networks, which are extremely efficient as universal function approximators. These activation functions can take many forms, but they are usually found as one of the following functions:

Gaussian: 
  
    
      
        
        Ï
        (
        
          v
        
        )
        =
        exp
        â¡
        
          (
          
            â
            
              
                
                  â
                  
                    v
                  
                  â
                  
                    c
                  
                  
                    â
                    
                      2
                    
                  
                
                
                  2
                  
                    Ï
                    
                      2
                    
                  
                
              
            
          
          )
        
      
    
    {\displaystyle \,\phi (\mathbf {v} )=\exp \left(-{\frac {\|\mathbf {v} -\mathbf {c} \|^{2}}{2\sigma ^{2}}}\right)}
  

Multiquadratics: 
  
    
      
        
        Ï
        (
        
          v
        
        )
        =
        
          
            â
            
              v
            
            â
            
              c
            
            
              â
              
                2
              
            
            +
            
              a
              
                2
              
            
          
        
      
    
    {\displaystyle \,\phi (\mathbf {v} )={\sqrt {\|\mathbf {v} -\mathbf {c} \|^{2}+a^{2}}}}
  

Inverse multiquadratics: 
  
    
      
        
        Ï
        (
        
          v
        
        )
        =
        
          
            (
            
              â
              
                v
              
              â
              
                c
              
              
                â
                
                  2
                
              
              +
              
                a
                
                  2
                
              
            
            )
          
          
            â
            
              
                1
                2
              
            
          
        
      
    
    {\displaystyle \,\phi (\mathbf {v} )=\left(\|\mathbf {v} -\mathbf {c} \|^{2}+a^{2}\right)^{-{\frac {1}{2}}}}
  

Polyharmonic splines
where 
  
    
      
        
          c
        
      
    
    {\displaystyle \mathbf {c} }
  
 is the vector representing the function center and 
  
    
      
        a
      
    
    {\displaystyle a}
  
 and 
  
    
      
        Ï
      
    
    {\displaystyle \sigma }
  
 are parameters affecting the spread of the radius.

Folding activation functions[edit]
Main article: Fold function
Folding activation functions are extensively used in the pooling layers in convolutional neural networks, and in output layers of multiclass classification networks. These activations perform aggregation over the inputs, such as taking the mean, minimum or maximum. In multiclass classification the softmax activation is often used.

Comparison of activation functions[edit]
There are numerous activation functions. Hinton et al.'s seminal 2012 paper on automatic speech recognition uses a logistic sigmoid activation function.[5] The seminal 2012 AlexNet computer vision architecture uses the ReLU activation function, as did the seminal 2015 computer vision architecture ResNet. The seminal 2018 language processing model BERT uses a smooth version of the ReLU, the GELU.[6]
Aside from their empirical performance, activation functions also have different mathematical properties:

Nonlinear
When the activation function is non-linear, then a two-layer neural network can be proven to be a universal function approximator.[7] This is known as the Universal Approximation Theorem. The identity activation function does not satisfy this property. When multiple layers use the identity activation function, the entire network is equivalent to a single-layer model.
Range
When the range of the activation function is finite, gradient-based training methods tend to be more stable, because pattern presentations significantly affect only limited weights. When the range is infinite, training is generally more efficient because pattern presentations significantly affect most of the weights. In the latter case, smaller learning rates are typically necessary.[citation needed]
Continuously differentiable
This property is desirable (ReLU is not continuously differentiable and has some issues with gradient-based optimization, but it is still possible) for enabling gradient-based optimization methods. The binary step activation function is not differentiable at 0, and it differentiates to 0 for all other values, so gradient-based methods can make no progress with it.[8]
These properties do not decisively influence performance, nor are they the only mathematical properties that may be useful. For instance, the strictly positive range of the softplus makes it suitable for predicting variances in variational autoencoders.

Table of activation functions[edit]
The following table compares the properties of several activation functions that are functions of one fold x from the previous layer or layers:




Name

Plot

Function, 
  
    
      
        f
        (
        x
        )
      
    
    {\displaystyle f(x)}
  


Derivative of 
  
    
      
        f
      
    
    {\displaystyle f}
  
, 
  
    
      
        
          f
          â²
        
        (
        x
        )
      
    
    {\displaystyle f'(x)}
  


Range

Order of continuity


Identity




  
    
      
        x
      
    
    {\displaystyle x}
  



  
    
      
        1
      
    
    {\displaystyle 1}
  



  
    
      
        (
        â
        â
        ,
        â
        )
      
    
    {\displaystyle (-\infty ,\infty )}
  



  
    
      
        
          C
          
            â
          
        
      
    
    {\displaystyle C^{\infty }}
  



Binary step




  
    
      
        
          
            {
            
              
                
                  0
                
                
                  
                    ifÂ 
                  
                  x
                  <
                  0
                
              
              
                
                  1
                
                
                  
                    ifÂ 
                  
                  x
                  â¥
                  0
                
              
            
            
          
        
      
    
    {\displaystyle {\begin{cases}0&{\text{if }}x<0\\1&{\text{if }}x\geq 0\end{cases}}}
  



  
    
      
        
          
            {
            
              
                
                  0
                
                
                  
                    ifÂ 
                  
                  x
                  â 
                  0
                
              
              
                
                  
                    undefined
                  
                
                
                  
                    ifÂ 
                  
                  x
                  =
                  0
                
              
            
            
          
        
      
    
    {\displaystyle {\begin{cases}0&{\text{if }}x\neq 0\\{\text{undefined}}&{\text{if }}x=0\end{cases}}}
  



  
    
      
        {
        0
        ,
        1
        }
      
    
    {\displaystyle \{0,1\}}
  



  
    
      
        
          C
          
            â
            1
          
        
      
    
    {\displaystyle C^{-1}}
  



Logistic, sigmoid, or softÂ step




  
    
      
        Ï
        (
        x
        )
        =
        
          
            1
            
              1
              +
              
                e
                
                  â
                  x
                
              
            
          
        
      
    
    {\displaystyle \sigma (x)={\frac {1}{1+e^{-x}}}}
  



  
    
      
        f
        (
        x
        )
        (
        1
        â
        f
        (
        x
        )
        )
      
    
    {\displaystyle f(x)(1-f(x))}
  



  
    
      
        (
        0
        ,
        1
        )
      
    
    {\displaystyle (0,1)}
  



  
    
      
        
          C
          
            â
          
        
      
    
    {\displaystyle C^{\infty }}
  



Hyperbolic tangent (tanh)




  
    
      
        tanh
        â¡
        (
        x
        )
        =
        
          
            
              
                e
                
                  x
                
              
              â
              
                e
                
                  â
                  x
                
              
            
            
              
                e
                
                  x
                
              
              +
              
                e
                
                  â
                  x
                
              
            
          
        
      
    
    {\displaystyle \tanh(x)={\frac {e^{x}-e^{-x}}{e^{x}+e^{-x}}}}
  



  
    
      
        1
        â
        f
        (
        x
        
          )
          
            2
          
        
      
    
    {\displaystyle 1-f(x)^{2}}
  



  
    
      
        (
        â
        1
        ,
        1
        )
      
    
    {\displaystyle (-1,1)}
  



  
    
      
        
          C
          
            â
          
        
      
    
    {\displaystyle C^{\infty }}
  



Rectified linear unit (ReLU)[9]




  
    
      
        
          
            
              
              
                
                  
                    {
                    
                      
                        
                          0
                        
                        
                          
                            ifÂ 
                          
                          x
                          â¤
                          0
                        
                      
                      
                        
                          x
                        
                        
                          
                            ifÂ 
                          
                          x
                          >
                          0
                        
                      
                    
                    
                  
                
              
            
            
              
                

                
                =
                

                
              
              
                
                max
                {
                0
                ,
                x
                }
                =
                x
                
                  
                    
                      1
                    
                  
                  
                    x
                    >
                    0
                  
                
              
            
          
        
      
    
    {\displaystyle {\begin{aligned}&{\begin{cases}0&{\text{if }}x\leq 0\\x&{\text{if }}x>0\end{cases}}\\{}={}&\max\{0,x\}=x{\textbf {1}}_{x>0}\end{aligned}}}
  



  
    
      
        
          
            {
            
              
                
                  0
                
                
                  
                    ifÂ 
                  
                  x
                  <
                  0
                
              
              
                
                  1
                
                
                  
                    ifÂ 
                  
                  x
                  >
                  0
                
              
              
                
                  
                    undefined
                  
                
                
                  
                    ifÂ 
                  
                  x
                  =
                  0
                
              
            
            
          
        
      
    
    {\displaystyle {\begin{cases}0&{\text{if }}x<0\\1&{\text{if }}x>0\\{\text{undefined}}&{\text{if }}x=0\end{cases}}}
  



  
    
      
        [
        0
        ,
        â
        )
      
    
    {\displaystyle [0,\infty )}
  



  
    
      
        
          C
          
            0
          
        
      
    
    {\displaystyle C^{0}}
  



Gaussian Error Linear Unit (GELU)[6]




  
    
      
        
          
            
              
              
                
                  
                    1
                    2
                  
                
                x
                
                  (
                  
                    1
                    +
                    
                      erf
                    
                    
                      (
                      
                        
                          x
                          
                            2
                          
                        
                      
                      )
                    
                  
                  )
                
              
            
            
              
                

                
                =
                

                
              
              
                x
                Î¦
                (
                x
                )
              
            
          
        
      
    
    {\displaystyle {\begin{aligned}&{\frac {1}{2}}x\left(1+{\text{erf}}\left({\frac {x}{\sqrt {2}}}\right)\right)\\{}={}&x\Phi (x)\end{aligned}}}
  



  
    
      
        Î¦
        (
        x
        )
        +
        x
        Ï
        (
        x
        )
      
    
    {\displaystyle \Phi (x)+x\phi (x)}
  



  
    
      
        (
        â
        0.17
        â¦
        ,
        â
        )
      
    
    {\displaystyle (-0.17\ldots ,\infty )}
  



  
    
      
        
          C
          
            â
          
        
      
    
    {\displaystyle C^{\infty }}
  



Softplus[10]




  
    
      
        ln
        â¡
        
          (
          
            1
            +
            
              e
              
                x
              
            
          
          )
        
      
    
    {\displaystyle \ln \left(1+e^{x}\right)}
  



  
    
      
        
          
            1
            
              1
              +
              
                e
                
                  â
                  x
                
              
            
          
        
      
    
    {\displaystyle {\frac {1}{1+e^{-x}}}}
  



  
    
      
        (
        0
        ,
        â
        )
      
    
    {\displaystyle (0,\infty )}
  



  
    
      
        
          C
          
            â
          
        
      
    
    {\displaystyle C^{\infty }}
  



Exponential linear unit (ELU)[11]




  
    
      
        
          
            {
            
              
                
                  Î±
                  
                    (
                    
                      
                        e
                        
                          x
                        
                      
                      â
                      1
                    
                    )
                  
                
                
                  
                    ifÂ 
                  
                  x
                  â¤
                  0
                
              
              
                
                  x
                
                
                  
                    ifÂ 
                  
                  x
                  >
                  0
                
              
            
            
          
        
      
    
    {\displaystyle {\begin{cases}\alpha \left(e^{x}-1\right)&{\text{if }}x\leq 0\\x&{\text{if }}x>0\end{cases}}}
  

with parameter 
  
    
      
        Î±
      
    
    {\displaystyle \alpha }
  



  
    
      
        
          
            {
            
              
                
                  Î±
                  
                    e
                    
                      x
                    
                  
                
                
                  
                    ifÂ 
                  
                  x
                  <
                  0
                
              
              
                
                  1
                
                
                  
                    ifÂ 
                  
                  x
                  >
                  0
                
              
              
                
                  1
                
                
                  
                    ifÂ 
                  
                  x
                  =
                  0
                  
                    Â andÂ 
                  
                  Î±
                  =
                  1
                
              
            
            
          
        
      
    
    {\displaystyle {\begin{cases}\alpha e^{x}&{\text{if }}x<0\\1&{\text{if }}x>0\\1&{\text{if }}x=0{\text{ and }}\alpha =1\end{cases}}}
  



  
    
      
        (
        â
        Î±
        ,
        â
        )
      
    
    {\displaystyle (-\alpha ,\infty )}
  



  
    
      
        
          
            {
            
              
                
                  
                    C
                    
                      1
                    
                  
                
                
                  
                    ifÂ 
                  
                  Î±
                  =
                  1
                
              
              
                
                  
                    C
                    
                      0
                    
                  
                
                
                  
                    otherwise
                  
                
              
            
            
          
        
      
    
    {\displaystyle {\begin{cases}C^{1}&{\text{if }}\alpha =1\\C^{0}&{\text{otherwise}}\end{cases}}}
  



Scaled exponential linear unit (SELU)[12]




  
    
      
        Î»
        
          
            {
            
              
                
                  Î±
                  (
                  
                    e
                    
                      x
                    
                  
                  â
                  1
                  )
                
                
                  
                    ifÂ 
                  
                  x
                  <
                  0
                
              
              
                
                  x
                
                
                  
                    ifÂ 
                  
                  x
                  â¥
                  0
                
              
            
            
          
        
      
    
    {\displaystyle \lambda {\begin{cases}\alpha (e^{x}-1)&{\text{if }}x<0\\x&{\text{if }}x\geq 0\end{cases}}}
  

with parameters 
  
    
      
        Î»
        =
        1.0507
      
    
    {\displaystyle \lambda =1.0507}
  
 and 
  
    
      
        Î±
        =
        1.67326
      
    
    {\displaystyle \alpha =1.67326}
  



  
    
      
        Î»
        
          
            {
            
              
                
                  Î±
                  
                    e
                    
                      x
                    
                  
                
                
                  
                    ifÂ 
                  
                  x
                  <
                  0
                
              
              
                
                  1
                
                
                  
                    ifÂ 
                  
                  x
                  â¥
                  0
                
              
            
            
          
        
      
    
    {\displaystyle \lambda {\begin{cases}\alpha e^{x}&{\text{if }}x<0\\1&{\text{if }}x\geq 0\end{cases}}}
  



  
    
      
        (
        â
        Î»
        Î±
        ,
        â
        )
      
    
    {\displaystyle (-\lambda \alpha ,\infty )}
  



  
    
      
        
          C
          
            0
          
        
      
    
    {\displaystyle C^{0}}
  



Leaky rectified linear unit (Leaky ReLU)[13]




  
    
      
        
          
            {
            
              
                
                  0.01
                  x
                
                
                  
                    ifÂ 
                  
                  x
                  <
                  0
                
              
              
                
                  x
                
                
                  
                    ifÂ 
                  
                  x
                  â¥
                  0
                
              
            
            
          
        
      
    
    {\displaystyle {\begin{cases}0.01x&{\text{if }}x<0\\x&{\text{if }}x\geq 0\end{cases}}}
  



  
    
      
        
          
            {
            
              
                
                  0.01
                
                
                  
                    ifÂ 
                  
                  x
                  <
                  0
                
              
              
                
                  1
                
                
                  
                    ifÂ 
                  
                  x
                  â¥
                  0
                
              
            
            
          
        
      
    
    {\displaystyle {\begin{cases}0.01&{\text{if }}x<0\\1&{\text{if }}x\geq 0\end{cases}}}
  



  
    
      
        (
        â
        â
        ,
        â
        )
      
    
    {\displaystyle (-\infty ,\infty )}
  



  
    
      
        
          C
          
            0
          
        
      
    
    {\displaystyle C^{0}}
  



Parametric rectified linear unit (PReLU)[14]




  
    
      
        
          
            {
            
              
                
                  Î±
                  x
                
                
                  
                    ifÂ 
                  
                  x
                  <
                  0
                
              
              
                
                  x
                
                
                  
                    ifÂ 
                  
                  x
                  â¥
                  0
                
              
            
            
          
        
      
    
    {\displaystyle {\begin{cases}\alpha x&{\text{if }}x<0\\x&{\text{if }}x\geq 0\end{cases}}}
  

with parameter 
  
    
      
        Î±
      
    
    {\displaystyle \alpha }
  



  
    
      
        
          
            {
            
              
                
                  Î±
                
                
                  
                    ifÂ 
                  
                  x
                  <
                  0
                
              
              
                
                  1
                
                
                  
                    ifÂ 
                  
                  x
                  â¥
                  0
                
              
            
            
          
        
      
    
    {\displaystyle {\begin{cases}\alpha &{\text{if }}x<0\\1&{\text{if }}x\geq 0\end{cases}}}
  



  
    
      
        (
        â
        â
        ,
        â
        )
      
    
    {\displaystyle (-\infty ,\infty )}
  



  
    
      
        
          C
          
            0
          
        
      
    
    {\displaystyle C^{0}}
  



Sigmoid linear unit (SiLU,[6] Sigmoid shrinkage,[15] SiL,[16] or Swish-â1[17])




  
    
      
        
          
            x
            
              1
              +
              
                e
                
                  â
                  x
                
              
            
          
        
      
    
    {\displaystyle {\frac {x}{1+e^{-x}}}}
  



  
    
      
        
          
            
              1
              +
              
                e
                
                  â
                  x
                
              
              +
              x
              
                e
                
                  â
                  x
                
              
            
            
              
                (
                
                  1
                  +
                  
                    e
                    
                      â
                      x
                    
                  
                
                )
              
              
                2
              
            
          
        
      
    
    {\displaystyle {\frac {1+e^{-x}+xe^{-x}}{\left(1+e^{-x}\right)^{2}}}}
  



  
    
      
        [
        â
        0.278
        â¦
        ,
        â
        )
      
    
    {\displaystyle [-0.278\ldots ,\infty )}
  



  
    
      
        
          C
          
            â
          
        
      
    
    {\displaystyle C^{\infty }}
  



Gaussian




  
    
      
        
          e
          
            â
            
              x
              
                2
              
            
          
        
      
    
    {\displaystyle e^{-x^{2}}}
  



  
    
      
        â
        2
        x
        
          e
          
            â
            
              x
              
                2
              
            
          
        
      
    
    {\displaystyle -2xe^{-x^{2}}}
  



  
    
      
        (
        0
        ,
        1
        ]
      
    
    {\displaystyle (0,1]}
  



  
    
      
        
          C
          
            â
          
        
      
    
    {\displaystyle C^{\infty }}
  


The following table lists activation functions that are not functions of a single fold x from the previous layer or layers:




Name

Equation, 
  
    
      
        
          f
          
            i
          
        
        
          (
          
            
              
                x
                â
              
            
          
          )
        
      
    
    {\displaystyle f_{i}\left({\vec {x}}\right)}
  


Derivatives, 
  
    
      
        
          
            
              â
              
                f
                
                  i
                
              
              
                (
                
                  
                    
                      x
                      â
                    
                  
                
                )
              
            
            
              â
              
                x
                
                  j
                
              
            
          
        
      
    
    {\displaystyle {\frac {\partial f_{i}\left({\vec {x}}\right)}{\partial x_{j}}}}
  


Range

Order of continuity


Softmax


  
    
      
        
          
            
              e
              
                
                  x
                  
                    i
                  
                
              
            
            
              
                â
                
                  j
                  =
                  1
                
                
                  J
                
              
              
                e
                
                  
                    x
                    
                      j
                    
                  
                
              
            
          
        
      
    
    {\displaystyle {\frac {e^{x_{i}}}{\sum _{j=1}^{J}e^{x_{j}}}}}
  
 Â Â  for i = 1, â¦, J


  
    
      
        
          f
          
            i
          
        
        
          (
          
            
              
                x
                â
              
            
          
          )
        
        
          (
          
            
              Î´
              
                i
                j
              
            
            â
            
              f
              
                j
              
            
            
              (
              
                
                  
                    x
                    â
                  
                
              
              )
            
          
          )
        
      
    
    {\displaystyle f_{i}\left({\vec {x}}\right)\left(\delta _{ij}-f_{j}\left({\vec {x}}\right)\right)}
  
[1][2]


  
    
      
        (
        0
        ,
        1
        )
      
    
    {\displaystyle (0,1)}
  



  
    
      
        
          C
          
            â
          
        
      
    
    {\displaystyle C^{\infty }}
  



Maxout[18]


  
    
      
        
          max
          
            i
          
        
        
          x
          
            i
          
        
      
    
    {\displaystyle \max _{i}x_{i}}
  



  
    
      
        
          
            {
            
              
                
                  1
                
                
                  
                    ifÂ 
                  
                  j
                  =
                  
                    
                      argmax
                      i
                    
                  
                  
                  
                    x
                    
                      i
                    
                  
                
              
              
                
                  0
                
                
                  
                    ifÂ 
                  
                  j
                  â 
                  
                    
                      argmax
                      i
                    
                  
                  
                  
                    x
                    
                      i
                    
                  
                
              
            
            
          
        
      
    
    {\displaystyle {\begin{cases}1&{\text{if }}j={\underset {i}{\operatorname {argmax} }}\,x_{i}\\0&{\text{if }}j\neq {\underset {i}{\operatorname {argmax} }}\,x_{i}\end{cases}}}
  



  
    
      
        (
        â
        â
        ,
        â
        )
      
    
    {\displaystyle (-\infty ,\infty )}
  



  
    
      
        
          C
          
            0
          
        
      
    
    {\displaystyle C^{0}}
  


.mw-parser-output .citation{word-wrap:break-word}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}^  Here, 
  
    
      
        
          Î´
          
            i
            j
          
        
      
    
    {\displaystyle \delta _{ij}}
  
 is the Kronecker delta.
^  For instance, 
  
    
      
        j
      
    
    {\displaystyle j}
  
 could be iterating through the number of kernels of the previous neural network layer while 
  
    
      
        i
      
    
    {\displaystyle i}
  
 iterates through the number of kernels of the current layer.
See also[edit]
Logistic function
Rectifier (neural networks)
Stability (learning theory)
Softmax function
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Noel, Matthew Mithra; Bharadwaj, Shubham; Muthiah-Nakarajan, Venkataraman; Dutta, Praneet; Amali, Geraldine Bessie (2022-01-11). "Biologically Inspired Oscillating Activation Functions Can Bridge the Performance Gap between Biological and Artificial Neurons". arXiv:2111.04020 [cs]. arXiv:2111.04020.

^ Noel, Mathew Mithra; L, Arunkumar; Trivedi, Advait; Dutta, Praneet (2021-09-04). "Growing Cosine Unit: A Novel Oscillatory Activation Function That Can Speedup Training and Reduce Parameters in Convolutional Neural Networks". arXiv:2108.12943 [cs]. arXiv:2108.12943.

^ Hinkelmann, Knut. "Neural Networks, p. 7" (PDF). University of Applied Sciences Northwestern Switzerland.[dead link]

^ Hodgkin, A. L.; Huxley, A. F. (1952-08-28). "A quantitative description of membrane current and its application to conduction and excitation in nerve". The Journal of Physiology. 117 (4): 500â544. doi:10.1113/jphysiol.1952.sp004764. PMCÂ 1392413. PMIDÂ 12991237.

^ Hinton, Geoffrey; Deng, Li; Deng, Li; Yu, Dong; Dahl, George; Mohamed, Abdel-rahman; Jaitly, Navdeep; Senior, Andrew; Vanhoucke, Vincent; Nguyen, Patrick; Sainath, Tara; Kingsbury, Brian (2012). "Deep Neural Networks for Acoustic Modeling in Speech Recognition". IEEE Signal Processing Magazine. 29 (6): 82â97. doi:10.1109/MSP.2012.2205597. S2CIDÂ 206485943.

^ Jump up to: a b c Hendrycks, Dan; Gimpel, Kevin (2016). "Gaussian Error Linear Units (GELUs)". arXiv:1606.08415 [cs.LG].

^ Cybenko, G. (December 1989). "Approximation by superpositions of a sigmoidal function". Mathematics of Control, Signals, and Systems. 2 (4): 303â314. doi:10.1007/BF02551274. ISSNÂ 0932-4194. S2CIDÂ 3958369.

^ Snyman, Jan (3 March 2005). Practical Mathematical Optimization: An Introduction to Basic Optimization Theory and Classical and New Gradient-Based Algorithms. Springer Science & Business Media. ISBNÂ 978-0-387-24348-1.

^ Nair, Vinod; Hinton, Geoffrey E. (2010), "Rectified Linear Units Improve Restricted Boltzmann Machines", 27th International Conference on International Conference on Machine Learning, ICML'10, USA: Omnipress, pp.Â 807â814, ISBNÂ 9781605589077

^ Glorot, Xavier; Bordes, Antoine; Bengio, Yoshua (2011). "Deep sparse rectifier neural networks" (PDF). International Conference on Artificial Intelligence and Statistics.

^ Clevert, Djork-ArnÃ©; Unterthiner, Thomas; Hochreiter, Sepp (2015-11-23). "Fast and Accurate Deep Network Learning by Exponential Linear Units (ELUs)". arXiv:1511.07289 [cs.LG].

^ Klambauer, GÃ¼nter; Unterthiner, Thomas; Mayr, Andreas; Hochreiter, Sepp (2017-06-08). "Self-Normalizing Neural Networks". Advances in Neural Information Processing Systems. 30 (2017). arXiv:1706.02515. Bibcode:2017arXiv170602515K.

^ Maas, Andrew L.; Hannun, Awni Y.; Ng, Andrew Y. (June 2013). "Rectifier nonlinearities improve neural network acoustic models". Proc. ICML. 30 (1). S2CIDÂ 16489696.

^ He, Kaiming; Zhang, Xiangyu; Ren, Shaoqing; Sun, Jian (2015-02-06). "Delving Deep into Rectifiers: Surpassing Human-Level Performance on ImageNet Classification". arXiv:1502.01852 [cs.CV].

^ 
Atto, Abdourrahmane M.; Pastor, Dominique; Mercier, GrÃ©goire (2008), "Smooth sigmoid wavelet shrinkage for non-parametric estimation" (PDF), 2008 IEEE International Conference on Acoustics, Speech and Signal Processing, doi:10.1109/ICASSP.2008.4518347, S2CIDÂ 9959057

^ Elfwing, Stefan; Uchibe, Eiji; Doya, Kenji (2018). "Sigmoid-Weighted Linear Units for Neural Network Function Approximation in Reinforcement Learning". Neural Networks. 107: 3â11. arXiv:1702.03118. doi:10.1016/j.neunet.2017.12.012. PMIDÂ 29395652. S2CIDÂ 6940861.

^ Ramachandran, Prajit; Zoph, Barret; Le, Quoc V (2017). "Searching for Activation Functions". arXiv:1710.05941 [cs.NE].

^ Goodfellow, Ian J.; Warde-Farley, David; Mirza, Mehdi; Courville, Aaron; Bengio, Yoshua (2013). "Maxout Networks". JMLR Workshop and Conference Proceedings. 28 (3): 1319â1327. arXiv:1302.4389. Bibcode:2013arXiv1302.4389G.


.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}hide.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteDifferentiable computingGeneral
Differentiable programming
Neural Turing machine
Differentiable neural computer
Automatic differentiation
Neuromorphic engineering
Cable theory
Pattern recognition
Computational learning theory
Tensor calculus
Concepts
Gradient descent
SGD
Clustering
Regression
Overfitting
Adversary
Attention
Convolution
Loss functions
Backpropagation
Normalization
Activation
Softmax
Sigmoid
Rectifier
Regularization
Datasets
Augmentation
Programming languages
Python
Julia
Application
Machine learning
Artificial neural network
Deep learning
Scientific computing
Artificial Intelligence
Hardware
IPU
TPU
VPU
Memristor
SpiNNaker
Software library
TensorFlow
PyTorch
Keras
Theano
ImplementationAudio-visual
AlexNet
WaveNet
Human image synthesis
HWR
OCR
Speech synthesis
Speech recognition
Facial recognition
AlphaFold
DALL-E
Verbal
Word2vec
Transformer
BERT
NMT
Project Debater
Watson
GPT-2
GPT-3
Decisional
AlphaGo
AlphaZero
Q-learning
SARSA
OpenAI Five
Self-driving car
MuZero
Action selection
Robot control
People
Alex Graves
Ian Goodfellow
Yoshua Bengio
Geoffrey Hinton
Yann LeCun
Andrew Ng
Demis Hassabis
David Silver
Fei-Fei Li
Organizations
DeepMind
OpenAI
MIT CSAIL
Mila
Google Brain
FAIR

 Portals
Computer programming
Technology
 Category
Artificial neural networks
Machine learning





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Activation_function&oldid=1068551485"
		Categories: Artificial neural networksHidden categories: All articles with dead external linksArticles with dead external links from October 2021All articles with unsourced statementsArticles with unsourced statements from January 2016
	
