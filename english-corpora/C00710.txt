
Title:
Rule 110
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Elementary cellular automaton
This article includes a list of general references, but it remains largely unverified because it lacks sufficient corresponding inline citations. Please help to improve this article by introducing more precise citations.  (November 2012) (Learn how and when to remove this template message)
The Rule 110 cellular automaton (often called simply Rule 110) is an elementary cellular automaton with interesting behavior on the boundary between stability and chaos. In this respect, it is similar to Conway's Game of Life. Like Life, Rule 110 with a particular repeating background pattern is known to be Turing complete.[1] This implies that, in principle, any calculation or computer program can be simulated using this automaton.

  An example run of a rule 110 cellular automaton
Contents

1 Definition
2 History
3 Interesting properties
4 The proof of universality

4.1 Spaceships in Rule 110
4.2 Constructing the cyclic tag system
4.3 Cyclic tag system working


5 See also
6 References

6.1 Works cited


7 Further reading
8 External links



Definition[edit]
In an elementary cellular automaton, a one-dimensional pattern of 0s and 1s evolves according to a simple set of rules. Whether a point in the pattern will be 0 or 1 in the new generation depends on its current value, as well as on those of its two neighbors.

  An animation of the way the rules of a 1D cellular automaton determine the next generation, using Rule 110.
The Rule 110 automaton has the following set of rules:




Current pattern

111

110

101

100

011

010

001

000


New state for center cell

0

1

1

0

1

1

1

0

The name "Rule 110" derives from the fact that this rule can be summarized in the binary sequence 01101110; interpreted as a binary number, this corresponds to the decimal value 110.

History[edit]
In 2004, Matthew Cook published a proof that Rule 110 with a particular repeating background pattern is Turing complete, i.e., capable of universal computation, which Stephen Wolfram had conjectured in 1985.[1] Cook presented his proof at the Santa Fe Institute conference CA98 before publication of Wolfram's book A New Kind of Science. This resulted in a legal affair based on a non-disclosure agreement with Wolfram Research. Wolfram Research blocked publication of Cook's proof for several years.[2]

Interesting properties[edit]
Among the 88 possible unique elementary cellular automata, Rule 110 is the only one for which Turing completeness has been proven, although proofs for several similar rules should follow as simple corollaries (e.g. Rule 124, which is the horizontal reflection of Rule 110).  Rule 110 is arguably the simplest known Turing complete system.[1][3]
Rule 110, like the Game of Life, exhibits what Wolfram calls "Class 4 behavior", which is neither completely stable nor completely chaotic. Localized structures appear and interact in complex ways.[4]
Matthew Cook proved Rule 110 capable of supporting universal computation by successively emulating cyclic tag systems, then 2-tag system, and then Turing machines. The final stage has exponential time overhead because the Turing machine's tape is encoded with a unary numeral system. Neary and Woods (2006) presented a different construction that replaces 2-tag systems with clockwise Turing machines and has polynomial overhead.[5]

The proof of universality[edit]
Matthew Cook presented his proof of the universality of Rule 110 at a Santa Fe Institute conference, held before the publication of A New Kind of Science. Wolfram Research claimed that this presentation violated Cook's nondisclosure agreement with his employer, and obtained a court order excluding Cook's paper from the published conference proceedings. The existence of Cook's proof nevertheless became known. Interest in his proof stemmed not so much from its result as from its methods, specifically from the technical details of its construction.[6] The character of Cook's proof differs considerably from the discussion of Rule 110 in A New Kind of Science. Cook has since written a paper setting out his complete proof.[1]
Cook proved that Rule 110 was universal (or Turing complete) by showing it was possible to use the rule to emulate another computational model, the cyclic tag system, which is known to be universal. He first isolated a number of spaceships, self-perpetuating localized patterns, that could be constructed on an infinitely repeating pattern in a Rule 110 universe. He then devised a way for combinations of these structures to interact in a manner that could be exploited for computation.

Spaceships in Rule 110[edit]
The function of the universal machine in Rule 110 requires a finite number of localized patterns to be embedded within an infinitely repeating background pattern.  The background pattern is fourteen cells wide and repeats itself exactly every seven iterations.  The pattern is 00010011011111.
Three localized patterns are of particular importance in the Rule 110 universal machine.  They are shown in the image below, surrounded by the repeating background pattern.  The leftmost structure shifts to the right two cells and repeats every three generations.  It comprises the sequence 0001110111 surrounded by the background pattern given above, as well as two different evolutions of this sequence.
In the figures, time elapses from top to bottom:  the top line represents the initial state, and each following line the state at the next time.

The center structure shifts left eight cells and repeats every thirty generations.  It comprises the sequence 1001111 surrounded by the background pattern given above, as well as twenty-nine different evolutions of this sequence.
The rightmost structure remains stationary and repeats every seven generations.  It comprises the sequence 111 surrounded by the background pattern given above, as well as five different evolutions of this sequence.
Below is an image showing the first two structures passing through each other without interacting other than by translation (left), and interacting to form the third structure (right).

There are numerous other spaceships in Rule 110, but they do not feature as prominently in the universality proof.

Constructing the cyclic tag system[edit]
The cyclic tag system machinery has three main components:

A data string which is stationary;
An infinitely repeating series of finite production rules which start on the right and move leftward;
An infinitely repeating series of clock pulses which start on the left and move rightward.
The initial spacing between these components is of utmost importance.  In order for the cellular automaton to implement the cyclic tag system, the automaton's initial conditions must be carefully selected so that the various localized structures contained therein interact in a highly ordered way.
The data string in the cyclic tag system is represented by a series of stationary repeating structures of the type shown above.  Varying amounts of horizontal space between these structures serve to differentiate 1 symbols from 0 symbols.  These symbols represent the word on which the cyclic tag system is operating, and the first such symbol is destroyed upon consideration of every production rule.  When this leading symbol is a 1, new symbols are added to the end of the string; when it is 0, no new symbols are added.  The mechanism for achieving this is described below.
Entering from the right are a series of left-moving structures of the type shown above, separated by varying amounts of horizontal space.  Large numbers of these structures are combined with different spacings to represent 0s and 1s in the cyclic tag system's production rules.  Because the tag system's production rules are known at the time of creation of the program, and infinitely repeating, the patterns of 0s and 1s at the initial condition can be represented by an infinitely repeating string.  Each production rule is separated from the next by another structure known as a rule separator (or block separator), which moves towards the left at the same rate as the encoding of the production rules.
When a left-moving rule separator encounters a stationary symbol in the cyclic tag system's data string, it causes the first symbol it encounters to be destroyed.  However, its subsequent behavior varies depending on whether the symbol encoded by the string had been a 0 or a 1.  If a 0, the rule separator changes into a new structure which blocks the incoming production rule.  This new structure is destroyed when it encounters the next rule separator.
If, on the other hand, the symbol in the string was a 1, the rule separator changes into a new structure which admits the incoming production rule.  Although the new structure is again destroyed when it encounters the next rule separator, it first allows a series of structures to pass through towards the left.  These structures are then made to append themselves to the end of the cyclic tag system's data string.  This final transformation is accomplished by means of a series of infinitely repeating, right-moving  clock pulses in the right-moving pattern shown above.  The clock pulses transform incoming left-moving 1 symbols from a production rule into stationary 1 symbols of the data string, and incoming 0 symbols from a production rule into stationary 0 symbols of the data string.

Cyclic tag system working[edit]

The figure above is the schematic diagram of the reconstruction of a cyclic tag system in Rule 110.

See also[edit]
Rule 30
Rule 90
Rule 184
References[edit]

^ Jump up to: a b c d Cook (2004).

^ Giles (2002).

^ Wolfram (2002), pp.Â 169, 675â691

^ Wolfram (2002), p.Â 229

^ Neary & Woods (2006).

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Martinez, Genaro J.; Seck Tuoh Mora, Juan; Chapa, Sergio; Lemaitre, Christian (April 2019). "Brief notes and history computing in Mexico during 50 years". International Journal of Parallel, Emergent and Distributed Systems. 35: 1â8. arXiv:1905.07527. doi:10.1080/17445760.2019.1608990. Retrieved 2020-04-15.


Works cited[edit]
.mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li{margin-left:0;padding-left:3.2em;text-indent:-3.2em}.mw-parser-output .refbegin-hanging-indents ul,.mw-parser-output .refbegin-hanging-indents ul li{list-style:none}@media(max-width:720px){.mw-parser-output .refbegin-hanging-indents>ul>li{padding-left:1.6em;text-indent:-1.6em}}.mw-parser-output .refbegin-columns{margin-top:0.3em}.mw-parser-output .refbegin-columns ul{margin-top:0}.mw-parser-output .refbegin-columns li{page-break-inside:avoid;break-inside:avoid-column}
Cook, Matthew (2004). "Universality in Elementary Cellular Automata" (PDF). Complex Systems. 15: 1â40.
Giles, Jim (2002). "What kind of science is this?". Nature. 417 (6886): 216â218. Bibcode:2002Natur.417..216G. doi:10.1038/417216a. PMIDÂ 12015565.
Neary, Turlough; Woods, Damien (2006). "P-completeness of cellular automaton Rule 110".  In Bugliesi, Michele; Preneel, Bart; Sassone, Vladimiro; Wegener, Ingo (eds.). Automata, Languages and Programming: 33rd International Colloquium, ICALP 2006, Venice, Italy, July 10-14, 2006, Proceedings, Part I. Lecture Notes in Computer Science. Vol.Â 4051. Springer. pp.Â 132â143. doi:10.1007/11786986_13.
Wolfram, Stephen (2002). A New Kind of Science. Wolfram Media. ISBNÂ 1-57955-008-8.

Further reading[edit]

Cook, Matthew (2008). "A Concrete View of Rule 110 Computation".  In Neary, T.; Woods, D.; Seda, A. K.; Murphy, N. (eds.). The Complexity of Simple Programs. Electronic Proceedings in Theoretical Computer Science. Vol.Â 1. pp.Â 31â55. arXiv:0906.3248v1. doi:10.4204/EPTCS.1.4.
MartÃ­nez, Genaro J.; Adamatzky, A.; Chen, Fangyue; Chua, Leon (2012). "On Soliton Collisions between Localizations in Complex Elementary Cellular Automata: Rules 54 and 110 and Beyond". Complex Systems. 21 (2): 117â142. arXiv:1301.6258. doi:10.25088/ComplexSystems.21.2.117.
MartÃ­nez, Genaro J.; Adamatzky, A.; Stephens, Christopher R.; Hoeflich, Alejandro F. (2011). "Cellular automaton supercolliders". Int. J. Mod. Phys. C. 22 (4): 419â439. arXiv:1105.4332. Bibcode:2011IJMPC..22..419M. doi:10.1142/S0129183111016348.
MartÃ­nez, Genaro J.; McIntosh, Harold V.; Mora, Juan C.S.T.; Vergara, Sergio V.C. (2003â2008). "Reproducing the cyclic tag systems developed by Matthew Cook with Rule 110 using the phases fi_1" (PDF). Journal of Cellular Automata. 6 (2â3): 121â161.
MartÃ­nez, Genaro J.; McIntosh, Harold V.; Mora, Juan C.S.T.; Vergara, Sergio V.C. (2008). "Determining a regular language by glider-based structures called phases fi_1 in Rule 110". Journal of Cellular Automata. 3 (3): 231â270. arXiv:0706.3348v1. Bibcode:2007arXiv0706.3348J.
MartÃ­nez, Genaro J.; McIntosh, Harold V.; Mora, Juan C.S.T.; Vergara, Sergio V.C. (2007). "Rule 110 objects and other constructions based-collisions" (PDF). Journal of Cellular Automata. 2 (3): 219â242.
MartÃ­nez, Genaro J.; McIntosh, Harold V.; Mora, Juan C.S.T. (2006). "Gliders in Rule 110" (PDF). Int. J. Of Unconventional Computing. 2: 1â49.
MartÃ­nez, Genaro J.; McIntosh, Harold V.; Mora, Juan C.S.T. (2003). "Production of gliders by collisions in Rule 110" (PDF). Lecture Notes in Computer Science. 2801: 175â182. doi:10.1007/978-3-540-39432-7_19. ISBNÂ 978-3-540-20057-4.
MartÃ­nez, Genaro J.; McIntosh, Harold V. (2001). "ATLAS: Collisions of gliders as phases of ether in rule 110".
McIntosh, Harold V. (1999). "Rule 110 as it relates to the presence of gliders" (PDF).
McIntosh, Harold V. (2002). "Rule 110 Is Universal!" (PDF).

External links[edit]



Wikimedia Commons has media related to Rule 110.

Rule 110 â from Wolfram MathWorld
Rule 110 in Wolfram's atlas of cellular automata
Rule 110 repository
Marble-based mechanical implementation of a 4-bit Rule 110 computer




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Rule_110&oldid=1061083772"
		Categories: Cellular automaton rulesWolfram codeHidden categories: Articles with short descriptionShort description is different from WikidataArticles lacking in-text citations from November 2012All articles lacking in-text citationsCommons category link from Wikidata
	
