
Title:
Quantum programming
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		.mw-parser-output .sidebar{width:22em;float:right;clear:right;margin:0.5em 0 1em 1em;background:#f8f9fa;border:1px solid #aaa;padding:0.2em;text-align:center;line-height:1.4em;font-size:88%;border-collapse:collapse;display:table}body.skin-minerva .mw-parser-output .sidebar{display:table!important;float:right!important;margin:0.5em 0 1em 1em!important}.mw-parser-output .sidebar-subgroup{width:100%;margin:0;border-spacing:0}.mw-parser-output .sidebar-left{float:left;clear:left;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-none{float:none;clear:both;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-outer-title{padding:0 0.4em 0.2em;font-size:125%;line-height:1.2em;font-weight:bold}.mw-parser-output .sidebar-top-image{padding:0.4em}.mw-parser-output .sidebar-top-caption,.mw-parser-output .sidebar-pretitle-with-top-image,.mw-parser-output .sidebar-caption{padding:0.2em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-pretitle{padding:0.4em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-title,.mw-parser-output .sidebar-title-with-pretitle{padding:0.2em 0.8em;font-size:145%;line-height:1.2em}.mw-parser-output .sidebar-title-with-pretitle{padding:0.1em 0.4em}.mw-parser-output .sidebar-image{padding:0.2em 0.4em 0.4em}.mw-parser-output .sidebar-heading{padding:0.1em 0.4em}.mw-parser-output .sidebar-content{padding:0 0.5em 0.4em}.mw-parser-output .sidebar-content-with-subgroup{padding:0.1em 0.4em 0.2em}.mw-parser-output .sidebar-above,.mw-parser-output .sidebar-below{padding:0.3em 0.8em;font-weight:bold}.mw-parser-output .sidebar-collapse .sidebar-above,.mw-parser-output .sidebar-collapse .sidebar-below{border-top:1px solid #aaa;border-bottom:1px solid #aaa}.mw-parser-output .sidebar-navbar{text-align:right;font-size:115%;padding:0 0.4em 0.4em}.mw-parser-output .sidebar-list-title{padding:0 0.4em;text-align:left;font-weight:bold;line-height:1.6em;font-size:105%}.mw-parser-output .sidebar-list-title-c{padding:0 0.4em;text-align:center;margin:0 3.3em}@media(max-width:720px){body.mediawiki .mw-parser-output .sidebar{width:100%!important;clear:both;float:none!important;margin-left:0!important;margin-right:0!important}}Programming paradigms
Action
Agent-oriented
Array-oriented
Automata-based
Concurrent computing
Choreographic programming
Relativistic programming
Data-driven
Declarative (contrast: Imperative)
Functional
Functional logic
Purely functional
Logic
Abductive logic
Answer set
Concurrent logic
Functional logic
Inductive logic
Constraint
Constraint logic
Concurrent constraint logic
Dataflow
Flow-based
Reactive
Functional reactive
Ontology
Query language
Differentiable
Dynamic/scripting
Event-driven
Function-level (contrast: Value-level)
Point-free style
Concatenative
Generic
Imperative (contrast: Declarative)
Procedural
Object-oriented
Polymorphic
Intentional
Language-oriented
Domain-specific
Literate
Natural-language programming
Metaprogramming
Automatic
Inductive programming
Reflective
Attribute-oriented
Macro
Template
Non-structured (contrast: Structured)
Array
Nondeterministic
Parallel computing
Process-oriented
Probabilistic
Quantum
Set-theoretic
Stack-based
Structured (contrast: Non-structured)
Block-structured
Structured concurrency
Object-oriented
Actor-based
Class-based
Concurrent
Prototype-based
By separation of concerns:
Aspect-oriented
Role-oriented
Subject-oriented
Recursive
Symbolic
Value-level (contrast: Function-level)
.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vte
Quantum programming is the process of assembling sequences of instructions, called quantum programs, that are capable of running on a quantum computer. Quantum programming languages help express quantum algorithms using high-level constructs.[1] The field is deeply rooted in the open-source philosophy and as a result most of the quantum software discussed in this article is freely available as open-source software.[2]

Contents

1 Quantum instruction sets

1.1 cQASM
1.2 Quil
1.3 OpenQASM
1.4 Blackbird


2 Quantum software development kits

2.1 SDKs with access to quantum processors

2.1.1 ProjectQ
2.1.2 Qiskit
2.1.3 Forest
2.1.4 t|ket>
2.1.5 Strawberry Fields
2.1.6 PennyLane


2.2 SDKs based on simulators

2.2.1 Quantum Development Kit
2.2.2 Cirq




3 Quantum programming languages

3.1 Imperative languages

3.1.1 QCL
3.1.2 Quantum pseudocode
3.1.3 Q#
3.1.4 Q|SI>
3.1.5 Q language
3.1.6 qGCL
3.1.7 QMASM
3.1.8 Scaffold
3.1.9 Silq


3.2 Functional languages

3.2.1 QFC and QPL
3.2.2 QML
3.2.3 LIQUi|>
3.2.4 Quantum lambda calculi
3.2.5 Quipper
3.2.6 funQ




4 References
5 Further reading
6 External links



Quantum instruction sets[edit]
Quantum instruction sets are used to turn higher level algorithms into physical instructions that can be executed on quantum processors. Sometimes these instructions are specific to a given hardware platform, e.g. ion traps or superconducting qubits.

cQASM[edit]
cQASM,[3] also known as common QASM, is a hardware-agnostic QASM which guarantees the interoperability between all the quantum compilation and simulation tools. It was introduced by the QCA Lab at TUDelft.

Quil[edit]
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}Main article: Quil (instruction set architecture)
Quil is an instruction set architecture for quantum computing that first introduced a shared quantum/classical memory model. It was introduced by Robert Smith, Michael Curtis, and William Zeng in A Practical Quantum Instruction Set Architecture.[4]  Many quantum algorithms (including quantum teleportation, quantum error correction, simulation,[5][6] and optimization algorithms[7]) require a shared memory architecture.

OpenQASM[edit]
Main article: OpenQASM
OpenQASM[8] is the intermediate representation introduced by IBM for use with Qiskit and the IBM Q Experience.

Blackbird[edit]
Blackbird[9][10] is a quantum instruction set and intermediate representation used by Xanadu Quantum Technologies and Strawberry Fields. It is designed to represent continuous-variable quantum programs that can run on photonic quantum hardware.

Quantum software development kits[edit]
Quantum software development kits provide collections of tools to create and manipulate quantum programs.[11] They also provide the means to simulate the quantum programs or prepare them to be run using cloud-based quantum devices.

SDKs with access to quantum processors[edit]
The following software development kits can be used to run quantum circuits on prototype quantum devices, as well as on simulators.
Ocean
An Open Source suite of tools developed by D-Wave. Written mostly in the Python programming language, it enables users to formulate problems in Ising Model and Quadratic Unconstrained Binary Optimization formats (QUBO). Results can be obtained by submitting to an online quantum computer in Leap, D-Wave's real-time Quantum Application Environment, customer-owned machines, or classical samplers.[citation needed]

  A sample code using projectq with Python
ProjectQ[edit]
An Open Source project developed at the Institute for Theoretical Physics at ETH, which uses the Python programming language to create and manipulate quantum circuits.[12] Results are obtained either using a simulator, or by sending jobs to IBM quantum devices.

Qiskit[edit]
Main article: Qiskit
An Open Source project developed by IBM.[13] Quantum circuits are created and manipulated using Python. Results are obtained either using simulators that run on the user's own device, simulators provided by IBM or prototype quantum devices provided by IBM. As well as the ability to create programs using basic quantum operations, higher level tools for algorithms and benchmarking are available within specialized packages.[14] Qiskit is based on the OpenQASM standard for representing quantum circuits. It also  supports pulse level control of quantum systems via QiskitPulse standard.[15]

Forest[edit]
An Open Source project developed by Rigetti, which uses the Python programming language to create and manipulate quantum circuits. Results are obtained either using simulators or prototype quantum devices provided by Rigetti. As well as the ability to create programs using basic quantum operations, higher level algorithms are available within the Grove package.[16] Forest is based on the Quil instruction set.

t|ket>[edit]
A quantum programming environment and optimizing compiler developed by Cambridge Quantum Computing that targets simulators and several quantum hardware back-ends, released in December 2018.[17]

Strawberry Fields[edit]
An open-source Python library developed by Xanadu Quantum Technologies for designing, simulating, and optimizing continuous variable (CV) quantum optical circuits.[18][19] Three simulators are provided - one in the Fock basis, one using the Gaussian formulation of quantum optics,[20] and one using the TensorFlow machine learning library. Strawberry Fields is also the library for executing programs on Xanadu's quantum photonic hardware.[21][22]

PennyLane[edit]
An open-source Python library developed by Xanadu Quantum Technologies for differentiable programming of quantum computers.[23][24][25][26] PennyLane provides users the ability to create models using TensorFlow, NumPy, or PyTorch, and connect them with quantum computer backends available from IBMQ, Google Quantum, Rigetti, Honeywell and Alpine Quantum Technologies.[27]

SDKs based on simulators[edit]
Public access to quantum devices is currently planned for the following SDKs, but not yet implemented.

Quantum Development Kit[edit]
A project developed by Microsoft[28] as part of the .NET Framework. Quantum programs can be written and run within Visual Studio and VSCode.

Cirq[edit]
Main article: Cirq
An Open Source project developed by Google, which uses the Python programming language to create and manipulate quantum circuits. Results are obtained using simulators that run on the user's own device.

Quantum programming languages[edit]
There are two main groups of quantum programming languages: imperative quantum programming languages and functional quantum programming languages.

Imperative languages[edit]
The most prominent representatives of the imperative languages are QCL,[29] LanQ[30] and Q|SI>.[31]

QCL[edit]
Main article: Quantum Computation Language
Quantum Computation Language (QCL) is one of the first implemented quantum programming languages.[32] The most important feature of QCL is the support for user-defined operators and functions. Its syntax resembles the syntax of the C programming language and its classical data types are similar to primitive data types in C. One can combine classical code and quantum code in the same program.

Quantum pseudocode[edit]
Quantum pseudocode proposed by E. Knill is the first formalized language for description of quantum algorithms.  It was introduced and, moreover, was tightly connected with a model of quantum machine called Quantum Random Access Machine (QRAM).

Q#[edit]
Main article: Q Sharp
A language developed by Microsoft to be used with the Quantum Development Kit.[33]

Q|SI>[edit]
Q|SI> is a platform embedded in .Net language supporting quantum programming in a quantum extension of while-language.[31][34] This platform includes a compiler of the quantum while-language[35] and a chain of tools for the simulation of quantum computation, optimisation of quantum circuits, termination analysis of quantum programs,[36] and verification of quantum programs.[37][38]

Q language[edit]
Q Language is the second implemented imperative quantum programming language.[39] Q Language was implemented as an extension of C++ programming language. It provides classes for basic quantum operations like QHadamard, QFourier, QNot, and QSwap, which are derived from the base class Qop.  New operators can be defined using C++ class mechanism.
Quantum memory is represented by class Qreg.

Qreg x1; // 1-qubit quantum register with initial value 0
Qreg x2(2,0); // 2-qubit quantum register with initial value 0

The computation process is executed using a provided simulator. Noisy environments can be simulated using parameters of the simulator.

qGCL[edit]
Quantum Guarded Command Language (qGCL) was defined by P. Zuliani in his PhD thesis. It is based on Guarded Command Language created by Edsger Dijkstra.
It can be described as a language of quantum programs specification.

QMASM[edit]
Quantum Macro Assembler (QMASM) is a low-level language specific to quantum annealers such as the D-Wave.[40]

Scaffold[edit]
Scaffold is C-like language, that compiles to QASM and OpenQASM.  It is built on top of the LLVM Compiler Infrastructure to perform optimizations on Scaffold code before generating a specified instruction set.[41][42]

Silq[edit]
Silq is a high-level programming language for quantum computing with a strong static type system, developed at ETH ZÃ¼rich.[43][44]

Functional languages[edit]
Efforts are underway to develop functional programming languages for quantum computing. Functional programming languages are well-suited for reasoning about programs. Examples include Selinger's QPL,[45] and the Haskell-like language QML by Altenkirch and Grattage.[46][47] Higher-order quantum programming languages, based on lambda calculus, have been proposed by van Tonder,[48] Selinger and Valiron[49] and by Arrighi and Dowek.[50]

QFC and QPL[edit]
QFC and QPL are two closely related quantum programming languages defined by Peter Selinger. They differ only in their syntax: QFC uses a flow chart syntax, whereas QPL uses a textual syntax. These languages have classical control flow but can operate on quantum or classical data. Selinger gives a denotational semantics for these languages in a category of superoperators.

QML[edit]
QML is a Haskell-like quantum programming language by Altenkirch and Grattage.[51][46] Unlike Selinger's QPL, this language takes duplication, rather than discarding, of quantum information as a primitive operation. Duplication in this context is understood to be the operation that maps 
  
    
      
        
          |
        
        Ï
        â©
      
    
    {\displaystyle |\phi \rangle }
  
 to 
  
    
      
        
          |
        
        Ï
        â©
        â
        
          |
        
        Ï
        â©
      
    
    {\displaystyle |\phi \rangle \otimes |\phi \rangle }
  
, and is not to be confused with the impossible operation of cloning; the authors claim it is akin to how sharing is modeled in classical languages. QML also introduces both classical and quantum control operators, whereas most other languages rely on classical control.
An operational semantics for QML is given in terms of quantum circuits, while a denotational semantics is presented in terms of superoperators, and these are shown to agree. Both the operational and denotational semantics have been implemented (classically) in Haskell.[52]

LIQUi|>[edit]
LIQUi|> (pronounced liquid) is a quantum simulation extension on the F# programming language.[53] It is currently being developed by the Quantum Architectures and Computation Group (QuArC)[54] part of the StationQ efforts at Microsoft Research. LIQUi|> seeks to allow theorists to experiment with quantum algorithm design before physical quantum computers are available for use.[55]
It includes a programming language, optimization and scheduling algorithms, and quantum simulators. LIQUi|> can be used to translate a quantum algorithm written in the form of a high-level program into the low-level machine instructions for a quantum device.[56]

Quantum lambda calculi[edit]
Quantum lambda calculi are extensions of the classical lambda calculus introduced by Alonzo Church and Stephen Cole Kleene in the 1930s. The purpose of quantum lambda calculi is to extend quantum programming languages with a theory of higher-order functions.
The first attempt to define a quantum lambda calculus was made by Philip Maymin in 1996.[57]
His lambda-q calculus is powerful enough to express any quantum computation. However, this language can efficiently solve NP-complete problems, and therefore appears to be strictly stronger than the standard quantum computational models (such as the quantum Turing machine or the quantum circuit model). Therefore, Maymin's lambda-q calculus is probably not implementable on a physical device[citation needed].
In 2003, AndrÃ© van Tonder defined an extension of the lambda calculus suitable for proving correctness of quantum programs. He also provided an implementation in the Scheme programming language.[58]
In 2004, Selinger and Valiron defined a strongly typed lambda calculus for quantum computation with a type system based on linear logic.[59]

Quipper[edit]
For the education technology company, see Quipper (company).
Quipper was published in 2013.[60][61] It is implemented as an embedded language, using Haskell as the host language.[62] For this reason, quantum programs written in Quipper are written in Haskell using provided libraries. For example, the following code implements preparation of a superposition

import Quipper

spos :: Bool -> Circ Qubit
spos b = do q <- qinit b
            r <- hadamard q
            return r

funQ[edit]
A group of undergraduate students at Chalmers University of Technology developed a functional quantum programming language in 2021. It is inspired by the quantum typed lambda calculus by Selinger and Valiron.[63][64] The underlying quantum simulator is a part of a Haskell library by the same name. The following code implements superposition in funQ

spos : !(Bit -o QBit)
spos b = H (new b)

The same example in the Haskell library would be

import FunQ

spos :: Bit -> QM QBit
spos b = hadamard =<< new b

References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}JarosÅaw Adam Miszczak (2012). High-level Structures in Quantum Computing. ISBNÂ 9781608458516.

^ "Comprehensive list of quantum open-source projects". Github. Retrieved 2022-01-27.

^ Bertels, K.; Almudever, C. G.; Hogaboam, J. W.; Ashraf, I.; Guerreschi, G. G.; Khammassi, N. (2018-05-24). "cQASM v1.0: Towards a Common Quantum Assembly Language". arXiv:1805.09607v1 [quant-ph].

^ Smith, Robert S.; Curtis, Michael J.; Zeng, William J. (2016). "A Practical Quantum Instruction Set Architecture". arXiv:1608.03355 [quant-ph].

^ McClean, Jarrod R.; Romero, Jonathan; Babbush, Ryan; Aspuru-Guzik, AlÃ¡n (2016-02-04). "The theory of variational hybrid quantum-classical algorithms". New Journal of Physics. 18 (2): 023023. arXiv:1509.04279. Bibcode:2016NJPh...18b3023M. doi:10.1088/1367-2630/18/2/023023. ISSNÂ 1367-2630. S2CIDÂ 92988541.

^ Rubin, Nicholas C.; Curtis, Michael J.; Zeng, William J. (2016). "A Hybrid Classical/Quantum Approach for Large-Scale Studies of Quantum Systems with Density Matrix Embedding Theory". arXiv:1610.06910 [quant-ph].

^ Farhi, Edward; Goldstone, Jeffrey; Gutmann, Sam (2014). "A Quantum Approximate Optimization Algorithm". arXiv:1411.4028 [quant-ph].

^ qiskit-openqasm: OpenQASM specification, International Business Machines, 2017-07-04, retrieved 2017-07-06

^ "Blackbird Quantum Assembly Language â Blackbird 0.2.0 documentation". quantum-blackbird.readthedocs.io. Retrieved 2019-06-24.

^ Weedbrook, Christian; Amy, Matthew; Bergholm, Ville; Quesada, NicolÃ¡s; Izaac, Josh; Killoran, Nathan (2019-03-11). "Strawberry Fields: A Software Platform for Photonic Quantum Computing". Quantum. 3: 129. arXiv:1804.03159. doi:10.22331/q-2019-03-11-129. S2CIDÂ 54763305.

^ HÃ¤ner, Thomas; Steiger, Damian S.; Svore, Krysta; Troyer, Matthias (2018). "A software methodology for compiling quantum programs". Quantum Science and Technology. 3 (2): 020501. arXiv:1604.01401. Bibcode:2018QS&T....3b0501H. doi:10.1088/2058-9565/aaa5cc. ISSNÂ 2058-9565. S2CIDÂ 1922315.

^ "ProjectQ homepage".

^ "Qiskit homepage".

^ "Qiskit Overview". Retrieved 2021-02-10.

^ McKay, David C.; Alexander, Thomas; Bello, Luciano; Biercuk, Michael J.; Bishop, Lev; Chen, Jiayin; Chow, Jerry M.; CÃ³rcoles, Antonio D.; Egger, Daniel; Filipp, Stefan; Gomez, Juan; Hush, Michael; Javadi-Abhari, Ali; Moreda, Diego; Nation, Paul; Paulovicks, Brent; Winston, Erick; Wood, Christopher J.; Wootton, James; Gambetta, Jay M. (2018). "Qiskit Backend Specifications for OpenQASM and OpenPulse Experiments". arXiv:1809.03452 [quant-ph].

^ "Grove documentation".

^ "pytket". GitHub. 22 January 2022.

^ "Strawberry Fields â Strawberry Fields 0.8.0 documentation". strawberryfields.readthedocs.io. Retrieved 2018-09-25.

^ Killoran, Nathan; Izaac, Josh; Quesada, NicolÃ¡s; Bergholm, Ville; Amy, Matthew; Weedbrook, Christian (2019). "Strawberry Fields: A Software Platform for Photonic Quantum Computing". Quantum. 3: 129. arXiv:1804.03159. doi:10.22331/q-2019-03-11-129. S2CIDÂ 54763305.

^ Weedbrook, Christian; Pirandola, Stefano; GarcÃ­a-PatrÃ³n, RaÃºl; Cerf, Nicolas J.; Ralph, Timothy C.; Shapiro, Jeffrey H.; Lloyd, Seth (2012-05-01). "Gaussian quantum information". Reviews of Modern Physics. 84 (2): 621â669. arXiv:1110.3234. Bibcode:2012RvMP...84..621W. doi:10.1103/RevModPhys.84.621. S2CIDÂ 119250535.

^ "Hardware â Strawberry Fields". strawberryfields.ai. Retrieved 2021-03-26.

^ "In the Race to Hundreds of Qubits, Photons May Have "Quantum Advantage"". IEEE Spectrum: Technology, Engineering, and Science News. 5 March 2021. Retrieved 2021-03-26.{{cite web}}:  CS1 maint: url-status (link)

^ "PennyLane Documentation â PennyLane 0.14.1 documentation". pennylane.readthedocs.io. Retrieved 2021-03-26.

^ "AWS joins PennyLane, an open-source framework that melds machine learning with quantum computing". SiliconANGLE. 2021-02-17. Retrieved 2021-03-26.

^ "SD Times Open-Source Project of the Week: PennyLane". SD Times. 2021-02-26. Retrieved 2021-03-26.

^ Salamone, Salvatore (2020-12-13). "Real-time Analytics News Roundup for Week Ending December 12". RTInsights. Retrieved 2021-03-26.

^ "Plugins and ecosystem â PennyLane". pennylane.ai. Retrieved 2021-03-26.

^ "QDK documentation".

^ Bernhard Omer. "The QCL Programming Language".

^ Hynek MlnaÅÃ­k. "LanQ â a quantum imperative programming language".

^ Jump up to: a b Liu, Shusen; Zhou, li; Guan, Ji; He, Yang; Duan, Runyao; Ying, Mingsheng (2017-05-09). "Q|SI>: A Quantum Programming Language". Scientia Sinica Information. 47 (10): 1300. arXiv:1710.09500. doi:10.1360/N112017-00095. S2CIDÂ 9163705.

^ "QCL - A Programming Language for Quantum Computers". tuwien.ac.at. Retrieved 2017-07-20.

^ "Q# Documentation".

^ Ying, Mingsheng (January 2012). "Floydâhoare Logic for Quantum Programs". ACM Trans. Program. Lang. Syst. 33 (6): 19:1â19:49. doi:10.1145/2049706.2049708. ISSNÂ 0164-0925. S2CIDÂ 416960.

^ Ying, Mingsheng; Feng, Yuan (2010). "A Flowchart Language for Quantum Programming". IEEE Transactions on Software Engineering. 37 (4): 466â485. doi:10.1109/TSE.2010.94. ISSNÂ 0098-5589. S2CIDÂ 5879273.

^ Ying, Mingsheng; Yu, Nengkun; Feng, Yuan; Duan, Runyao (2013). "Verification of quantum programs". Science of Computer Programming. 78 (9): 1679â1700. arXiv:1106.4063. doi:10.1016/j.scico.2013.03.016. S2CIDÂ 18913620.

^ Ying, Mingsheng; Ying, Shenggang; Wu, Xiaodi (2017). Invariants of Quantum Programs: Characterisations and Generation. Proceedings of the 44th ACM SIGPLAN Symposium on Principles of Programming Languages. POPL 2017. Vol.Â 52. New York, NY, USA: ACM. pp.Â 818â832. doi:10.1145/3093333.3009840. hdl:10453/127333. ISBNÂ 9781450346603.

^ Liu, Tao; Li, Yangjia; Wang, Shuling; Ying, Mingsheng; Zhan, Naijun (2016). "A Theorem Prover for Quantum Hoare Logic and its Applications". arXiv:1601.03835 [cs.LO].

^ "Software for the Q language". 2001-11-23. Archived from the original on 2009-06-20. Retrieved 2017-07-20.

^ Scott Pakin, "A Quantum Macro Assembler", Proceedings of the 20th Annual IEEE High Performance Extreme Computing Conference  2016

^ Javadi-Abhari, Ali. "Scaffold: Quantum Programming Language". Princeton University-Department of Computer Science. Princeton University. Retrieved 22 September 2020.

^ Litteken, Andrew (28 May 2020). "An updated LLVM-based quantum research compiler with further OpenQASM support". Quantum Science and Technology. 5 (3): 034013. Bibcode:2020QS&T....5c4013L. doi:10.1088/2058-9565/ab8c2c. OSTIÂ 1803951. S2CIDÂ 219101628. Retrieved 22 September 2020.

^ "What is Silq?". silq.ethz.ch. Retrieved 2020-06-21.

^ Bichsel, Benjamin; Baader, Maximilian; Gehr, Timon; Vechev, Martin (2020-06-11). "Silq: a high-level quantum language with safe uncomputation and intuitive semantics". Proceedings of the 41st ACM SIGPLAN Conference on Programming Language Design and Implementation. London UK: ACM: 286â300. doi:10.1145/3385412.3386007. ISBNÂ 978-1-4503-7613-6. S2CIDÂ 219397029.

^ Peter Selinger, "Towards a quantum programming language", Mathematical Structures in Computer Science 14(4):527-586, 2004.

^ Jump up to: a b Jonathan Grattage: QML Research (website)

^ T. Altenkirch, V. Belavkin, J. Grattage, A. Green, A. Sabry, J. K. Vizzotto, QML: A Functional Quantum Programming Language Archived 2006-07-10 at the Wayback Machine (website)

^ Andre van Tonder, "A Lambda Calculus for Quantum Computation", SIAM J. Comput., 33(5), 1109â1135. (27 pages), 2004. Also available from arXiv:quant-ph/0307150

^ Peter Selinger and BenoÃ®t Valiron, "A lambda calculus for quantum computation with classical control", Mathematical Structures in Computer Science 16(3):527-552, 2006.

^ Pablo Arrighi, Gilles Dowek, "Linear-algebraic lambda-calculus: higher-order, encodings and confluence", 2006

^ "QML: A Functional Quantum Programming Language". 2007-09-26. Archived from the original on 2007-09-26.

^ Jonathan Grattage, QML: A Functional Quantum Programming Language (compiler) Archived 2016-03-05 at the Wayback Machine, 2005â2008

^ "The Language Integrated Quantum Operations Simulator". github.io. Retrieved 2017-07-20.

^ Quantum Architectures and Computation Group (QuArC), https://www.microsoft.com/en-us/research/group/quantum-architectures-and-computation-group-quarc/, 2011

^ "StationQ". microsoft.com. Retrieved 2017-07-20.

^ "Language-Integrated Quantum Operations: LIQUi|>". Microsoft. 2016.

^ Philip Maymin, "Extending the Lambda Calculus to Express Randomized and Quantumized Algorithms", 1996

^ AndrÃ© van Tonder. "A lambda calculus for quantum computation (website)".

^ Peter Selinger, BenoËÄ±t Valiron, "Quantum Lambda Calculus"

^ "The Quipper Language".

^ Alexander S. Green; Peter LeFanu Lumsdaine; Neil J. Ross; Peter Selinger; BenoÃ®t Valiron. "The Quipper Language (website)".

^ Alexander S. Green; Peter LeFanu Lumsdaine; Neil J. Ross; Peter Selinger; BenoÃ®t Valiron (2013). An Introduction to Quantum Programming in Quipper. Lecture Notes in Computer Science. Vol.Â 7948. pp.Â 110â124. arXiv:1304.5485. doi:10.1007/978-3-642-38986-3_10. ISBNÂ 978-3-642-38985-6. S2CIDÂ 9135905.

^ Peter Selinger, BenoËÄ±t Valiron, "A lambda calculus for quantum computation with classical control"

^ Nicklas BotÃ¶, Fabian Forslund, Matilda Blomqvist, Beata Burreau, Marcus JÃ¶rgensson, Joel Rudsberg "funQ - Functional Quantum Programming"


Further reading[edit]
Mingsheng, Ying (2016). Foundations of quantum programming. Cambridge, MA. ISBNÂ 978-0128025468. OCLCÂ 945735387.
External links[edit]
Curated list of all quantum open-source software projects
Bibliography on Quantum Programming Languages (updated in May 2007)
5th International Workshop on Quantum Physics and Logic
4th International Workshop on Quantum Programming Languages
3rd International Workshop on Quantum Programming Languages
2nd International Workshop on Quantum Programming Languages
Quantum programming language in Quantiki
QMASM documentation
pyQuil documentation including Introduction to Quantum Computing
Scaffold Source
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}vteQuantum information scienceGeneral
DiVincenzo's criteria
NISQ era
Quantum computing
Timeline
Cloud-based
Quantum information
Quantum programming
Qubit
physical vs. logical
Quantum processors
Theorems
Bell's
Gleason's
GottesmanâKnill
Holevo's
MargolusâLevitin
No-broadcast
No-cloning
No-communication
No-deleting
No-hiding
No-teleportation
PBR
Quantum threshold
SolovayâKitaev
Quantumcommunication
Classical capacity
entanglement-assisted
Quantum capacity
Entanglement distillation
LOCC
Quantum channel
Quantum network
Quantum cryptography
Quantum key distribution
BB84
SARG04
Three-stage quantum cryptography protocol
Quantum Secret Sharing
Quantum teleportation
Superdense coding
Quantum algorithms
BernsteinâVazirani
DeutschâJozsa
Grover's
Quantum counting
Quantum phase estimation
Shor's
Simon's
Amplitude amplification
Linear systems of equations
Quantum annealing
Quantum Fourier transform
Quantum neural network
Universal quantum simulator
Quantumcomplexity theory
BQP
EQP
QIP
QMA
PostBQP
Quantumcomputing models
Adiabatic quantum computation
Differentiable quantum computing
One-way quantum computer
cluster state
Quantum circuit
Quantum logic gate
Quantum Turing machine
Topological quantum computer
Quantumerror correction
Codes
CSS
Quantum convolutional
stabilizer
Shor
Steane
Toric
gnu
Entanglement-assisted quantum error correction
PhysicalimplementationsQuantum optics
Boson sampling
Cavity QED
Circuit QED
Linear optical quantum computing
KLM protocol
Ultracold atoms
Optical lattice
Trapped ion quantum computer
Spin-based
Kane QC
Spin qubit QC
Nitrogen-vacancy center
Nuclear magnetic resonance QC
Superconductingquantum computing
Charge qubit
Flux qubit
Phase qubit
Transmon
Quantumprogramming
OpenQASM-Qiskit-IBM QX
Quil-Forest/Rigetti QCS
Cirq
Q#
libquantum
many others...
 Quantum mechanics topics
vteEmerging technologiesFieldsQuantum
algorithms
amplifier
bus
cellular automata
channel
circuit
complexity theory
computing
clock
cryptography
post-quantum
dynamics
electronics
error correction
finite automata
image processing
imaging
information
key distribution
logic
logic gates
machine
machine learning
metamaterial
network
neural network
optics
programming
sensing
simulator
teleportation
Other
Anti-gravity
Acoustic levitation
Cloak of invisibility
Digital scent technology
Force field
Plasma window
Immersive virtual reality
Magnetic refrigeration
Phased-array optics
Thermoacoustic heat engine

 Category
 List





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Quantum_programming&oldid=1069238651"
		Categories: Quantum programmingProgramming language classificationProgramming paradigmsQuantum computingQuantum information scienceHidden categories: CS1 maint: url-statusWebarchive template wayback linksAll articles with unsourced statementsArticles with unsourced statements from June 2021Articles with unsourced statements from February 2019
	
