
Title:
JaroâWinkler distance
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}This article is about the measure. For other uses, see Jaro.
In computer science and statistics, the JaroâWinkler distance is a string metric measuring an edit distance between two sequences. It is a variant proposed in 1990 by William E. Winkler of the Jaro distance metric (1989, Matthew A. Jaro).
The JaroâWinkler distance uses a prefix scale 
  
    
      
        p
      
    
    {\displaystyle p}
  
 which gives more favourable ratings to strings that match from the beginning for a set prefix length 
  
    
      
        â
      
    
    {\displaystyle \ell }
  
.
The lower the JaroâWinkler distance for two strings is, the more similar the strings are. The score is normalized such that 1 means an exact match and 0 means there is no similarity. The original paper actually defined the metric in terms of similarity, so the distance is defined as the inversion of that value (distance = 1 â similarity).
Although often referred to as a distance metric, the JaroâWinkler distance is not a metric in the mathematical sense of that term because it does not obey the triangle inequality.

Contents

1 Definition

1.1 Jaro Similarity
1.2 JaroâWinkler Similarity


2 Relationship with other edit distance metrics
3 See also
4 Footnotes
5 References
6 External links



Definition[edit]
Jaro Similarity[edit]
The Jaro Similarity 
  
    
      
        s
        i
        
          m
          
            j
          
        
      
    
    {\displaystyle sim_{j}}
  
 of two given strings 
  
    
      
        
          s
          
            1
          
        
      
    
    {\displaystyle s_{1}}
  
 and 
  
    
      
        
          s
          
            2
          
        
      
    
    {\displaystyle s_{2}}
  
 is


  
    
      
        s
        i
        
          m
          
            j
          
        
        =
        
          {
          
            
              
                
                  0
                
                
                  
                    ifÂ 
                  
                  m
                  =
                  0
                
              
              
                
                  
                    
                      1
                      3
                    
                  
                  
                    (
                    
                      
                        
                          m
                          
                            
                              |
                            
                            
                              s
                              
                                1
                              
                            
                            
                              |
                            
                          
                        
                      
                      +
                      
                        
                          m
                          
                            
                              |
                            
                            
                              s
                              
                                2
                              
                            
                            
                              |
                            
                          
                        
                      
                      +
                      
                        
                          
                            m
                            â
                            t
                          
                          m
                        
                      
                    
                    )
                  
                
                
                  
                    otherwise
                  
                
              
            
          
          
        
      
    
    {\displaystyle sim_{j}=\left\{{\begin{array}{l l}0&{\text{if }}m=0\\{\frac {1}{3}}\left({\frac {m}{|s_{1}|}}+{\frac {m}{|s_{2}|}}+{\frac {m-t}{m}}\right)&{\text{otherwise}}\end{array}}\right.}
  

Where:


  
    
      
        
          |
        
        
          s
          
            i
          
        
        
          |
        
      
    
    {\displaystyle |s_{i}|}
  
 is the length of the string 
  
    
      
        
          s
          
            i
          
        
      
    
    {\displaystyle s_{i}}
  
;

  
    
      
        m
      
    
    {\displaystyle m}
  
 is the number of matching characters (see below);

  
    
      
        t
      
    
    {\displaystyle t}
  
 is the number of transpositions (see below).
Two characters from 
  
    
      
        
          s
          
            1
          
        
      
    
    {\displaystyle s_{1}}
  
 and 
  
    
      
        
          s
          
            2
          
        
      
    
    {\displaystyle s_{2}}
  
 respectively, are considered matching only if they are the same and not farther than 
  
    
      
        
          â
          
            
              
                max
                (
                
                  |
                
                
                  s
                  
                    1
                  
                
                
                  |
                
                ,
                
                  |
                
                
                  s
                  
                    2
                  
                
                
                  |
                
                )
              
              2
            
          
          â
        
        â
        1
      
    
    {\displaystyle \left\lfloor {\frac {\max(|s_{1}|,|s_{2}|)}{2}}\right\rfloor -1}
  
 characters apart.
Each character of 
  
    
      
        
          s
          
            1
          
        
      
    
    {\displaystyle s_{1}}
  
 is compared with all its matching characters in 
  
    
      
        
          s
          
            2
          
        
      
    
    {\displaystyle s_{2}}
  
. The number of matching (but different sequence order) characters divided by 2 defines the number of transpositions.
For example, in comparing CRATE with TRACE, only 'R'   'A'   'E'  are the matching characters, i.e. m=3. Although 'C', 'T' appear in both strings, they are farther apart than 1 (the result of 
  
    
      
        â
        
          
            
              5
              2
            
          
        
        â
        â
        1
      
    
    {\displaystyle \lfloor {\tfrac {5}{2}}\rfloor -1}
  
).  Therefore, t=0 . In DwAyNE versus DuANE the matching letters are already in the same order D-A-N-E, so no transpositions are needed.

JaroâWinkler Similarity[edit]
JaroâWinkler similarity uses a prefix scale 
  
    
      
        p
      
    
    {\displaystyle p}
  
 which gives more favorable ratings to strings that match from the beginning for a set prefix length 
  
    
      
        â
      
    
    {\displaystyle \ell }
  
. Given two strings 
  
    
      
        
          s
          
            1
          
        
      
    
    {\displaystyle s_{1}}
  
 and 
  
    
      
        
          s
          
            2
          
        
      
    
    {\displaystyle s_{2}}
  
, their JaroâWinkler similarity 
  
    
      
        s
        i
        
          m
          
            w
          
        
      
    
    {\displaystyle sim_{w}}
  
 is:


  
    
      
        s
        i
        
          m
          
            w
          
        
        =
        s
        i
        
          m
          
            j
          
        
        +
        â
        p
        (
        1
        â
        s
        i
        
          m
          
            j
          
        
        )
        ,
      
    
    {\displaystyle sim_{w}=sim_{j}+\ell p(1-sim_{j}),}
  

where:


  
    
      
        s
        i
        
          m
          
            j
          
        
      
    
    {\displaystyle sim_{j}}
  
 is the Jaro similarity for strings 
  
    
      
        
          s
          
            1
          
        
      
    
    {\displaystyle s_{1}}
  
 and 
  
    
      
        
          s
          
            2
          
        
      
    
    {\displaystyle s_{2}}
  


  
    
      
        â
      
    
    {\displaystyle \ell }
  
 is the length of common prefix at the start of the string up to a maximum of 4 characters

  
    
      
        p
      
    
    {\displaystyle p}
  
 is a constant scaling factor for how much the score is adjusted upwards for having common prefixes. 
  
    
      
        p
      
    
    {\displaystyle p}
  
 should not exceed 0.25 (i.e. 1/4, with 4 being the maximum length of the prefix being considered), otherwise the similarity could become larger than 1. The standard value for this constant in Winkler's work is 
  
    
      
        p
        =
        0.1
      
    
    {\displaystyle p=0.1}
  

The JaroâWinkler distance 
  
    
      
        
          d
          
            w
          
        
      
    
    {\displaystyle d_{w}}
  
 is defined as 
  
    
      
        
          d
          
            w
          
        
        =
        1
        â
        s
        i
        
          m
          
            w
          
        
      
    
    {\displaystyle d_{w}=1-sim_{w}}
  
.
Although often referred to as a distance metric, the JaroâWinkler distance is not a metric in the mathematical sense of that term because it does not obey the triangle inequality.[1] The JaroâWinkler distance also does not satisfy the identity axiom 
  
    
      
        d
        (
        x
        ,
        y
        )
        =
        0
        â
        x
        =
        y
      
    
    {\displaystyle d(x,y)=0\leftrightarrow x=y}
  
.

Relationship with other edit distance metrics[edit]
Main article: Edit distanceThere are other popular measures of edit distance, which are calculated using a different set of allowable edit operations. For instance,
the Levenshtein distance allows deletion, insertion and substitution;
the DamerauâLevenshtein distance allows insertion, deletion, substitution, and the transposition of two adjacent characters;
the longest common subsequence (LCS) distance allows only insertion and deletion, not substitution;
the Hamming distance allows only substitution, hence, it only applies to strings of the same length.
Edit distance is usually defined as a parameterizable metric calculated with a specific set of allowed edit operations, and each operation is assigned a cost (possibly infinite). This is further generalized by DNA sequence alignment algorithms such as the SmithâWaterman algorithm, which make an operation's cost depend on where it is applied.

See also[edit]
Record linkage
Census
Footnotes[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}"Jaro-Winkler Â«Â  Inviting Epiphany". RichardMinerich.com. Retrieved 12 June 2017.


References[edit]
Cohen, W. W.; Ravikumar, P.; Fienberg, S. E. (2003). "A comparison of string distance metrics for name-matching tasks" (PDF). KDD Workshop on Data Cleaning and Object Consolidation. 3: 73â8.
Jaro, M. A. (1989). "Advances in record linkage methodology as applied to the 1985 census of Tampa Florida". Journal of the American Statistical Association. 84 (406): 414â20. doi:10.1080/01621459.1989.10478785.
Jaro, M. A. (1995). "Probabilistic linkage of large public health data file". Statistics in Medicine. 14 (5â7): 491â8. doi:10.1002/sim.4780140510. PMIDÂ 7792443.
Winkler, W. E. (1990). "String Comparator Metrics and Enhanced Decision Rules in the Fellegi-Sunter Model of Record Linkage" (PDF). Proceedings of the Section on Survey Research Methods. American Statistical Association: 354â359.
Winkler, W. E. (2006). "Overview of Record Linkage and Current Research Directions" (PDF). Research Report Series, RRS.
External links[edit]
strcmp.c - Original C implementation by the author of the algorithm
nltk.metrics.distance module- Python implementation in the Natural Language Toolkit
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}hide.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteStringsString metric
Approximate string matching
Bitap algorithm
DamerauâLevenshtein distance
Edit distance
Gestalt Pattern Matching
Hamming distance
JaroâWinkler distance
Lee distance
Levenshtein automaton
Levenshtein distance
WagnerâFischer algorithm 
String-searching algorithm
ApostolicoâGiancarlo algorithm
BoyerâMoore string-search algorithm
BoyerâMooreâHorspool algorithm
KnuthâMorrisâPratt algorithm
RabinâKarp algorithm
Multiple string searching
AhoâCorasick
Commentz-Walter algorithm
Regular expression
Comparison of regular-expression engines
Regular grammar
Thompson's construction
Nondeterministic finite automaton
Sequence alignment
Hirschberg's algorithm
NeedlemanâWunsch algorithm
SmithâWaterman algorithm
Data structure
DAFSA
Suffix array
Suffix automaton
Suffix tree
Generalized suffix tree
Rope
Ternary search tree
Trie
Other
Parsing
Pattern matching
Compressed pattern matching
Longest common subsequence
Longest common substring
Sequential pattern mining
Sorting





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=JaroâWinkler_distance&oldid=1058245976"
		Categories: String metricsComputer science
	
