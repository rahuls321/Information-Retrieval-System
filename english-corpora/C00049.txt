
Title:
Turing machine
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Computation model defining an abstract machine
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}For other uses, see Turing machine (disambiguation).
.mw-parser-output .sidebar{width:22em;float:right;clear:right;margin:0.5em 0 1em 1em;background:#f8f9fa;border:1px solid #aaa;padding:0.2em;text-align:center;line-height:1.4em;font-size:88%;border-collapse:collapse;display:table}body.skin-minerva .mw-parser-output .sidebar{display:table!important;float:right!important;margin:0.5em 0 1em 1em!important}.mw-parser-output .sidebar-subgroup{width:100%;margin:0;border-spacing:0}.mw-parser-output .sidebar-left{float:left;clear:left;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-none{float:none;clear:both;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-outer-title{padding:0 0.4em 0.2em;font-size:125%;line-height:1.2em;font-weight:bold}.mw-parser-output .sidebar-top-image{padding:0.4em}.mw-parser-output .sidebar-top-caption,.mw-parser-output .sidebar-pretitle-with-top-image,.mw-parser-output .sidebar-caption{padding:0.2em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-pretitle{padding:0.4em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-title,.mw-parser-output .sidebar-title-with-pretitle{padding:0.2em 0.8em;font-size:145%;line-height:1.2em}.mw-parser-output .sidebar-title-with-pretitle{padding:0.1em 0.4em}.mw-parser-output .sidebar-image{padding:0.2em 0.4em 0.4em}.mw-parser-output .sidebar-heading{padding:0.1em 0.4em}.mw-parser-output .sidebar-content{padding:0 0.5em 0.4em}.mw-parser-output .sidebar-content-with-subgroup{padding:0.1em 0.4em 0.2em}.mw-parser-output .sidebar-above,.mw-parser-output .sidebar-below{padding:0.3em 0.8em;font-weight:bold}.mw-parser-output .sidebar-collapse .sidebar-above,.mw-parser-output .sidebar-collapse .sidebar-below{border-top:1px solid #aaa;border-bottom:1px solid #aaa}.mw-parser-output .sidebar-navbar{text-align:right;font-size:115%;padding:0 0.4em 0.4em}.mw-parser-output .sidebar-list-title{padding:0 0.4em;text-align:left;font-weight:bold;line-height:1.6em;font-size:105%}.mw-parser-output .sidebar-list-title-c{padding:0 0.4em;text-align:center;margin:0 3.3em}@media(max-width:720px){body.mediawiki .mw-parser-output .sidebar{width:100%!important;clear:both;float:none!important;margin-left:0!important;margin-right:0!important}}Turing machines
Machine
Turing machine equivalents
Turing machine examples
Turing machine gallery

Variants
Alternating Turing machine
Neural Turing machine
Nondeterministic Turing machine
Quantum Turing machine
PostâTuring machine
Probabilistic Turing machine
Read-only Turing machine
Read-only right moving Turing machines
Multitape Turing machine
Multi-track Turing machine
Symmetric Turing machine
Total Turing machine
Unambiguous Turing machine
Universal Turing machine
Zeno machine

Science
Alan Turing
Category:Turing machine
.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vte

Classes of automata (Clicking on each layer gets an article on that subject)
A Turing machine is a mathematical model of computation that defines an abstract machine[1] that manipulates symbols on a strip of tape according to a table of rules.[2] Despite the model's simplicity, given any computer algorithm, a Turing machine capable of implementing that algorithm's logic can be constructed.[3]
The machine operates on an infinite[4] memory tape divided into discrete "cells".[5] The machine positions its "head" over a cell and "reads" or "scans"[6] the symbol there. Then, based on the symbol and the machine's own present state in a "finite table"[7] of user-specified instructions, the machine first writes a symbol (e.g., a digit or a letter from a finite alphabet) in the cell (some models allow symbol erasure or no writing),[8] then either moves the tape one cell left or right (some models allow no motion, some models move the head),[9] then, based on the observed symbol and the machine's own state in the table, either proceeds to another instruction or halts computation.[10]
The Turing machine was invented in 1936 by Alan Turing,[11][12] who called it an "a-machine" (automatic machine).[13] With this model, Turing was able to answer two questions in the negative:

Does a machine exist that can determine whether any arbitrary machine on its tape is "circular" (e.g., freezes, or fails to continue its computational task)?
Does a machine exist that can determine whether any arbitrary machine on its tape ever prints a given symbol?[14][15]
Thus by providing a mathematical description of a very simple device capable of arbitrary computations, he was able to prove properties of computation in generalâand in particular, the uncomputability of the Entscheidungsproblem ('decision problem').[16]
Turing machines proved the existence of fundamental limitations on the power of mechanical computation.[17] While they can express arbitrary computations, their minimalist design makes them unsuitable for computation in practice: real-world computers are based on different designs that, unlike Turing machines, use random-access memory.
Turing completeness is the ability for a system of instructions to simulate a Turing machine. A programming language that is Turing complete is theoretically capable of expressing all tasks accomplishable by computers; nearly all programming languages are Turing complete if the limitations of finite memory are ignored.

Contents

1 Overview

1.1 Physical description


2 Description
3 Formal definition
4 Additional details required to visualize or implement Turing machines

4.1 Alternative definitions
4.2 The "state"
4.3 "State" diagrams


5 Equivalent models
6 Choice c-machines, oracle o-machines
7 Universal Turing machines
8 Comparison with real machines

8.1 Limitations

8.1.1 Computational complexity theory
8.1.2 Concurrency
8.1.3 Interaction




9 History

9.1 Historical background: computational machinery
9.2 The Entscheidungsproblem (the "decision problem"): Hilbert's tenth question of 1900
9.3 Alan Turing's a-machine
9.4 1937â1970: The "digital computer", the birth of "computer science"
9.5 1970âpresent: as a model of computation


10 See also
11 Notes
12 References

12.1 Primary literature, reprints, and compilations
12.2 Computability theory
12.3 Church's thesis
12.4 Small Turing machines
12.5 Other


13 External links



Overview[edit]
A Turing machine is a general example of a central processing unit (CPU) that controls all data manipulation done by a computer, with the canonical machine using sequential memory to store data. More specifically, it is a machine (automaton) capable of enumerating some arbitrary subset of valid strings of an alphabet; these strings are part of a recursively enumerable set. A Turing machine has a tape of infinite length on which it can perform read and write operations.
Assuming a black box, the Turing machine cannot know whether it will eventually enumerate any one specific string of the subset with a given program. This is due to the fact that the halting problem is unsolvable, which has major implications for the theoretical limits of computing.
The Turing machine is capable of processing an unrestricted grammar, which further implies that it is capable of robustly evaluating first-order logic in an infinite number of ways. This is famously demonstrated through lambda calculus.
A Turing machine that is able to simulate any other Turing machine is called a universal Turing machine (UTM, or simply a universal machine). A more mathematically oriented definition with a similar "universal" nature was introduced by Alonzo Church, whose work on lambda calculus intertwined with Turing's in a formal theory of computation known as the ChurchâTuring thesis. The thesis states that Turing machines indeed capture the informal notion of effective methods in logic and mathematics, and provide a precise definition of an algorithm or "mechanical procedure". Studying their  abstract properties yields many insights into computer science and complexity theory.

Physical description[edit]
In his 1948 essay, "Intelligent Machinery", Turing wrote that his machine consisted of:

.mw-parser-output .templatequote{overflow:hidden;margin:1em 0;padding:0 40px}.mw-parser-output .templatequote .templatequotecite{line-height:1.5em;text-align:left;padding-left:1.6em;margin-top:0}...an unlimited memory capacity obtained in the form of an infinite tape marked out into squares, on each of which a symbol could be printed. At any moment there is one symbol in the machine; it is called the scanned symbol. The machine can alter the scanned symbol, and its behavior is in part determined by that symbol, but the symbols on the tape elsewhere do not affect the behavior of the machine. However, the tape can be moved back and forth through the machine, this being one of the elementary operations of the machine. Any symbol on the tape may therefore eventually have an innings.[18]ââTuring 1948, p. 3[19]
Description[edit]
For visualizations of Turing machines, see Turing machine gallery.
The Turing machine mathematically models a machine that mechanically operates on a tape.  On this tape are symbols, which the machine can read and write, one at a time, using a tape head. Operation is fully determined by a finite set of elementary instructions such as "in state 42, if the symbol seen is 0, write a 1; if the symbol seen is 1, change into state 17; in state 17, if the symbol seen is 0, write a 1 and change to state 6;" etc. In the original article ("On Computable Numbers, with an Application to the Entscheidungsproblem", see also references below), Turing imagines not a mechanism, but a person whom he calls the "computer", who executes these deterministic mechanical rules slavishly (or as Turing puts it, "in a desultory manner").

  The head is always over a particular square of the tape; only a finite stretch of squares is shown. The instruction to be performed (q4) is shown over the scanned square. (Drawing after Kleene (1952) p. 375.)
  Here, the internal state (q1) is shown inside the head, and the illustration describes the tape as being infinite and pre-filled with "0", the symbol serving as blank. The system's full state (its "complete configuration") consists of the internal state, any non-blank symbols on the tape (in this illustration "11B"), and the position of the head relative to those symbols including blanks, i.e. "011B". (Drawing after Minsky (1967) p. 121.)
More explicitly, a Turing machine consists of:

A tape divided into cells, one next to the other. Each cell contains a symbol from some finite alphabet. The alphabet contains a special blank symbol (here written as '0') and one or more other symbols. The tape is assumed to be arbitrarily extendable to the left and to the right, so that the Turing machine is always supplied with as much tape as it needs for its computation. Cells that have not been written before are assumed to be filled with the blank symbol. In some models the tape has a left end marked with a special symbol; the tape extends or is indefinitely extensible to the right.
A head that can read and write symbols on the tape and move the tape left and right one (and only one) cell at a time. In some models the head moves and the tape is stationary.
A state register that stores the state of the Turing machine, one of finitely many. Among these is the special start state with which the state register is initialized. These states, writes Turing, replace the "state of mind" a person performing computations would ordinarily be in.
A finite table[20] of instructions[21] that, given the state(qi) the machine is currently in and the symbol(aj) it is reading on the tape (symbol currently under the head), tells the machine to do the following in sequence (for the 5-tuple models):
Either erase or write a symbol (replacing aj with aj1).
Move the head (which is described by dk and can have values: 'L' for one step left or 'R' for one step right or 'N' for staying in the same place).
Assume the same or a new state as prescribed (go to state qi1).
In the 4-tuple models, erasing or writing a symbol (aj1) and moving the head left or right (dk) are specified as separate instructions. The table tells the machine to (ia) erase or write a symbol or (ib) move the head left or right, and then (ii) assume the same or a new state as prescribed, but not both actions (ia) and (ib) in the same instruction. In some models, if there is no entry in the table for the current combination of symbol and state, then the machine will halt; other models require all entries to be filled.
Every part of the machine (i.e. its state, symbol-collections, and used tape at any given time) and its actions (such as printing, erasing and tape motion) is finite, discrete and distinguishable; it is the unlimited amount of tape and runtime that gives it an unbounded amount of storage space.

Formal definition[edit]
Following Hopcroft & Ullman (1979, p.Â 148) harvtxt error: no target: CITEREFHopcroftUllman1979 (help), a (one-tape) Turing machine can be formally defined as a 7-tuple 
  
    
      
        M
        =
        â¨
        Q
        ,
        Î
        ,
        b
        ,
        Î£
        ,
        Î´
        ,
        
          q
          
            0
          
        
        ,
        F
        â©
      
    
    {\displaystyle M=\langle Q,\Gamma ,b,\Sigma ,\delta ,q_{0},F\rangle }
  
 where


  
    
      
        Î
      
    
    {\displaystyle \Gamma }
  
 is a finite, non-empty set of tape alphabet symbols;

  
    
      
        b
        â
        Î
      
    
    {\displaystyle b\in \Gamma }
  
 is the blank symbol (the only symbol allowed to occur on the tape infinitely often at any step during the computation);

  
    
      
        Î£
        â
        Î
        â
        {
        b
        }
      
    
    {\displaystyle \Sigma \subseteq \Gamma \setminus \{b\}}
  
 is the set of input symbols, that is, the set of symbols allowed to appear in the initial tape contents;

  
    
      
        Q
      
    
    {\displaystyle Q}
  
 is a finite, non-empty set of states;

  
    
      
        
          q
          
            0
          
        
        â
        Q
      
    
    {\displaystyle q_{0}\in Q}
  
 is the initial state;

  
    
      
        F
        â
        Q
      
    
    {\displaystyle F\subseteq Q}
  
 is the set of final states or accepting states. The initial tape contents is said to be accepted by 
  
    
      
        M
      
    
    {\displaystyle M}
  
 if it eventually halts in a state from 
  
    
      
        F
      
    
    {\displaystyle F}
  
.

  
    
      
        Î´
        :
        (
        Q
        â
        F
        )
        Ã
        Î
        â
        Q
        Ã
        Î
        Ã
        {
        L
        ,
        R
        }
      
    
    {\displaystyle \delta :(Q\setminus F)\times \Gamma \not \to Q\times \Gamma \times \{L,R\}}
  
 is a partial function called the transition function, where L is left shift, R is right shift. If 
  
    
      
        Î´
      
    
    {\displaystyle \delta }
  
 is not defined on the current state and the current tape symbol, then the machine halts;[22] intuitively, the transition function specifies the next state transited from the current state, which symbol to overwrite the current symbol pointed by the head, and the next head movement.
  3-state Busy Beaver. Black icons represent location and state of head; square colors represent 1s (orange) and 0s (white); time progresses vertically from the top until the HALT state at the bottom.
In addition, the Turing machine can also have a reject state to make rejection more explicit. In that case there are three possibilities: accepting, rejecting, and running forever. Another possibility is to regard the final values on the tape as the output. However, if the only output is the final state the machine ends up in (or never halting), the machine can still effectively output a longer string by taking in an integer that tells it which bit of the string to output.
A relatively uncommon variant allows "no shift", say N, as a third element of the set of directions 
  
    
      
        {
        L
        ,
        R
        }
      
    
    {\displaystyle \{L,R\}}
  
.
The 7-tuple for the 3-state busy beaver looks like this (see more about this busy beaver at Turing machine examples):


  
    
      
        Q
        =
        {
        
          
            A
          
        
        ,
        
          
            B
          
        
        ,
        
          
            C
          
        
        ,
        
          
            HALT
          
        
        }
      
    
    {\displaystyle Q=\{{\mbox{A}},{\mbox{B}},{\mbox{C}},{\mbox{HALT}}\}}
  
 (states);

  
    
      
        Î
        =
        {
        0
        ,
        1
        }
      
    
    {\displaystyle \Gamma =\{0,1\}}
  
 (tape alphabet symbols);

  
    
      
        b
        =
        0
      
    
    {\displaystyle b=0}
  
 (blank symbol);

  
    
      
        Î£
        =
        {
        1
        }
      
    
    {\displaystyle \Sigma =\{1\}}
  
 (input symbols);

  
    
      
        
          q
          
            0
          
        
        =
        
          
            A
          
        
      
    
    {\displaystyle q_{0}={\mbox{A}}}
  
 (initial state);

  
    
      
        F
        =
        {
        
          
            HALT
          
        
        }
      
    
    {\displaystyle F=\{{\mbox{HALT}}\}}
  
 (final states);

  
    
      
        Î´
        =
      
    
    {\displaystyle \delta =}
  
 see state-table below (transition function).
Initially all tape cells are marked with 
  
    
      
        0
      
    
    {\displaystyle 0}
  
.


State table for 3-state, 2-symbol busy beaver


Tape symbol

Current state A

Current state B

Current state C


Write symbol

Move tape

Next state

Write symbol

Move tape

Next state

Write symbol

Move tape

Next state


0

1

R

B

1

L

A

1

L

B


1

1

L

C

1

R

B

1

R

HALT

Additional details required to visualize or implement Turing machines[edit]
In the words of van Emde Boas (1990), p.Â 6: "The set-theoretical object [his formal seven-tuple description similar to the above] provides only partial information on how the machine will behave and what its computations will look like."
For instance,

There will need to be many decisions on what the symbols actually look like, and a failproof way of reading and writing symbols indefinitely.
The shift left and shift right operations may shift the tape head across the tape, but when actually building a Turing machine it is more practical to make the tape slide back and forth under the head instead.
The tape can be finite, and automatically extended with blanks as needed (which is closest to the mathematical definition), but it is more common to think of it as stretching infinitely at one or both ends and being pre-filled with blanks except on the explicitly given finite fragment the tape head is on.  (This is, of course, not implementable in practice.)  The tape cannot be fixed in length, since that would not correspond to the given definition and would seriously limit the range of computations the machine can perform to those of a linear bounded automaton if the tape was proportional to the input size, or finite-state machine if it was strictly fixed-length.
Alternative definitions[edit]
Definitions in literature sometimes differ slightly, to make arguments or proofs easier or clearer, but this is always done in such a way that the resulting machine has the same computational power. For example, the set could be changed from 
  
    
      
        {
        L
        ,
        R
        }
      
    
    {\displaystyle \{L,R\}}
  
 to 
  
    
      
        {
        L
        ,
        R
        ,
        N
        }
      
    
    {\displaystyle \{L,R,N\}}
  
, where N ("None" or "No-operation") would allow the machine to stay on the same tape cell instead of moving left or right. This would not increase the machine's computational power.
The most common convention represents each "Turing instruction" in a "Turing table" by one of nine 5-tuples, per the convention of Turing/Davis (Turing (1936) in The Undecidable, p.Â 126-127 and Davis (2000) p.Â 152):

(definition 1): (qi, Sj, Sk/E/N, L/R/N, qm)
( current state qi , symbol scanned Sj , print symbol Sk/erase E/none N , move_tape_one_square left L/right R/none N , new state qm )
Other authors (Minsky (1967) p.Â 119, Hopcroft and Ullman (1979) p.Â 158, Stone (1972) p.Â 9) adopt a different convention, with new state qm listed immediately after the scanned symbol Sj:

(definition 2): (qi, Sj, qm, Sk/E/N, L/R/N)
( current state qi , symbol scanned Sj , new state qm , print symbol Sk/erase E/none N , move_tape_one_square left L/right R/none N )
For the remainder of this article "definition 1" (the Turing/Davis convention) will be used.


Example: state table for the 3-state 2-symbol busy beaver reduced to 5-tuples


Current state

Scanned symbol



Print symbol

Move tape

Final (i.e. next) state

5-tuples


A

0



1

R

B

(A, 0, 1, R, B)


A

1



1

L

C

(A, 1, 1, L, C)


B

0



1

L

A

(B, 0, 1, L, A)


B

1



1

R

B

(B, 1, 1, R, B)


C

0



1

L

B

(C, 0, 1, L, B)


C

1



1

N

H

(C, 1, 1, N, H)

In the following table, Turing's original model allowed only the first three lines that he called N1, N2, N3 (cf. Turing in The Undecidable, p.Â 126). He allowed for erasure of the "scanned square" by naming a 0th symbol S0 = "erase" or "blank", etc. However, he did not allow for non-printing, so every instruction-line includes "print symbol Sk" or "erase" (cf. footnote 12 in Post (1947), The Undecidable, p.Â 300). The abbreviations are Turing's (The Undecidable, p.Â 119). Subsequent to Turing's original paper in 1936â1937, machine-models have allowed all nine possible types of five-tuples:






Current m-configuration(Turing state)

Tape symbol

Print-operation

Tape-motion

Final m-configuration(Turing state)

5-tuple

5-tuple comments

4-tuple


N1

qi

Sj

Print(Sk)

Left L

qm

(qi, Sj, Sk, L, qm)

"blank" = S0, 1=S1, etc.




N2

qi

Sj

Print(Sk)

Right R

qm

(qi, Sj, Sk, R, qm)

"blank" = S0, 1=S1, etc.




N3

qi

Sj

Print(Sk)

None N

qm

(qi, Sj, Sk, N, qm)

"blank" = S0, 1=S1, etc.

(qi, Sj, Sk, qm)


4

qi

Sj

None N

Left L

qm

(qi, Sj, N, L, qm)



(qi, Sj, L, qm)


5

qi

Sj

None N

Right R

qm

(qi, Sj, N, R, qm)



(qi, Sj, R, qm)


6

qi

Sj

None N

None N

qm

(qi, Sj, N, N, qm)

Direct "jump"

(qi, Sj, N, qm)


7

qi

Sj

Erase

Left L

qm

(qi, Sj, E, L, qm)






8

qi

Sj

Erase

Right R

qm

(qi, Sj, E, R, qm)






9

qi

Sj

Erase

None N

qm

(qi, Sj, E, N, qm)



(qi, Sj, E, qm)

Any Turing table (list of instructions) can be constructed from the above nine 5-tuples. For technical reasons, the three non-printing or "N" instructions (4, 5, 6) can usually be dispensed with. For examples see Turing machine examples.
Less frequently the use of 4-tuples are encountered: these represent a further atomization of the Turing instructions (cf. Post (1947), Boolos & Jeffrey (1974, 1999), Davis-Sigal-Weyuker (1994)); also see more at PostâTuring machine.

The "state"[edit]
The word "state" used in context of Turing machines can be a source of confusion, as it can mean two things. Most commentators after Turing have used "state" to mean the name/designator of the current instruction to be performedâi.e. the contents of the state register. But Turing (1936) made a strong distinction between a record of what he called the machine's "m-configuration", and the machine's (or person's) "state of progress" through the computationâthe current state of the total system. What Turing called "the state formula" includes both the current instruction and all the symbols on the tape:

Thus the state of progress of the computation at any stage is completely determined by the note of instructions and the symbols on the tape. That is, the state of the system may be described by a single expression (sequence of symbols) consisting of the symbols on the tape followed by Î (which is supposed to not to appear elsewhere) and then by the note of instructions. This expression is called the "state formula".ââThe Undecidable, pp. 139â140, emphasis added
Earlier in his paper Turing carried this even further: he gives an example where he placed a symbol of the current "m-configuration"âthe instruction's labelâbeneath the scanned square, together with all the symbols on the tape (The Undecidable, p.Â 121); this he calls "the complete configuration" (The Undecidable, p.Â 118). To print the "complete configuration" on one line, he places the state-label/m-configuration to the left of the scanned symbol.
A variant of this is seen in Kleene (1952) where Kleene shows how to write the GÃ¶del number of a machine's "situation": he places the "m-configuration" symbol q4 over the scanned square in roughly the center of the 6 non-blank squares on the tape (see the Turing-tape figure in this article) and puts it to the right of the scanned square. But Kleene refers to "q4" itself as "the machine state" (Kleene, p.Â 374-375). Hopcroft and Ullman call this composite the "instantaneous description" and follow the Turing convention of putting the "current state" (instruction-label, m-configuration) to the left of the scanned symbol (p.Â 149), that is, the instantaneous description is the composite of non-blank symbols to the left, state of the machine, the current symbol scanned by the head, and the non-blank symbols to the right.
Example: total state of 3-state 2-symbol busy beaver after 3 "moves" (taken from example "run" in the figure below):

1A1
This means: after three moves the tape has ... 000110000 ... on it, the head is scanning the right-most 1, and the state is A. Blanks (in this case represented by "0"s) can be part of the total state as shown here: B01; the tape has a single 1 on it, but the head is scanning the 0 ("blank") to its left and the state is B.
"State" in the context of Turing machines should be clarified as to which is being described:  the current instruction, or the list of symbols on the tape together with the current instruction, or  the list of symbols on the tape together with the current instruction placed to the left of the scanned symbol or to the right of the scanned symbol.
Turing's biographer Andrew Hodges (1983: 107) has noted and discussed this confusion.

"State" diagrams[edit]

The table for the 3-state busy beaver ("P" = print/write a "1")


Tape symbol

Current state A

Current state B

Current state C




Write symbol

Move tape

Next state

Write symbol

Move tape

Next state

Write symbol

Move tape

Next state


0

P

R

B

P

L

A

P

L

B


1

P

L

C

P

R

B

P

R

HALT

  The "3-state busy beaver" Turing machine in a finite-state representation. Each circle represents a "state" of the tableâan "m-configuration" or "instruction". "Direction" of a state transition is shown by an arrow. The label (e.g. 0/P,R) near the outgoing state (at the "tail" of the arrow) specifies the scanned symbol that causes a particular transition (e.g. 0) followed by a slash /, followed by the subsequent "behaviors" of the machine, e.g. "P print" then move tape "R right". No general accepted format exists. The convention shown is after McClusky (1965), Booth (1967), Hill, and Peterson (1974).
To the right: the above table as expressed as a "state transition" diagram.
Usually large tables are better left as tables (Booth, p.Â 74). They are more readily simulated by computer in tabular form (Booth, p.Â 74). However, certain conceptsâe.g. machines with "reset" states and machines with repeating patterns (cf. Hill and Peterson p.Â 244ff)âcan be more readily seen when viewed as a drawing.
Whether a drawing represents an improvement on its table must be decided by the reader for the particular context. 

  The evolution of the busy beaver's computation starts at the top and proceeds to the bottom.
The reader should again be cautioned that such diagrams represent a snapshot of their table frozen in time, not the course ("trajectory") of a computation through time and space. While every time the busy beaver machine "runs" it will always follow the same state-trajectory, this is not true for the "copy" machine that can be provided with variable input "parameters".
The diagram "progress of the computation" shows the three-state busy beaver's "state" (instruction) progress through its computation from start to finish. On the far right is the Turing "complete configuration" (Kleene "situation", HopcroftâUllman "instantaneous description") at each step. If the machine were to be stopped and cleared to blank both the "state register" and entire tape, these "configurations" could be used to rekindle a computation anywhere in its progress (cf. Turing (1936) The Undecidable, pp.Â 139â140).

Equivalent models[edit]
See also: Turing machine equivalents, Register machine, and PostâTuring machine
Many machines that might be thought to have more computational capability than a simple universal Turing machine can be shown to have no more power (Hopcroft and Ullman p.Â 159, cf. Minsky (1967)). They might compute faster, perhaps, or use less memory, or their instruction set might be smaller, but they cannot compute more powerfully (i.e. more mathematical functions). (The ChurchâTuring thesis hypothesizes this to be true for any kind of machine: that anything that can be "computed" can be computed by some Turing machine.)
A Turing machine is equivalent to a single-stack pushdown automaton (PDA) that has been made more flexible and concise by relaxing the last-in-first-out (LIFO) requirement of its stack. In addition, a Turing machine is also equivalent to a two-stack PDA with standard LIFO  semantics, by using one stack to model the tape left of the head and the other stack for the tape to the right.
At the other extreme, some very simple models turn out to be Turing-equivalent, i.e. to have the same computational power as the Turing machine model.
Common equivalent models are the multi-tape Turing machine, multi-track Turing machine, machines with input and output, and the non-deterministic Turing machine (NDTM) as opposed to the deterministic Turing machine (DTM) for which the action table has at most one entry for each combination of symbol and state.
Read-only, right-moving Turing machines are equivalent to DFAs (as well as NFAs by conversion using the NDFA to DFA conversion algorithm).
For practical and didactical intentions the equivalent register machine can be used as a usual assembly programming language.
A relevant question is whether or not the computation model represented by concrete programming languages is Turing equivalent. While the computation of a real computer is based on finite states and thus not capable to simulate a Turing machine, programming languages themselves do not necessarily have this limitation. Kirner et al., 2009 have shown that among the general-purpose programming languages some are Turing complete while others are not. For example, ANSI C is not Turing-equivalent, as all instantiations of ANSI C (different instantiations are possible as the standard deliberately leaves certain behaviour undefined for legacy reasons) imply a finite-space memory. This is because the size of memory reference data types, called pointers, is accessible inside the language. However, other programming languages like Pascal do not have this feature, which allows them to be Turing complete in principle.
It is just Turing complete in principle, as memory allocation in a programming language is allowed to fail, which means the programming language can be Turing complete when ignoring failed memory allocations, but the compiled programs executable on a real computer cannot.

Choice c-machines, oracle o-machines[edit]
Early in his paper (1936) Turing makes a distinction between an "automatic machine"âits "motion ... completely determined by the configuration" and a "choice machine":

...whose motion is only partially determined by the configuration ... When such a machine reaches one of these ambiguous configurations, it cannot go on until some arbitrary choice has been made by an external operator. This would be the case if we were using machines to deal with axiomatic systems.ââThe Undecidable, p. 118
Turing (1936) does not elaborate further except in a footnote in which he describes how to use an a-machine to "find all the provable formulae of the [Hilbert] calculus" rather than use a choice machine. He "suppose[s] that the choices are always between two possibilities 0 and 1. Each proof will then be determined by a sequence of choices i1, i2, ..., in (i1 = 0 or 1, i2 = 0 or 1, ..., in = 0 or 1), and hence the number 2n + i12n-1 + i22n-2 + ... +in completely determines the proof. The automatic machine carries out successively proof 1, proof 2, proof 3, ..." (Footnote â¡, The Undecidable, p.Â 138)
This is indeed the technique by which a deterministic (i.e., a-) Turing machine can be used to mimic the action of a nondeterministic Turing machine; Turing solved the matter in a footnote and appears to dismiss it from further consideration.
An oracle machine or o-machine is a Turing a-machine that pauses its computation at state "o" while, to complete its calculation, it "awaits the decision" of "the oracle"âan unspecified entity "apart from saying that it cannot be a machine" (Turing (1939), The Undecidable, p.Â 166â168).

Universal Turing machines[edit]
Main article: Universal Turing machine
  An implementation of a Turing machine
As Turing wrote in The Undecidable, p.Â 128 (italics added):

It is possible to invent a single machine which can be used to compute any computable sequence. If this machine U is supplied with the tape on the beginning of which is written the string of quintuples separated by semicolons of some computing machine M, then U will compute the same sequence as M.
This finding is now taken for granted, but at the time (1936) it was considered astonishing.[citation needed] The model of computation that Turing called his "universal machine"â"U" for shortâis considered by some (cf. Davis (2000)) to have been the fundamental theoretical breakthrough that led to the notion of the stored-program computer.

Turing's paper ... contains, in essence, the invention of the modern computer and some of the programming techniques that accompanied it.ââMinsky (1967), p. 104
In terms of computational complexity, a multi-tape universal Turing machine need only be slower by logarithmic factor compared to the machines it simulates. This result was obtained in 1966 by F. C. Hennie and R. E. Stearns. (Arora and Barak, 2009, theorem 1.9)

Comparison with real machines[edit]
  A Turing machine realization using Lego pieces
It is often believed[according to whom?] that Turing machines, unlike simpler automata, are as powerful as real machines, and are able to execute any operation that a real program can. What is neglected in this statement is that, because a real machine can only have a finite number of configurations, it is nothing but a finite-state machine, whereas a Turing machine has an unlimited amount of storage space available for its computations.
There are a number of ways to explain why Turing machines are useful models of real computers:

Anything a real computer can compute, a Turing machine can also compute. For example: "A Turing machine can simulate any type of subroutine found in programming languages, including recursive procedures and any of the known parameter-passing mechanisms" (Hopcroft and Ullman p.Â 157). A large enough FSA can also model any real computer, disregarding IO. Thus, a statement about the limitations of Turing machines will also apply to real computers.
The difference lies only with the ability of a Turing machine to manipulate an unbounded amount of data. However, given a finite amount of time, a Turing machine (like a real machine) can only manipulate a finite amount of data.
Like a Turing machine, a real machine can have its storage space enlarged as needed, by acquiring more disks or other storage media.
Descriptions of real machine programs using simpler abstract models are often much more complex than descriptions using Turing machines. For example, a Turing machine describing an algorithm may have a few hundred states, while the equivalent deterministic finite automaton (DFA) on a given real machine has quadrillions. This makes the DFA representation infeasible to analyze.
Turing machines describe algorithms independent of how much memory they use. There is a limit to the memory possessed by any current machine, but this limit can rise arbitrarily in time. Turing machines allow us to make statements about algorithms which will (theoretically) hold forever, regardless of advances in conventional computing machine architecture.
Turing machines simplify the statement of algorithms. Algorithms running on Turing-equivalent abstract machines are usually more general than their counterparts running on real machines, because they have arbitrary-precision data types available and never have to deal with unexpected conditions (including, but not limited to, running out of memory).
  Another Turing machine realization
Limitations[edit]
Computational complexity theory[edit]
Further information: Computational complexity theory
A limitation of Turing machines is that they do not model the strengths of a particular arrangement well. For instance, modern stored-program computers are actually instances of a more specific form of abstract machine known as the random-access stored-program machine or RASP machine model. Like the universal Turing machine, the RASP stores its "program" in "memory" external to its finite-state machine's "instructions". Unlike the universal Turing machine, the RASP has an infinite number of distinguishable, numbered but unbounded "registers"âmemory "cells" that can contain any integer (cf. Elgot and Robinson (1964), Hartmanis (1971), and in particular Cook-Rechow (1973); references at random-access machine). The RASP's finite-state machine is equipped with the capability for indirect addressing (e.g., the contents of one register can be used as an address to specify another register); thus the RASP's "program" can address any register in the register-sequence. The upshot of this distinction is that there are computational optimizations that can be performed based on the memory indices, which are not possible in a general Turing machine; thus when Turing machines are used as the basis for bounding running times, a "false lower bound" can be proven on certain algorithms' running times (due to the false simplifying assumption of a Turing machine). An example of this is binary search, an algorithm that can be shown to perform more quickly when using the RASP model of computation rather than the Turing machine model.

Concurrency[edit]
This section does not cite any sources. Please help improve this section by adding citations to reliable sources. Unsourced material may be challenged and removed.  (April 2015) (Learn how and when to remove this template message)
Another limitation of Turing machines is that they do not model concurrency well. For example, there is a bound on the size of integer that can be computed by an always-halting nondeterministic Turing machine starting on a blank tape. (See article on unbounded nondeterminism.) By contrast, there are always-halting concurrent systems with no inputs that can compute an integer of unbounded size. (A process can be created with local storage that is initialized with a count of 0 that concurrently sends itself both a stop and a go message. When it receives a go message, it increments its count by 1 and sends itself a go message. When it receives a stop message, it stops with an unbounded number in its local storage.)

Interaction[edit]
In the early days of computing, computer use was typically limited to batch processing, i.e., non-interactive tasks, each producing output data from given input data. Computability theory, which studies computability of functions from inputs to outputs, and for which Turing machines were invented, reflects this practice.
Since the 1970s, interactive use of computers became much more common.  In principle, it is possible to model this by having an external agent read from the tape and write to it at the same time as a Turing machine, but this rarely matches how interaction actually happens; therefore, when describing interactivity, alternatives such as I/O automata are usually preferred.

History[edit]
See also: Algorithm and ChurchâTuring thesis
They were described in 1936 by Alan Turing.

Historical background: computational machinery[edit]
Robin Gandy (1919â1995)âa student of Alan Turing (1912â1954), and his lifelong friendâtraces the lineage of the notion of "calculating machine" back to Charles Babbage (circa 1834) and actually proposes "Babbage's Thesis":

That the whole of development and operations of analysis are now capable of being executed by machinery.ââ(italics in Babbage as cited by Gandy, p. 54)
Gandy's analysis of Babbage's analytical engine describes the following five operations (cf. p.Â 52â53):

The arithmetic functions +, â, Ã, where â indicates "proper" subtraction x â y = 0 if y â¥ x.
Any sequence of operations is an operation.
Iteration of an operation (repeating n times an operation P).
Conditional iteration (repeating n times an operation P conditional on the "success" of test T).
Conditional transfer (i.e., conditional "goto").
Gandy states that "the functions which can be calculated by (1), (2), and (4) are precisely those which are Turing computable." (p.Â 53). He cites other proposals for "universal calculating machines" including those of Percy Ludgate (1909), Leonardo Torres y Quevedo (1914), Maurice d'Ocagne (1922), Louis Couffignal (1933), Vannevar Bush (1936), Howard Aiken (1937). However:

â¦ the emphasis is on programming a fixed iterable sequence of arithmetical operations. The fundamental importance of conditional iteration and conditional transfer for a general theory of calculating machines is not recognizedâ¦ââGandy p. 55
The Entscheidungsproblem (the "decision problem"): Hilbert's tenth question of 1900[edit]
With regard to Hilbert's problems posed by the famous mathematician David Hilbert in 1900, an aspect of problem #10 had been floating about for almost 30 years before it was framed precisely. Hilbert's original expression for No. 10 is as follows:

10. Determination of the solvability of a Diophantine equation. Given a Diophantine equation with any number of unknown quantities and with rational integral coefficients: To devise a process according to which it can be determined in a finite number of operations whether the equation is solvable in rational integers.
The Entscheidungsproblem [decision problem for first-order logic] is solved when we know a procedure that allows for any given logical expression to decide by finitely many operations its validity or satisfiability ... The Entscheidungsproblem must be considered the main problem of mathematical logic.ââquoted, with this translation and the original German, in Dershowitz and Gurevich, 2008
By 1922, this notion of "Entscheidungsproblem" had developed a bit, and H. Behmann stated that

...Â most general form of the Entscheidungsproblem [is] as follows:
A quite definite generally applicable prescription is required which will allow one to decide in a finite number of steps the truth or falsity of a given purely logical assertion ...ââGandy p. 57, quoting Behmann
Behmann remarks that ... the general problem is equivalent to the problem of deciding which mathematical propositions are true.ââibid.
If one were able to solve the Entscheidungsproblem then one would have a "procedure for solving many (or even all) mathematical problems".ââibid., p. 92
By the 1928 international congress of mathematicians, Hilbert "made his questions quite precise. First, was mathematics complete ... Second, was mathematics consistent ... And thirdly, was mathematics decidable?" (Hodges p.Â 91, Hawking p.Â 1121). The first two questions were answered in 1930 by Kurt GÃ¶del at the very same meeting where Hilbert delivered his retirement speech (much to the chagrin of Hilbert); the thirdâthe Entscheidungsproblemâhad to wait until the mid-1930s.
The problem was that an answer first required a precise definition of "definite general applicable prescription", which Princeton professor Alonzo Church would come to call "effective calculability", and in 1928 no such definition existed. But over the next 6â7 years Emil Post developed his definition of a worker moving from room to room writing and erasing marks per a list of instructions (Post 1936), as did Church and his two students Stephen Kleene and J. B. Rosser by use of Church's lambda-calculus and GÃ¶del's recursion theory (1934). Church's paper (published 15 April 1936) showed that the Entscheidungsproblem was indeed "undecidable" and beat Turing to the punch by almost a year (Turing's paper submitted 28 May 1936, published January 1937). In the meantime, Emil Post submitted a brief paper in the fall of 1936, so Turing at least had priority over Post. While Church refereed Turing's paper, Turing had time to study Church's paper and add an Appendix where he sketched a proof that Church's lambda-calculus and his machines would compute the same functions.

But what Church had done was something rather different, and in a certain sense weaker. ... the Turing construction was more direct, and provided an argument from first principles, closing the gap in Church's demonstration.ââHodges p. 112
And Post had only proposed a definition of calculability and criticized Church's "definition", but had proved nothing.

Alan Turing's a-machine[edit]
In the spring of 1935, Turing as a young Master's student at King's College, Cambridge, took on the challenge; he had been stimulated by the lectures of the logician M. H. A. Newman "and learned from them of GÃ¶del's work and the Entscheidungsproblem ... Newman used the word 'mechanical' ... In his obituary of Turing 1955 Newman writes:

To the question 'what is a "mechanical" process?' Turing returned the characteristic answer 'Something that can be done by a machine' and he embarked on the highly congenial task of analysing the general notion of a computing machine.ââGandy, p. 74
Gandy states that:

I suppose, but do not know, that Turing, right from the start of his work, had as his goal a proof of the undecidability of the Entscheidungsproblem. He told me that the 'main idea' of the paper came to him when he was lying in Grantchester meadows in the summer of 1935. The 'main idea' might have either been his analysis of computation or his realization that there was a universal machine, and so a diagonal argument to prove unsolvability.ââibid., p. 76
While Gandy believed that Newman's statement above is "misleading", this opinion is not shared by all. Turing had a lifelong interest in machines: "Alan had dreamt of inventing typewriters as a boy; [his mother] Mrs. Turing had a typewriter; and he could well have begun by asking himself what was meant by calling a typewriter 'mechanical'" (Hodges p.Â 96). While at Princeton pursuing his PhD, Turing built a Boolean-logic multiplier (see below). His PhD thesis, titled "Systems of Logic Based on Ordinals", contains the following definition of "a computable function":

It was stated above that 'a function is effectively calculable if its values can be found by some purely mechanical process'. We may take this statement literally, understanding by a purely mechanical process one which could be carried out by a machine. It is possible to give a mathematical description, in a certain normal form, of the structures of these machines. The development of these ideas leads to the author's definition of a computable function, and to an identification of computability with effective calculability. It is not difficult, though somewhat laborious, to prove that these three definitions [the 3rd is the Î»-calculus] are equivalent.ââTuring (1939) in The Undecidable, p. 160
When Turing returned to the UK he ultimately became jointly responsible for breaking the German secret codes created by encryption machines called "The Enigma"; he also became involved in the design of the ACE (Automatic Computing Engine), "[Turing's] ACE proposal was effectively self-contained, and its roots lay not in the EDVAC [the USA's initiative], but in his own universal machine" (Hodges p.Â 318). Arguments still continue concerning the origin and nature of what has been named by Kleene (1952) Turing's Thesis. But what Turing did prove with his computational-machine model appears in his paper "On Computable Numbers, with an Application to the Entscheidungsproblem" (1937):

[that] the Hilbert Entscheidungsproblem can have no solution ... I propose, therefore to show that there can be no general process for determining whether a given formula U of the functional calculus K is provable, i.e. that there can be no machine which, supplied with any one U of these formulae, will eventually say whether U is provable.ââfrom Turing's paper as reprinted in The Undecidable, p. 145
Turing's example (his second proof): If one is to ask for a general procedure to tell us: "Does this machine ever print 0", the question is "undecidable".

1937â1970: The "digital computer", the birth of "computer science"[edit]
In 1937, while at Princeton working on his PhD thesis, Turing built a digital (Boolean-logic) multiplier from scratch, making his own electromechanical relays (Hodges p.Â 138). "Alan's task was to embody the logical design of a Turing machine in a network of relay-operated switches ..." (Hodges p.Â 138). While Turing might have been just initially curious and experimenting, quite-earnest work in the same direction was going in Germany (Konrad Zuse (1938)), and in the United States (Howard Aiken) and George Stibitz (1937); the fruits of their labors were used by both the Axis and Allied militaries in World War II (cf. Hodges p.Â 298â299). In the early to mid-1950s Hao Wang and Marvin Minsky reduced the Turing machine to a simpler form (a precursor to the PostâTuring machine of Martin Davis); simultaneously European researchers were reducing the new-fangled electronic computer to a computer-like theoretical object equivalent to what was now being called a "Turing machine". In the late 1950s and early 1960s, the coincidentally parallel developments of Melzak and Lambek (1961), Minsky (1961), and Shepherdson and Sturgis (1961) carried the European work further and reduced the Turing machine to a more friendly, computer-like abstract model called the counter machine; Elgot and Robinson (1964), Hartmanis (1971), Cook and Reckhow (1973) carried this work even further with the register machine and random-access machine modelsâbut basically all are just multi-tape Turing machines with an arithmetic-like instruction set.

1970âpresent: as a model of computation[edit]
Today, the counter, register and random-access machines and their sire the Turing machine continue to be the models of choice for theorists investigating questions in the theory of computation. In particular, computational complexity theory makes use of the Turing machine:

Depending on the objects one likes to manipulate in the computations (numbers like nonnegative integers or alphanumeric strings), two models have obtained a dominant position in machine-based complexity theory:
the off-line multitape Turing machine..., which represents the standard model for string-oriented computation, and
the random access machine (RAM) as introduced by Cook and Reckhow ..., which models the idealized Von Neumann-style computer.ââvan Emde Boas 1990:4
Only in the related area of analysis of algorithms this role is taken over by the RAM model.ââvan Emde Boas 1990:16
See also[edit]
.mw-parser-output .div-col{margin-top:0.3em;column-width:30em}.mw-parser-output .div-col-small{font-size:90%}.mw-parser-output .div-col-rules{column-rule:1px solid #aaa}.mw-parser-output .div-col dl,.mw-parser-output .div-col ol,.mw-parser-output .div-col ul{margin-top:0}.mw-parser-output .div-col li,.mw-parser-output .div-col dd{page-break-inside:avoid;break-inside:avoid-column}
Arithmetical hierarchy
Bekenstein bound, showing the impossibility of infinite-tape Turing machines of finite size and bounded energy
BlooP and FlooP
Chaitin's constant or Omega (computer science) for information relating to the halting problem
Chinese room
Conway's Game of Life, a Turing-complete cellular automaton
Digital infinity
The Emperor's New Mind
Enumerator (in theoretical computer science)
Genetix
GÃ¶del, Escher, Bach: An Eternal Golden Braid, a famous book that discusses, among other topics, the ChurchâTuring thesis
Halting problem, for more references
Harvard architecture
Imperative programming
Langton's ant and Turmites, simple two-dimensional analogues of the Turing machine
List of things named after Alan Turing
Modified Harvard architecture
Quantum Turing machine
Claude Shannon, another leading thinker in information theory
Turing machine examples
Turing switch
Turing tarpit, any computing system or language that, despite being Turing complete, is generally considered useless for practical computing
Unorganized machine, for Turing's very early ideas on neural networks
Von Neumann architecture

Notes[edit]

^ Minsky 1967:107 "In his 1936 paper, A. M. Turing defined the class of abstract machines that now bear his name. A Turing machine is a finite-state machine associated with a special kind of environment -- its tape -- in which it can store (and later recover) sequences of symbols," also Stone 1972:8 where the word "machine" is in quotation marks.

^ Stone 1972:8 states "This "machine" is an abstract mathematical model", also cf. Sipser 2006:137ff that describes the "Turing machine model". Rogers 1987 (1967):13 refers to "Turing's characterization", Boolos Burgess and Jeffrey 2002:25 refers to a "specific kind of idealized machine".

^ Sipser 2006:137 "A Turing machine can do everything that a real computer can do".

^ Cf. Sipser 2002:137. Also, Rogers 1987 (1967):13 describes "a paper tape of infinite length in both directions". Minsky 1967:118 states "The tape is regarded as infinite in both directions". Boolos Burgess and Jeffrey 2002:25 include the possibility of "there is someone stationed at each end to add extra blank squares as needed".

^ Cf. Rogers 1987 (1967):13. Other authors use the word "square" e.g. Boolos Burgess Jeffrey 2002:35, Minsky 1967:117, Penrose 1989:37.

^ This word is used by e.g. Davis 2000:151

^ This table represents an algorithm or "effective computational procedure" which is necessarily finite; see Penrose 1989:30ff, Stone 1972:3ff.

^ Boolos Burgess and Jeffrey 2002:25

^ Boolos Burgess Jeffry 2002:25 illustrate the machine as moving along the tape. Penrose 1989:36-37 describes himself as "uncomfortable" with an infinite tape observing that it "might be hard to shift!"; he "prefer[s] to think of the tape as representing some external environment through which our finite device can move" and after observing that the " 'movement' is a convenient way of picturing things" and then suggests that "the device receives all its input from this environment.

^ "Also by convention one of the states is distinguished as the stopping state and is given the name HALT" (Stone 1972:9). Turing's original description did not include a HALT instruction but he did allow for a "circular" condition, a "configuration from which there is no possible move" (see Turing 1936 in The Undecidable 1967:119); this notion was added in the 1950s.

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Hodges, Andrew (2012). Alan Turing: The Enigma (The CentenaryÂ ed.). Princeton University Press. ISBNÂ 978-0-691-15564-7.

^ The idea came to him in mid-1935 (perhaps, see more in the History section) after a question posed by M. H. A. Newman in his lectures: "Was there a definite method, or as Newman put it, a "mechanical process" which could be applied to a mathematical statement, and which would come up with the answer as to whether it was provable" (Hodges 1983:93). Turing submitted his paper on 31 May 1936 to the London Mathematical Society for its Proceedings (cf. Hodges 1983:112), but it was published in early 1937 and offprints were available in February 1937 (cf. Hodges 1983:129).

^ See footnote in Davis 2000:151.

^ Turing 1936 in The Undecidable 1965:132-134; Turing's definition of "circular" is found on page 119.

^ Turing, Alan Mathison (1937). "On Computable Numbers, with an Application to the Entscheidungsproblem". Proceedings of the London Mathematical Society. Series 2. 42 (1): 230â265. doi:10.1112/plms/s2-42.1.230. â Reprint at: Turing, Alan. "On computable numbers, with an application to the Entscheidungsproblem". The Turing Digital Archive. Retrieved 9 July 2020.

^ Turing 1936 in The Undecidable 1965:145

^ Sipser 2006:137 observes that "A Turing machine can do everything that a real computer can do. Nevertheless, even a Turing machine cannot solve certain problems. In a very real sense, these problems are beyond the theoretical limits of computation."

^ See the definition of "innings" on Wiktionary

^ 
A.M. Turing (Jul 1948). Intelligent Machinery (Report). National Physical Laboratory. Here: p.3-4

^ Occasionally called an action table or transition function.

^ Usually quintuples [5-tuples]: qiajâqi1aj1dk, but sometimes quadruples [4-tuples].

^ p.149; in particular, Hopcroft and Ullman assume that 
  
    
      
        Î´
      
    
    {\displaystyle \delta }
  
 is undefined on all states from 
  
    
      
        F
      
    
    {\displaystyle F}
  



References[edit]
This article has an unclear citation style. The references used may be made clearer with a different or consistent style of citation and footnoting.  (November 2019) (Learn how and when to remove this template message)
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

Primary literature, reprints, and compilations[edit]
B. Jack Copeland ed. (2004), The Essential Turing: Seminal Writings in Computing, Logic, Philosophy, Artificial Intelligence, and Artificial Life plus The Secrets of Enigma, Clarendon Press (Oxford University Press), Oxford UK, ISBNÂ 0-19-825079-7. Contains the Turing papers plus a draft letter to Emil Post re his criticism of "Turing's convention", and Donald W. Davies' Corrections to Turing's Universal Computing Machine
Martin Davis (ed.) (1965), The Undecidable, Raven Press, Hewlett, NY.
Emil Post (1936), "Finite Combinatory ProcessesâFormulation 1", Journal of Symbolic Logic, 1, 103â105, 1936. Reprinted in The Undecidable, pp.Â 289ff.
Emil Post (1947), "Recursive Unsolvability of a Problem of Thue", Journal of Symbolic Logic, vol. 12, pp.Â 1â11. Reprinted in The Undecidable, pp.Â 293ff. In the Appendix of this paper Post comments on and gives corrections to Turing's paper of 1936â1937. In particular see the footnotes 11 with corrections to the universal computing machine coding and footnote 14 with comments on Turing's first and second proofs.
Turing, A.M. (1936). "On Computable Numbers, with an Application to the Entscheidungsproblem". Proceedings of the London Mathematical Society. 2 (published 1937). 42: 230â265. doi:10.1112/plms/s2-42.1.230. (and Turing, A.M. (1938). "On Computable Numbers, with an Application to the Entscheidungsproblem: A correction". Proceedings of the London Mathematical Society. 2 (published 1937). 43 (6): 544â6. doi:10.1112/plms/s2-43.6.544.). Reprinted in many collections, e.g. in The Undecidable, pp.Â 115â154; available on the web in many places.
Alan Turing, 1948, "Intelligent Machinery."  Reprinted in "Cybernetics: Key Papers." Ed. C.R. Evans and A.D.J. Robertson.  Baltimore: University Park Press, 1968. p.Â 31.  Reprinted in Turing, A. M. (1996). "Intelligent Machinery, A Heretical Theory". Philosophia Mathematica. 4 (3): 256â260. doi:10.1093/philmat/4.3.256.
F. C. Hennie and R. E. Stearns. Two-tape simulation of multitape Turing machines. JACM, 13(4):533â546, 1966.
Computability theory[edit]
Boolos, George; Richard Jeffrey (1999) [1989]. Computability and Logic (3rdÂ ed.). Cambridge UK: Cambridge University Press. ISBNÂ 0-521-20402-X.
Boolos, George; John Burgess; Richard Jeffrey (2002). Computability and Logic (4thÂ ed.). Cambridge UK: Cambridge University Press. ISBNÂ 0-521-00758-5. Some parts have been significantly rewritten by Burgess. Presentation of Turing machines in context of Lambek "abacus machines" (cf. Register machine) and recursive functions, showing their equivalence.
Taylor L. Booth (1967), Sequential Machines and Automata Theory, John Wiley and Sons, Inc., New York. Graduate level engineering text; ranges over a wide variety of topics, Chapter IX Turing Machines includes some recursion theory.
Martin Davis (1958). Computability and Unsolvability. McGraw-Hill Book Company, Inc, New York.. On pages 12â20 he gives examples of 5-tuple tables for Addition, The Successor Function, Subtraction (x â¥ y), Proper Subtraction (0 if x < y), The Identity Function and various identity functions, and Multiplication.
Davis, Martin; Ron Sigal; Elaine J. Weyuker (1994). Computability, Complexity, and Languages and Logic: Fundamentals of Theoretical Computer Science (2ndÂ ed.). San Diego: Academic Press, Harcourt, Brace & Company. ISBNÂ 0-12-206382-1.
Hennie, Fredrick (1977). Introduction to Computability. AddisonâWesley, Reading, Mass. QA248.5H4 1977.. On pages 90â103 Hennie discusses the UTM with examples and flow-charts, but no actual 'code'.
John Hopcroft and Jeffrey Ullman (1979). Introduction to Automata Theory, Languages, and Computation (1stÂ ed.). AddisonâWesley, Reading Mass. ISBNÂ 0-201-02988-X. Centered around the issues of machine-interpretation of "languages", NP-completeness, etc.
Hopcroft, John E.; Rajeev Motwani; Jeffrey D. Ullman (2001). Introduction to Automata Theory, Languages, and Computation (2ndÂ ed.). Reading Mass: AddisonâWesley. ISBNÂ 0-201-44124-1.
Stephen Kleene (1952), Introduction to Metamathematics, NorthâHolland Publishing Company, Amsterdam Netherlands, 10th impression (with corrections of 6th reprint 1971). Graduate level text; most of Chapter XIII Computable functions is on Turing machine proofs of computability of recursive functions, etc.
Knuth, Donald E. (1973). Volume 1/Fundamental Algorithms: The Art of computer Programming (2ndÂ ed.). Reading, Mass.: AddisonâWesley Publishing Company.. With reference to the role of Turing machines in the development of computation (both hardware and software) see 1.4.5 History and Bibliography pp.Â 225ff and 2.6 History and Bibliographypp.Â 456ff.
Zohar Manna, 1974, Mathematical Theory of Computation. Reprinted, Dover, 2003. ISBNÂ 978-0-486-43238-0
Marvin Minsky, Computation: Finite and Infinite Machines, PrenticeâHall, Inc., N.J., 1967. See Chapter 8, Section 8.2 "Unsolvability of the Halting Problem."
Christos Papadimitriou (1993). Computational Complexity (1stÂ ed.). Addison Wesley. ISBNÂ 0-201-53082-1. Chapter 2: Turing machines, pp.Â 19â56.
Hartley Rogers, Jr., Theory of Recursive Functions and Effective Computability, The MIT Press, Cambridge MA, paperback edition 1987, original McGraw-Hill edition 1967, ISBNÂ 0-262-68052-1 (pbk.)
Michael Sipser (1997). Introduction to the Theory of Computation. PWS Publishing. ISBNÂ 0-534-94728-X. Chapter 3: The ChurchâTuring Thesis, pp.Â 125â149.
Stone, Harold S. (1972). Introduction to Computer Organization and Data Structures (1stÂ ed.). New York: McGrawâHill Book Company. ISBNÂ 0-07-061726-0.
Peter van Emde Boas 1990, Machine Models and Simulations, pp.Â 3â66, in Jan van Leeuwen, ed., Handbook of Theoretical Computer Science, Volume A: Algorithms and Complexity, The MIT Press/Elsevier, [place?], ISBNÂ 0-444-88071-2 (Volume A). QA76.H279 1990.
Church's thesis[edit]
Nachum Dershowitz; Yuri Gurevich (September 2008). "A natural axiomatization of computability and proof of Church's Thesis" (PDF). Bulletin of Symbolic Logic. 14 (3). Retrieved 2008-10-15.
Roger Penrose (1990) [1989]. The Emperor's New Mind (2ndÂ ed.). Oxford University Press, New York. ISBNÂ 0-19-851973-7.
Small Turing machines[edit]
Rogozhin, Yurii, 1998, "A Universal Turing Machine with 22 States and 2 Symbols", Romanian Journal of Information Science and Technology, 1(3), 259â265, 1998. (surveys known results about small universal Turing machines)
Stephen Wolfram, 2002, A New Kind of Science, Wolfram Media, ISBNÂ 1-57955-008-8
Brunfiel, Geoff, Student snags maths prize, Nature, October 24. 2007.
Jim Giles (2007), Simplest 'universal computer' wins student $25,000, New Scientist, October 24, 2007.
Alex Smith, Universality of Wolframâs 2, 3 Turing Machine, Submission for the Wolfram 2, 3 Turing Machine Research Prize.
Vaughan Pratt, 2007, "Simple Turing machines, Universality, Encodings, etc.", FOM email list. October 29, 2007.
Martin Davis, 2007, "Smallest universal machine", and Definition of universal Turing machine FOM email list. October 26â27, 2007.
Alasdair Urquhart, 2007 "Smallest universal machine", FOM email list. October 26, 2007.
Hector Zenil (Wolfram Research), 2007 "smallest universal machine", FOM email list. October 29, 2007.
Todd Rowland, 2007, "Confusion on FOM", Wolfram Science message board, October 30, 2007.
Olivier and Marc RAYNAUD, 2014, A programmable prototype to achieve Turing machines" LIMOS Laboratory of Blaise Pascal University (Clermont-Ferrand in France).
Other[edit]
Martin Davis (2000). Engines of Logic: Mathematicians and the origin of the Computer (1stÂ ed.). W. W. Norton & Company, New York. ISBNÂ 978-0-393-32229-3.
Robin Gandy, "The Confluence of Ideas in 1936", pp.Â 51â102 in Rolf Herken, see below.
Stephen Hawking (editor), 2005, God Created the Integers: The Mathematical Breakthroughs that Changed History, Running Press, Philadelphia, ISBNÂ 978-0-7624-1922-7. Includes Turing's 1936â1937 paper, with brief commentary and biography of Turing as written by Hawking.
Rolf Herken (1995). The Universal Turing MachineâA Half-Century Survey. Springer Verlag. ISBNÂ 978-3-211-82637-9.
Andrew Hodges, Alan Turing: The Enigma, Simon and Schuster, New York. Cf. Chapter "The Spirit of Truth" for a history leading to, and a discussion of, his proof.
Ivars Peterson (1988). The Mathematical Tourist: Snapshots of Modern Mathematics (1stÂ ed.). W. H. Freeman and Company, New York. ISBNÂ 978-0-7167-2064-5.
Roger Penrose, The Emperor's New Mind: Concerning Computers, Minds, and the Laws of Physics, Oxford University Press, Oxford and New York, 1989 (1990 corrections), ISBNÂ 0-19-851973-7.
Paul Strathern (1997). Turing and the ComputerâThe Big Idea. Anchor Books/Doubleday. ISBNÂ 978-0-385-49243-0.
Hao Wang, "A variant to Turing's theory of computing machines", Journal of the Association for Computing Machinery (JACM) 4, 63â92 (1957).
Charles Petzold, Petzold, Charles, The Annotated Turing, John Wiley & Sons, Inc., ISBNÂ 0-470-22905-5
Arora, Sanjeev; Barak, Boaz, "Complexity Theory: A Modern Approach", Cambridge University Press, 2009, ISBNÂ 978-0-521-42426-4, section 1.4, "Machines as strings and the universal Turing machine" and 1.7, "Proof of theorem 1.9"
Kantorovitz, Isaiah Pinchas (December 1, 2005). "A note on turing machine computability of rule driven systems". SIGACT News. 36 (4): 109â110. doi:10.1145/1107523.1107525. S2CIDÂ 31117713.
Kirner, Raimund; Zimmermann, Wolf; Richter, Dirk: "On Undecidability Results of Real Programming Languages", In 15. Kolloquium Programmiersprachen und Grundlagen der Programmierung (KPS'09), Maria Taferl, Austria, Oct. 2009.
External links[edit]



Wikimedia Commons has media related to Turing machines.

"Turing machine", Encyclopedia of Mathematics, EMS Press, 2001 [1994]
Turing Machine in the Stanford Encyclopedia of Philosophy
Turing Machine Causal Networks by Enrique Zeleny as part of the Wolfram Demonstrations Project.
Turing Machines at Curlie
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}showvteAutomata theory: formal languages and formal grammarsChomsky hierarchyGrammarsLanguagesAbstract machines
Type-0
â
Type-1
â
â
â
â
â
Type-2
â
â
Type-3
â
â

Unrestricted
(no common name)
Context-sensitive
Positive range concatenation
Indexed
â
Linear context-free rewriting systems
Tree-adjoining
Context-free
Deterministic context-free
Visibly pushdown
Regular
â
Non-recursive

Recursively enumerable
Decidable
Context-sensitive
Positive range concatenation*
Indexed*
â
Linear context-free rewriting language
Tree-adjoining
Context-free
Deterministic context-free
Visibly pushdown
Regular
Star-free
Finite

Turing machine
Decider
Linear-bounded
PTIME Turing Machine
Nested stack
Thread automaton
restricted Tree stack automaton
Embedded pushdown
Nondeterministic pushdown
Deterministic pushdown
Visibly pushdown
Finite
Counter-free (with aperiodic finite monoid)
Acyclic finite
Each category of languages, except those marked by a *, is a proper subset of the category directly above it. Any language in each category is generated by a grammar and by an automaton in the category in the same line.
showvteAlan Turing
Turing machine
Turing test
Turing completeness
Turing's proof
Turing (microarchitecture)
Turing degree

showAuthority control General
Integrated Authority File (Germany)
Online PWN
National libraries
Spain
France (data)
United States
Japan
Other
Faceted Application of Subject Terminology
SUDOC (France)
1





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Turing_machine&oldid=1065578692"
		Categories: Turing machine1936 in computing1937 in computingEducational abstract machinesTheoretical computer scienceAlan TuringModels of computationFormal methodsComputability theoryEnglish inventionsAutomata (computation)Formal languagesAbstract machinesHidden categories: Articles with short descriptionShort description is different from WikidataHarv and Sfn no-target errorsAll articles with unsourced statementsArticles with unsourced statements from December 2021All articles with specifically marked weasel-worded phrasesArticles with specifically marked weasel-worded phrases from December 2021Articles needing additional references from April 2015All articles needing additional referencesWikipedia references cleanup from November 2019All articles needing references cleanupArticles covered by WikiProject Wikify from November 2019All articles covered by WikiProject WikifyCommons category link is on WikidataArticles with Curlie linksArticles with GND identifiersArticles with PWN identifiersArticles with BNE identifiersArticles with BNF identifiersArticles with LCCN identifiersArticles with NDL identifiersArticles with FAST identifiersArticles with SUDOC identifiers
	
