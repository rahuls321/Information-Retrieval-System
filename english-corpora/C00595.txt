
Title:
EBCDIC
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Eight-bit character encoding system invented by IBM
This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources:Â "EBCDIC"Â âÂ newsÂ Â· newspapersÂ Â· booksÂ Â· scholarÂ Â· JSTOR  (January 2019) (Learn how and when to remove this template message)


.mw-parser-output .monospaced{font-family:monospace,monospace}.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}EBCDIC encoding familyClassification8-bit basic Latin encodings (nonâASCII)Preceded byBCD.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vte
Extended Binary Coded Decimal Interchange Code[1] (EBCDIC;[1] /ËÉbsÉªdÉªk/) is an eight-bit character encoding used mainly on IBM mainframe and IBM midrange computer operating systems. It descended from the code used with punched cards and the corresponding six-bit binary-coded decimal code used with most of IBM's computer peripherals of the late 1950s and early 1960s.[2] It is supported by various non-IBM platforms, such as Fujitsu-Siemens' BS2000/OSD, OS-IV, MSP, and MSP-EX, the SDS Sigma series, Unisys VS/9, Unisys MCP and ICL VME.

Contents

1 History
2 Compatibility with ASCII
3 Code page layout
4 Definitions of non-ASCII EBCDIC controls
5 Code pages with Latin-1 character sets
6 Criticism and humor
7 See also
8 References
9 External links



History[edit]
  Punched card with the Hollerith encoding of the 1964 EBCDIC character set. Contrast at the top is enhanced to show the printed characters.
EBCDIC was devised in 1963 and 1964 by IBM and was announced with the release of the IBM System/360 line of mainframe computers. It is an eight-bit character encoding, developed separately from the seven-bit ASCII encoding scheme. It was created to extend the existing Binary-Coded Decimal (BCD) Interchange Code, or BCDIC, which itself was devised as an efficient means of encoding the two zone and number punches on punched cards into six bits. The distinct encoding of 's' and 'S' (using position 2 instead of 1) was maintained from punched cards where it was desirable not to have hole punches too close to each other to ensure the integrity of the physical card.[citation needed]
While IBM was a chief proponent of the ASCII standardization committee,[3] the company did not have time to prepare ASCII peripherals (such as card punch machines) to ship with its System/360 computers, so the company settled on EBCDIC.[2] The System/360 became wildly successful, together with clones such as RCA Spectra 70, ICL System 4, and Fujitsu FACOM, thus so did EBCDIC.
All IBM mainframe and midrange peripherals and operating systems use EBCDIC as their inherent encoding[4] (with toleration for ASCII, for example, ISPF in z/OS can browse and edit both EBCDIC and ASCII encoded files). Software and many hardware peripherals can translate to and from encodings, and modern mainframes (such as IBM Z) include processor instructions, at the hardware level, to accelerate translation between character sets.
There is an EBCDIC-oriented Unicode Transformation Format called UTF-EBCDIC proposed by the Unicode consortium, designed to allow easy updating of EBCDIC software to handle Unicode, but not intended to be used in open interchange environments. Even on systems with extensive EBCDIC support, it has not been popular. For example, z/OS supports Unicode (preferring UTF-16 specifically), but z/OS only has limited support for UTF-EBCDIC.
Not all IBM products use EBCDIC; IBM AIX, Linux on IBM Z, and Linux on Power all use ASCII.

Compatibility with ASCII[edit]
This section does not cite any sources. Please help improve this section by adding citations to reliable sources. Unsourced material may be challenged and removed.  (January 2019) (Learn how and when to remove this template message)
There were numerous difficulties to writing software that would work in both ASCII and EBCDIC.

The gaps between letters made simple code that worked in ASCII fail on EBCDIC. For example for (c = 'A'; c <= 'Z'; ++c) putchar(c); would print the alphabet from A to Z if ASCII is used, but print 41 characters (including a number of unassigned ones) in EBCDIC. Fixing this required complicating the code with function calls which was greatly resisted by programmers.
Sorting EBCDIC put lowercase letters before uppercase letters and letters before numbers, exactly the opposite of ASCII.
Programming languages and file formats and network protocols designed for ASCII quickly made use of available punctuation marks (such as the curly braces { and }) that did not exist in EBCDIC, making translation to EBCDIC systems difficult. Conversely EBCDIC had a few characters such as Â¢ (US cent) that got used on IBM systems and could not be translated to ASCII.
The most common newline convention used with EBCDIC is to use a NEL (NEXT LINE) code between lines. Converters to other encodings often replace NEL with LF or CR/LF, even if there is a NEL in the target encoding. This causes the LF and NEL to translate to the same character and be unable to be distinguished.
If seven-bit ASCII was used, there was an "unused" high bit in 8-bit bytes, and many pieces of software stored other information there. Software would also pack the seven bits and discard the eighth, such as packing five seven-bit ASCII characters in a 36-bit word.[5] On the PDP-11 bytes with the high bit set were treated as negative numbers, behavior that was copied to C, causing unexpected problems if the high bit was set. These all made it difficult to switch from ASCII to the 8-bit EBCDIC (and also made it difficult to switch to 8-bit extended ASCII encodings).
Code page layout[edit]
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}Further information: EBCDIC code pages
There are hundreds of EBCDIC code pages based on the original EBCDIC character encoding; there are a variety of EBCDIC code pages intended for use in different parts of the world, including code pages for non-Latin scripts such as Chinese, Japanese (e.g., EBCDIC 930, JEF, and KEIS), Korean, and Greek (EBCDIC 875). There is also a huge number of variations with the letters swapped around for no discernible reason.
The table below shows the "invariant subset"[6] of EBCDIC, which are characters that should have the same assignments on all EBCDIC code pages that use the Latin alphabet (this includes most of the ISO/IEC 646 invariant repertoire, except the exclamation mark). It also shows (in gray) missing ASCII and EBCDIC punctuation, located where they are in Code Page 37 (one of the code page variants of EBCDIC). The blank cells are filled with region-specific characters in the variants, but the characters in gray are often swapped around or replaced as well.



EBCDIC




0

1

2

3

4

5

6

7

8

9

A

B

C

D

E

F


0x

.mw-parser-output .control-code-link-internal{border-bottom:1px dashed #86a1ff}.mw-parser-output .control-code-link-internal a{color:inherit}NUL

SOH

STX

ETX

SEL

Â HTÂ 

RNL

DEL

Â GEÂ 

SPS

RPT

Â VTÂ 

Â FFÂ 

Â CRÂ 

Â SOÂ 

Â SIÂ Â 


1x

DLE

DC1

DC2

DC3

RES/ENP

Â NLÂ Â 

Â BSÂ 

POC

CAN

Â EMÂ 

UBS

CU1

Â IFS

Â IGS

Â IRS

IUS/ITB


2x

Â DSÂ 

SOS

Â FSÂ 

WUS

BYP/INP

Â LFÂ 

ETB

ESC

Â SAÂ 

SFE

Â SM/SW

CSP

MFA

ENQ

ACK

BEL


3x





SYN

Â Â IRÂ 

Â PPÂ 

TRN

NBS

EOT

SBS

Â Â ITÂ 

RFF

CU3

DC4

NAK



SUB


4x

Â SPÂ 



















Â¢

.

<

(

+

|


5x

&



















!

$

*

)

;

Â¬


6x

-

/

















Â¦

,

%

_

>

?


7x



















`

:

#

@

'

=

"


8x



a

b

c

d

e

f

g

h

i











Â±


9x



j

k

l

m

n

o

p

q

r














Ax



~

s

t

u

v

w

x

y

z














Bx

^



















[

]










Cx

{

A

B

C

D

E

F

G

H

I














Dx

}

J

K

L

M

N

O

P

Q

R














Ex

\



S

T

U

V

W

X

Y

Z














Fx

0

1

2

3

4

5

6

7

8

9











Â EOÂ 

Definitions of non-ASCII EBCDIC controls[edit]
Following are the definitions of EBCDIC control characters which either do not map onto the ASCII control characters, or have additional uses. When mapped to Unicode, these are mostly mapped to C1 control character codepoints in a manner specified by IBM's Character Data Representation Architecture (CDRA).[7][8]
Although the default mapping of New Line (NL) corresponds to the ISO/IEC 6429 Next Line (NEL) character (the behaviour of which is also specified, but not required, in Unicode Annex 14),[9] most of these C1-mapped controls match neither those in the ISO/IEC 6429 C1 set, nor those in other registered C1 control sets such as ISO 6630.[10] Although this effectively makes the non-ASCII EBCDIC controls a unique C1 control set, they are not among the C1 control sets registered in the ISO-IR registry,[11] meaning that they do not have an assigned control set designation sequence (as specified by ISO/IEC 2022, and optionally permitted in ISO/IEC 10646 (Unicode)).[12]
Besides U+0085 (Next Line), the Unicode Standard does not prescribe an interpretation of C1 control characters, leaving their interpretation to higher level protocols (it suggests, but does not require, their ISO/IEC 6429 interpretations in the absence of use for other purposes),[13] so this mapping is permissible in, but not specified by, Unicode.




Mnemonic
EBCDIC
CDRA pairing[7][8]
Name
Description[14]


SEL
04
009C
Select
Device control character taking a single-byte parameter.


PF
Punch Off
Listed in this location by GOST 19768-93.[15]


RNL
06
0086
Required New Line
Line-break resetting Indent Tab mode


LC
Lower Case
Listed in this location by GOST 19768-93.[15]


GE
08
0097
Graphic Escape
Non-locking shift that changes the interpretation of the following character (see e.g. Code page 310). Compare ISO/IEC 6429's SS2 (008E).


SPS
09
008D
Superscript
Begin superscript or undo subscript. Compare ISO/IEC 6429's PLU (008C).


RPT
0A
008E
Repeat
Switch to an operation mode repeating a print buffer


SMM
Start of Manual Message
Listed in this location by GOST 19768-93.[15]


RES/ENP
14
009D
Restore, Enable Presentation
Resume output (after BYP/INP)


NL
15
0085 (000A)
New Line
Line break. Default mapping (0085) matches ISO/IEC 6429's NEL. Mappings sometimes swapped with Line Feed (EBCDIC 0x25) in accordance with UNIX line breaking convention.[7]


POC
17
0087
Program Operator Communication
Followed by two one-byte operators that identify the specific function, for example a light or function key. Contrast with ISO/IEC 6429's CSI (009B), OSC (009D) and APC (009F).


IL
Idle
Listed in this location by GOST 19768-93.[15]


UBS
1A
0092
Unit Backspace
A fractional backspace.


CC
Cursor Control
Listed in this location by GOST 19768-93.[15]


CU1
1B
008F
Customer Use One
Not used by IBM; for customer use.


IUS/ITB
1F
001F
Interchange Unit Separator, Intermediate Transmission Block
Either used as an information separator to terminate a block called a "unit" (as in ASCII; see also IR), or used as a transmission control code to delimit the end of an intermediate block.


DS
20
0080
Digit Select
Used by S/360 CPU edit (ED) instruction


SOS
21
0081
Start of Significance
Used by S/360 CPU edit (ED) instruction. (Note: different from ISO/IEC 6429's SOS.)


FS,[14] FDS[15]
22
0082
Field Separator
Used by S/360 CPU edit (ED) instruction. (Note: (Interchange) File Separator, as abbreviated FS in ASCII, is at 0x1C and abbreviated IFS.)[14]


WUS
23
0083
Word Underscore
Underscores the immediately preceding word. Contrast with ISO/IEC 6429's SGR.


BYP/INP
24
0084
Bypass, Inhibit Presentation
De-activates output, i.e. ignores all graphical characters and control characters besides transmission control codes and RES/ENP, until the next RES/ENP.


SA
28
0088
Set Attribute
Marks the beginning of a fixed-length device specific control sequence. Deprecated in favour of CSP.


SFE
29
0089
Start Field Extended
Marks the beginning of a variable-length device specific control sequence. Deprecated in favour of CSP.


SM/SW
2A
008A
Set Mode, Switch
Device specific control that sets a mode of operation, such as a buffer switch.


CU2
2B
008B
Customer Use Two
This appears in some specifications, such as GOST 19768-93;[15] newer IBM specifications for EBCDIC control codes list only CU1 and CU3 as customer-use, and use this position for CSP.[14]


CSP
Control Sequence Prefix
Marks the beginning of a variable-length device specific control sequence. Followed by a class byte specifying a category of control function, a count byte giving the sequence length (including count and type bytes, but not the class byte or initial CSP), a type byte identifying a control function within that category, and zero or more parameter bytes. Contrast with ISO/IEC 6429's DCS (0090) and CSI (009B).


MFA
2C
008C
Modify Field Attribute
Marks the beginning of a variable-length device specific control sequence. Deprecated in favour of CSP.



30
0090
(reserved)
Reserved for future use by IBM



31
0091
(reserved)
Reserved for future use by IBM


IR
33
0093
Index Return
Either move to start of next line (see also NL), or terminate an information unit (see also IUS/ITB).


PP
34
0094
Presentation Position
Followed by two one-byte parameters (firstly function, secondly number of either column or line) to set the current position. Contrast with ISO/IEC 6429's CUP and HVP.


PN
Punch On
Listed in this location by GOST 19768-93.[15]


TRN
35
0095
Transparent
Followed by one byte parameter that indicates the number of bytes of transparent data that follow.


RST
Reader Stop
Listed in this location by GOST 19768-93.[15]


NBS
36
0096
Numeric Backspace
Move backward the width of one digit.


UC
Upper Case
Listed in this location by GOST 19768-93.[15]


SBS
38
0098
Subscript
Begin subscript or undo superscript. Compare ISO/IEC 6429's PLD (008B).


IT
39
0099
Indent Tab
Indents the current and all following lines, until RNL or RFF is encountered.


RFF
3A
009A
Required Form Feed
Page-break resetting Indent Tab mode.


CU3
3B
009B
Customer Use Three
Not used by IBM; for customer use.



3E
009E
(reserved)
Reserved for future use by IBM


EO
FF
009F
Eight Ones
All ones character used as filler

Code pages with Latin-1 character sets[edit]
The following code pages have the full Latin-1 character set (ISO/IEC 8859-1). The first column gives the original code page number. The second column gives the number of the code page updated with the euro sign (â¬) replacing the universal currency sign (Â¤) (or in the case of EBCDIC 924, with the set changed to match ISO 8859-15)




CCSID

Euroupdate

Countries


037
1140
Australia, Brazil, Canada, New Zealand, Portugal, South Africa, USA


273
1141
Austria, Germany


277
1142
Denmark, Norway


278
1143
Finland, Sweden


280
1144
Italy


284
1145
Latin America, Spain


285
1146
Ireland, United Kingdom


297
1147
France


500
1148
International


871
1149
Iceland


1047
924
Open Systems (MVS C compiler)

Criticism and humor[edit]
Open-source software advocate and software developer Eric S. Raymond writes in his Jargon File that EBCDIC was loathed by hackers, by which he meant[16] members of a subculture of enthusiastic programmers. The Jargon File 4.4.7 gives the following definition:[17]

.mw-parser-output .templatequote{overflow:hidden;margin:1em 0;padding:0 40px}.mw-parser-output .templatequote .templatequotecite{line-height:1.5em;text-align:left;padding-left:1.6em;margin-top:0}EBCDIC: /ebÂ´s@Â·dik/, /ebÂ´see`dik/, /ebÂ´k@Â·dik/, n.
[abbreviation, Extended Binary Coded Decimal Interchange Code] An alleged character set used on IBM dinosaurs. It exists in at least six mutually incompatible versions, all featuring such delights as non-contiguous letter sequences and the absence of several ASCII punctuation characters fairly important for modern computer languages (exactly which characters are absent varies according to which version of EBCDIC you're looking at). IBM adapted EBCDIC from punched card code in the early 1960s and promulgated it as a customer-control tactic (see connector conspiracy), spurning the already established ASCII standard. Today, IBM claims to be an open-systems company, but IBM's own description of the EBCDIC variants and how to convert between them is still internally classified top-secret, burn-before-reading. Hackers blanch at the very name of EBCDIC and consider it a manifestation of purest evil.ââThe Jargon file 4.4.7
EBCDIC design was also the source of many jokes. One such joke, found in the Unix fortune file of 4.3BSD Tahoe (1990)[18] went:

Professor: "So the American government went to IBM to come up with an encryption standard, and they came up withâ"Student: "EBCDIC!"
References to the EBCDIC character set are made in the 1979 computer game series Zork. In the "Machine Room" in Zork II, EBCDIC is used to imply an incomprehensible language:

This is a large room full of assorted heavy machinery, whirring noisily. The room smells of burned resistors. Along one wall are three buttons which are, respectively, round, triangular, and square. Naturally, above these buttons are instructions written in EBCDIC...
In 2021, it became public that a Belgian bank was still using EBCDIC internally in 2019. This came to attention because a customer insisted that the correct spelling of his surname included an umlaut, which the bank omitted. The customer filed a complaint citing the guarantee in the General Data Protection Regulation of the right to timely "rectification of inaccurate personal data." The bank argued in part that it could not comply because its computer system was only compatible with EBCDIC, which does not support umlauted letters. The appeals court ruled in favor of the customer.[19][20]

See also[edit]
UTF-EBCDIC
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ Jump up to: a b .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Mackenzie, Charles E. (1980). Coded Character Sets, History and Development. The Systems Programming Series (1Â ed.). Addison-Wesley Publishing Company, Inc. ISBNÂ 0-201-14460-3. LCCNÂ 77-90165. ISBNÂ 978-0-201-14460-4. Retrieved 2016-05-22. [1]

^ Jump up to: a b Bemer, Bob. "EBCDIC and the P-Bit (The Biggest Computer Goof Ever) - Computer History Vignettes". Archived from the original on 2018-05-13. Retrieved 2013-07-02. ...but their printers and punches were not ready to handle ASCII, and IBM just HAD to announce.

^ "X3.4-1963". 1963. p.Â 4. Archived from the original on 2016-08-12. (NB. IBM had four staff members on the final 21-member ASA X3.2 sub-committee.)

^ IBMnt (2008). "IBM confirms the use of EBCDIC in their mainframes as a default practice". Archived from the original on 2019-03-21. Retrieved 2008-06-16.

^ PDP-10 Reference Handbook, Book 2: Assembling the Source Program (PDF). Digital Equipment Corporation. p.Â 221.

^ "Invariant character set". IBM Knowledge Center.

^ Jump up to: a b c Umamaheswaran, V.S. (1999-11-08). "3.3 Step 2: Byte Conversion". UTF-EBCDIC. Unicode Consortium. Unicode Technical Report #16. The 64 control characters...the ASCII DELETE character (U+007F)...are mapped respecting EBCDIC conventions, as defined in IBM Character Data Representation Architecture, CDRA, with one exception -- the pairing of EBCDIC Line Feed and New Line control characters are swapped from their CDRA default pairings to ISO/IEC 6429 Line Feed (U+000A) and Next Line (U+0085) control characters

^ Jump up to: a b Steele, Shawn (1996-04-24). cp037_IBMUSCanada to Unicode table. Microsoft/Unicode Consortium.

^ Heninger, Andy (2019-02-15). "NL: Next Line (A) (Non-tailorable)". Unicode Line Breaking Algorithm. Revision 43. Unicode Consortium. Unicode Standard Annex #14.

^ ISO/TC 46 (1986-02-01). Additional Control Functions for Bibliographic Use according to International Standard ISO 6630 (PDF). ITSCJ/IPSJ. ISO-IR-124.

^ ISO/IEC International Register of Coded Character Sets To Be Used With Escape Sequences (PDF), ITSCJ/IPSJ, ISO-IR

^ ISO/IEC JTC 1/SC 2 (2017). "12.4: Identification of control function set". Information technology â Universal Coded Character Set (UCS) (5thÂ ed.). ISO. pp.Â 19â20. ISO/IEC 10646. For other C0 or C1 sets, the final octet F shall be obtained from the International Register of Coded Character Sets....If such an escape sequence appears within a code unit sequence conforming to this International Standard, it shall be padded in accordance with Clause 11.

^ Unicode Consortium (2019). "23.1: Control Codes" (PDF). The Unicode Standard (12.0.0Â ed.). pp.Â 868â870. ISBNÂ 978-1-936213-22-1.

^ Jump up to: a b c d "Appendix G-1. EBCDIC control character definitions". Character Data Representation Architecture. IBM Corporation. Archived from the original on 2018-09-11.

^ Jump up to: a b c d e f g h i j GOST (1993). "ÐÐ½ÑÐ¾ÑÐ¼Ð°ÑÐ¸Ð¾Ð½Ð½Ð°Ñ ÑÐµÑÐ½Ð¾Ð»Ð¾Ð³Ð¸Ñ. ÐÐ°Ð±Ð¾ÑÑ 8-Ð±Ð¸ÑÐ½ÑÑ ÐºÐ¾Ð´Ð¸ÑÐ¾Ð²Ð°Ð½Ð½ÑÑ ÑÐ¸Ð¼Ð²Ð¾Ð»Ð¾Ð². ÐÐ²Ð¾Ð¸ÑÐ½ÑÐ¹ ÐºÐ¾Ð´ Ð¾Ð±ÑÐ°Ð±Ð¾ÑÐºÐ¸ Ð¸Ð½ÑÐ¾ÑÐ¼Ð°ÑÐ¸Ð¸" (in Russian). GOST 19768-93. {{cite journal}}: Cite journal requires |journal= (help)

^ Raymond, Eric S. (1997). "The New Hacker's Dictionary". p.Â 310.

^ "EBCDIC". Jargon File. Archived from the original on 2018-05-13. Retrieved 2018-05-13.

^ 4.3BSD-Reno/share/games/fortune/fortunes

^ "Court of Appeal of Brussels - 2019/AR/1006 - GDPRhub".

^ "EBCDIC is incompatible with GDPR â Terence Eden's Blog".


External links[edit]
Character Data Representation Architecture (CDRA) from IBM at the Wayback Machine (archived 2018-05-13). Contains IBM's official information on code pages and character sets.
Code page 37
Code page 1047
Host Code Page Reference from IBM, shows code charts for several single-byte EBCDIC pages.
"Code Pages". from "IBM i globalization".
ICU Converter Explorer Contains more information about EBCDIC derived from IBM's CDRA, including DBCS EBCDIC (Double Byte Character Set EBCDIC)
ICU Charset Mapping Tables Contains computer readable Unicode mapping tables for EBCDIC and many other character sets
EBCDIC character list, including decimal and hex values, symbolic name, and character/function
EBCDIC-code pages with Latin-1-charset (JavaScript)
All EBCDIC code pages and 3270 graphics escape codes at the Wayback Machine (archived August 27, 2016)
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}hidevteCharacter encodingsEarly telecommunications
Telegraph code
Needle
Morse
Non-Latin
Wabun/Kana
Chinese
Cyrillic
Korean
Baudot and Murray
Fieldata
ASCII
ISO/IEC 646
BCDIC
Teletex and Videotex/Teletext
T.51/ISO/IEC 6937
ITU T.61
ITU T.101
World System Teletext
background
sets
ISO/IEC 8859
Approved parts
-1 (Western Europe)
-2 (Central Europe)
-3 (Maltese/Esperanto)
-4 (North Europe)
-5 (Cyrillic)
-6 (Arabic)
-7 (Greek)
-8 (Hebrew)
-9 (Turkish)
-10 (Nordic)
-11 (Thai)
-13 (Baltic)
-14 (Celtic)
-15 (New Western Europe)
-16 (Romanian)
Abandoned parts
-12 (Devanagari)
Proposed but notÂ approved
KOI-8 Cyrillic
SÃ¡mi
Adaptations
Welsh
Barents Cyrillic
Estonian
Ukrainian Cyrillic
Bibliographic use
MARC-8
ANSEL
CCCII/EACC
ISO 5426
5426-2
5427
5428
6438
6862
National standards
ArmSCII
BraSCII
CNS 11643
DIN 66003
ELOT 927
GOST 10859
GB 2312
GB 12052
GB 18030
HKSCS
ISCII
JIS X 0201
JIS X 0208
JIS X 0212
JIS X 0213
KOI-7
KPS 9566
KS X 1001
KS X 1002
LST 1564
LST 1590-4
PASCII
Shift JIS
SI 960
TIS-620
TSCII
VISCII
VSCII
YUSCII
ISO/IEC 2022
ISO/IEC 8859
ISO/IEC 10367
Extended Unix Code / EUC
Mac OS Code pages("scripts")
Armenian
Arabic
Barents Cyrillic
Celtic
Central European
Croatian
Cyrillic
Devanagari
Farsi (Persian)
Font X (Kermit)
Gaelic
Georgian
Greek
Gujarati
Gurmukhi
Hebrew
Iceland
Inuit
Keyboard
Latin (Kermit)
Maltese/Esperanto
Ogham
Roman
Romanian
SÃ¡mi
Turkish
Turkic Cyrillic
Ukrainian
VT100
DOS code pages
437
668
708
720
737
770
773
775
776
777
778
850
851
852
853
855
856
857
858
859
860
861
862
863
864
865
866
867
868
869
897
899
903
904
932
936
942
949
950
951
1040
1042
1043
1046
1098
1115
1116
1117
1118
1127
3846
ABICOMP
CS Indic
CSX Indic
CSX+ Indic
CWI-2
Iran System
KamenickÃ½
Mazovia
MIK
IBM AIX code pages
895
896
912
915
921
922
1006
1008
1009
1010
1012
1013
1014
1015
1016
1017
1018
1019
1124
1133
Windows code pages
CER-GS
932
936 (GBK)
950
1169
Extended Latin-8
1250
1251
1252
1253
1254
1255
1256
1257
1258
1270
Cyrillic + Finnish
Cyrillic + French
Cyrillic + German
Polytonic Greek
EBCDIC code pages
37
Japanese language in EBCDIC
DKOI
DEC terminals (VTx)
Multinational (MCS)
National Replacement (NRCS)
French Canadian
Swiss
Spanish
United Kingdom
Dutch
Finnish
French
Norwegian and Danish
Swedish
Norwegian and Danish (alternative)
8-bit Greek
8-bit Turkish
SI 960
Hebrew
Special Graphics
Technical (TCS)
Platform specific
1057
Acorn
Adobe Standard
Adobe Latin 1
Amstrad CPC
Apple II
ATASCII
Atari ST
BICS
Casio calculators
CDC
Compucolor II
CP/M+
DEC RADIX 50
DEC MCS/NRCS
DG International
Fieldata
GEM
GSM 03.38
HP Roman
HP FOCAL
HP RPL
SQUOZE
LICS
LMBCS
MSX
NEC APC
NeXT
PETSCII
Sega SC-3000
Sharp calculators
Sharp MZ
Sinclair QL
Symbol
Teletext
TI calculators
TRS-80
Ventura International
WISCII
XCCS
ZX80
ZX81
ZX Spectrum
UnicodeÂ / ISO/IEC 10646
UTF-1
UTF-7
UTF-8
UTF-16
UTF-32
UTF-EBCDIC
GB 18030
BOCU-1
CESU-8
SCSU
TACE16
Comparison of Unicode encodings
TeX typesetting system
Cork
LY1
OML
OMS
OT1
Miscellaneous code pages
ABICOMP
ASMO 449
Big5
Digital encoding of APL symbols
ISO-IR-68
ARIB STD-B24
HZ
IEC-P27-1
INIS
7-bit
8-bit
ISO-IR-169
ISO 2033
KOI
KOI8-R
KOI8-RU
KOI8-U
MojikyÅ
SEASCII
Stanford/ITS
TRON
Unified Hangul Code
Control character
Morse prosigns
C0 and C1 control codes
ISO/IEC 6429
JIS X 0211
Unicode control, format and separator characters
Whitespace characters
Related topics
CCSID
Character encodings in HTML
Charset detection
Han unification
Hardware code page
MICR code
Mojibake
Variable-width encoding
 Character sets




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=EBCDIC&oldid=1066779590"
		Categories: IBM mainframe operating systemsEBCDIC code pagesHidden categories: CS1 errors: missing periodicalCS1 Russian-language sources (ru)Articles with short descriptionShort description is different from WikidataArticles needing additional references from January 2019All articles needing additional referencesUse dmy dates from May 2019All articles with unsourced statementsArticles with unsourced statements from July 2020Webarchive template wayback links
	
