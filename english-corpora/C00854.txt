
Title:
Hash collision
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		  John Smith and Sandra Dee share the same hash value of 02, causing a hash collision.
In computer science, a hash collision or clash is when two pieces of data in a hash table share the same hash value. The hash value in this case is derived from a hash function which takes a data input and returns a fixed length of bits.[1]
Although hash algorithms have been created with the intent of being collision resistant, they can still sometimes map different data to the same hash (by virtue of the pigeonhole principle). Malicious users can take advantage of this to mimic, access, or alter data.[2]
Due to the possible negative applications of hash collisions in data management and computer security (in particular, cryptographic hash functions), collision avoidance has become an important topic in computer security.

@media all and (max-width:720px){.mw-parser-output .tocleft{width:100%!important}}@media all and (min-width:720px){.mw-parser-output .tocleft{float:left;clear:left;width:auto;margin:0 1em 0.5em 0}.mw-parser-output .tocleft-clear-both{clear:both}.mw-parser-output .tocleft-clear-none{clear:none}}Contents

1 Background
2 Probability of Occurrence

2.1 CRC-32
2.2 MD5
2.3 SHA-1


3 Collision Resolution

3.1 Open Addressing
3.2 Separate Chaining
3.3 Cache-Conscious Collision Resolution


4 See also
5 References



Background[edit]
Hash collisions can be unavoidable depending on the number of objects in a set and whether or not the bit string they are mapped to is long enough in length. When there is a set of n objects, if n is greater than |R|, which in this case R is the range of the hash value, the probability that there will be a hash collision is 1, meaning it is guaranteed to occur .[3]
Another reason hash collisions are likely at some point in time stems from the idea of the birthday paradox in mathematics. This problem looks at the probability of a set of two randomly chosen people having the same birthday out of n number of people.[4] This idea has led to what has been called the birthday attack. The premise of this attack is that it is difficult to find a birthday that specifically matches your birthday or a specific birthday, but the probability of finding a set of any 2 people with matching birthdays increases the probability greatly. Bad actors can use this approach to make it simpler for them to find hash values that collide with any other hash value - rather than searching for a specific value.[5]
The impact of collisions depends on the application. When hash functions and fingerprints are used to identify similar data, such as homologous DNA sequences or similar audio files, the functions are designed so as to maximize the probability of collision between distinct but similar data, using techniques like locality-sensitive hashing.[6] Checksums, on the other hand, are designed to minimize the probability of collisions between similar inputs, without regard for collisions between very different inputs.[7] Instances where bad actors attempt to create or find hash collisions are known as collision attacks.[8]
In practice, security-related applications use cryptographic hash algorithms, which are designed to be long enough for random matches to be unlikely, fast enough that they can be used anywhere, and safe enough that it would be extremely hard to find collisions.[7]

Probability of Occurrence[edit]
Hash collisions can occur by chance and can be intentionally created for many hash algorithms. The probability of a hash collision thus depends on the size of the algorithm, the distribution of hash values, and whether or not it is both mathematically known and computationally feasible to create specific collisions.
Take into account the following  hash algorithms - CRC-32, MD5, and SHA-1. These are common hash algorithms  with varying levels of collision risk.[9]

CRC-32[edit]
CRC-32 poses the highest risk for hash collisions. This hash function is generally not recommended for use. If a hub were to contain 77163 hash values, the chance of a hash collision occurring is 50%, which is extremely high compared to other methods.[10]

MD5[edit]
MD5 is the most used hash function and when comparing the 3 hash function mentioned previously, it is the middle ground for hash collision risk. In order to get a 50% chance of a hash collision occurring, there would have to be over 5.06 billion records in the hub[10]

SHA-1[edit]
SHA-1 posed the lowest risk for hash collisions, however it is not often available through certain tools, which is why most people resort to the MD5 function. For a SHA-1 function to have a 50% chance of a hash collision occurring, there would have to be 1.42 x 10Â²â´ records in the hub. Note, the number of records mentioned in these examples would have to be in the same hub.[10]
Having a hub with a smaller number of records could decrease the probability of a hash collision in all of these hash functions, although there will always be a minor risk present no matter what.

Collision Resolution[edit]
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}Main article: Hash table Â§Â Collision resolution
Since hash collisions are inevitable, hash tables have mechanisms of dealing with them, known as collision resolutions. Two of the most  common strategies are open addressing and separate chaining. The cache-conscious collision resolution is another strategy that has been discussed in the past for string hash tables. 

  John Smith and Sandra Dee are both being directed to the same cell. Open Addressing will cause the hash table to redirect Sandra Dee to another cell.
Open Addressing[edit]
Cells in the hash table are assigned one of three states in this method - occupied, empty, or deleted. If a hash collision occurs, the table will be probed to move the record to an alternate cell that is stated as empty. There are different types of probing that take place when a hash collision happens and this method is implemented. Some types of probing are  linear probing, double hashing, and quadratic probing.[11]

Separate Chaining[edit]
This strategy allows more than one record to be 'chained' to multiple cells in a hash table. If two records are being directed to the same cell, both would go into that cell as a linked list. This efficiently prevents a hash collision from occurring since records with the same hash values can go into the same cell, but it has its disadvantages. Keeping track of so many lists is difficult and can cause whatever tool that is being used to become very slow.[11]

Cache-Conscious Collision Resolution[edit]
Although much less used than the previous two, Askitis et al has proposed the cache-conscious collision resolution method in 2005, although this method might have been improved since then.[12] It is a similar idea to the separate chaining methods, although it does not technically involve the chained lists. In this case, instead of chained lists, the hash values are represented in a contiguous list of items. This is better suited for string hash tables and the use for numeric values is still unknown.[11]

See also[edit]
List of hash functions
Universal one-way hash function
Cryptography
Universal Hashing
Perfect Hash Function
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Stapko, Timothy (2008), "Embedded Security", Practical Embedded Security, Elsevier, pp.Â 83â114, doi:10.1016/b978-075068215-2.50006-9, ISBNÂ 9780750682152, retrieved 2021-12-08

^ Schneier, Bruce. "Cryptanalysis of MD5 and SHA: Time for a New Standard". Computerworld. Archived from the original on 2016-03-16. Retrieved 2016-04-20. Much more than encryption algorithms, one-way hash functions are the workhorses of modern cryptography.

^ Cybersecurity and Applied Mathematics. 2016. doi:10.1016/c2015-0-01807-x. ISBNÂ 9780128044520.

^ author., Soltanian, Mohammad Reza Khalifeh (10 November 2015). Theoretical and Experimental Methods for Defending Against DDoS Attacks. ISBNÂ 978-0-12-805399-7. OCLCÂ 1162249290. {{cite book}}: |last= has generic name (help)

^ Conrad, Eric; Misenar, Seth; Feldman, Joshua (2016), "Domain 3: Security Engineering (Engineering and Management of Security)", CISSP Study Guide, Elsevier, pp.Â 103â217, doi:10.1016/b978-0-12-802437-9.00004-7, ISBNÂ 9780128024379, retrieved 2021-12-08

^ Rajaraman, A.; Ullman, J. (2010). "Mining of Massive Datasets, Ch. 3".

^ Jump up to: a b Al-Kuwari, Saif; Davenport, James H.; Bradford, Russell J. (2011). Cryptographic Hash Functions: Recent Design Trends and Security Notions. Inscrypt '10.

^ Schema, Mike (2012). Hacking Web Apps.

^ Altheide, Cory; Carvey, Harlan (2011), "Digital Forensics with Open Source Tools", Elsevier, pp.Â 1â8, doi:10.1016/b978-1-59749-586-8.00001-7, ISBNÂ 9781597495868, retrieved 2021-12-08 {{citation}}: Missing or empty |title= (help)

^ Jump up to: a b c Linstedt, Daniel; Olschimke, Michael (2016), "Scalable Data Warehouse Architecture", Data Vault 2.0, Elsevier, pp.Â 17â32, doi:10.1016/b978-0-12-802510-9.00002-7, ISBNÂ 9780128025109, retrieved 2021-12-07

^ Jump up to: a b c Nimbe, Peter; Ofori Frimpong, Samuel; Opoku, Michael (2014-08-20). "An Efficient Strategy for Collision Resolution in Hash Tables". International Journal of Computer Applications. 99 (10): 35â41. Bibcode:2014IJCA...99j..35N. doi:10.5120/17411-7990. ISSNÂ 0975-8887.

^ Askitis, Nikolas; Zobel, Justin (2005), "Cache-Conscious Collision Resolution in String Hash Tables", String Processing and Information Retrieval, Lecture Notes in Computer Science, Berlin, Heidelberg: Springer Berlin Heidelberg, vol.Â 3772, pp.Â 91â102, doi:10.1007/11575832_11, ISBNÂ 978-3-540-29740-6, retrieved 2021-12-08






<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Hash_collision&oldid=1064717280"
		Categories: HashingHidden categories: CS1 errors: generic nameCS1 errors: missing title
	
