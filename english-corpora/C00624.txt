
Title:
ALGOL
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Family of programming languages
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}This article is about the programming language family. For other uses, see Algol (disambiguation).


.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}ALGOLA 1965 manual for ALGOL-20ParadigmProcedural, imperative, structuredFamilyALGOLDesignedÂ byBauer, Bottenbruch, Rutishauser, Samelson, Backus, Katz, Perlis, Wegstein, Naur, Vauquois, van Wijngaarden, Woodger, Green, McCarthyFirstÂ appeared1958; 64Â years agoÂ (1958)Typing disciplineStatic, strongScopeLexicalInfluencedMost subsequent imperative languages (including so-called ALGOL-like languages)e.g. PL/I, Simula, BCPL, B, Pascal, C and Scheme
ALGOL (/ËÃ¦lÉ¡Él, -É¡ÉËl/; short for "Algorithmic Language")[1] is a family of imperative computer programming languages originally developed in 1958. ALGOL heavily influenced many other languages and was the standard method for algorithm description used by the Association for Computing Machinery (ACM) in textbooks and academic sources for more than thirty years.[2]
In the sense that the syntax of most modern languages is "Algol-like",[3] it was arguably the most influential of the four high-level programming languages among which it was roughly contemporary: FORTRAN, Lisp, and COBOL.[4] It was designed to avoid some of the perceived problems with FORTRAN and eventually gave rise to many other programming languages, including PL/I, Simula, BCPL, B, Pascal, and C.
ALGOL introduced code blocks and the begin...end pairs for delimiting them. It was also the first language implementing nested function definitions with lexical scope. Moreover, it was the first programming language which gave detailed attention to formal language definition and through the Algol 60 Report introduced BackusâNaur form, a principal formal grammar notation for language design.
There were three major specifications, named after the years they were first published:

ALGOL 58 â originally proposed to be called IAL, for International Algebraic Language.
ALGOL 60 â first implemented as X1 ALGOL 60 in 1961. Revised 1963.[5][6][7]
ALGOL 68 â introduced new elements including flexible arrays, slices, parallelism, operator identification. Revised 1973.[8]
ALGOL 68 is substantially different from ALGOL 60 and was not well received, so in general "Algol" means ALGOL 60 and its dialects.

Contents

1 History

1.1 ALGOL and programming language research
1.2 IAL implementations timeline


2 Properties
3 Examples and portability issues

3.1 Code sample comparisons

3.1.1 ALGOL 60
3.1.2 ALGOL 68


3.2 Timeline: Hello world

3.2.1 ALGOL 58 (IAL)
3.2.2 ALGOL 60 family
3.2.3 ALGOL 68


3.3 Timeline of ALGOL special characters


4 See also
5 References
6 Further reading
7 External links



History[edit]
ALGOL was developed jointly by a committee of European and American computer scientists in a meeting in 1958 at the Swiss Federal Institute of Technology in Zurich (cf. ALGOL 58). It specified three different syntaxes: a reference syntax, a publication syntax, and an implementation syntax. The different syntaxes permitted it to use different keyword names and conventions for decimal points (commas vs periods) for different languages.
ALGOL was used mostly by research computer scientists in the United States and in Europe. Its use in commercial applications was hindered by the absence of standard input/output facilities in its description and the lack of interest in the language by large computer vendors other than Burroughs Corporation. ALGOL 60 did however become the standard for the publication of algorithms and had a profound effect on future language development.

  Family tree of the Algol, Fortran and COBOL programming language dynasty
John Backus developed the Backus normal form method of describing programming languages specifically for ALGOL 58. It was revised and expanded by Peter Naur for ALGOL 60, and at Donald Knuth's suggestion renamed BackusâNaur form.[9]
Peter Naur: "As editor of the ALGOL Bulletin I was drawn into the international discussions of the language and was selected to be member of the European language design group in November 1959. In this capacity I was the editor of the ALGOL 60 report, produced as the result of the ALGOL 60 meeting in Paris in January 1960."[10]
The following people attended the meeting in Paris (from 1 to 16 January):

Friedrich L. Bauer, Peter Naur, Heinz Rutishauser, Klaus Samelson, Bernard Vauquois, Adriaan van Wijngaarden, and Michael Woodger (from Europe)
John W. Backus, Julien Green, Charles Katz, John McCarthy, Alan J. Perlis, and Joseph Henry Wegstein (from the USA).
Alan Perlis gave a vivid description of the meeting: "The meetings were exhausting, interminable, and exhilarating. One became aggravated when one's good ideas were discarded along with the bad ones of others. Nevertheless, diligence persisted during the entire period. The chemistry of the 13 was excellent."
ALGOL 60 inspired many languages that followed it. Tony Hoare remarked: "Here is a language so far ahead of its time that it was not only an improvement on its predecessors but also on nearly all its successors."[11] The Scheme programming language, a variant of Lisp that adopted the block structure and lexical scope of ALGOL, also adopted the wording "Revised Report on the Algorithmic Language Scheme" for its standards documents in homage to ALGOL.[12]

ALGOL and programming language research[edit]
As Peter Landin noted, ALGOL was the first language to combine seamlessly imperative effects with the (call-by-name) lambda calculus. Perhaps the most elegant formulation of the language is due to John C. Reynolds, and it best exhibits its syntactic and semantic purity. Reynolds's idealized ALGOL also made a convincing methodologic argument regarding the suitability of local effects in the context of call-by-name languages, in contrast with the global effects used by call-by-value languages such as ML. The conceptual integrity of the language made it one of the main objects of semantic research, along with Programming Computable Functions (PCF) and ML.[13]

IAL implementations timeline[edit]
To date there have been at least 70 augmentations, extensions, derivations and sublanguages of Algol 60.[14]




Name

Year

Author

Country

Description

Target CPU


ZMMD-implementation
1958
Friedrich L. Bauer, Heinz Rutishauser, Klaus Samelson, Hermann Bottenbruch
Germany
implementation of ALGOL 58
Z22  (later Zuse's Z23 was delivered with an Algol 60 compiler)[15]


X1 ALGOL 60
August 1960[16]
Edsger W. Dijkstra and Jaap A. Zonneveld
Netherlands
First implementation of ALGOL 60[17]
Electrologica X1


Elliott ALGOL
1960s
C. A. R. Hoare
UK
Subject of the 1980 Turing lecture[18]
Elliott 803, Elliott 503, Elliott 4100 series


JOVIAL
1960
Jules Schwartz
USA
A DOD HOL prior to Ada
Various (see article)


Burroughs Algol  (Several variants)
1961
Burroughs Corporation (with participation by Hoare, Dijkstra, and others)
USA
Basis of the Burroughs (and now Unisys MCP based) computers
Burroughs large systems and their midrange also.


Case ALGOL
1961
Case Institute of Technology[19]
USA
Simula was originally contracted as a simulation extension of the Case ALGOL
UNIVAC 1107


GOGOL
1961
William M. McKeeman
USA
For ODIN time-sharing system[20]
PDP-1


RegneCentralen ALGOL
1961
Peter Naur, JÃ¸rn Jensen
Denmark
Implementation of full Algol 60
DASK at Regnecentralen


Dartmouth ALGOL 30
1962
Thomas Eugene Kurtz et al.
USA

LGP-30


USS 90 Algol
1962
L. Petrone
Italy



Algol Translator
1962
G. van der Mey and W.L. van der Poel
Netherlands
Staatsbedrijf der Posterijen, Telegrafie en Telefonie
ZEBRA


Kidsgrove Algol
1963
F. G. Duncan
UK

English Electric Company KDF9


VALGOL
1963
Val Schorre
USA
A test of the META II compiler compiler


Whetstone
1964
Brian Randell and L. J. Russell
UK
Atomic Power Division of English Electric Company. Precursor to Ferranti Pegasus, National Physical Laboratories ACE and English Electric DEUCE implementations.
English Electric Company KDF9


NU ALGOL
1965

Norway

UNIVAC


ALGEK
1965

USSR
ÐÐÐÐ­Ð, based on ALGOL-60 and COBOL support, for economical tasks
Minsk-22


ALGOL W
1966
Niklaus Wirth
USA
Proposed successor to ALGOL 60
IBM System/360


MALGOL
1966
publ. A. Viil, M Kotli & M. Rakhendi,
Estonia, USSR

Minsk-22


ALGAMS
1967
GAMS group (ÐÐÐÐ¡, Ð³ÑÑÐ¿Ð¿Ð° Ð°Ð²ÑÐ¾Ð¼Ð°ÑÐ¸Ð·Ð°ÑÐ¸Ð¸ Ð¿ÑÐ¾Ð³ÑÐ°Ð¼Ð¼Ð¸ÑÐ¾Ð²Ð°Ð½Ð¸Ñ Ð´Ð»Ñ Ð¼Ð°ÑÐ¸Ð½ ÑÑÐµÐ´Ð½ÐµÐ³Ð¾ ÐºÐ»Ð°ÑÑÐ°), cooperation of Comecon Academies of Science
Comecon

Minsk-22, later ES EVM, BESM


ALGOL/ZAM
1967

Poland

Polish ZAM computer


Simula 67
1967
Ole-Johan Dahl and Kristen Nygaard
Norway
Algol 60 with classes
UNIVAC 1107


Triplex-ALGOL Karlsruhe
1967/1968

Karlsruhe, Germany
ALGOL 60 (1963) with triplex numbers for interval arithmetic
[21]


Chinese Algol
1972

China
Chinese characters, expressed via the Symbol system


DG/L
1972

USA

DG Eclipse family of Computers


S-algol
1979
Ron Morrison
UK
Addition of orthogonal datatypes with intended use as a teaching language
PDP-11 with a subsequent implementation on the Java VM

The Burroughs dialects included special Bootstrapping dialects such as ESPOL and NEWP.  The latter is still used for Unisys MCP system software.

Properties[edit]
ALGOL 60 as officially defined had no I/O facilities; implementations defined their own in ways that were rarely compatible with each other. In contrast, ALGOL 68 offered an extensive library of transput (input/output) facilities.
ALGOL 60 allowed for two evaluation strategies for parameter passing: the common call-by-value, and call-by-name. Call-by-name has certain effects in contrast to call-by-reference. For example, without specifying the parameters as value or reference, it is impossible to develop a procedure that will swap the values of two parameters if the actual parameters that are passed in are an integer variable and an array that is indexed by that same integer variable.[22] Think of passing a pointer to swap(i, A[i]) in to a function. Now that every time swap is referenced, it is reevaluated. Say iÂ := 1 and A[i]Â := 2, so every time swap is referenced it will return the other combination of the values ([1,2], [2,1], [1,2] and so on). A similar situation occurs with a random function passed as actual argument.
Call-by-name is known by many compiler designers for the interesting "thunks" that are used to implement it. Donald Knuth devised the "man or boy test" to separate compilers that correctly implemented "recursion and non-local references." This test contains an example of call-by-name.
ALGOL 68 was defined using a two-level grammar formalism invented by Adriaan van Wijngaarden and which bears his name. Van Wijngaarden grammars use a context-free grammar to generate an infinite set of productions that will recognize a particular ALGOL 68 program; notably, they are able to express the kind of requirements that in many other programming language standards are labelled "semantics" and have to be expressed in ambiguity-prone natural language prose, and then implemented in compilers as ad hoc code attached to the formal language parser.

Examples and portability issues[edit]
Code sample comparisons[edit]
ALGOL 60[edit]
(The way the bold text has to be written depends on the implementation, e.g. 'INTEGER'âquotation marks includedâfor integer. This is known as stropping.)

procedure Absmax(a) Size:(n, m) Result:(y) Subscripts:(i, k);
    value n, m; array a; integer n, m, i, k; real y;
comment The absolute greatest element of the matrix a, of size n by m
    is transferred to y, and the subscripts of this element to i and k;
begin
    integer p, q;
    yÂ := 0; iÂ := kÂ := 1;
    for pÂ := 1 step 1 until n do
        for qÂ := 1 step 1 until m do
            if abs(a[p, q]) > y then
                begin yÂ := abs(a[p, q]);
                    iÂ := p; kÂ := q
                end
end Absmax

Here is an example of how to produce a table using Elliott 803 ALGOL.[23]

 FLOATING POINT ALGOL TEST'
 BEGIN REAL A,B,C,D'
 Â 
 READ D'
 Â 
 FOR A:= 0.0 STEP D UNTIL 6.3 DO
 BEGIN
   PRINT PUNCH(3),Â£Â£L??'
   BÂ := SIN(A)'
   CÂ := COS(A)'
   PRINT PUNCH(3),SAMELINE,ALIGNED(1,6),A,B,C'
 END'
 END'

PUNCH(3) sends output to the teleprinter rather than the tape punch.
SAMELINE suppresses the carriage return + line feed normally printed between arguments.
ALIGNED(1,6) controls the format of the output with 1 digit before and 6 after the decimal point.

ALGOL 68[edit]
The following code samples are ALGOL 68 versions of the above ALGOL 60 code samples.
ALGOL 68 implementations used ALGOL 60's approaches to stropping. In ALGOL 68's case tokens with the bold typeface are reserved words, types (modes) or operators.

proc abs max = ([,]real a, ref real y, ref int i, k)real:
comment The absolute greatest element of the matrix a, of size âa by 2âa
is transferred to y, and the subscripts of this element to i and k; comment
begin
   real yÂ := 0; iÂ := âa; kÂ := 2âa;
   for p from âa to âa do
     for q from 2âa to 2âa do
       if abs a[p, q] > y then
           yÂ := abs a[p, q];
           iÂ := p; kÂ := q
       fi
     od
   od;
   y
end # abs max #

Note: lower (â) and upper (â) bounds of an array, and array slicing, are directly available to the programmer.

floating point algol68 test:
(
  real a,b,c,d;
  Â 
  # printf - sends output to the file stand out. #
  # printf($p$); â selects a new page #
  printf(($pg$,"Enter d:"));  
  read(d);
  Â 
  for step from 0 while a:=step*d; a <= 2*pi do
    printf($l$);  # $l$ - selects a new line. #
    bÂ := sin(a);
    cÂ := cos(a);
    printf(($z-d.6d$,a,b,c))  # formats output with 1 digit before and 6 after the decimal point. #
  od
)

Timeline: Hello world[edit]
The variations and lack of portability of the programs from one implementation to another is easily demonstrated by the classic hello world program.

ALGOL 58 (IAL)[edit]
Main article: ALGOL 58
ALGOL 58 had no I/O facilities.

ALGOL 60 family[edit]
Main article: ALGOL 60
Since ALGOL 60 had no I/O facilities, there is no portable hello world program in ALGOL.
The next three examples are in Burroughs Extended Algol. The first two direct output at the interactive terminal they are run on. The first uses a character array, similar to C. The language allows the array identifier to be used as a pointer to the array, and hence in a REPLACE statement.

 BEGIN
   FILE F(KIND=REMOTE);
   EBCDIC ARRAY E[0:11];
   REPLACE E BY "HELLO WORLD!";
   WRITE(F, *, E);
 END.

A simpler program using an inline format:

 BEGIN
   FILE F(KIND=REMOTE);
   WRITE(F, <"HELLO WORLD!">);
 END.

An even simpler program using the Display statement. Note that its output would end up at the system console ('SPO'):

BEGIN DISPLAY("HELLO WORLD!") END.

An alternative example, using Elliott Algol I/O is as follows.  Elliott Algol used different characters for "open-string-quote" and "close-string-quote", represented here by .mw-parser-output .legend{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .legend-color{display:inline-block;min-width:1.25em;height:1.25em;line-height:1.25;margin:1px 0;text-align:center;border:1px solid black;background-color:transparent;color:black}.mw-parser-output .legend-text{}Â âÂ  and Â âÂ .

 program HiFolks;
 begin
    print âHello worldâ
 end;

Below is a version from Elliott 803 Algol (A104). The standard Elliott 803 used five-hole paper tape and thus only had upper case.  The code lacked any quote characters so Â£ (UK Pound Sign) was used for open quote andÂ ? (Question Mark) for close quote.  Special sequences were placed in double quotes (e.g. Â£Â£L?? produced a new line on the teleprinter).

  HIFOLKS'
  BEGIN
     PRINT Â£HELLO WORLDÂ£L??'
  END'

The ICT 1900 series Algol I/O version allowed input from paper tape or punched card.  Paper tape 'full' mode allowed lower case.  Output was to a line printer. The open and close quote characters were represented using '(' and ')' and spaces byÂ %.[24]

  'BEGIN'
     WRITE TEXT('('HELLO%WORLD')');
  'END'

ALGOL 68[edit]
Main article: ALGOL 68
ALGOL 68 code was published with reserved words typically in lowercase, but bolded or underlined.

begin
  printf(($gl$,"Hello, world!"))
end

In the language of the "Algol 68 Report" the input/output facilities were collectively called the "Transput".

Timeline of ALGOL special characters[edit]



This article contains Unicode 6.0 "Miscellaneous Technical" characters. Without proper rendering support, you may see question marks, boxes, or other symbols instead of something like "ââ" (Decimal Exponent Symbol U+23E8 TTF).

The ALGOLs were conceived at a time when character sets were diverse and evolving rapidly; also, the ALGOLs were defined so that only uppercase letters were required.
1960: IFIP â The Algol 60 language and report included several mathematical symbols which are available on modern computers and operating systems, but, unfortunately, were unsupported on most computing systems at the time. For instance: Ã, Ã·, â¤, â¥, â , Â¬, â¨, â§, â, â¡, â£ and â¨.
1961 September: ASCII â The ASCII character set, then in an early stage of development, had the \ (Back slash) character added to it in order to support ALGOL's boolean operators /\ and \/.[25]
1962: ALCOR â This character set included the unusual "á­" runic cross[26] character for multiplication and the "â¨" Decimal Exponent Symbol[27] for floating point notation.[28][29][30]
1964: GOST â The 1964 Soviet standard GOST 10859 allowed the encoding of 4-bit, 5-bit, 6-bit and 7-bit characters in ALGOL.[31]
1968: The "Algol 68 Report" â used extant ALGOL characters, and further adopted â, â, â, â¡, â, â, â©, â§, â, â¥, and Â¢ characters which can be found on the IBM 2741 keyboard with typeball (or golf ball) print heads inserted (such as the APL golf ball). These became available in the mid-1960s while ALGOL 68 was being drafted.  The report was translated into Russian, German, French, and Bulgarian, and allowed programming in languages with larger character sets, e.g., Cyrillic alphabet of the Soviet BESM-4. All ALGOL's characters are also part of the Unicode standard and most of them are available in several popular fonts.
2009 October: Unicode â The â¨ (Decimal Exponent Symbol) for floating point notation was added to Unicode 5.2 for backward compatibility with historic Buran programme ALGOL software.[32]

See also[edit]
.mw-parser-output .div-col{margin-top:0.3em;column-width:30em}.mw-parser-output .div-col-small{font-size:90%}.mw-parser-output .div-col-rules{column-rule:1px solid #aaa}.mw-parser-output .div-col dl,.mw-parser-output .div-col ol,.mw-parser-output .div-col ul{margin-top:0}.mw-parser-output .div-col li,.mw-parser-output .div-col dd{page-break-inside:avoid;break-inside:avoid-column}
Address programming language
Atlas Autocode
Coral 66
Edinburgh IMP
Jensen's Device
ISWIM
JOVIAL
Tron (video game)
NELIAC
Simula
S-algol
Scheme (programming language)
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ The name of this language family is sometimes given in mixed case (Algol 60 Archived 25 June 2007 at the Wayback Machine), and sometimes in all uppercase (ALGOL68 Archived 13 September 2014 at the Wayback Machine). For simplicity this article uses ALGOL.

^ Collected Algorithms of the ACM Archived 17 October 2011 at Wikiwix Compressed archives of the algorithms. ACM.

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}O'Hearn, P. W.; Tennent, R. D. (September 1996). "Algol-like languages, Introduction". Archived from the original on 14 November 2011.

^ "The ALGOL Programming Language" Archived 6 October 2016 at the Wayback Machine, University of Michigan-Dearborn

^ Backus, J. W.; Bauer, F. L.; Green, J.; Katz, C.; McCarthy, J.; Perlis, A. J.; Rutishauser, H.; Samelson, K.; Vauquois, B.; Wegstein, J. H.; van Wijngaarden, A.; Woodger, M. (May 1960).  Naur, Peter (ed.). "Report on the Algorithmic Language ALGOL 60". Communications of the ACM. Copenhagen. 3 (5): 299â314. doi:10.1145/367236.367262. ISSNÂ 0001-0782.

^ "Revised Report on the Algorithmic Language Algol 60". 1963. Archived from the original on 25 June 2007. Retrieved 8 June 2007.

^ "An ALGOL 60 Translator for the X1" (PDF). 1961. Retrieved 7 January 2021.

^ "Revised Report on the Algorithmic Language ALGOL 68" (PDF). 1973. Archived (PDF) from the original on 13 September 2014. Retrieved 13 September 2014.

^ Knuth, Donald E. (1964). "Backus Normal Form vs Backus Naur Form". Communications of the ACM. 7 (12): 735â736. doi:10.1145/355588.365140.

^ ACM Award Citation: Peter Naur Archived 2 April 2012 at Archive-It, 2005

^ "Hints on Programming Language Design" Archived 15 September 2009 at the Wayback Machine, C.A.R. Hoare, December 1973. Page 27. (This statement is sometimes erroneously attributed to Edsger W. Dijkstra, also involved in implementing the first ALGOL 60 compiler.)

^ Dybvig, R. K.;  etÂ al.  Rees, Jonathan; Clinger, William; Abelson, Hal (eds.). "Revised(3) Report on the Algorithmic Language Scheme, (Dedicated to the Memory of ALGOL 60)". Archived from the original on 14 January 2010. Retrieved 20 October 2009.

^ O'Hearn, Peter; Tennent, Robert D. (1997). Algol-Like Languages. Cambridge, Massachusetts, United States: Birkhauser Boston. doi:10.1007/978-1-4612-4118-8. ISBNÂ 978-0-8176-3880-1.

^ "The Encyclopedia of Computer Languages". Archived from the original on 27 September 2011. Retrieved 20 January 2012.

^ Computer Museum History Archived 20 August 2010 at the Wayback Machine, Historical Zuse-Computer Z23, restored by the Konrad Zuse Schule in HÃ¼nfeld, for the Computer Museum History Center in Mountain View (California) USA

^ Daylight, E. G. (2011). "Dijkstra's Rallying Cry for Generalization: the Advent of the Recursive Procedure, late 1950s â early 1960s". The Computer Journal. 54 (11): 1756â1772. CiteSeerXÂ 10.1.1.366.3916. doi:10.1093/comjnl/bxr002. Archived from the original on 12 March 2013.

^ Kruseman Aretz, F.E.J. (30 June 2003). "The Dijkstra-Zonneveld ALGOL 60 compiler for the Electrologica X1". Software Engineering (PDF). History of Computer Science. Kruislaan 413, 1098 SJ Amsterdam: Centrum Wiskunde & Informatica. Archived (PDF) from the original on 4 March 2016.{{cite book}}:  CS1 maint: location (link)

^ Hoare, Antony (1980). "The Emperor's Old Clothes". Communications of the ACM. 24 (2): 75â83. doi:10.1145/358549.358561. Archived from the original on 13 September 2017.

^ Koffman, Eliot. "All I Really Need to KnowI Learned in CS1" (PDF). Archived from the original (PDF) on 12 October 2012. Retrieved 20 May 2012.

^ "GOGOL - PDP-1 Algol 60 (Computer Language)". Online Historical Encyclopaedia of Programming Languages. Archived from the original on 2 February 2018. Retrieved 1 February 2018.

^ Wippermann, Hans-Wilm (1968) [1967-06-15, 1966]. "Definition von Schrankenzahlen in Triplex-ALGOL". Computing (in German). Karlsruhe, Germany: Springer. 3 (2): 99â109. doi:10.1007/BF02277452. ISSNÂ 0010-485X. S2CIDÂ 36685400. (11 pages)

^ Aho, Alfred V.; Sethi, Ravi; Ullman, Jeffrey D. (1986). Compilers: Principles, Techniques, and Tools (1stÂ ed.). Addison-Wesley. ISBNÂ 0-201-10194-7., Section 7.5, and references therein

^ "803 ALGOL" Archived 29 May 2010 at the Wayback Machine, the manual for Elliott 803 ALGOL

^ "ICL 1900 series: Algol Language". ICL Technical Publication 3340. 1965.

^ How ASCII Got Its Backslash Archived 11 July 2014 at the Wayback Machine, Bob Bemer

^ iron/runic cross

^ Decimal Exponent Symbol

^ Baumann, R. (October 1961). "ALGOL Manual of the ALCOR Group, Part 1" [ALGOL Manual of the ALCOR Group]. Elektronische Rechenanlagen (in German): 206â212.

^ Baumann, R. (December 1961). "ALGOL Manual of the ALCOR Group, Part 2" [ALGOL Manual of the ALCOR Group]. Elektronische Rechenanlagen (in German). 6: 259â265.

^ Baumann, R. (April 1962). "ALGOL Manual of the ALCOR Group, Part 3" [ALGOL Manual of the ALCOR Group]. Elektronische Rechenanlagen (in German). 2.

^ "GOST 10859 standard". Archived from the original on 16 June 2007. Retrieved 5 June 2007.

^ Broukhis, Leonid (22 January 2008). "Revised proposal to encode the decimal exponent symbol" (PDF). www.unicode.org. ISO/IEC JTC 1/SC 2/WG 2. Archived (PDF) from the original on 31 July 2015. Retrieved 24 January 2016. This means that the need to transcode GOST-based software and documentation can still arise: legacy numerical algorithms (some of which may be of interest,e.g. for the automatic landing of the Buran shuttle ...) optimized for the non-IEEE floating point representation of BESM-6 cannot be simply recompiled and be expected to work reliably, and some human intervention may be necessary.


Further reading[edit]
F.L. Bauer, R. Baumann, M. Feliciano, K. Samelson, Introduction to Algol. Prentice Hall, 1964,  ISBNÂ 0-13-477828-6
Brian Randell and L. J. Russell, ALGOL 60 Implementation: The Translation and Use of ALGOL 60 Programs on a Computer. Academic Press, 1964. The design of the Whetstone Compiler. One of the early published descriptions of implementing a compiler. See the related papers: Whetstone Algol Revisited, and The Whetstone KDF9 Algol Translator by Brian Randell
Dijkstra, E. W (1961), Algol 60 translation: an algol 60 translator for the x1 and making a translator for algol 60 (PDF), report MR 35/61, Amsterdam: Mathematisch Centrum
Revised Report on the Algorithmic Language Algol 60 by Peter Naur, et al. ALGOL definition
"The European Side of the Last Phase of the Development of ALGOL 60" by Peter Naur
External links[edit]
History of ALGOL at the Computer History Museum
Web enabled ALGOL-F compiler for small experiments[permanent dead link]
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteALGOL programmingImplementationsTechnicalstandards
ALGOL 58
ALGOL 60
ALGOL 68
Dialects
ABC ALGOL
ALCOR
ALGO
ALGOL 68C
ALGOL 68-R
ALGOL 68RS (ELLA)
ALGOL 68S
ALGOL N
ALGOL W
ALGOL X
Atlas Autocode (Edinburgh IMP)
Burroughs ALGOL
Coral 66
Dartmouth ALGOL 30
DASK ALGOL
DG/L
Elliott ALGOL
Executive Systems Problem Oriented Language (ESPOL) â New Executive Programming Language (NEWP)
FLACC
IMP
JOVIAL
Kidsgrove Algol
Mary
NELIAC
RTL/2
S-algol, PS-algol, Napier88
Simula
Small Machine ALGOL Like Language (SMALL)
SMIL ALGOL
Formalisms
Jensen's device
Van Wijngaarden grammar
CommunityOrganizationsProfessionalassociations
ALCOR Group
Association for Computing Machinery (ACM)
BSI Group
Euro-Asian Council for Standardization, Metrology and Certification (EASC)
International Federation for Information Processing (IFIP) IFIP Working Group 2.1
Society of Applied Mathematics and Mechanics (GAMM)
Business
Burroughs Corporation
Elliott Brothers
Regnecentralen
Education
Case Institute of Technology
University of Edinburgh
University of St Andrews
Manchester University
Massachusetts Institute of Technology (MIT)
Government
Royal Radar Establishment (RRE)
PeopleALGOL 58
John Backus
Friedrich L. Bauer
Hermann Bottenbruch
Charles Katz
Alan Perlis
Heinz Rutishauser
Klaus Samelson
Joseph Henry Wegstein
ALGOL 60
Backus^
Roland Carl Backhouse
Bauer^
Richard Bird
Stephen R. Bourne
Edsger W. Dijkstra
Andrey Ershov
Robert W. Floyd
Jeremy Gibbons
Julien Green
David Gries
Eric Hehner
Tony Hoare
JÃ¸rn Jensen
Katz^
Peter Landin
Tom Maibaum
Conor McBride
John McCarthy
Carroll Morgan
Peter Naur
Maurice Nivat
John E. L. Peck
Perlis^
Brian Randell
Rutishauser^
Samelson^
Jacob T. Schwartz
Micha Sharir
David Turner
Bernard Vauquois
Eiiti Wada
Wegstein^
Adriaan van Wijngaarden
Mike Woodger
Simula
Ole-Johan Dahl
Kristen Nygaard
ALGOL 68
Bauer^
Susan G. Bond
Bourne^
Robert Dewar
Dijkstra^
Gerhard Goos
Michael Guy
Hoare^
Cornelis H. A. Koster
Peter Landin
Charles H. Lindsey
Barry J. Mailloux
McCarthy^
Lambert Meertens
Naur^
Peck^
Willem van der Poel
Randell^
Douglas T. Ross
Samelson^
Michel Sintzoff
van Wijngaarden^
Niklaus Wirth
Woodger^
Philip Woodward
Nobuo Yoneda

Hal Abelson
John Barnes
Tony Brooker
Ron Morrison
Peter O'Hearn
John C. ReynoldsOther
ALGOL Bulletin
 Category: ALGOL  Category: ALGOL 60
^ = full name and link in prior ALGOL version above
Authority control: National libraries  
Spain
United States





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=ALGOL&oldid=1065856305"
		Categories: ALGOL 60 dialectAlgol programming language familyComputer-related introductions in 1958Procedural programming languagesProgramming languages created in 1958Structured programming languagesSystems programming languagesHidden categories: Webarchive template wayback linksWebarchive template other archivesCS1 maint: locationCS1 German-language sources (de)Articles with short descriptionShort description is different from WikidataUse dmy dates from February 2020All articles with dead external linksArticles with dead external links from March 2021Articles with permanently dead external linksArticles with BNE identifiersArticles with LCCN identifiersArticles with example ALGOL 60 code
	
