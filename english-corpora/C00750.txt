
Title:
Partition problem
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		In number theory and  computer science, the partition problem, or number partitioning,[1] is the task of deciding whether a given multiset S of positive integers can be partitioned into two subsets S1 and S2 such that the sum of the numbers in S1 equals the sum of the numbers in S2. Although the partition problem is NP-complete, there is a pseudo-polynomial time dynamic programming solution, and there are heuristics that solve the problem in many instances, either optimally or approximately. For this reason, it has been called "the easiest hard problem".[2][3]
There is an optimization version  of the partition problem, which is to partition the multiset S into two subsets S1, S2 such that the difference between the sum of elements in S1 and the sum of elements in S2 is minimized. The optimization version is NP-hard, but can be solved efficiently in practice.[4]
The partition problem is a special case of two related problems:

In the subset sum problem, the goal is to find a subset of S whose sum is a certain target number T given as input (the partition problem is the special case in which T is half the sum of S).
In multiway number partitioning, there is an integer parameter k, and the goal is to decide whether S can be partitioned into k subsets of equal sum (the partition problem is the special case in which k = 2).
However, it is quite different than the 3-partition problem: in that problem, the number of subsets is not fixed in advance - it should be |S|/3, where each subset must have exactly 3 elements. 3-partition is much harder than partition - it has no pseudo-polynomial time algorithm unless P = NP.[5]
Contents

1 Examples
2 Computational hardness
3 Approximation algorithms
4 Exact algorithms
5 Hard instances and phase-transition
6 Probabilistic version
7 Variants and generalizations
8 Applications
9 Notes
10 References



Examples[edit]
Given S = {3,1,1,2,2,1}, a valid solution to the partition problem is the two sets S1 = {1,1,1,2} and S2 = {2,3}. Both sets sum to 5, and they partition S. Note that this solution is not unique. S1 = {3,1,1} and S2 = {2,2,1} is another solution.
Not every multiset of positive integers has a partition into two subsets with equal sum. An example of such a set is S = {2,5}.

Computational hardness[edit]
The partition problem is NP hard. This can be proved by reduction from the subset sum problem.[6]  An instance of SubsetSum consists of a set S of positive integers and a target sum T < S; the goal is to decide if there is a subset of S with sum exactly T.
Given such an instance, construct an instance of Partition in which the input set contains the original set plus two elements: z1 and z2, with z1 = sum(S) and z2 = 2 T.   The sum of this input set is   sum(S)+z1+z2 = 2 sum(S)+2 T, so the target sum for Partition is sum(S) + T.

Suppose there exists a solution S' to the SubsetSum instance. Then sum(S')=T, so sum(S' u {z1}) = sum(S) + T, so S' u {z1} is a solution to the Partition instance.
Conversely, suppose there exists a solution S'' to the Partition instance. Then, S'' must contain either z1 or z2, but not both, since their sum is more than sum(S) + T.   If S'' contains z1, then it must contain elements from S with a sum of exactly T, so S'' minus z1 is a solution to the SubsetSum instance. If S'' contains z2, then it must contain elements from S with a sum of exactly sum(S)-T,  so the other objects in S are a solution to the SubsetSum instance.
Approximation algorithms[edit]
As mentioned above, the partition problem is a special case of multiway-partitioning and of subset-sum. Therefore, it can be solved by algorithms developed for each of these problems. Algorithms developed for multiway number partitioning include:

Greedy number partitioning - loops over the numbers, and puts each number in the set whose current sum is smallest. If the numbers are not sorted, then the runtime is O(n) and the approximation ratio is at most 3/2 ("approximation ratio" means the larger sum in the algorithm output, divided by the larger sum in an optimal partition). Sorting the numbers increases the runtime to O(n log n ) and improves the approximation ratio to 7/6.  If the numbers are distributed uniformly in [0,1], then the approximation ratio is at most 
  
    
      
        1
        +
        O
        (
        log
        â¡
        
          log
          â¡
          
            n
          
        
        
          /
        
        n
        )
      
    
    {\displaystyle 1+O(\log {\log {n}}/n)}
  
 almost surely , and 
  
    
      
        1
        +
        O
        (
        1
        
          /
        
        n
        )
      
    
    {\displaystyle 1+O(1/n)}
  
 in expectation.
Largest Differencing Method (also called the Karmarkar-Karp algorithm ) sorts the numbers in descending order and repeatedly replaces numbers by their differences. The runtime complexity is O(n log n ). In the worst case, its approximation ratio is similar - at most 7/6. However, in the average case it performs much better than the greedy algorithm: when numbers are distributed uniformly in [0,1], its approximation ratio is at most 
  
    
      
        1
        +
        1
        
          /
        
        
          n
          
            Î
            (
            log
            â¡
            
              n
            
            )
          
        
      
    
    {\displaystyle 1+1/n^{\Theta (\log {n})}}
  
 in expectation. It also performs better in simulation experiments.
The Multifit algorithm uses binary search combined with an algorithm for bin packing . In the worst case, its approximation ratio is 8/7.
The subset sum problem has an FPTAS which can be used for the partition problem as well, by setting the target sum to sum(S)/2.
Exact algorithms[edit]
There are exact algorithms, that always find the optimal partition. Since the problem is NP-hard, such algorithms might take exponential time in general, but may be practically usable in certain cases. Algorithms developed for multiway number partitioning include:

The pseudopolynomial time number partitioning takes 
  
    
      
        O
        (
        n
        m
        )
      
    
    {\displaystyle O(nm)}
  
 memory, where m is the largest number in the input.
The Complete Greedy Algorithm (CGA) considers all partitions by constructing a binary tree. Each level in the tree corresponds to an input number, where the root corresponds to the largest number, the level below to the next-largest number, etc. Each branch corresponds to a different set in which the current number can be put. Traversing the tree in depth-first order requires only 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
  
 space, but might take 
  
    
      
        O
        (
        
          2
          
            n
          
        
        )
      
    
    {\displaystyle O(2^{n})}
  
 time. The runtime can be improved by using a greedy heuristic: in each level, develop first the branch in which the current number is put in the set with the smallest sum. This algorithm finds first the solution found by greedy number partitioning, but then proceeds to look for better solutions. Some variations of this idea are fully polynomial-time approximation schemes for the subset-sum problem, and hence for the partition problem as well.[7][8]
The Complete Karmarkar-Karp algorithm (CKK) considers all partitions by constructing a binary tree. Each level corresponds to a pair of numbers. The left branch corresponds to putting them in different subsets (i.e., replacing them by their difference), and the right branch corresponds to putting them in the same subset (i.e., replacing them by their sum). This algorithm finds first the solution found by the largest differencing method, but then proceeds to find better solutions. It runs substantially faster than CGA on random instances. Its advantage is much larger when an equal partition exists, and can be of several orders of magnitude. In practice, problems of arbitrary size can be solved by CKK if the numbers have at most 12 significant digits.[9] CKK can also run as an anytime algorithm: it finds the KK solution first, and then finds progressively better solutions as time allows (possibly requiring exponential time to reach optimality, for the worst instances).[1] It requires 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
  
 space, but in the worst case might take 
  
    
      
        O
        (
        
          2
          
            n
          
        
        )
      
    
    {\displaystyle O(2^{n})}
  
 time.
Algorithms developed for subset sum include:

Horowitz and Sanhi - runs in time 
  
    
      
        O
        (
        
          2
          
            n
            
              /
            
            2
          
        
        â
        (
        n
        
          /
        
        2
        )
        )
      
    
    {\displaystyle O(2^{n/2}\cdot (n/2))}
  
, but requires 
  
    
      
        O
        (
        
          2
          
            n
            
              /
            
            2
          
        
        )
      
    
    {\displaystyle O(2^{n/2})}
  
 space.
Schroeppel and Shamir - runs in time  
  
    
      
        O
        (
        
          2
          
            n
            
              /
            
            2
          
        
        â
        (
        n
        
          /
        
        4
        )
        )
      
    
    {\displaystyle O(2^{n/2}\cdot (n/4))}
  
, and requires much less space - 
  
    
      
        O
        (
        
          2
          
            n
            
              /
            
            4
          
        
        )
      
    
    {\displaystyle O(2^{n/4})}
  
.
Howgrave-Graham and Joux - runs in time 
  
    
      
        O
        (
        
          2
          
            n
            
              /
            
            3
          
        
        )
      
    
    {\displaystyle O(2^{n/3})}
  
, but it is a randomized algorithm that only solves the decision problem (not the optimization problem).
Hard instances and phase-transition[edit]
Sets with only one, or no partitions tend to be hardest (or most expensive) to solve compared to their input sizes. When the values are small compared to the size of the set, perfect partitions are more likely. The problem is known to undergo a "phase transition"; being likely for some sets and unlikely for others. If m is the number of bits needed to express any number in the set and n is the size of the set then 
  
    
      
        m
        
          /
        
        n
        <
        1
      
    
    {\displaystyle m/n<1}
  
 tends to have many solutions and 
  
    
      
        m
        
          /
        
        n
        >
        1
      
    
    {\displaystyle m/n>1}
  
 tends to have few or no solutions. As n and m get larger, the probability of a perfect partition goes to 1 or 0 respectively. This was originally argued based on empirical evidence by Gent and Walsh,[10] then using methods from statistical physics by Mertens,[11][12] and later proved by Borgs, Chayes, and Pittel.[13]

Probabilistic version[edit]
A related problem, somewhat similar to the Birthday paradox, is that of determining the size of the input set so that we have a probability of one half that there is a solution, under the assumption that each element in the set is randomly selected with uniform distribution between 1 and some given value. The solution to this problem can be counter-intuitive, like the birthday paradox.

Variants and generalizations[edit]
Equal-cardinality partition is a variant in which both parts should have an equal number of items, in addition to having an equal sum. This variant is NP-hard too, as proved in [5] problem [SP12]. See Balanced number partitioning.
Distinct partition is a variant in which all input integers are distinct. This variant is NP-hard too.[citation needed]
Product partition is the problem of partitioning a set of integers into two sets with the same product (rather than the same sum). This problem is strongly NP-hard.[14]
Kovalyov and Pesch[15] discuss a generic approach to proving NP-hardness of partition-type problems.

Applications[edit]
One application of the partition problem is for manipulation of elections. Suppose there are three candidates (A, B and C). A single candidate should be elected using a voting rule based on scoring, e.g. the veto rule (each voter vetoes a single candidate and the candidate with the fewest vetoes wins). If a coalition wants to ensure that C is elected, they should partition their votes among A and B so as to maximize the smallest number of vetoes each of them gets. If the votes are weighted, then the problem can be reduced to the partition problem, and thus it can be solved efficiently using CKK. The same is true for any other voting rule that is based on scoring.[16]

Notes[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ Jump up to: a b Korf 1998.

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Hayes, Brian (MarchâApril 2002), "The Easiest Hard Problem" (PDF), American Scientist, Sigma Xi, The Scientific Research Society, vol.Â 90, no.Â 2, pp.Â 113â117, JSTORÂ 27857621

^ Mertens 2006, p.Â 125.

^ Korf, Richard E. (2009). Multi-Way Number Partitioning (PDF). IJCAI.

^ Jump up to: a b Garey, Michael; Johnson, David (1979). Computers and Intractability; A Guide to the Theory of NP-Completeness. pp.Â 96â105. ISBNÂ 978-0-7167-1045-5.

^ Goodrich, Michael. "More NP complete and NP hard problems" (PDF).{{cite web}}:  CS1 maint: url-status (link)

^ Hans Kellerer; Ulrich Pferschy; David Pisinger (2004). Knapsack problems. Springer. p.Â 97. ISBNÂ 9783540402862.

^ Martello, Silvano; Toth, Paolo (1990). "4 Subset-sum problem". Knapsack problems: Algorithms and computer interpretations. Wiley-Interscience. pp.Â 105â136. ISBNÂ 978-0-471-92420-3. MRÂ 1086874.

^ Korf, Richard E. (1995-08-20). "From approximate to optimal solutions: a case study of number partitioning". Proceedings of the 14th International Joint Conference on Artificial Intelligence. IJCAI'95. Vol.Â 1. Montreal, Quebec, Canada: Morgan Kaufmann Publishers. pp.Â 266â272. ISBNÂ 978-1-55860-363-9.

^ Gent & Walsh 1996.

^ Mertens 1998.

^ Mertens 2001, p.Â 130.

^ Borgs, Chayes & Pittel 2001.

^ Ng, C. T.; Barketau, M. S.; Cheng, T. C. E.; Kovalyov, Mikhail Y. (2010-12-01). ""Product Partition" and related problems of scheduling and systems reliability: Computational complexity and approximation". European Journal of Operational Research. 207 (2): 601â604. doi:10.1016/j.ejor.2010.05.034. ISSNÂ 0377-2217.

^ Kovalyov, Mikhail Y.; Pesch, Erwin (2010-10-28). "A generic approach to proving NP-hardness of partition type problems". Discrete Applied Mathematics. 158 (17): 1908â1912. doi:10.1016/j.dam.2010.08.001. ISSNÂ 0166-218X.

^ Walsh, Toby (2009-07-11). "Where Are the Really Hard Manipulation Problems? The Phase Transition in Manipulating the Veto Rule" (PDF).  Written at Pasadena, California, USA. Proceedings of the Twenty-First International Joint Conference on Artificial Intelligence. San Francisco, California, USA: Morgan Kaufmann Publishers Inc. pp.Â 324â329. Archived (PDF) from the original on 2020-07-10. Retrieved 2021-10-05.


References[edit]
Borgs, Christian; Chayes, Jennifer; Pittel, Boris (2001), "Phase transition and finite-size scaling for the integer partitioning problem", Random Structures and Algorithms, 19 (3â4): 247â288, CiteSeerXÂ 10.1.1.89.9577, doi:10.1002/rsa.10004
Gent, Ian; Walsh, Toby (August 1996). "Phase Transitions and Annealed Theories: Number Partitioning as a Case Study".  In Wolfgang Wahlster (ed.). Proceedings of 12th European Conference on Artificial Intelligence. ECAI-96. John Wiley and Sons. pp.Â 170â174. CiteSeerXÂ 10.1.1.2.4475.
Gent, Ian; Walsh, Toby (1998), "Analysis of Heuristics for Number Partitioning", Computational Intelligence, 14 (3): 430â451, CiteSeerXÂ 10.1.1.149.4980, doi:10.1111/0824-7935.00069, S2CIDÂ 15344203
Korf, Richard E. (1998), "A complete anytime algorithm for number partitioning", Artificial Intelligence, 106 (2): 181â203, CiteSeerXÂ 10.1.1.90.993, doi:10.1016/S0004-3702(98)00086-1, ISSNÂ 0004-3702
Mertens, Stephan (November 1998), "Phase Transition in the Number Partitioning Problem", Physical Review Letters, 81 (20): 4281â4284, arXiv:cond-mat/9807077, Bibcode:1998PhRvL..81.4281M, doi:10.1103/PhysRevLett.81.4281, S2CIDÂ 119541289
Mertens, Stephan (2001), "A physicist's approach to number partitioning", Theoretical Computer Science, 265 (1â2): 79â108, arXiv:cond-mat/0009230, doi:10.1016/S0304-3975(01)00153-0, S2CIDÂ 16534837
Mertens, Stephan (2006). "The Easiest Hard Problem: Number Partitioning".  In Allon Percus; Gabriel Istrate; Cristopher Moore (eds.). Computational complexity and statistical physics. USA: Oxford University Press. pp.Â 125â140. arXiv:cond-mat/0310317. Bibcode:2003cond.mat.10317M. ISBNÂ 9780195177374.
Mertens, Stephan (1999), "A complete anytime algorithm for balanced number partitioning", arXiv:cs/9903011




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Partition_problem&oldid=1068821891"
		Categories: Number partitioningWeakly NP-complete problemsHidden categories: CS1 maint: url-statusCS1 location testAll articles with unsourced statementsArticles with unsourced statements from May 2021
	
