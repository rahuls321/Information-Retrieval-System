
Title:
ABAP
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Programming language
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}For other uses, see ABAP (disambiguation).
This article has multiple issues. Please help improve it or discuss these issues on the talk page. (Learn how and when to remove these template messages)

      This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources:Â "ABAP"Â âÂ newsÂ Â· newspapersÂ Â· booksÂ Â· scholarÂ Â· JSTOR  (July 2011) (Learn how and when to remove this template message)
This article is written like a manual or guidebook. Please help rewrite this article from a descriptive, neutral point of view, and remove advice or instruction.  (November 2016) (Learn how and when to remove this template message)
    
 (Learn how and when to remove this template message)
.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}ABAP/4ParadigmObject-oriented, structured, imperativeDesignedÂ bySAP SEFirstÂ appeared1983; 39Â years agoÂ (1983)Stable release7.55[1]
   / SeptemberÂ 2, 2020; 16 months agoÂ (2020-09-02)[2]
Typing disciplineStatic, strong, safe, nominativeOSCross-platformWebsitescn.sap.com/community/abap%20scn.sap.com/community/abapMajor implementationsSAP R/2, SAP R/3, SAP S/4HANAInfluenced byObjective-C,[citation needed] COBOL,[citation needed] SQL[citation needed]
ABAP (Advanced Business Application Programming, originally Allgemeiner Berichts-Aufbereitungs-Prozessor, German for "general report preparation processor"[3]) is a high-level programming language created by the German software company SAP SE. It is currently positioned, alongside Java, as the language for programming the SAP NetWeaver Application Server, which is part of the SAP NetWeaver platform for building business applications.

Contents

1 Introduction
2 ABAP runtime environment

2.1 SAP systems and landscapes
2.2 Software layers


3 Transactions
4 Types of ABAP programs
5 Development environment

5.1 ABAP Workbench
5.2 ABAP Development Tools


6 ABAP Dictionary
7 ABAP syntax

7.1 Hello world
7.2 Chained statements
7.3 Comments
7.4 Spaces
7.5 ABAP statements


8 Data types and variables

8.1 Explicitly typed declaration
8.2 Inline declaration


9 ABAP Objects
10 CDS Views

10.1 Features


11 Internal tables in ABAP
12 History
13 See also
14 References
15 External links



Introduction[edit]
ABAP is one of the many application-specific fourth-generation languages (4GLs) first developed in the 1980s. It was originally the report language for SAP R/2, a platform that enabled large corporations to build mainframe business applications for materials management and financial and management accounting. ABAP establish integration between independent software.
ABAP used to be an abbreviation of Allgemeiner Berichts-Aufbereitungs-Prozessor, German for "generic report preparation processor", but was later[when?] renamed to the English Advanced Business Application Programming. ABAP was one of the first languages to include the concept of Logical Databases (LDBs), which provides a high level of abstraction from the basic database level(s),which supports every platform, language and units.
The ABAP language was originally used by developers to develop the SAP R/3 platform. It was also intended to be used by SAP customers to enhance SAP applications â customers can develop custom reports and interfaces with ABAP programming. The language was geared towards more technical customers with programming experience.
ABAP remains as the language for creating programs for the clientâserver R/3 system, which SAP first released in 1992. As computer hardware evolved through the 1990s, more and more of SAP's applications and systems were written in ABAP. By 2001, all but the most basic functions were written in ABAP. In 1999, SAP released an object-oriented extension to ABAP called ABAP Objects, along with R/3 release 4.6.
SAP's current development platform NetWeaver supports both ABAP and Java.
ABAP has an abstraction between the business applications, the operating system and database. This ensures that applications do not depend directly upon a specific server or database platform and can easily be ported from one platform to another.
SAP Netweaver currently runs on UNIX (AIX, HP-UX, Solaris, Linux), Microsoft Windows, i5/OS on IBM System i (formerly iSeries, AS/400), and z/OS on IBM System z (formerly zSeries, S/390). Supported databases are HANA, SAP ASE (formerly Sybase), IBM DB2, Informix, MaxDB, Oracle, and Microsoft SQL Server (support for Informix was discontinued in SAP Basis release 7.00).[4]

ABAP runtime environment[edit]
All ABAP programs reside inside the SAP database. They are not stored in separate external files like Java or C++ programs. In the database all ABAP code exists in two forms: source code, which can be viewed and edited with the ABAP Workbench tools; and generated code, a binary representation somewhat comparable with Java bytecode. ABAP programs execute under the control of the runtime system, which is part of the SAP kernel. The runtime system is responsible for processing ABAP statements, controlling the flow logic of screens and responding to events (such as a user clicking on a screen button); in this respect it can be seen as a Virtual Machine comparable with the Java VM. A key component of the ABAP runtime system is the Database Interface, which turns database-independent ABAP statements ("Open SQL") into statements understood by the underlying DBMS ("Native SQL"). The database interface handles all the communication with the relational database on behalf of ABAP programs; It also contains extra features such as buffering of tables and frequently accessed data in the local memory of the application server.

SAP systems and landscapes[edit]
All SAP data exists and all SAP software runs in the context of a SAP system. A system consists of a central relational database and one or more application ("instances") accessing the data and programs in this database. A SAP system contains at least one instance but may contain more, mostly for reasons of sizing and performance. In a system with multiple instances, load balancing mechanisms ensure that the load is spread evenly over the available application servers.
Installations of the Web Application Server (landscapes) typically consist of three systems: one for development; one for testing and quality assurance; and one for production. The landscape may contain more systems (e.g., separate systems for unit testing and pre-production testing) or it may contain fewer (e.g., only development and production, without separate QA); nevertheless three is the most common configuration. ABAP programs are created and undergo first testing in the development system. Afterwards they are distributed to the other systems in the landscape. These actions take place under control of the Change and Transport System (CTS), which is responsible for concurrency control (e.g., preventing two developers from changing the same code at the same time), version management, and deployment of programs on the QA and production systems.
The Web Application Server consists of three layers: the database layer; the application layer; and the presentation layer. These layers may run on the same or on different physical machines. The database layer contains the relational database and the database software. The application layer knowledge contains the instance or instances of the system. All application processes, including the business transactions and the ABAP development, run on the application layer. The presentation layer handles the interaction with users of the system. Online access to ABAP application servers can go via a proprietary graphical interface, which is called "SAP GUI", or via a Web browser.

Software layers[edit]
ABAP software is deployed in software components.
Examples for these are:

SAP_BASIS is the required technical base layer which is required in every ABAP system.
SAP_ABA contains functionalities which is required for all kinds of business applications, like business partner and address management.
SAP_UI provides the functionality to create SAP UI5 applications.
BBPCRM is an example for a business application, in this case the CRM application
SAP ABAP is an ERP programming language.
Transactions[edit]
A transaction in SAP terminology is the execution of a program. The normal way of executing ABAP code in the SAP system is by entering a transaction code (for instance, VA01 is the transaction code for "Create Sales Order"). Transactions can be called via system-defined or user-specific, role-based menus. They can also be started by entering the transaction code directly into a command field, which is present in every SAP screen. Transactions can also be invoked programmatically by means of the ABAP statements CALL TRANSACTION and LEAVE TO TRANSACTION.
The general notion of a transaction is called a Logical Unit of Work (LUW) in SAP terminology;[citation needed] the short form of transaction code is T-code.

Types of ABAP programs[edit]
As in other programming languages, an ABAP program is either an executable unit or a library, which provides reusable code to other programs and is not independently executable.
ABAP distinguishes two types of executable programs:

Reports
Module pools
Reports follow a relatively simple programming model whereby a user optionally enters a set of parameters (e.g., a selection over a subSET of data) and the program then uses the input parameters to produce a report in the form of an interactive list. The term "report" can be somewhat misleading in that reports can also be designed to modify data; the reason why these programs are called reports is the "list-oriented" nature of the output they produce.
Module pools define more complex patterns of user interaction using a collection of screens. The term âscreenâ refers to the actual, physical image that the user sees. Each screen also has a "flow logic", which refers to the ABAP code implicitly invoked by the screens, which is divided into a "PBO" (Process Before Output) and "PAI" (Process After Input) section. In SAP documentation the term âdynproâ (dynamic program) refers to the combination of the screen and its flow logic.
The non-executable program types are:

INCLUDE modules
Subroutine pools
Function groups
Object classes
Interfaces
Type pools
An INCLUDE module gets included at generation time into the calling unit; it is often used to subdivide large programs.
Subroutine pools contain ABAP subroutines (blocks of code enclosed by FORM/ENDFORM statements and invoked with PERFORM).
Function groups are libraries of self-contained function modules (enclosed by FUNCTION/ENDFUNCTION and invoked with CALL FUNCTION).
Object classes and interfaces  are similar to Java classes and interfaces; the first define a set of methods and attributes, the second contain "empty" method definitions, for which any class implementing the interface must provide explicit code.
Type pools define collections of data types and constants.
ABAP programs are composed of individual sentences (statements). The first word in a statement is called an ABAP keyword. Each statement ends with a period. Words must always be separated by at least one space. Statements can be indented as you wish. With keywords, additions and operands, the ABAP runtime system does not differentiate between upper and lowercase.
Statements can extend beyond one line. You can have several statements in a single line (though this is not recommended). Lines that begin with asterisk * in the first column are recognized as comment lines by the ABAP runtime system and are ignored. Double quotations marks (") indicate that the remainder of a line is a comment.

Development environment[edit]
There are two possible ways to develop in ABAP. The availability depends on the release of the ABAP system.

ABAP Workbench[edit]
The ABAP Workbench is part of the ABAP system and is accessed via SAP GUI. It contains different tools for editing programs. The most important of these are (transaction codes are shown in parentheses):

ABAP Editor for writing and editing reports, module pools, includes and subroutine pools (SE38)
ABAP Dictionary for processing database table definitions and retrieving global types (SE11)
Menu Painter for designing the user interface (menu bar, standard toolbar, application toolbar, function key assignment) (SE41)
Screen Painter for designing screens and flow logic (SE51)
Function Builder for function modules (SE37)
Class Builder for ABAP Objects classes and interfaces (SE24)
The Object Navigator (transaction SE80) provides a single integrated interface into these various tools.

ABAP Development Tools[edit]
The ABAP Development Tools (ADT), formally known as "ABAP in Eclipse", is a set of plugins for the Eclipse platform to develop ABAP.[5]
In this scenario, the ABAP developer installs the required tools on his computer and works locally, whereas a continuous synchronization with the backend is performed.

ABAP Dictionary[edit]
The ABAP Dictionary contains all metadata about the data in the SAP system. It is closely linked with the ABAP Workbench in that any reference to data (e.g., a table, a view, or a data type) will be obtained from the dictionary. Developers use the ABAP Dictionary transactions (directly or through the SE80 Object Navigator inside the ABAP Workbench) to display and maintain this metadata.
When a dictionary object is changed, a program that references the changed object will automatically reference the new version the next time the program runs. Because ABAP is interpreted, it is not necessary to recompile programs that reference changed dictionary objects.
A brief description of the most important types of dictionary objects follows:

Tables are data containers that exist in the underlying relational database. In the majority of cases there is a 1-to-1 relationship between the definition of a table in the ABAP Dictionary and the definition of that same table in the database (same name, same columns). These tables are known as "transparent". There are two types of non-transparent tables: "pooled" tables exist as independent entities in the ABAP Dictionary but they are grouped together in large physical tables ("pools") at the database level. Pooled tables are often small tables holding for example configuration data. "Clustered" tables are physically grouped in "clusters" based on their primary keys; for instance, assume that a clustered table H contains "header" data about sales invoices, whereas another clustered table D holds the invoice line items. Each row of H would then be physically grouped with the related rows from D inside a "cluster table" in the database. This type of clustering, which is designed to improve performance, also exists as native functionality in some, though not all, relational database systems.
Indexes provide accelerated access to table data for often used selection conditions. Every SAP table has a "primary index", which is created implicitly along with the table and is used to enforce primary key uniqueness. Additional indexes (unique or non-unique) may be defined; these are called "secondary indexes".
Views have the same purpose as in the underlying database: they define subsets of columns (and/or rows) from one or - using a join condition - several tables. Since views are virtual tables (they refer to data in other tables) they do not take a substantial amount of space.
Structures are complex data types consisting of multiple fields (comparable to struct in C/C++).
Data elements provide the semantic content for a table or structure field. For example, dozens of tables and structures might contain a field giving the price (of a finished product, raw material, resource, ...). All these fields could have the same data element "PRICE".
Domains define the structural characteristics of a data element. For example, the data element PRICE could have an assigned domain that defines the price as a numeric field with two decimals. Domains can also carry semantic content in providing a list of possible values. For example, a domain "BOOLEAN" could define a field of type "character" with length 1 and case-insensitive, but would also restrict the possible values to "T" (true) or "F" (false).
Search helps (successors to the now obsolete "matchcodes") provide advanced search strategies when a user wants to see the possible values for a data field. The ABAP runtime provides implicit assistance (by listing all values for the field, e.g. all existing customer numbers) but search helps can be used to refine this functionality, e.g. by providing customer searches by geographical location, credit rating, etc.
Lock objects implement application-level locking when changing data.
ABAP syntax[edit]
This brief description of the ABAP syntax begins with the ubiquitous "Hello world" program.

Hello world[edit]
REPORT TEST.
WRITE 'Hello World'.

This example contains two statements: REPORT and WRITE. The program displays a list on the screen. In this case, the list consists of the single line "Hello World". The REPORT statement indicates that this program is a report. This program could be a module pool after replacing the REPORT statement with PROGRAM.

Chained statements[edit]
Consecutive statements with an identical first (leftmost) part can be combined into a "chained" statement using the chain operator :. The common part of the statements is written to the left of the colon, the differing parts are written to the right of the colon and separated by commas. The colon operator is attached directly to the preceding token, without a space (the same applies to the commas in the token list on, as can be seen in the examples below).
Chaining is often used in WRITE statements. WRITE accepts just one argument, so if for instance you wanted to display three fields from a structure called FLIGHTINFO, you would have to code:

WRITE FLIGHTINFO-CITYFROM.
WRITE FLIGHTINFO-CITYTO.
WRITE FLIGHTINFO-AIRPTO.

Chaining the statements results in a more readable and more intuitive form:

WRITE: FLIGHTINFO-CITYFROM, FLIGHTINFO-CITYTO, FLIGHTINFO-AIRPTO.

In a chain statement, the first part (before the colon) is not limited to the statement name alone. The entire common part of the consecutive statements can be placed before the colon. Example:

REPLACE 'A' WITH 'B' INTO LASTNAME.
REPLACE 'A' WITH 'B' INTO FIRSTNAME.
REPLACE 'A' WITH 'B' INTO CITYNAME.

could be rewritten in chained form as:

REPLACE 'A' WITH 'B' INTO: LASTNAME, FIRSTNAME, CITYNAME.

Comments[edit]
ABAP has 2 ways of defining text as a comment:

An asterisk (*) in the leftmost column of a line makes the entire line a comment
A double quotation mark (") anywhere on a line makes the rest of that line a comment
Example:

***************************************
** Program: BOOKINGS                 **
** Author: Joe Byte, 07-Jul-2007     **
***************************************

REPORT BOOKINGS.

* Read flight bookings from the database
SELECT * FROM FLIGHTINFO
  WHERE CLASS = 'Y'       "Y = economy
  OR    CLASS = 'C'.      "C = business
(...)

Spaces[edit]
Code in ABAP is whitespace-sensitive.

x = a+b(c).

assigns to variable x the substring of the variable a, starting from b with the length defined by the variable c.

x = a + b( c ).

assigns to variable x the sum of the variable a and the result of the call to method b with the parameter c.

ABAP statements[edit]
In contrast with languages like C/C++ or Java, which define a limited set of language-specific statements and provide most functionality via libraries, ABAP contains an extensive amount of built-in statements. These statements traditionally used sentence-like structures and avoided symbols, making ABAP programs relatively verbose. However, in more recent versions of the ABAP language, a terser style is possible.[6]
An example of statement based syntax (whose syntax originates in COBOL) versus expression-based syntax (as in C/Java):

ADD TAX TO PRICE.
* is equivalent to
PRICE = PRICE + TAX .

Data types and variables[edit]
ABAP provides a set of built-in data types. In addition, every structure, table, view or data element defined in the ABAP Dictionary can be used to type a variable. Also, object classes and interfaces can be used as types.
The built-in data types are:




Type
Description


I
Integer


P
Packed decimal


F
Floating point


N
Character numeric


C
Character


D
Date


T
Time


X
Hexadecimal (raw byte)


STRING
Variable-length string


XSTRING
Variable-length raw byte array

Date variables or constants (type D) contain the number of days since January 1, 1 AD. Time variables or constants (type T) contain the number of seconds since midnight. A special characteristic of both types is that they can be accessed both as integers and as character strings (with internal format "YYYYMMDD" for dates and "hhmmss" for times), which can be used for date and time handling. For example, the code snippet below calculates the last day of the previous month (note: SY-DATUM is a system-defined variable containing the current date):

DATA LAST_EOM    TYPE D.  "last end-of-month date

* Start from today's date
  LAST_EOM = SY-DATUM.
* Set characters 6 and 7 (0-relative) of the YYYYMMDD string to "01",
* giving the first day of the current month
  LAST_EOM+6(2) = '01'.
* Subtract one day
  LAST_EOM = LAST_EOM - 1.

  WRITE: 'Last day of previous month was', LAST_EOM.

All ABAP variables have to be explicitly declared in order to be used. They can be declared either with individual statements and explicit typing or, since ABAP 7.40, inline with inferred typing.

Explicitly typed declaration[edit]
Normally all declarations are placed at the top of the code module (program, subroutine, function) before the first executable statement; this placement is a convention and not an enforced syntax rule.  The declaration consists of the name, type, length (where applicable), additional modifiers (e.g. the number of implied decimals for a packed decimal field) and optionally an initial value:

* Primitive types:
DATA: COUNTER      TYPE I,
      VALIDITY     TYPE I VALUE 60,
      TAXRATE(3)   TYPE P DECIMALS 1,
      LASTNAME(20) TYPE C,
      DESCRIPTION  TYPE STRING.

* Dictionary types:
DATA: ORIGIN       TYPE COUNTRY.

* Internal table:
DATA: T_FLIGHTS    TYPE TABLE OF FLIGHTINFO,
      T_LOOKUP     TYPE HASHED TABLE OF FLT_LOOKUP.

* Objects:
DATA: BOOKING      TYPE REF TO CL_FLT_BOOKING.

Notice the use of the colon to chain together consecutive DATA statements.

Inline declaration[edit]
Since ABAP 7.40, variables can be declared inline with the following syntax:

DATA(variable_name) = 'VALUE'.

For this type of declaration it must be possible to infer the type statically, e.g. by method signature or database table structure.
This syntax is also possible in OpenSQL statements:

SELECT * FROM ekko into @DATA(lt_ekko) WHERE ebeln EQ @lv_ebeln.

ABAP Objects[edit]
The ABAP language supports object-oriented programming, through a feature known as "ABAP Objects".[7] This helps to simplify applications and make them more controllable.
ABAP Objects is fully compatible with the existing language, so one can use existing statements and modularization units in programs that use ABAP Objects, and can also use ABAP Objects in existing ABAP programs.  Syntax checking is stronger in ABAP Objects programs, and some syntactical forms (usually older ones) of certain statements are not permitted.
Objects form a capsule which combines the character to the respective behavior. Objects should enable programmers to map a real problem and its proposed software solution on a one-to-one basis. Typical objects in a business environment are, for example, âCustomerâ, âOrderâ, or âInvoiceâ. From Release 3.1 onwards, the Business Object Repository (BOR) of SAP Web Application Server ABAP has contained examples of such objects. The BOR object model will be integrated into ABAP Objects in the next Release by migrating the BOR object types to the ABAP class library.
A comprehensive introduction to object orientation as a whole would go far beyond the limits of this introduction to ABAP Objects. This documentation introduces a selection of terms that are used universally in object orientation and also occur in ABAP Objects. In subsequent sections, it goes on to discuss in more detail how these terms are used in ABAP Objects. The end of this section contains a list of further reading, with a selection of titles about object orientation.

Objects are instances of classes. They contain data and provide services. The data forms the attributes of the object. The services are known as methods (also known as operations or functions). Typically, methods operate on private data (the attributes, or state of the object), which is only visible to the methods of the object. Thus the attributes of an object cannot be changed directly by the user, but only by the methods of the object. This guarantees the internal consistency of the object.
Classes describe objects. From a technical point of view, objects are runtime instances of a class. In theory, any number of objects based on a single class may be created. Each instance (object) of a class has a unique identity and its own set of values for its attributes.
Object References are unique addresses that may be used to identify and point to objects in a program. Object references allow access to the attributes and methods of an object.
In object-oriented programming, objects usually have the following properties:

Encapsulation - Objects restrict the visibility of their resources (attributes and methods) to other users. Every object has an interface, which determines how other objects can interact with it. The implementation of the object is encapsulated, that is, invisible outside the object itself.
Inheritance - An existing class may be used to derive a new class. Derived classes inherit the data and methods of the superclass. However, they can overwrite existing methods, and also add new ones.
Polymorphism - Identical (identically-named) methods behave differently in different classes. In ABAP Objects, polymorphism is implemented by redefining methods during inheritance and by using constructs called interfaces.
CDS Views[edit]
The ABAP Core Data Services (ABAP CDS) are the implementation of the general CDS concept for AS ABAP. ABAP CDS makes it possible to define semantic data models on the central database of the application server. On AS ABAP, these models can be defined independently of the database system. The entities of these models provide enhanced access functions when compared with existing database tables and views defined in ABAP Dictionary, making it possible to optimize Open SQL-based applications. This is particularly clear when an AS ABAP uses a SAP HANA database, since its in-memory characteristics can be implemented in an optimum manner.
The data models are defined using the data definition language (DDL) and data control language (DCL) provided in the ABAP CDS in the ABAP CDS syntax. The objects defined using these languages are integrated into ABAP Dictionary and managed here too.
CDS source code can only be programmed in the Eclipse-based ABAP Development Tools (ADT). The Data Definition Language (DDL) and the Data Control Language (DCL) use different editors.[8]

Features[edit]



SAP NW ABAP
SQL Joins
SQL Set Operations
SELECT Clauses


7.40 SP05

INNER JOIN
LEFT OUTER JOIN
RIGHT OUTER JOIN


UNION
UNION ALL


WHERE
GROUP BY
HAVING
AS


7.40 SP08





7.50





7.51

CROSS JOIN








SAP NW ABAP
Literals
Arithmetic Operators
Conditional Expressions


7.40 SP05

In SELECT list, e.g. literal as FieldName
As RHS value


+
-
â


Boolean operators
NOT, AND, OR
Comparison operators
BETWEEN, =, <>, <, >, <=, >=, LIKE
IS [NOT] NULL (Only in WHERE condition)


7.40 SP08



/ (Float-based division)




7.50





7.51



Function as RHS value




SAP NW ABAP
Aggregate functions
Numeric functions
String functions


7.40 SP05

AVG( [DISTINCT] )
MAX
MIN
SUM( [DISTINCT] )
COUNT( [DISTINCT] )
COUNT(*)


CEIL
MOD


SUBSTRING
LPAD


7.40 SP08


ABS
DIV (Integer-based division)
DIVISION (Decimal-based division)
FLOOR
ROUND


CONCAT
REPLACE


7.50



CONCAT_WITH_SPACE
INSTR
LEFT
LENGTH
LTRIM
RIGHT
RPAD
RTRIM


7.51

AVG( [AS] ) to specify return type


FLTP_TO_DEC


UPPER
LOWER




SAP NW ABAP
Byte string functions
Date and time functions
Other functions


7.40 SP05



CAST to built-in DDIC types, e.g. abap.fltp


7.40 SP08



COALESCE
CURRENCY_CONVERSION
UNIT_CONVERSION
DECIMAL_SHIFT


7.50

BINTOHEX
HEXTOBIN


DATS_DAYS_BETWEEN
DATS_ADD_DAYS
DATS_ADD_MONTHS
DATS_IS_VALID
TIMS_IS_VALID
TSTMP_IS_VALID
TSTMP_CURRENT_UTCTIMESTAMP
TSTMP_SECONDS_BETWEEN
TSTMP_ADD_SECONDS


CAST
to data elements, e.g. CHAR80
can be nested


7.51


ABAP_SYSTEM_TIMEZONE
ABAP_USER_TIMEZONE
TSTMP_TO_DATS
TSTMP_TO_TIMS
TSTMP_TO_DST
DATS_TIMS_TO_TSTMP


CAST
PRESERVING TYPE
SSTRING to other types
CLNT, LANG, TIMS, UNIT to data elements of type CHAR and SSTRING
CHAR, SSTRING, NUMC to ACCP and vice versa
Aggregate function as operand




SAP NW ABAP
Conditional (CASE) expressions
Extensibility
(Unmanaged) Associations


7.40 SP05

"Simple" CASE (behaves like switch statement)
Nested CASE statements


$EXTENSION.* (support for database table extensions)


Path expressions in
SELECT list
FROM clause
WHERE clause
HAVING clause
Filter conditions in path expressions, e.g. Products._Texts[ lagu = 'EN' ] as english_name


7.40 SP08


"Searched" CASE (behaves like if ... else if)


EXTEND VIEW




7.50


CASE expressions can be used as operands in CAST functions


EXTEND VIEW with input parameters, path expressions, conversions, date and time functions




7.51


Function as RHS value


EXTEND VIEW with aggregate functions, GROUP BY clauses and UNIONs


Association definitions in views with UNIONs
Default filters for associations (WITH DEFAULT FILTER)
Cardinality "to many" (*:) can be specified in path filters




SAP NW ABAP
Session variables
Input parameters
Other


7.40 SP05



KEY elements


7.40 SP08


input parameters on most DBs




7.50

$session.user (sy-uname)
$session.client (sy-mandt)
$session.system_language (sy-langu)


Input parameters on AnyDB


Table function (SAP HANA only)


7.51

$session.system_date (sy-datum)




Metadata extensions

[9]

Internal tables in ABAP[edit]
Internal tables are an important feature of the ABAP language. An internal table is defined similarly to a vector of structs in C++ or a vector of objects in Java. The main difference with these languages is that ABAP provides a collection of statements to easily access and manipulate the contents of internal tables. Note that ABAP does not support arrays; the only way to define a multi-element data object is to use an internal table.[citation needed]
Internal tables are a way to store variable data sets of a fixed structure in the working memory of ABAP, and provides the functionality of dynamic arrays. The data is stored on a row-by-row basis, where each row has the same structure.
Internal tables are preferably used to store and format the content of database tables from within a program. Furthermore, internal tables in connection with structures are an important means of defining complex data structures in an ABAP program.
The following example defines an internal table with two fields with the format of database table VBRK.

* First define structured type
TYPES: BEGIN OF t_vbrk,
         VBELN TYPE VBRK-VBELN,
         ZUONR TYPE VBRK-ZUONR,
       END OF t_vbrk.

* Now define internal table of our defined type t_vbrk
DATA : gt_vbrk TYPE STANDARD TABLE OF t_vbrk,
       gt_vbrk_2 TYPE STANDARD TABLE OF t_vbrk.   "easy to define more tables

* If needed, define structure (line of internal table)
* Definition with type or with reference to internal table:
DATA : gs_vbrk TYPE t_vbrk,
       gs_vbrk_2 LIKE LINE OF gt_vbrk_2.

* You can also define table type if needed
TYPES tt_vbrk TYPE STANDARD TABLE OF t_vbrk.

History[edit]
The following list only gives a rough overview about some important milestones in the history of the language ABAP. For more details, see ABAP - Release-Specific Changes.



Version

Release date

Major changes


4.6C

May 2000


ABAP Objects


6.40

2004


Shared Objects


7.0

2006


Switch framework/Enhancement concept


7.02




Expressions like check lcl=>mi(1) + abs( -2 ) >= 3.



7.40

2012-11-29


"Code pushdown"âuse advanced features from the underlying database
Constructor expressions (NEW, VALUE, REF, CONV, CAST, EXACT, COND, SWITCH)
Partially Implemented test classes' interfaces
Table Expressions
Internal table line existence/line index functions


7.40 SP05

December 2013


MOVE-CORRESPONDING for internal tables
LET expression in constructor expressions
CORRESPONDING operator
CDS Views
ABAP Managed Database Procedures


7.40 SP08

September 2014


FOR expressions
Constructor operator REDUCE
Start value for constructor expressions
GROUP BY for internal tables
Filter expressions and default values for table expressions
Open SQL inline declarations after INTO statement
Optional interface methods


7.50

November 2015


New built-in data type INT8
Relational expression IS INSTANCE OF
Open SQL host expressions
Open SQL expressions ROUND, CONCAT, LPAD, LENGTH, REPLACE, RIGHT, RTRIM and SUBSTRING
Open SQL path expressions
Open SQL SELECT UNION
Open SQL INSERT FROM subquery


7.51

October 2016


Enumerations
Common table expressions in Open SQL
Open SQL/CDS CROSS JOIN
CDS client handling
Metadata extensions in CDS
Date and Time in Open SQL/CDS
Floating point on Open SQL/CDS


7.52

September 2017


Virtual sorting of internal tables


7.54

September 2019


New Built-In Data Types
New Built-In ABAP Type utclong
Calculation Assignments
Decimal Places in Time Stamps
Client Handling
Extensions of the INTO Clause
Definition of Associations
New Aggregate Function STRING_AGG
New Built-In Functions
Addition DISTINCT Optional in Aggregate Function COUNT
Window Expressions
SQL Conditions Revised
Temporal Hierarchies
New Hierarchy Navigators
Aggregate Expressions in SQL Expressions
CAST Matrix Revised
Strict Mode in the Syntax Check
Syntax Check for Literals and Host Constants
Annotation for Database Hints
Annotations for Releasing Elements
Specifying CDS Entities After USING
Quotation Marks for Logical Schemas
Addition in place of the Statement late numbering
Addition in class ... unique
External name of an action
Static Field Control
Arbitrary Name for Handler Methods
Behavior Pool No Exceptions
Entity Manipulation Language
TYPE STRUCTURE FOR
Response Information
Absolute Type Names
Business Service
Authorization Checks in Updates
Implicit Message Type in IF_T100_DYN_MSG
Using Test Classes
Addition COMBINATION MODE OR|AND of the Statement GRANT SELECT ON
Addition REDEFINITION of the Statement GRANT SELECT ON
Predicate VOID
Addition IN SCENARIO of the Statement GRANT SELECT ON
Generic Aspect Condition of the Statement DEFINE ROLE
New Variant INHERITING CONDITIONS FROM SUPER
Different REPLACING Operators
Definition of a Generic Aspect
DCL Restrictions for ABAP CDS Hierarchies
DCL Restrictions for Transactional Projection View Entities


7.55

September 2020


The internal ABAP statement EXPORT NAMETAB cannot be used any more and leads to a runtime error.
The internal ABAP statement IMPORT NAMETAB is still partly supported for reasons of downward compatibility. Any access to entries for DDIC table types leads to a runtime error. Any other access leads to errors from ATC.
The former native database table DDNTF for separate nametab field descriptions is not supported any more and will be deleted.
It is now possible to define new associations to external data sources in CDS projection views.
A new kind of CDS view is available: the CDS view entity.
The default value of profile parameter rdisp/max_alt_modes, that determines the possible number of ABAP sessions per user session, was enhanced from 6 to 16 and is now the same as the maximum number of ABAP sessions per user session.
In the assignments behind the addition NEXT of the constructor operator REDUCE the calculation assignment operators +=, +=, *=, /= or &&=, can be used now and the respective rules apply.
Support of Perl Compatible Regular Expressions
Verbatim Replacements
New Catchable Exception CX_SY_STRING_SIZE_TOO_LARGE
Formatting option CURRENCY for decimal floating point numbers
SQL: New aggregate function ALLOW_PRECISION_LOSS
SQL: Optional window frame specification within a window function
SQL: New window functions FIRST_VALUE and LAST_VALUE
SQL: New date/time conversion functions for TIMESTAMPL, DATS and TIMS
SQL: New time stamp functions UTCL_CURRENT, UTCL_ADD_SECONDS, and UTCL_SECONDS_BETWEEN
SQL: New date functions DATN_DAYS_BETWEEN, DATN_ADD_DAYS, and DATN_ADD_MONTHS
SQL: New additions after the ORDER BY clause: NULLS FIRST and NULLS LAST
SQL: New aggregate functions MEDIAN, STDDEV, VAR, CORR, and CORR_SPEARMAN
SQL: New geometry conversion function as_geo_json
SQL conditions revised
SQL: New window function NTILE
SQL: SELECT, INTO target - host variables can now be declared inline even when the FROM-clause is dynamic
SQL: New type conversion functions to_clob and to_blob
SQL: New currency conversion function currency conversion
SQL: Streaming and locators can now be used on SQL expressions
SQL: Further data types allowed in elementary SQL expressions
SQL: Hierarchy load options
SQL: Typed literals
SQL: New string functions
SQL: Addition to the UPDATE FROM clause
SQL: Strict mode of syntax check
CDC Access: Check with element IS [NOT] INITIAL in a literal condition
CDC Access: Addition bypass when
CDC Access: Check on the user name in user conditions
CDC Access: Data types
CDC Access: Aspect bypass conditions
Declaration of CX_NO_CHECK exceptions

See also[edit]
ERP software
Secure Network Communications
SAP Logon Ticket
Single sign-on
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ ABAP â Release-Specific Changes: Changes in Releases 7.5x

^ A new generation of CDS views: CDS view entities

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}""ABAP History". SAP-technical.com". Archived from the original on 2017-11-15. Retrieved 2010-08-09.

^ See Product Availability Matrix

^ "Get Started with the ABAP Development Tools for SAP NetWeaver | SAP Blogs".

^ Example of an ABAP program with many expressions

^ "Classes", SAP NetWeaver 7.0, retrieved 10 August 2009

^ "ABAP Keyword Documentation".

^ "Core Data Services (CDS) ABAP Feature Matrix | SAP Blogs".


External links[edit]
ABAP â Keyword Documentation
SAP Help Portal
ABAP Development discussions, blogs, documents and videos on the SAP Community Network (SCN)
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}Authority control General
Integrated Authority File (Germany)
National libraries
Spain
France (data)
United States
Other
Faceted Application of Subject Terminology
SUDOC (France)
1





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=ABAP&oldid=1053144633"
		Categories: Cross-platform softwareFourth-generation programming languagesSAP SEHidden categories: Articles with short descriptionShort description is different from WikidataArticles needing additional references from July 2011All articles needing additional referencesWikipedia articles with style issues from November 2016All articles with style issuesArticles with multiple maintenance issuesAll articles with unsourced statementsArticles with unsourced statements from May 2012Articles with unsourced statements from March 2016All articles with vague or ambiguous timeVague or ambiguous time from January 2020Articles with GND identifiersArticles with BNE identifiersArticles with BNF identifiersArticles with LCCN identifiersArticles with FAST identifiersArticles with SUDOC identifiers
	
