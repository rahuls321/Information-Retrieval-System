
Title:
Mixin
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}This article is about the programming concept. For the ice cream, see Mix-in.
In object-oriented programming languages, a mixin (or mix-in)[1][2][3][4] is a class that contains methods for use by other classes without having to be the parent class of those other classes. How those other classes gain access to the mixin's methods depends on the language. Mixins are sometimes described as being "included" rather than "inherited". 
Mixins encourage code reuse and can be used to avoid the inheritance ambiguity that multiple inheritance can cause[5] (the "diamond problem"), or to work around lack of support for multiple inheritance in a language.  A mixin can also be viewed as an interface with implemented methods. This pattern is an example of enforcing the dependency inversion principle.

Contents

1 History
2 Definition
3 Advantages
4 Implementations
5 Programming languages that use mixins
6 Examples

6.1 In Common Lisp
6.2 In Python
6.3 In Ruby
6.4 In JavaScript
6.5 In other languages


7 Interfaces and traits

7.1 In Scala
7.2 In Swift


8 See also
9 References
10 External links



History[edit]
Mixins first appeared in the Symbolics's object-oriented Flavors system (developed by Howard Cannon), which was an approach to object-orientation used in Lisp Machine Lisp. The name was inspired by Steve's Ice Cream Parlor in Somerville, Massachusetts:[1] The owner of the ice cream shop offered a basic flavor of ice cream (vanilla, chocolate, etc.) and blended in a combination of extra items (nuts, cookies, fudge, etc.) and called the item a "mix-in", his own trademarked term at the time.[2]

Definition[edit]
Mixins are a language concept that allows a programmer to inject some code into a class. Mixin programming is a style of software development, in which units of functionality are created in a class and then mixed in with other classes.[6]
A mixin class acts as the parent class, containing the desired functionality. A subclass can then inherit or simply reuse this functionality, but not as a means of specialization. Typically, the mixin will export the desired functionality to a child class, without creating a rigid, single "is a" relationship. Here lies the important difference between the concepts of mixins and inheritance, in that the child class can still inherit all the features of the parent class, but, the semantics about the child "being a kind of" the parent need not be necessarily applied.

Advantages[edit]
It provides a mechanism for multiple inheritance by allowing one class to use common functionality from multiple classes, but without the complex semantics of multiple inheritance.[7]
Code reusability: Mixins are useful when a programmer wants to share functionality between different classes. Instead of repeating the same code over and over again, the common functionality can simply be grouped into a mixin and then included into each class that requires it.[8]
Mixins allow inheritance and use of only the desired features from the parent class, not necessarily all of the features from the parent class.[9]
Implementations[edit]
In Simula, classes are defined in a block in which attributes, methods and class initialization are all defined together; thus all the methods that can be invoked on a class are defined together, and the definition of the class is complete.
In Flavors, a mixin is a class from which another class can inherit slot definitions and methods. The mixin usually does not have direct instances. Since a Flavor can inherit from more than one other Flavor, it can inherit from one or more mixins. Note that the original Flavors did not use generic functions.
In New Flavors (a successor of Flavors) and CLOS, methods are organized in "generic functions". These generic functions are functions that are defined in multiple cases (methods) by class dispatch and method combinations.
CLOS and Flavors allow mixin methods to add behavior to existing methods: :before and :after daemons, whoppers and wrappers in Flavors. CLOS added :around methods and the ability to call shadowed methods via CALL-NEXT-METHOD. So, for example, a stream-lock-mixin can add locking around existing methods of a stream class. In Flavors one would write a wrapper or a whopper and in CLOS one would use an :around method. Both CLOS and Flavors allow the computed reuse via method combinations. :before, :after and :around methods are a feature of the standard method combination. Other method combinations are provided.
An example is the + method combination, where the resulting values of each of the applicable methods of a generic function are arithmetically added to compute the return value. This is used, for example, with the border-mixin for graphical objects. A graphical object may have a generic width function. The border-mixin would add a border around an object and has a method computing its width. A new class bordered-button (that is both a graphical object and uses the border mixin) would compute its width by calling all applicable width methodsâvia the + method combination. All return values are added and create the combined width of the object.
In an OOPSLA 90 paper,[10] Gilad Bracha and William Cook reinterpret different inheritance mechanisms found in Smalltalk, Beta and CLOS as special forms of a mixin inheritance.

Programming languages that use mixins[edit]
Other than Flavors and CLOS (a part of Common Lisp), some languages that use mixins are:

Ada (by extending an existing tagged record with arbitrary operations in a generic)
Cobra
ColdFusion (Class based using includes and Object based by assigning methods from one object to another at runtime)
Curl (with Curl RTE)
D (called "template mixins"; D also includes a "mixin" statement that compiles strings as code.)
Dart
Factor[11]
Groovy
Java (since Java 8, by means of default methods of interfaces)
JavaScript Delegation - Functions as Roles (Traits and Mixins)
Kotlin
Less
OCaml
Perl (through roles in the Moose extension of the Perl 5 object system)
PHP's "traits"
Magik
MATLAB[12]
Python
Racket (mixins documentation)
Raku
Ruby
Rust
Scala[13]
XOTcl/TclOO (object systems builtin to Tcl)[14]
Sass (A stylesheet language)
Smalltalk
Vala
Swift
SystemVerilog
TypeScript (mixins documentation)
Some languages do not support mixins on the language level, but can easily mimic them by copying methods from one object to another at runtime, thereby "borrowing" the mixin's methods. This is also possible with statically typed languages, but it requires constructing a new object with the extended set of methods.
Other languages that do not support mixins can support them in a round-about way via other language constructs. C# and Visual Basic .NET support the addition of extension methods on interfaces, meaning any class implementing an interface with extension methods defined will have the extension methods available as pseudo-members.

Examples[edit]
In Common Lisp[edit]
Common Lisp provides mixins in CLOS (Common Lisp Object System) similar to Flavors.
object-width is a generic function with one argument that uses the + method combination. This combination determines that all applicable methods for a generic function will be called and the results will be added.

(defgeneric object-width (object)
  (:method-combination +))

button is a class with one slot for the button text.

(defclass button ()
  ((text :initform "click me")))

There is a method for objects of class button that computes the width based on the length of the button text. + is the method qualifier for the method combination of the same name.

(defmethod object-width + ((object button))
   (* 10 (length (slot-value object 'text))))

A border-mixin class. The naming is just a convention. There are no superclasses, and no slots.

(defclass border-mixin () ())

There is a method computing the width of the border. Here it is just 4.

(defmethod object-width + ((object border-mixin))
  4)

bordered-button is a class inheriting from both border-mixin and button.

(defclass bordered-button (border-mixin button) ())

We can now compute the width of a button. Calling object-width computes 80. The result is the result of the single applicable method: the method object-width for the class button.

? (object-width (make-instance 'button))
80

We can also compute the width of a bordered-button. Calling object-width computes 84. The result is the sum of the results of the two applicable methods: the method object-width for the class button and the method object-width for the class border-mixin.

? (object-width (make-instance 'bordered-button))
84

In Python[edit]
In Python, an example of the mixin concept is found in the SocketServer module,[15] which has both a UDPServer class and a TCPServer class. They act as servers for UDP and TCP socket servers, respectively. Additionally, there are two mixin classes: ForkingMixIn and ThreadingMixIn. Normally, all new connections are handled within the same process. By extending TCPServer with the ThreadingMixIn as follows:

class ThreadingTCPServer(ThreadingMixIn, TCPServer):
    pass

the ThreadingMixIn class adds functionality to the TCP server such that each new connection creates a new thread. Using the same method, a ThreadingUDPServer can be created without having to duplicate the code in ThreadingMixIn. Alternatively, using the ForkingMixIn would cause the process to be forked for each new connection. Clearly, the functionality to create a new thread or fork a process is not terribly useful as a stand-alone class.
In this usage example, the mixins provide alternative underlying functionality without affecting the functionality as a socket server.

In Ruby[edit]
Most of the Ruby world is based around mixins via Modules. The concept of mixins is implemented in Ruby by the keyword include to which we pass the name of the module as parameter.
Example:

class Student
  include Comparable # The class Student inherits the Comparable module using the 'include' keyword
  attr_accessor :name, :score

  def initialize(name, score)
    @name = name
    @score = score
  end

  # Including the Comparable module requires the implementing class to define the <=> comparison operator
  # Here's the comparison operator. We compare 2 student instances based on their scores.

  def <=>(other)
    @score <=> other.score
  end

  # Here's the good bit - I get access to <, <=, >,>= and other methods of the Comparable Interface for free.
end

s1 = Student.new("Peter", 100)
s2 = Student.new("Jason", 90)

s1 > s2 #true
s1 <= s2 #false

In JavaScript[edit]
The Object-Literal and extend Approach
It is technically possible to add behavior to an object by binding functions to keys in the object. However, this lack of separation between state and behavior has drawbacks:

It intermingles properties of the model domain with that of implementation domain.
No sharing of common behavior. Metaobjects solve this problem by separating the domain specific properties of objects from their behaviour specific properties.[16]
An extend function is used to mix the behavior in:[17]

'use strict';

const Halfling = function (fName, lName) {
  this.firstName = fName;
  this.lastName = lName;
};

const mixin = {
  fullName() {
    return this.firstName + ' ' + this.lastName;
  },
  rename(first, last) {
    this.firstName = first;
    this.lastName = last;
    return this;
  }
};

// An extend function
const extend = (obj, mixin) => {
  Object.keys(mixin).forEach(key => obj[key] = mixin[key]);
  return obj;
};

const sam = new Halfling('Sam', 'Loawry');
const frodo = new Halfling('Freeda', 'Baggs');

// Mixin the other methods
extend(Halfling.prototype, mixin);

console.log(sam.fullName());  // Sam Loawry
console.log(frodo.fullName());  // Freeda Baggs

sam.rename('Samwise', 'Gamgee');
frodo.rename('Frodo', 'Baggins');

console.log(sam.fullName());  // Samwise Gamgee
console.log(frodo.fullName());  // Frodo Baggins

Mixin with using Object.assign()

'use strict';

// Creating an object
const obj1 = {
  name: 'Marcus Aurelius',
  city: 'Rome',
  born: '121-04-26'
};

// Mixin 1
const mix1 = {
  toString() {
    return `${this.name} was born in ${this.city} in ${this.born}`;
  },
  age() {
    const year = new Date().getFullYear();
    const born = new Date(this.born).getFullYear();
    return year - born;
  }
};
// Mixin 2
const mix2 = {
  toString() {
    return `${this.name} - ${this.city} - ${this.born}`;
  }
};

//  Adding the methods from mixins to the object using Object.assign()
Object.assign(obj1, mix1, mix2);

console.log(obj1.toString());   // Marcus Aurelius - Rome - 121-04-26
console.log(`His age is ${obj1.age()} as of today`);  // His age is 1897 as of today

The pure function and delegation based Flight-Mixin Approach
Even though the firstly described approach is mostly widespread the next one is closer to what JavaScript's language core fundamentally offers - Delegation.
Two function object based patterns already do the trick without the need of a third party's implementation of extend.

'use strict';

// Implementation
const EnumerableFirstLast = (function () { // function based module pattern.
  const first = function () {
      return this[0];
    },
    last = function () {
      return this[this.length - 1];
    };
  return function () {      // function based Flight-Mixin mechanics ...
    this.first  = first;  // ... referring to ...
    this.last   = last;   // ... shared code.
  };
}());

// Application - explicit delegation:
// applying [first] and [last] enumerable behavior onto [Array]'s [prototype].
EnumerableFirstLast.call(Array.prototype);

// Now you can do:
const a = [1, 2, 3];
a.first(); // 1
a.last();  // 3

In other languages[edit]
In the Curl web-content language, multiple inheritance is used as classes with no instances may implement methods. Common mixins include all skinnable ControlUIs inheriting from SkinnableControlUI, user interface delegate objects that require dropdown menus inheriting from StandardBaseDropdownUI and such explicitly named mixin classes as FontGraphicMixin, FontVisualMixin and NumericAxisMixin-of class. Version 7.0 added library access so that mixins do not need to be in the same package or be public abstract. Curl constructors are factories that facilitates using multiple-inheritance without explicit declaration of either interfaces or mixins.[citation needed]

Interfaces and traits[edit]
Java 8 introduces a new feature in the form of default methods for interfaces.[18] Basically it allows a method to be defined in an interface with application in the scenario when a new method is to be added to an interface after the interface class programming setup is done. To add a new function to the interface means to implement the method at every class which uses the interface. Default methods help in this case where they can be introduced to an interface any time and have an implemented structure which is then used by the associated classes. Hence default methods adds a possibility of applying the concept in a mixin sort of a way.
Interfaces combined with aspect-oriented programming can also produce full-fledged mixins in languages that support such features, such as C# or Java. Additionally, through the use of the marker interface pattern, generic programming, and extension methods, C# 3.0 has the ability to mimic mixins. With C# 3.0 came the introduction of extension methods and they can be applied, not only to classes but, also, to interfaces. Extension Methods provide additional functionality on an existing class without modifying the class. It then becomes possible to create a static helper class for specific functionality that defines the extension methods. Because the classes implement the interface (even if the actual interface doesnât contain any methods or properties to implement) it will pick up all the extension methods also.[3][4][19] C# 8.0 adds the feature of default interface methods.[20]
ECMAScript (in most cases implemented as JavaScript) does not need to mimic object composition by stepwise copying fields from one object to another. It natively[21] supports Trait and mixin[22][23] based object composition via function objects that implement additional behavior and then are delegated via call or apply to objects that are in need of such new functionality.

In Scala[edit]
Scala has a rich type system and Traits are a part of it which helps implement mixin behaviour. As their name reveals, Traits are usually used to represent a distinct feature or aspect that is normally orthogonal to the responsibility of a concrete type or at least of a certain instance.[24]
For example, the ability to sing is modeled as such an orthogonal feature: it could be applied to Birds, Persons, etc.

trait Singer{
  def sing { println(" singing â¦ ") }
  //more methods
}

class Bird extends Singer

Here, Bird has mixed in all methods of the trait into its own definition as if class Bird had defined method sing() on its own.
As extends is also used to inherit from a super class, in case of a trait extends is used if no super class is inherited and only for mixin in the first trait. All following traits are mixed in using keyword with.

class Person
class Actor extends Person with Singer
class Actor extends Singer with Performer

Scala allows mixing in a trait (creating an anonymous type) when creating a new instance of a class. In the case of a Person class instance, not all instances can sing. This feature comes use then:

class Person{
  def tell {  println (" Human ") }
  //more methods
}

val singingPerson = new Person with Singer
singingPerson.sing

In Swift[edit]
Mixin can be achieved in Swift by using a language feature called Default implementation in Protocol Extension. 

protocol ErrorDisplayable {
    func error(message:String)
}

extension ErrorDisplayable {
    func error(message:String) {
        // Do what it needs to show an error
        //...
        print(message)
    }
}

struct NetworkManager : ErrorDisplayable {
    func onError() {
        error("Please check your internet Connection.")
    }
}

See also[edit]
Abstract type
Decorator pattern
Policy-based design
Trait, a similar structure that doesn't require linear composition
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ Jump up to: a b Using Mix-ins with Python

^ Jump up to: a b Mix-Ins (Steve's ice cream, Boston, 1975) Archived 2007-10-26 at the Wayback Machine

^ Jump up to: a b Implementing Mix-ins with C# Extension Methods

^ Jump up to: a b I know the answer (it's 42)Â : Mix-ins and C#

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Boyland, John; Giuseppe Castagna (26 June 1996). "Type-Safe Compilation of Covariant Specialization: A Practical Case".  In Pierre Cointe (ed.). ECOOP '96, Object-oriented Programming: 10th European Conference. Springer. pp.Â 16â17. ISBNÂ 9783540614395. Retrieved 17 January 2014.

^ http://c2.com/cgi/wiki?MixIn

^ http://culttt.com/2015/07/08/working-with-mixins-in-ruby/

^ http://naildrivin5.com/blog/2012/12/19/re-use-in-oo-inheritance.html

^ "Archived copy". Archived from the original on 2015-09-25. Retrieved 2015-09-16.{{cite web}}:  CS1 maint: archived copy as title (link)

^ OOPSLA '90, Mixin based inheritance (pdf)

^ slava (2010-01-25). "Factor/Features/The language". concatenative.org. Retrieved 2012-05-15. Factor's main language features: â¦ Object system with Inheritance, Generic functions, Predicate dispatch and Mixins {{cite web}}: External link in |publisher= (help)

^ https://in.mathworks.com/help/matlab/mixin-classes.html

^ "Mixin Class Composition". Ãcole polytechnique fÃ©dÃ©rale de Lausanne. Retrieved 16 May 2014.

^ Mixin classes in XOTcl

^ Source code for SocketServer in CPython 3.5

^ http://raganwald.com/2014/04/10/mixins-forwarding-delegation.html

^ "Archived copy". Archived from the original on 2015-09-21. Retrieved 2015-09-16.{{cite web}}:  CS1 maint: archived copy as title (link)

^ https://docs.oracle.com/javase/tutorial/java/IandI/defaultmethods.html

^ Mixins, generics and extension methods in C#

^ Mix functionality in when creating classes using interfaces with default interface methods

^ The many talents of JavaScript for generalizing Role Oriented Programming approaches like Traits and Mixins, April 11, 2014.

^ Angus Croll, A fresh look at JavaScript Mixins, published May 31, 2011.

^ JavaScript Code Reuse Patterns, April 19, 2013.

^ https://gleichmann.wordpress.com/2009/07/19/scala-in-practice-traits-as-mixins-motivation


External links[edit]
MixIn at Portland Pattern Repository
Mixins in ActionScript
The Common Lisp Object System: An Overview by Richard P. Gabriel and Linda DeMichiel provides a good introduction to the motivation for defining classes by means of generic functions.




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Mixin&oldid=1062717095"
		Categories: Object-oriented programming languagesHidden categories: Webarchive template wayback linksCS1 maint: archived copy as titleCS1 errors: external linksAll articles with unsourced statementsArticles with unsourced statements from May 2009
	
