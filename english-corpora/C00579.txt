
Title:
Combinatorial optimization
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Subfield of mathematical optimization
  A minimum spanning tree of a weighted planar graph. Finding a minimum spanning tree is a common problem involving combinatorial optimization.
Combinatorial optimization is a subfield of mathematical optimization   that consists of finding an optimal object from a finite set of objects,[1] where the set of feasible solutions is discrete or can be reduced to a discrete set. Typical combinatorial optimization problems are the travelling salesman problem ("TSP"), the minimum spanning tree problem ("MST"), and the knapsack problem. In many such problems, such as the ones previously mentioned, exhaustive search is not tractable, and so specialized algorithms that quickly rule out large parts of the search space or approximation algorithms must be resorted to instead.
Combinatorial optimization is related to operations research, algorithm theory, and computational complexity theory. It has important applications in several fields, including artificial intelligence, machine learning, auction theory, software engineering, applied mathematics and theoretical computer science.
Some research literature[2] considers discrete optimization to consist of integer programming together with combinatorial optimization (which in turn is composed of optimization problems dealing with graph structures), although all of these topics have closely intertwined research literature. It often involves determining the way to efficiently allocate resources used to find solutions to mathematical problems.[clarification needed]

Contents

1 Applications
2 Methods
3 Formal definition
4 NP optimization problem
5 Specific problems
6 See also
7 Notes
8 References
9 External links



Applications[edit]
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}This is a dynamic list and may never be able to satisfy particular standards for completeness. You can help by adding missing items with reliable sources.
Applications of combinatorial optimization include, but are not limited to:

Logistics[3]
Supply chain optimization[4]
Developing the best airline network of spokes and destinations
Deciding which taxis in a fleet to route to pick up fares
Determining the optimal way to deliver packages
Allocating jobs to people optimally
Designing water distribution networks
Earth science problems (e.g. reservoir flow-rates)[5]
Methods[edit]
There is a large amount of literature on polynomial-time algorithms for certain special classes of discrete optimization. A considerable amount of it is unified by the theory of linear programming. Some examples of combinatorial optimization problems that are covered by this framework are shortest paths and shortest-path trees, flows and circulations, spanning trees, matching, and matroid problems.
For NP-complete discrete optimization problems, current research literature includes the following topics:

polynomial-time exactly solvable special cases of the problem at hand (e.g. fixed-parameter tractable problems)
algorithms that perform well on "random" instances (e.g. for the traveling salesman problem)
approximation algorithms that run in polynomial time and find a solution that is close to optimal
solving real-world instances that arise in practice and do not necessarily exhibit the worst-case behavior of in NP-complete problems (e.g. real-world TSP instances with tens of thousands[quantify] of nodes[6]).
Combinatorial optimization problems can be viewed as searching for the best element of some set of discrete items; therefore, in principle, any sort of search algorithm or metaheuristic can be used to solve them. Perhaps the most universally applicable[weaselÂ words] approaches are branch-and-bound (an exact algorithm which can be stopped at any point in time to serve as heuristic), branch-and-cut (uses linear optimisation to generate bounds), dynamic programming (a recursive solution construction with limited search window) and tabu search (a greedy-type swapping algorithm). However, generic search algorithms are not guaranteed to find an optimal solution first, nor are they guaranteed to run quickly (in polynomial time). Since some discrete optimization problems are NP-complete, such as the traveling salesman problem[citation needed], this is expected unless P=NP.

Formal definition[edit]
Formally, a combinatorial optimization problem 
  
    
      
        A
      
    
    {\displaystyle A}
  
 is a quadruple[citation needed] 
  
    
      
        (
        I
        ,
        f
        ,
        m
        ,
        g
        )
      
    
    {\displaystyle (I,f,m,g)}
  
, where


  
    
      
        I
      
    
    {\displaystyle I}
  
 is a set of instances;
given an instance 
  
    
      
        x
        â
        I
      
    
    {\displaystyle x\in I}
  
, 
  
    
      
        f
        (
        x
        )
      
    
    {\displaystyle f(x)}
  
 is the finite set of feasible solutions;
given an instance 
  
    
      
        x
      
    
    {\displaystyle x}
  
 and a feasible solution 
  
    
      
        y
      
    
    {\displaystyle y}
  
 of 
  
    
      
        x
      
    
    {\displaystyle x}
  
, 
  
    
      
        m
        (
        x
        ,
        y
        )
      
    
    {\displaystyle m(x,y)}
  
 denotes the measure of 
  
    
      
        y
      
    
    {\displaystyle y}
  
, which is usually a positive real.

  
    
      
        g
      
    
    {\displaystyle g}
  
 is the goal function, and is either 
  
    
      
        min
      
    
    {\displaystyle \min }
  
 or 
  
    
      
        max
      
    
    {\displaystyle \max }
  
.
The goal is then to find for some instance 
  
    
      
        x
      
    
    {\displaystyle x}
  
 an optimal solution, that is, a feasible solution 
  
    
      
        y
      
    
    {\displaystyle y}
  
 with


  
    
      
        m
        (
        x
        ,
        y
        )
        =
        g
        {
        m
        (
        x
        ,
        
          y
          â²
        
        )
        â£
        
          y
          â²
        
        â
        f
        (
        x
        )
        }
        .
      
    
    {\displaystyle m(x,y)=g\{m(x,y')\mid y'\in f(x)\}.}
  

For each combinatorial optimization problem, there is a corresponding decision problem that asks whether there is a feasible solution for some particular measure 
  
    
      
        
          m
          
            0
          
        
      
    
    {\displaystyle m_{0}}
  
. For example, if there is a graph 
  
    
      
        G
      
    
    {\displaystyle G}
  
 which contains vertices 
  
    
      
        u
      
    
    {\displaystyle u}
  
 and 
  
    
      
        v
      
    
    {\displaystyle v}
  
, an optimization problem might be "find a path from 
  
    
      
        u
      
    
    {\displaystyle u}
  
 to 
  
    
      
        v
      
    
    {\displaystyle v}
  
 that uses the fewest edges". This problem might have an answer of, say, 4. A corresponding decision problem would be "is there a path from 
  
    
      
        u
      
    
    {\displaystyle u}
  
 to 
  
    
      
        v
      
    
    {\displaystyle v}
  
 that uses 10 or fewer edges?" This problem can be answered with a simple 'yes' or 'no'.
The field of approximation algorithms deals with algorithms to find near-optimal solutions to hard problems. The usual decision version is then an inadequate definition of the problem since it only specifies acceptable solutions. Even though we could introduce suitable decision problems, the problem is then more naturally characterized as an optimization problem.[7]

NP optimization problem[edit]
This section may be confusing or unclear to readers. In particular, the notation introduced in this section is not explained well and may not be standard. Please help clarify the section. There might be a discussion about this on the talk page.  (December 2021) (Learn how and when to remove this template message)
An NP-optimization problem (NPO) is a combinatorial optimization problem with the following additional conditions.[8] Note that the below referred polynomials are functions of the size of the respective functions' inputs, not the size of some implicit set of input instances.

the size of every feasible solution 
  
    
      
        y
        â
        f
        (
        x
        )
      
    
    {\displaystyle y\in f(x)}
  
 is polynomially bounded in the size of the given instance 
  
    
      
        x
      
    
    {\displaystyle x}
  
,
the languages 
  
    
      
        {
        
        x
        
        â£
        
        x
        â
        I
        
        }
      
    
    {\displaystyle \{\,x\,\mid \,x\in I\,\}}
  
 and 
  
    
      
        {
        
        (
        x
        ,
        y
        )
        
        â£
        
        y
        â
        f
        (
        x
        )
        
        }
      
    
    {\displaystyle \{\,(x,y)\,\mid \,y\in f(x)\,\}}
  
 can be recognized in polynomial time, and

  
    
      
        m
      
    
    {\displaystyle m}
  
 is polynomial-time computable.
This implies that the corresponding decision problem is in NP. In computer science, interesting optimization problems usually have the above properties and are therefore NPO problems. A problem is additionally called a P-optimization (PO) problem, if there exists an algorithm which finds optimal solutions in polynomial time. Often, when dealing with the class NPO, one is interested in optimization problems for which the decision versions are NP-complete. Note that hardness relations are always with respect to some reduction. Due to the connection between approximation algorithms and computational optimization problems, reductions which preserve approximation in some respect are for this subject preferred than the usual Turing and Karp reductions. An example of such a reduction would be L-reduction. For this reason, optimization problems with NP-complete decision versions are not necessarily called NPO-complete.[9]
NPO is divided into the following subclasses according to their approximability:[8]

NPO(I): Equals FPTAS. Contains the Knapsack problem.
NPO(II): Equals PTAS. Contains the Makespan scheduling problem.
NPO(III): :The class of NPO problems that have polynomial-time algorithms which computes solutions with a cost at most c times the optimal cost (for minimization problems) or a cost at least 
  
    
      
        1
        
          /
        
        c
      
    
    {\displaystyle 1/c}
  
 of the optimal cost (for maximization problems). In HromkoviÄ's book[which?], excluded from this class are all NPO(II)-problems save if P=NP. Without the exclusion, equals APX. Contains MAX-SAT and metric TSP.
NPO(IV): :The class of NPO problems with polynomial-time algorithms approximating the optimal solution by a ratio that is polynomial in a logarithm of the size of the input. In HromkoviÄ's book, all NPO(III)-problems are excluded from this class unless P=NP. Contains the set cover problem.
NPO(V): :The class of NPO problems with polynomial-time algorithms approximating the optimal solution by a ratio bounded by some function on n. In Hromkovic's book, all NPO(IV)-problems  are excluded from this class unless P=NP. Contains the TSP and clique problem.
An NPO problem is called polynomially bounded (PB) if, for every instance 
  
    
      
        x
      
    
    {\displaystyle x}
  
 and for every solution 
  
    
      
        y
        â
        f
        (
        x
        )
      
    
    {\displaystyle y\in f(x)}
  
, the measure 
  
    
      
        m
        (
        x
        ,
        y
        )
      
    
    {\displaystyle m(x,y)}
  
is bounded by a polynomial function of the size of 
  
    
      
        x
      
    
    {\displaystyle x}
  
. The class NPOPB is the class of NPO problems that are polynomially-bounded.

Specific problems[edit]
Further information: Category:Combinatorial optimization
This is a dynamic list and may never be able to satisfy particular standards for completeness. You can help by adding missing items with reliable sources.
  An optimal traveling salesperson tour through Germanyâs 15 largest cities. It is the shortest among the 43,589,145,600[10] possible tours that visit each city exactly once.
Assignment problem
Closure problem
Constraint satisfaction problem
Cutting stock problem
Dominating set problem
Integer programming
Knapsack problem
Minimum relevant variables in linear system
Minimum spanning tree
Nurse scheduling problem
Set cover problem
Job shop scheduling
Traveling salesman problem
Vehicle rescheduling problem
Vehicle routing problem
Weapon target assignment problem
See also[edit]
Constraint composite graph
Notes[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ Schrijver 2003, p.Â 1.

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Discrete Optimization. Elsevier. Retrieved 2009-06-08.

^ Sbihi, Abdelkader; Eglese, Richard W. (2007). "Combinatorial optimization and Green Logistics" (PDF). 4OR. 5 (2): 99â116. doi:10.1007/s10288-007-0047-3. S2CIDÂ 207070217.

^ Eskandarpour, Majid; Dejax, Pierre; Miemczyk, Joe; PÃ©ton, Olivier (2015). "Sustainable supply chain network design: An optimization-oriented review" (PDF). Omega. 54: 11â32. doi:10.1016/j.omega.2015.01.006.

^ HobÃ©, Alex; Vogler, Daniel; Seybold, Martin P.; Ebigbo, Anozie; Settgast, Randolph R.; Saar, Martin O. (2018). "Estimating fluid flow rates through fracture networks using combinatorial optimization". Advances in Water Resources. 122: 85â97. arXiv:1801.08321. Bibcode:2018AdWR..122...85H. doi:10.1016/j.advwatres.2018.10.002. S2CIDÂ 119476042.

^ Cook 2016.

^ Ausiello, Giorgio;  etÂ al. (2003), Complexity and Approximation (CorrectedÂ ed.), Springer, ISBNÂ 978-3-540-65431-5

^ Jump up to: a b Hromkovic, Juraj (2002), Algorithmics for Hard Problems, Texts in Theoretical Computer Science (2ndÂ ed.), Springer, ISBNÂ 978-3-540-44134-2

^ Kann, Viggo (1992), On the Approximability of NP-complete Optimization Problems, Royal Institute of Technology, Sweden, ISBNÂ 91-7170-082-X

^ Take one city, and take all possible orders of the other 14 cities. Then divide by two because it does not matter in which direction in time they come after each other: 14!/2 = 43,589,145,600.


References[edit]
Beasley, J. E. "Integer programming" (lecture notes).
Cook, William J.; Cunningham, William H.; Pulleyblank, William R.; Schrijver, Alexander (1997). Combinatorial Optimization. Wiley. ISBNÂ 0-471-55894-X.
Cook, William (2016). "Optimal TSP Tours". University of Waterloo. (Information on the largest TSP instances solved to date.)
Crescenzi, Pierluigi; Kann, Viggo; HalldÃ³rsson, MagnÃºs; Karpinski, Marek; Woeginger, Gerhard (eds.). "A Compendium of NP Optimization Problems". (This is a continuously updated catalog of approximability results for NP optimization problems.)
Das, Arnab; Chakrabarti, Bikas K, eds. (2005). Quantum Annealing and Related Optimization Methods. Lecture Notes in Physics. Vol.Â 679. Springer. Bibcode:2005qnro.book.....D.
Das, Arnab; Chakrabarti, Bikas K (2008). "Colloquium: Quantum annealing and analog quantum computation". Rev. Mod. Phys. 80 (3): 1061. arXiv:0801.2193. Bibcode:2008RvMP...80.1061D. CiteSeerXÂ 10.1.1.563.9990. doi:10.1103/RevModPhys.80.1061. S2CIDÂ 14255125.
Lawler, Eugene (2001). Combinatorial Optimization: Networks and Matroids. Dover. ISBNÂ 0-486-41453-1.
Lee, Jon (2004). A First Course in Combinatorial Optimization. Cambridge University Press. ISBNÂ 0-521-01012-8.
Papadimitriou, Christos H.; Steiglitz, Kenneth (July 1998). Combinatorial OptimizationÂ : Algorithms and Complexity. Dover. ISBNÂ 0-486-40258-4.
Schrijver, Alexander (2003). Combinatorial Optimization: Polyhedra and Efficiency. Algorithms and Combinatorics. Vol.Â 24. Springer. ISBNÂ 9783540443896.
Schrijver, Alexander (2005). "On the history of combinatorial optimization (till 1960)" (PDF).  In Aardal, K.; Nemhauser, G.L.; Weismantel, R. (eds.). Handbook of Discrete Optimization. Elsevier. pp.Â 1â68.
Schrijver, Alexander (February 1, 2006). A Course in Combinatorial Optimization (PDF).
Sierksma, Gerard; Ghosh, Diptesh (2010). Networks in Action; Text and Computer Exercises in Network Optimization. Springer. ISBNÂ 978-1-4419-5512-8.
Gerard Sierksma; Yori Zwols (2015). Linear and Integer Optimization: Theory and Practice. CRC Press. ISBNÂ 978-1-498-71016-9.
Pintea, C-M. (2014). Advances in Bio-inspired Computing for Combinatorial Optimization Problem. Intelligent Systems Reference Library. Springer. ISBNÂ 978-3-642-40178-7.
External links[edit]



Wikimedia Commons has media related to Combinatorial optimization.

Journal of Combinatorial Optimization
The Aussois Combinatorial Optimization Workshop
Java Combinatorial Optimization Platform (open source code)
Why is scheduling people hard?
Complexity classes for optimization problems / Stefan Kugele




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Combinatorial_optimization&oldid=1062044705"
		Categories: Combinatorial optimizationComputational complexity theoryTheoretical computer scienceHidden categories: Articles with short descriptionShort description is different from WikidataWikipedia articles needing clarification from December 2021Dynamic listsAll articles with unsourced statementsArticles with unsourced statements from December 2021All articles with specifically marked weasel-worded phrasesArticles with specifically marked weasel-worded phrases from December 2021Articles with unsourced statements from March 2019Articles with unsourced statements from January 2018All Wikipedia articles needing clarificationCommons category link from Wikidata
	
