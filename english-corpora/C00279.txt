
Title:
Kernel (image processing)
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}For other uses, see Kernel (disambiguation).
In image processing, a kernel, convolution matrix, or mask is a small matrix used for blurring, sharpening, embossing, edge detection, and more. This is accomplished by doing a convolution between the kernel and an image.

Contents

1 Details

1.1 Origin


2 Convolution

2.1 Edge Handling
2.2 Normalization
2.3 Concrete implementation


3 References
4 See also
5 External links



Details[edit]
The general expression of a convolution is

  
    
      
        g
        (
        x
        ,
        y
        )
        =
        Ï
        â
        f
        (
        x
        ,
        y
        )
        =
        
          â
          
            d
            x
            =
            â
            a
          
          
            a
          
        
        
          
            â
            
              d
              y
              =
              â
              b
            
            
              b
            
          
          
            Ï
            (
            d
            x
            ,
            d
            y
            )
            f
            (
            x
            +
            d
            x
            ,
            y
            +
            d
            y
            )
          
        
        ,
      
    
    {\displaystyle g(x,y)=\omega *f(x,y)=\sum _{dx=-a}^{a}{\sum _{dy=-b}^{b}{\omega (dx,dy)f(x+dx,y+dy)}},}
  

where 
  
    
      
        g
        (
        x
        ,
        y
        )
      
    
    {\displaystyle g(x,y)}
  
 is the filtered image, 
  
    
      
        f
        (
        x
        ,
        y
        )
      
    
    {\displaystyle f(x,y)}
  
 is the original image, 
  
    
      
        Ï
      
    
    {\displaystyle \omega }
  
 is the filter kernel. Every element of the filter kernel is considered by  
  
    
      
        â
        a
        â¤
        d
        x
        â¤
        a
      
    
    {\displaystyle -a\leq dx\leq a}
  
 and 
  
    
      
        â
        b
        â¤
        d
        y
        â¤
        b
      
    
    {\displaystyle -b\leq dy\leq b}
  
.

Depending on the element values, a kernel can cause a wide range of effects.




Operation

Kernel Ï

Image result g(x,y)


Identity


  
    
      
        
          
            [
            
              
                
                  Â 
                  Â 
                  0
                
                
                  Â 
                  Â 
                  0
                
                
                  Â 
                  Â 
                  0
                
              
              
                
                  Â 
                  Â 
                  0
                
                
                  Â 
                  Â 
                  1
                
                
                  Â 
                  Â 
                  0
                
              
              
                
                  Â 
                  Â 
                  0
                
                
                  Â 
                  Â 
                  0
                
                
                  Â 
                  Â 
                  0
                
              
            
            ]
          
        
      
    
    {\displaystyle {\begin{bmatrix}\ \ 0&\ \ 0&\ \ 0\\\ \ 0&\ \ 1&\ \ 0\\\ \ 0&\ \ 0&\ \ 0\end{bmatrix}}}
  





Ridge detection


  
    
      
        
          
            [
            
              
                
                  Â 
                  Â 
                  0
                
                
                  â
                  1
                
                
                  Â 
                  Â 
                  0
                
              
              
                
                  â
                  1
                
                
                  Â 
                  Â 
                  4
                
                
                  â
                  1
                
              
              
                
                  Â 
                  Â 
                  0
                
                
                  â
                  1
                
                
                  Â 
                  Â 
                  0
                
              
            
            ]
          
        
      
    
    {\displaystyle {\begin{bmatrix}\ \ 0&-1&\ \ 0\\-1&\ \ 4&-1\\\ \ 0&-1&\ \ 0\end{bmatrix}}}
  






  
    
      
        
          
            [
            
              
                
                  â
                  1
                
                
                  â
                  1
                
                
                  â
                  1
                
              
              
                
                  â
                  1
                
                
                  Â 
                  Â 
                  8
                
                
                  â
                  1
                
              
              
                
                  â
                  1
                
                
                  â
                  1
                
                
                  â
                  1
                
              
            
            ]
          
        
      
    
    {\displaystyle {\begin{bmatrix}-1&-1&-1\\-1&\ \ 8&-1\\-1&-1&-1\end{bmatrix}}}
  





Sharpen


  
    
      
        
          
            [
            
              
                
                  Â 
                  Â 
                  0
                
                
                  â
                  1
                
                
                  Â 
                  Â 
                  0
                
              
              
                
                  â
                  1
                
                
                  Â 
                  Â 
                  5
                
                
                  â
                  1
                
              
              
                
                  Â 
                  Â 
                  0
                
                
                  â
                  1
                
                
                  Â 
                  Â 
                  0
                
              
            
            ]
          
        
      
    
    {\displaystyle {\begin{bmatrix}\ \ 0&-1&\ \ 0\\-1&\ \ 5&-1\\\ \ 0&-1&\ \ 0\end{bmatrix}}}
  





Box blur  (normalized)


  
    
      
        
          
            1
            9
          
        
        
          
            [
            
              
                
                  Â 
                  Â 
                  1
                
                
                  Â 
                  Â 
                  1
                
                
                  Â 
                  Â 
                  1
                
              
              
                
                  Â 
                  Â 
                  1
                
                
                  Â 
                  Â 
                  1
                
                
                  Â 
                  Â 
                  1
                
              
              
                
                  Â 
                  Â 
                  1
                
                
                  Â 
                  Â 
                  1
                
                
                  Â 
                  Â 
                  1
                
              
            
            ]
          
        
      
    
    {\displaystyle {\frac {1}{9}}{\begin{bmatrix}\ \ 1&\ \ 1&\ \ 1\\\ \ 1&\ \ 1&\ \ 1\\\ \ 1&\ \ 1&\ \ 1\end{bmatrix}}}
  





Gaussian blur 3 Ã 3  (approximation)


  
    
      
        
          
            1
            16
          
        
        
          
            [
            
              
                
                  Â 
                  Â 
                  1
                
                
                  Â 
                  Â 
                  2
                
                
                  Â 
                  Â 
                  1
                
              
              
                
                  Â 
                  Â 
                  2
                
                
                  Â 
                  Â 
                  4
                
                
                  Â 
                  Â 
                  2
                
              
              
                
                  Â 
                  Â 
                  1
                
                
                  Â 
                  Â 
                  2
                
                
                  Â 
                  Â 
                  1
                
              
            
            ]
          
        
      
    
    {\displaystyle {\frac {1}{16}}{\begin{bmatrix}\ \ 1&\ \ 2&\ \ 1\\\ \ 2&\ \ 4&\ \ 2\\\ \ 1&\ \ 2&\ \ 1\end{bmatrix}}}
  





Gaussian blur 5 Ã 5  (approximation)


  
    
      
        
          
            1
            256
          
        
        
          
            [
            
              
                
                  1
                
                
                  4
                
                
                  6
                
                
                  4
                
                
                  1
                
              
              
                
                  4
                
                
                  16
                
                
                  24
                
                
                  16
                
                
                  4
                
              
              
                
                  6
                
                
                  24
                
                
                  36
                
                
                  24
                
                
                  6
                
              
              
                
                  4
                
                
                  16
                
                
                  24
                
                
                  16
                
                
                  4
                
              
              
                
                  1
                
                
                  4
                
                
                  6
                
                
                  4
                
                
                  1
                
              
            
            ]
          
        
      
    
    {\displaystyle {\frac {1}{256}}{\begin{bmatrix}1&4&6&4&1\\4&16&24&16&4\\6&24&36&24&6\\4&16&24&16&4\\1&4&6&4&1\end{bmatrix}}}
  





Unsharp masking 5 Ã 5 Based on Gaussian blur  with amount as 1 and  threshold as 0 (with no image mask)


  
    
      
        
          
            
              â
              1
            
            256
          
        
        
          
            [
            
              
                
                  1
                
                
                  4
                
                
                  Â 
                  Â 
                  6
                
                
                  4
                
                
                  1
                
              
              
                
                  4
                
                
                  16
                
                
                  Â 
                  Â 
                  24
                
                
                  16
                
                
                  4
                
              
              
                
                  6
                
                
                  24
                
                
                  â
                  476
                
                
                  24
                
                
                  6
                
              
              
                
                  4
                
                
                  16
                
                
                  Â 
                  Â 
                  24
                
                
                  16
                
                
                  4
                
              
              
                
                  1
                
                
                  4
                
                
                  Â 
                  Â 
                  6
                
                
                  4
                
                
                  1
                
              
            
            ]
          
        
      
    
    {\displaystyle {\frac {-1}{256}}{\begin{bmatrix}1&4&\ \ 6&4&1\\4&16&\ \ 24&16&4\\6&24&-476&24&6\\4&16&\ \ 24&16&4\\1&4&\ \ 6&4&1\end{bmatrix}}}
  









The above are just a few examples of effects achievable by convolving kernels and images.

Origin[edit]
The origin is the position of the kernel which is above (conceptually) the current output pixel. This could be outside of the actual kernel, though usually it corresponds to one of the kernel elements. For a symmetric kernel, the origin is usually the center element.

Convolution[edit]
See also: Symmetric convolution
Convolution is the process of adding each element of the image to its local neighbors, weighted by the kernel. This is related to a form of mathematical convolution. The matrix operation being performedâconvolutionâis not traditional matrix multiplication, despite being similarly denoted by *.
For example, if we have two three-by-three matrices, the first a kernel, and the second an image piece, convolution is the process of flipping both the rows and columns of the kernel and multiplying locally similar entries and summing. The element at coordinates [2, 2] (that is, the central element) of the resulting image would be a weighted combination of all the entries of the image matrix, with weights given by the kernel:

  
    
      
        
          (
          
            
              
                [
                
                  
                    
                      a
                    
                    
                      b
                    
                    
                      c
                    
                  
                  
                    
                      d
                    
                    
                      e
                    
                    
                      f
                    
                  
                  
                    
                      g
                    
                    
                      h
                    
                    
                      i
                    
                  
                
                ]
              
            
            â
            
              
                [
                
                  
                    
                      1
                    
                    
                      2
                    
                    
                      3
                    
                  
                  
                    
                      4
                    
                    
                      5
                    
                    
                      6
                    
                  
                  
                    
                      7
                    
                    
                      8
                    
                    
                      9
                    
                  
                
                ]
              
            
          
          )
        
        [
        2
        ,
        2
        ]
        =
        (
        i
        â
        1
        )
        +
        (
        h
        â
        2
        )
        +
        (
        g
        â
        3
        )
        +
        (
        f
        â
        4
        )
        +
        (
        e
        â
        5
        )
        +
        (
        d
        â
        6
        )
        +
        (
        c
        â
        7
        )
        +
        (
        b
        â
        8
        )
        +
        (
        a
        â
        9
        )
        .
      
    
    {\displaystyle \left({\begin{bmatrix}a&b&c\\d&e&f\\g&h&i\end{bmatrix}}*{\begin{bmatrix}1&2&3\\4&5&6\\7&8&9\end{bmatrix}}\right)[2,2]=(i\cdot 1)+(h\cdot 2)+(g\cdot 3)+(f\cdot 4)+(e\cdot 5)+(d\cdot 6)+(c\cdot 7)+(b\cdot 8)+(a\cdot 9).}
  

The other entries would be similarly weighted, where we position the center of the kernel on each of the boundary points of the image, and compute a weighted sum.
The values of a given pixel in the output image are calculated by multiplying each kernel value by the corresponding input image pixel values. This can be described algorithmically with the following pseudo-code:

for each image row in input image:
    for each pixel in image row:

        set accumulator to zero

        for each kernel row in kernel:
            for each element in kernel row:

                if element position  corresponding* to pixel position then
                    multiply element value  corresponding* to pixel value
                    add result to accumulator
                endif

         set output image pixel to accumulator

*corresponding input image pixels are found relative to the kernel's origin.
If the kernel is symmetric then place the center (origin) of the kernel on the current pixel. The kernel will overlap the neighboring pixels around the origin. Each kernel element should be multiplied with the pixel value it overlaps with and all of the obtained values should be summed. This resultant sum will be the new value for the current pixel currently overlapped with the center of the kernel.
If the kernel is not symmetric, it has to be flipped both around its horizontal and vertical axis before calculating the convolution as above.[1]
The general form for matrix convolution is

  
    
      
        
          
            [
            
              
                
                  
                    x
                    
                      11
                    
                  
                
                
                  
                    x
                    
                      12
                    
                  
                
                
                  â¯
                
                
                  
                    x
                    
                      1
                      n
                    
                  
                
              
              
                
                  
                    x
                    
                      21
                    
                  
                
                
                  
                    x
                    
                      22
                    
                  
                
                
                  â¯
                
                
                  
                    x
                    
                      2
                      n
                    
                  
                
              
              
                
                  â®
                
                
                  â®
                
                
                  â±
                
                
                  â®
                
              
              
                
                  
                    x
                    
                      m
                      1
                    
                  
                
                
                  
                    x
                    
                      m
                      2
                    
                  
                
                
                  â¯
                
                
                  
                    x
                    
                      m
                      n
                    
                  
                
              
            
            ]
          
        
        â
        
          
            [
            
              
                
                  
                    y
                    
                      11
                    
                  
                
                
                  
                    y
                    
                      12
                    
                  
                
                
                  â¯
                
                
                  
                    y
                    
                      1
                      n
                    
                  
                
              
              
                
                  
                    y
                    
                      21
                    
                  
                
                
                  
                    y
                    
                      22
                    
                  
                
                
                  â¯
                
                
                  
                    y
                    
                      2
                      n
                    
                  
                
              
              
                
                  â®
                
                
                  â®
                
                
                  â±
                
                
                  â®
                
              
              
                
                  
                    y
                    
                      m
                      1
                    
                  
                
                
                  
                    y
                    
                      m
                      2
                    
                  
                
                
                  â¯
                
                
                  
                    y
                    
                      m
                      n
                    
                  
                
              
            
            ]
          
        
        =
        
          â
          
            i
            =
            0
          
          
            m
            â
            1
          
        
        
          â
          
            j
            =
            0
          
          
            n
            â
            1
          
        
        
          x
          
            (
            m
            â
            i
            )
            (
            n
            â
            j
            )
          
        
        
          y
          
            (
            1
            +
            i
            )
            (
            1
            +
            j
            )
          
        
      
    
    {\displaystyle {\begin{bmatrix}x_{11}&x_{12}&\cdots &x_{1n}\\x_{21}&x_{22}&\cdots &x_{2n}\\\vdots &\vdots &\ddots &\vdots \\x_{m1}&x_{m2}&\cdots &x_{mn}\\\end{bmatrix}}*{\begin{bmatrix}y_{11}&y_{12}&\cdots &y_{1n}\\y_{21}&y_{22}&\cdots &y_{2n}\\\vdots &\vdots &\ddots &\vdots \\y_{m1}&y_{m2}&\cdots &y_{mn}\\\end{bmatrix}}=\sum _{i=0}^{m-1}\sum _{j=0}^{n-1}x_{(m-i)(n-j)}y_{(1+i)(1+j)}}
  


Edge Handling[edit]
  Extend Edge-Handling
Kernel convolution usually requires values from pixels outside of the image boundaries. There are a variety of methods for handling image edges.

Extend
The nearest border pixels are conceptually extended as far as necessary to provide values for the convolution. Corner pixels are extended in 90Â° wedges. Other edge pixels are extended in lines.
Wrap
The image is conceptually wrapped (or tiled) and values are taken from the opposite edge or corner.
Mirror
The image is conceptually mirrored at the edges.  For example, attempting to read a pixel 3 units outside an edge reads one 3 units inside the edge instead.
Crop
Any pixel in the output image which would require values from beyond the edge is skipped. This method can result in the output image being slightly smaller, with the edges having been cropped.
Kernel Crop
Any pixel in the kernel that extends past the input image isn't used and the normalizing is adjusted to compensate.
Constant
Use constant value for pixels outside of image. Usually it is used black. Sometimes gray. Generally this depends from application.
Avoid overlap
Move kernel so that never require values from outside of image. Machine leaning use that approach as main. Example: Kernel size 10x10, image size 32x32, result image is 23x23.
Normalization[edit]
Normalization is defined as the division of each element in the kernel by the sum of all kernel elements, so that the sum of the elements of a normalized kernel is unity. This will ensure the average pixel in the modified image is as bright as the average pixel in the original image.

Concrete implementation[edit]
Here a concrete convolution implementation done with the GLSL shading languageÂ :// authorÂ : csblo
// Work made just by consultingÂ :
// https://en.wikipedia.org/wiki/Kernel_(image_processing)

// Define kernels
#define identity mat3(0, 0, 0, 0, 1, 0, 0, 0, 0)
#define edge0 mat3(1, 0, -1, 0, 0, 0, -1, 0, 1)
#define edge1 mat3(0, 1, 0, 1, -4, 1, 0, 1, 0)
#define edge2 mat3(-1, -1, -1, -1, 8, -1, -1, -1, -1)
#define sharpen mat3(0, -1, 0, -1, 5, -1, 0, -1, 0)
#define box_blur mat3(1, 1, 1, 1, 1, 1, 1, 1, 1) * 0.1111
#define gaussian_blur mat3(1, 2, 1, 2, 4, 2, 1, 2, 1) * 0.0625
#define emboss mat3(-2, -1, 0, -1, 1, 1, 0, 1, 2)

// Find coordinate of matrix element from index
vec2 kpos(int index)
{
    return vec2[9] (
        vec2(-1, -1), vec2(0, -1), vec2(1, -1),
        vec2(-1, 0), vec2(0, 0), vec2(1, 0), 
        vec2(-1, 1), vec2(0, 1), vec2(1, 1)
    )[index] / iResolution.xy;
}


// Extract region of dimension 3x3 from sampler centered in uv
// samplerÂ : texture sampler
// uvÂ : current coordinates on sampler
// returnÂ : an array of mat3, each index corresponding with a color channel
mat3[3] region3x3(sampler2D sampler, vec2 uv)
{
    // Create each pixels for region
    vec4[9] region;
    
    for (int i = 0; i < 9; i++)
        region[i] = texture(sampler, uv + kpos(i));

    // Create 3x3 region with 3 color channels (red, green, blue)
    mat3[3] mRegion;
    
    for (int i = 0; i < 3; i++)
        mRegion[i] = mat3(
        	region[0][i], region[1][i], region[2][i],
        	region[3][i], region[4][i], region[5][i],
        	region[6][i], region[7][i], region[8][i]
    	);
    
    return mRegion;
}

// Convolve a texture with kernel
// kernelÂ : kernel used for convolution
// samplerÂ : texture sampler
// uvÂ : current coordinates on sampler
vec3 convolution(mat3 kernel, sampler2D sampler, vec2 uv)
{
    vec3 fragment;
    
    // Extract a 3x3 region centered in uv
    mat3[3] region = region3x3(sampler, uv);
    
    // for each color channel of region
    for (int i = 0; i < 3; i++)
    {
        // get region channel
        mat3 rc = region[i];
        // component wise multiplication of kernel by region channel
        mat3 c = matrixCompMult(kernel, rc);
        // add each component of matrix
        float r = c[0][0] + c[1][0] + c[2][0]
                + c[0][1] + c[1][1] + c[2][1]
                + c[0][2] + c[1][2] + c[2][2];
        
        // for fragment at channel i, set result
        fragment[i] = r;
    }
    
    return fragment;    
}

void mainImage( out vec4 fragColor, in vec2 fragCoord )
{
    // Normalized pixel coordinates (from 0 to 1)
    vec2 uv = fragCoord/iResolution.xy;
    // Convolve kernel with texture
    vec3 col = convolution(emboss, iChannel0, uv);
    
    // Output to screen
    fragColor = vec4(col, 1.0);
}

References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ http://www.songho.ca/dsp/convolution/convolution2d_example.html


.mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Ludwig, Jamie (n.d.). Image Convolution (PDF). Portland State University.
Lecarme, Olivier; Delvare, Karine (January 2013). The Book of GIMP: A Complete Guide to Nearly Everything. No Starch Press. p.Â 429. ISBNÂ 978-1593273835.
Gumster, Jason van; Shimonski, Robert (March 2012). GIMP Bible. Wiley. pp.Â 438â442. ISBNÂ 978-0470523971.
Shapiro, Linda G.; Stockman, George C. (February 2001). Computer Vision. Prentice Hall. pp.Â 53â54. ISBNÂ 978-0130307965.
See also[edit]
Multidimensional discrete convolution
External links[edit]
Implementing 2d convolution on FPGA
vImage Programming Guide: Performing Convolution Operations
Image Processing using  2D-Convolution
GNU Image Manipulation Program - User Manual - 8.2. Convolution Matrix
GLSL Demonstration of 3x3 Convolution Kernels
Complete C++ open source project




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Kernel_(image_processing)&oldid=1065405772"
		Categories: Image processingFeature detection (computer vision)Hidden categories: Articles with example pseudocode
	
