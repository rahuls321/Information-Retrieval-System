
Title:
TypeScript
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}For the typed instance analogous to a handwritten document, see manuscript.
Programming language and superset of JavaScript


.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}TypeScriptParadigmMulti-paradigm: functional, generic, imperative, object-orientedDesignedÂ byMicrosoftDeveloperMicrosoftFirstÂ appeared1Â October 2012; 9 years agoÂ (2012-10-01)[1]Stable release4.5.4[2]Â 
   / 13 December 2021; 50 days agoÂ (13 December 2021)Preview release4.5[3]Â 
   / 1 October 2021; 4 months agoÂ (1 October 2021)
Typing disciplineDuck, gradual, structural[4]LicenseApache License 2.0Filename extensions.ts, .tsxWebsitewww.typescriptlang.orgInfluenced byC#, Java, JavaScriptInfluencedAtScript, AssemblyScript
TypeScript is a programming language developed and maintained by Microsoft. It is a strict syntactical superset of JavaScript and adds optional static typing to the language. TypeScript is designed for the development of large applications and transcompiles to JavaScript.[5] As TypeScript is a superset of JavaScript, existing JavaScript programs are also valid TypeScript programs.
TypeScript may be used to develop JavaScript applications for both client-side and server-side execution (as with Node.js or Deno). There are multiple options available for transcompilation. Either the default TypeScript Checker can be used,[6] or the Babel compiler can be invoked to convert TypeScript to JavaScript.
TypeScript supports definition files that can contain type information of existing JavaScript libraries, much like C++ header files can describe the structure of existing object files. This enables other programs to use the values defined in the files as if they were statically typed TypeScript entities. There are third-party header files for popular libraries such as jQuery, MongoDB, and D3.js. TypeScript headers for the Node.js basic modules are also available, allowing development of Node.js programs within TypeScript.[7]
The TypeScript compiler is itself written in TypeScript and compiled to JavaScript. It is licensed under the Apache License 2.0. TypeScript is included as a first-class programming language in Microsoft Visual Studio 2013 Update 2 and later, alongside C# and other Microsoft languages.[8] An official extension allows Visual Studio 2012 to support TypeScript as well.[9] Anders Hejlsberg, lead architect of C# and creator of Delphi and Turbo Pascal, has worked on the development of TypeScript.[10][11][12][13]

Contents

1 History
2 Design

2.1 ECMAScript 2015 support


3 Features

3.1 Compatibility with JavaScript
3.2 Type annotations

3.2.1 Declaration files


3.3 Classes
3.4 Generics
3.5 Modules and namespaces


4 Development tools

4.1 Compiler
4.2 IDE and editor support
4.3 Integration with build automation tools
4.4 Linting tools


5 Release history
6 See also
7 References

7.1 Citations
7.2 Sources


8 External links



History[edit]
TypeScript was first made public in October 2012 (at version 0.8), after two years of internal development at Microsoft.[14][15] Soon after the announcement, Miguel de Icaza praised the language itself, but criticized the lack of mature IDE support apart from Microsoft Visual Studio, which was not available on Linux and OS X at that time.[16][17] As of April 2021 there is support in other IDEs and text editors, including Emacs, Vim, Webstorm, Atom[18] and Microsoft's own Visual Studio Code.[19]
TypeScript 0.9, released in 2013, added support for generics.[20] TypeScript 1.0 was released at Microsoft's Build developer conference in 2014.[21] Visual Studio 2013 Update 2 provides built-in support for TypeScript.[22]
In July 2014, the development team announced a new TypeScript compiler, claiming 5Ã performance gains. Simultaneously, the source code, which was initially hosted on CodePlex, was moved to GitHub.[23]
On 22 September 2016, TypeScript 2.0 was released; it introduced several features, including the ability for programmers to optionally prevent variables from being assigned null values,[24] sometimes referred to as the billion-dollar mistake.
TypeScript 3.0 was released on 30 July 2018,[25] bringing many language additions like tuples in rest parameters and spread expressions, rest parameters with tuple types, generic rest parameters and so on.[26]
TypeScript 4.0 was released on 20 August 2020.[27] While 4.0 did not introduce any breaking changes, it added language features such as Custom JSX Factories and Variadic Tuple Types.[27]

Design[edit]
TypeScript originated from the shortcomings of JavaScript for the development of large-scale applications both at Microsoft and among their external customers.[28] Challenges with dealing with complex JavaScript code led to demand for custom tooling to ease developing of components in the language.[29]
TypeScript developers sought a solution that would not break compatibility with the standard and its cross-platform support. Knowing that the current ECMAScript standard proposal promised future support for class-based programming, TypeScript was based on that proposal. That led to a JavaScript compiler with a set of syntactical language extensions, a superset based on the proposal, that transforms the extensions into regular JavaScript. In this sense TypeScript was a preview of what to expect of ECMAScript 2015. A unique aspect not in the proposal, but added to TypeScript, is optional static typing[30] that enables static language analysis, which facilitates tooling and IDE support.

ECMAScript 2015 support[edit]
Main article: ECMAScript Â§Â 6th Edition - ECMAScript 2015
TypeScript adds support for features such as classes, modules, and an arrow function syntax as defined in the ECMAScript 2015 standard.

Features[edit]
TypeScript is a language extension that adds features to ECMAScript 6. Additional features include:

Type annotations and compile-time type checking
Type inference
Type erasure
Interfaces
Enumerated types
Generics
Namespaces
Tuples
Async/await
The following features are backported from ECMAScript 2015:

Classes
Modules[31]
Abbreviated "arrow" syntax for anonymous functions
Optional parameters and default parameters
Syntactically, TypeScript is very similar to JScript .NET, another Microsoft implementation of the ECMA-262 language standard that added support for static typing and classical object-oriented language features such as classes, inheritance, interfaces, and namespaces.

Compatibility with JavaScript[edit]
TypeScript is a strict superset of ECMAScript 2015, which is itself a superset of ECMAScript 5, commonly referred to as JavaScript.[32] As such, a JavaScript program is also a valid TypeScript program, and a TypeScript program can seamlessly consume JavaScript. By default the compiler targets ECMAScript 5, the current prevailing standard, but is also able to generate constructs used in ECMAScript 3 or 2015.
With TypeScript, it is possible to use existing JavaScript code, incorporate popular JavaScript libraries, and call TypeScript-generated code from other JavaScript.[33] Type declarations for these libraries are provided with the source code.

Type annotations[edit]
TypeScript provides static typing through type annotations to enable type checking at compile time. This is optional and can be ignored to use the regular dynamic typing of JavaScript.

function add(left: number, right: number): number {
	return left + right;
}

The annotations for the primitive types are number, boolean and string. 
Typescript also supports data types with following annotations Array, Enums, void.
Additional data types are: Tuple, Union, never and any.
An array with predefined data types at each index is Tuple type.
A variable that holds more than one type of data is Union type.
When you are sure that something is never going to occur you use never type.
Weakly- or dynamically-typed structures are of any type.[34]
Type annotations can be exported to a separate declarations file to make type information available for TypeScript scripts using types already compiled into JavaScript. Annotations can be declared for an existing JavaScript library, as has been done for Node.js and jQuery.
The TypeScript compiler makes use of type inference to infer types when types are not given. For example, the add method in the code above would be inferred as returning a number even if no return type annotation had been provided. This is based on the static types of left and right being numbers, and the compiler's knowledge that the result of adding two numbers is always a number. However, explicitly declaring the return type allows the compiler to verify correctness.
If no type can be inferred because of lack of declarations, then it defaults to the dynamic any type. A value of the any type supports the same operations as a value in JavaScript and minimal static type checking is performed for operations on any values.[35]

Declaration files[edit]
When a TypeScript script gets compiled there is an option to generate a declaration file (with the extension .d.ts) that functions as an interface to the components in the compiled JavaScript. In the process the compiler strips away all function and method bodies and preserves only the signatures of the types that are exported. The resulting declaration file can then be used to describe the exported virtual TypeScript types of a JavaScript library or module when a third-party developer consumes it from TypeScript.
The concept of declaration files is analogous to the concept of header file found in C/C++.

declare namespace arithmetics {
    add(left: number, right: number): number;
    subtract(left: number, right: number): number;
    multiply(left: number, right: number): number;
    divide(left: number, right: number): number;
}

Type declaration files can be written by hand for existing JavaScript libraries, as has been done for jQuery and Node.js.
Large collections of declaration files for popular JavaScript libraries are hosted on GitHub in DefinitelyTyped.

Classes[edit]
TypeScript supports ECMAScript 2015 classes that integrate the optional type annotations support.

class Person {
    private name: string;
    private age: number;
    private salary: number;

    constructor(name: string, age: number, salary: number) {
        this.name = name;
        this.age = age;
        this.salary = salary;
    }

    toString(): string {
        return `${this.name} (${this.age}) (${this.salary})`; // As of version 1.4
    }
}

Generics[edit]
TypeScript supports generic programming.[36] The following is an example of the identity function.[37]

function id<T>(x: T): T {
    return x;
}

Modules and namespaces[edit]
TypeScript distinguishes between modules and namespaces. Both features in TypeScript support encapsulation of classes, interfaces, functions and variables into containers. Namespaces (formerly internal modules) utilize immediately-invoked function expression of JavaScript to encapsulate code, whereas modules (formerly external modules) leverage JavaScript library patterns to do so (AMD or CommonJS).[38]

Development tools[edit]
Compiler[edit]
The TypeScript compiler, named tsc, is written in TypeScript. As a result, it can be compiled into regular JavaScript and can then be executed in any JavaScript engine (e.g. a browser). The compiler package comes bundled with a script host that can execute the compiler. It is also available as a Node.js package that uses Node.js as a host.
The current version of the compiler supports ECMAScript 5 by default. An option is allowed to target ECMAScript 2015 to make use of language features exclusive to that version (e.g. generators). Classes, despite being part of the ECMAScript 2015 standard, are available in both modes.

IDE and editor support[edit]
Microsoft provides a plug-in for Visual Studio 2012 and WebMatrix, full integrated support in Visual Studio 2013, Visual Studio 2015, and basic text editor support for Emacs and Vim.[39]
Visual Studio Code is a (mostly) open-source, cross-platform source code editor developed by Microsoft based on Electron. It supports TypeScript in addition to several other languages, and offers features like debugging and intelligent code completion.
alm.tools is an open source cloud IDE for TypeScript built using TypeScript, ReactJS and TypeStyle.
JetBrains supports TypeScript with code completion, refactoring and debugging in its IDEs built on IntelliJ platform, such as PhpStorm 6, WebStorm 6, and IntelliJ IDEA,[40] as well as their Visual Studio Add-in and extension, ReSharper 8.1.[41][42]
Atom has a TypeScript plugin with support for code completion, navigation, formatting, and fast compilation.[43]
The online Cloud9 IDE and Codenvy support TypeScript.
A plugin is available for the NetBeans IDE.
A plugin is available for the Eclipse IDE (version Kepler)
TypEcs is available for the Eclipse IDE.
The Cross Platform Cloud IDE Codeanywhere supports TypeScript.
Webclipse An Eclipse plugin designed to develop TypeScript and Angular 2.
Angular IDE A standalone IDE available via npm to develop TypeScript and Angular 2 applications, with integrated terminal support.
TideÂ â  TypeScript Interactive Development Environment for Emacs.
Integration with build automation tools[edit]
Using plug-ins, TypeScript can be integrated with build automation tools, including Grunt (grunt-ts[44]), Apache Maven (TypeScript Maven Plugin[45]), Gulp (gulp-typescript[46]) and Gradle (TypeScript Gradle Plugin[47]).

Linting tools[edit]
TSLint[48] scans TypeScript code for conformance to a set of standards and guidelines. ESLint, a standard JavaScript linter, also provided some support for TypeScript via community plugins. However, ESLint's inability to leverage TypeScript's language services precluded certain forms of semantic linting and program-wide analysis.[49] In early 2019, the TSLint team announced the linter's deprecation in favor of typescript-eslint, a joint effort of the TSLint, ESLint and TypeScript teams to consolidate linting under the ESLint umbrella for improved performance, community unity and developer accessibility.[50]

Release history[edit]



Version number

Release date

Significant changes


0.8

1Â OctoberÂ 2012Â (2012-10-01)




0.9

18Â JuneÂ 2013Â (2013-06-18)




1.0

12Â AprilÂ 2014Â (2014-04-12)




1.1

6Â OctoberÂ 2014Â (2014-10-06)

performance improvements


1.3

12Â NovemberÂ 2014Â (2014-11-12)

protected modifier, tuple types


1.4

20Â JanuaryÂ 2015Â (2015-01-20)

union types, let and const declarations, template strings, type guards, type aliases


1.5

20Â JulyÂ 2015Â (2015-07-20)

ES6 modules, namespace keyword, for..of support, decorators


1.6

16Â SeptemberÂ 2015Â (2015-09-16)

JSX support, intersection types, local type declarations, abstract classes and methods, user-defined type guard functions


1.7

30Â NovemberÂ 2015Â (2015-11-30)

async and await support,


1.8

22Â FebruaryÂ 2016Â (2016-02-22)

constraints generics, control flow analysis errors, string literal types, allowJs


2.0

22Â SeptemberÂ 2016Â (2016-09-22)

null- and undefined-aware types, control flow based type analysis, discriminated union types, never type, readonly keyword, type of this for functions


2.1

8Â NovemberÂ 2016Â (2016-11-08)

keyof and lookup types, mapped types, object spread and rest,


2.2

22Â FebruaryÂ 2017Â (2017-02-22)

mix-in classes, object type,


2.3

27Â AprilÂ 2017Â (2017-04-27)

async iteration, generic parameter defaults, strict option


2.4

27Â JuneÂ 2017Â (2017-06-27)

dynamic import expressions, string enums, improved inference for generics, strict contravariance for callback parameters


2.5

31Â AugustÂ 2017Â (2017-08-31)

optional catch clause variables


2.6

31Â OctoberÂ 2017Â (2017-10-31)

strict function types


2.7

31Â JanuaryÂ 2018Â (2018-01-31)

constant-named properties, fixed length tuples


2.8

27Â MarchÂ 2018Â (2018-03-27)

conditional types, improved keyof with intersection types


2.9

14Â MayÂ 2018Â (2018-05-14)

support for symbols and numeric literals in keyof and mapped object types


3.0

30Â JulyÂ 2018Â (2018-07-30)

project references, extracting and spreading parameter lists with tuples


3.1

27Â SeptemberÂ 2018Â (2018-09-27)

mappable tuple and array types


3.2

30Â NovemberÂ 2018Â (2018-11-30)

stricter checking for bind, call, and apply


3.3

31Â JanuaryÂ 2019Â (2019-01-31)

relaxed rules on methods of union types, incremental builds for composite projects


3.4

29Â MarchÂ 2019Â (2019-03-29)

faster incremental builds, type inference from generic functions, readonly modifier for arrays, const assertions, type-checking global this


3.5

29Â MayÂ 2019Â (2019-05-29)

faster incremental builds, omit helper type, improved excess property checks in union types, smarter union type checking


3.6

28Â AugustÂ 2019Â (2019-08-28)

Stricter generators, more accurate array spread, better unicode support for identifiers


3.7

5Â NovemberÂ 2019Â (2019-11-05)

Optional Chaining, Nullish Coalescing


3.8

20Â FebruaryÂ 2020Â (2020-02-20)

Type-only imports and exports, ECMAScript private fields, top-level await


3.9

12Â MayÂ 2020Â (2020-05-12)

Improvements in Inference, Speed Improvements


4.0

20Â AugustÂ 2020Â (2020-08-20)

Variadic Tuple Types, Labeled Tuple Elements


4.1

19Â NovemberÂ 2020Â (2020-11-19)

Template Literal Types, Key Remapping in Mapped Types, Recursive Conditional Types


4.2

25Â FebruaryÂ 2021Â (2021-02-25)

Smarter Type Alias Preservation, Leading/Middle Rest Elements in Tuple Types, Stricter Checks For The in Operator, abstract Construct Signatures


4.3

26 May 2021

Separate Write Types on Properties, override and the --noImplicitOverride Flag, Template String Type Improvements


4.4

26 August 2021

Control Flow Analysis of Aliased Conditions and Discriminants, Symbol and Template String Pattern Index Signatures


4.5

17 November 2021

Type and Promise Improvements, Supporting lib from node_modules, Template String Types as Discriminants, and es2022 module

See also[edit]
.mw-parser-output .portalbox{float:right;border:solid #aaa 1px;padding:0}.mw-parser-output .portalbox.tleft{margin:0.5em 1em 0.5em 0}.mw-parser-output .portalbox.tright{margin:0.5em 0 0.5em 1em}.mw-parser-output .portalbox>ul{display:table;box-sizing:border-box;padding:0.1em;max-width:175px;background:#f9f9f9;font-size:85%;line-height:110%;font-style:italic;font-weight:bold}.mw-parser-output .portalbox>ul>li{display:table-row}.mw-parser-output .portalbox>ul>li>span:first-child{display:table-cell;padding:0.2em;vertical-align:middle;text-align:center}.mw-parser-output .portalbox>ul>li>span:last-child{display:table-cell;padding:0.2em 0.2em 0.2em 0.3em;vertical-align:middle}

Free and open-source software portal
Dart
Kotlin
JS++
References[edit]
Citations[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}"TypeScript". CodePlex. Retrieved 26 April 2015.

^ https://github.com/microsoft/TypeScript/releases/tag/v4.5.4.

^ "TypeScript 4.5 Beta". 1 October 2021. Retrieved 27 October 2021.

^ "Type Compatibility". TypeScript. Retrieved 21 March 2018.

^ Bright, Peter (3 October 2012). "Microsoft TypeScript: the JavaScript we need, or a solution looking for a problem?". Ars Technica. CondÃ© Nast. Retrieved 26 April 2015.

^ "TypeScript Programming with Visual Studio Code". code.visualstudio.com. Retrieved 12 February 2019.

^ "borisyankov/DefinitelyTyped". GitHub. Retrieved 26 April 2015.

^ TypeScript Homepage, "Visual Studio includes TypeScript in the box, starting with Visual Studio 2013 Update 2"

^ TypeScript 1.0 Tools for Visual Studio 2012

^ Foley, Mary Jo (1 October 2012). "Microsoft takes the wraps off TypeScript, a superset of JavaScript". ZDNet. CBS Interactive. Retrieved 26 April 2015.

^ Somasegar, S. (1 October 2012). "Somasegar's blog". Microsoft. Retrieved 26 April 2015.

^ Baxter-Reynolds, Matt (1 October 2012). "Microsoft TypeScript: Can the father of C# save us from the tyranny of JavaScript?". ZDNet. Retrieved 26 April 2015.

^ Jackson, Joab (1 October 2012). "Microsoft Augments Javascript for Large-scale Development". CIO. IDG Enterprise. Retrieved 26 April 2015.

^ "Microsoft augments JavaScript for large-scale development". InfoWorld. IDG. 1 October 2012. Retrieved 26 April 2015.

^ Turner, Jonathan (2 April 2014). "Announcing TypeScript 1.0". TypeScript Language team blog. Microsoft. Retrieved 20 October 2021.

^ Miguel de Icaza (1 October 2012). "TypeScript: First Impressions". Retrieved 12 October 2012. But TypeScript only delivers half of the value in using a strongly typed language to Unix developers: strong typing. Intellisense, code completion and refactoring are tools that are only available to Visual Studio Professional users on Windows. There is no Eclipse, MonoDevelop or Emacs support for any of the language features

^ "Microsoft TypeScript: Can the father of C# save us from the tyranny of JavaScript?". ZDNet. 1 October 2012. Retrieved 12 October 2012. And I think this is a pretty big misstep. If you're building web apps that run on anything other than Windows, you're likely using a Mac and most likely not using Visual Studio. You need the Visual Studio plug-in to get the IntelliSense. All you get without Visual Studio is the strong-typing. You don't get the productivity benefits you get from IntelliSense..

^ "TypeStrong: The only TypeScript package you will ever need". GitHub. Retrieved 21 July 2016.

^ Hillar, GastÃ³n (14 May 2013). "Working with TypeScript in Visual Studio 2012". Dr. Dobb's Journal. Retrieved 26 April 2015.

^ "TypeScript 0.9 arrives with new compiler, support for generics". The Register. 18 June 2013. Retrieved 26 April 2015.

^ Hejlsberg, Anders (2 April 2014). "TypeScript". Channel 9. Microsoft. Retrieved 26 April 2015.

^ Jackson, Joab (25 February 2014). "Microsoft TypeScript graduates to Visual Studio". PC World. IDG. Retrieved 26 April 2015.

^ Turner, Jonathan (21 July 2014). "New Compiler and Moving to GitHub". TypeScript Language team blog. Microsoft. Retrieved 26 April 2015.

^ Bright, Peter (22 September 2016). "TypeScript, Microsoft's JavaScript for big applications, reaches version 2.0". Ars Technica. CondÃ© Nast. Retrieved 22 September 2016.

^ "Announcing TypeScript 3.0". 30 July 2018. Retrieved 16 March 2020.

^ "TypeScript 3.0". 30 July 2018. Retrieved 16 March 2020.

^ Jump up to: a b "Announcing TypeScript 4.0". TypeScript. 20 August 2020. Retrieved 30 October 2020.

^ Anders Hejlsberg (5 October 2012). "What is TypeScript and why with Anders Hejlsberg". www.hanselminutes.com. Retrieved 15 January 2014.

^ S. Somasegar (1 October 2012). "TypeScript: JavaScript Development at Application Scale". msdn.com. Retrieved 27 November 2013.

^ optional static typing is called gradual typing

^ Klint Finley (1 October 2012). "Microsoft Previews New JavaScript-Like Programming Language TypeScript". TechCrunch. Retrieved 27 November 2013.

^ "Angular 2". angular.io. Retrieved 4 May 2016.

^ "Welcome to TypeScript". typescriptlang.org. Microsoft. Retrieved 26 April 2015.

^ "TypeScript: Documentation - Everyday Types". www.typescriptlang.org/. Retrieved 30 March 2021.{{cite web}}:  CS1 maint: url-status (link)

^ TypeScript Language Specification p.24 Archived 17 November 2013 at the Wayback Machine

^ Turner, Jonathan (18 June 2013). "Announcing TypeScript 0.9". TypeScript Language team blog. Microsoft.

^ "Generics in Typescript". Microsoft.

^ SÃ¶nke Sothmann (31 January 2014). "An introduction to TypeScript's module system". blog.oio.de. Retrieved 21 February 2014.

^ Olivier Bloch (1 October 2012). "Sublime Text, Vi, Emacs: TypeScript enabled!". Microsoft. Retrieved 28 October 2012.

^ "TypeScript support in WebStorm 6". JetBrains.

^ "TypeScript support in ReSharper 8.1". JetBrains. 28 October 2013.

^ ReSharper: The Visual Studio Extension for .NET Developers by JetBrains

^ "atom-typescript". Atom. Retrieved 9 January 2020.

^ "TypeStrong/grunt-ts". GitHub. Retrieved 26 April 2015.

^ "ppedregal/typescript-maven-plugin". GitHub. Retrieved 26 April 2015.

^ "ivogabe/gulp-typescript". GitHub. Retrieved 14 July 2017.

^ "sothmann/typescript-gradle-plugin". GitHub. Retrieved 26 April 2015.

^ "TSLint".

^ Palantir (19 February 2019). "TSLint in 2019". Medium. Retrieved 24 April 2019.

^ "TSLint Deprecated to Focus Support on typescript-eslint". InfoQ. Retrieved 24 April 2019.


Sources[edit]
.mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li{margin-left:0;padding-left:3.2em;text-indent:-3.2em}.mw-parser-output .refbegin-hanging-indents ul,.mw-parser-output .refbegin-hanging-indents ul li{list-style:none}@media(max-width:720px){.mw-parser-output .refbegin-hanging-indents>ul>li{padding-left:1.6em;text-indent:-1.6em}}.mw-parser-output .refbegin-columns{margin-top:0.3em}.mw-parser-output .refbegin-columns ul{margin-top:0}.mw-parser-output .refbegin-columns li{page-break-inside:avoid;break-inside:avoid-column}
"WebclipseÂ : Eclipse Plugin" Genuitec. Retrieved 9 November 2016.
"Angular IDE by WebclipseÂ : Standalone IDE" Genuitec. Retrieved 9 November 2016.

External links[edit]
TypeScript project at GitHub
TypeScript Language Specification
CATS Cross Platform TypeScript Editor
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteProgramming languages
Comparison
Timeline
History

Ada
ALGOL
APL
Assembly
BASIC
C
C++
C#
COBOL
Erlang
Forth
Fortran
Go
Haskell
Java
JavaScript
Kotlin
Lisp
Lua
ML
Pascal
Perl
PHP
Prolog
Python
R
Ruby
Rust
SQL
Shell
Simula
Smalltalk
Swift
more...

 Category
 Lists: Alphabetical
Categorical
Generational
Non-English-based

vteJavaScriptCode analysis
ESLint
JSHint
JSLint
Supersets
JS++
Objective-J
TypeScript
Transpilers
AtScript
Babel
ClojureScript
CoffeeScript
Dart
Elm
Emscripten
Google Closure Compiler
Google Web Toolkit
Haxe
LiveScript
Morfik
Nim
Opa
PureScript
Reason
WebSharper
Concepts
Client-side
JavaScript library
JavaScript syntax
Debuggers
Chrome DevTools
Firefox Inspector
Komodo IDE
Microsoft Edge DevTools
Opera DevTools
Safari Web Inspector
Doc generators
JSDoc
Editors (comparison)
Ace
Cloud9 IDE
Atom
CodeMirror
Brackets
Light Table
PhpStorm
Orion
Visual Studio
Visual Studio Express
Visual Studio Code
Visual Studio Team Services
Vim
Engines
Comparison of engines
DOM support
List of ECMAScript engines
Frameworks
Comparison of JavaScript frameworks
List of JavaScript libraries
Related technologies
Ajax
AssemblyScript
asm.js
Cascading Style Sheets
Document Object Model
HTML
HTML5
JSON
WebAssembly
WebAuthn
Package managers
npm
Module bundlers
Webpack
Server-side
Active Server Pages
CommonJS
Deno
JSGI
Node.js
Wakanda
Unit testing frameworks (list)
Jasmine
Jest
Mocha
QUnit
People
Douglas Crockford
Brendan Eich
John Resig

vteMicrosoft APIs and frameworksGraphics
Desktop Window Manager
Direct2D
Direct3D
D3D (extensions)
GDI / GDI+
WPF
Silverlight
WinUI
Windows Color System
Windows Image Acquisition
Windows Imaging Component
DirectX Graphics Infrastructure (DXGI)
Windows Advanced Rasterization Platform
WinG
Audio
DirectMusic
DirectSound
DirectX plugin
XACT
Speech API
XAudio2
Multimedia
DirectX
Media Objects
Video Acceleration
Xinput
DirectInput
DirectShow
Image Mastering API
Managed DirectX
Media Foundation
XNA
Windows Media
Video for Windows
Web
MSHTML
RSS Platform
JScript
VBScript
BHO
XDR
SideBar Gadgets
TypeScript
Data access
Data Access Components (MDAC)
ADO
ADO.NET
ODBC
OLE DB
Extensible Storage Engine
Entity Framework
Sync Framework
Access Database Engine
MSXML
OPC
Networking
Winsock
LSP
Winsock Kernel
Filtering Platform
NDIS
Windows Rally
BITS
P2P API
MSMQ
MS MPI
DirectPlay
Communication
Messaging API
Telephony API
WCF
Administration andmanagement
Win32 console
Windows Script Host
WMI (extensions)
PowerShell
Task Scheduler
Offline Files
Shadow Copy
Windows Installer
Error Reporting
Event Log
Common Log File System
Component model
COM
COM+
ActiveX
Distributed Component Object Model
.NET Framework
Libraries
Framework Class Library
Microsoft Foundation Classes (MFC)
Active Template Library (ATL)
Windows Template Library (WTL)
Device drivers
WDM
WDF
KMDF
UMDF
WDDM
NDIS
UAA
BDA
VxD
Security
Crypto API
CAPICOM
Windows CardSpace
Data Protection API
Security Support Provider Interface (SSPI)
.NET
ASP.NET
ADO.NET
Remoting
Silverlight
TPL
WCF
WCS
WPF
WF
Software factories
EFx Factory
Enterprise Library
Composite UI
CCF
CSF
IPC
MSRPC
Dynamic Data Exchange (DDE)
Remoting
WCF
Accessibility
Active Accessibility
UI Automation
Text and multilingualsupport
DirectWrite
Text Services Framework
Text Object Model
Input method editor
Language Interface Pack
Multilingual User Interface
Uniscribe

vteMicrosoft free and open-source software (FOSS)Overview
Microsoft and open source
Shared Source Initiative
SoftwareApplications
Atom
Conference XP
Family.Show
File Manager
Open Live Writer
Microsoft PowerToys
Windows Calculator
Windows Console
Windows Package Manager
Windows Terminal
WorldWide Telescope
XML Notepad
Video games
Allegiance
Programminglanguages
Bosque
C#
Dafny
F#
F*
GW-BASIC
IronPython
IronRuby
Lean
P
Power Fx
PowerShell
Project Verona
Q#
R Open
Small Basic Online
TypeScript
Visual Basic
Frameworks anddevelopment tools
.NET
.NET Bio
.NET Framework
.NET Gadgeteer
.NET MAUI
.NET Micro Framework
AirSim
ASP.NET
ASP.NET AJAX
ASP.NET Core
ASP.NET MVC
ASP.NET Razor
ASP.NET Web Forms
Babylon.js
BitFunnel
Blazor
C++/WinRT
CCF
ChakraCore
CLR Profiler
Dapr
DeepSpeed
DiskSpd
Dryad
Dynamic Language Runtime
eBPF on Windows
Electron
Entity Framework
Fluent Design System
Fluid Framework
Infer.NET
LightGBM
Managed Extensibility Framework
Microsoft Automatic Graph Layout
Microsoft C++ Standard Library
Microsoft Cognitive Toolkit
Microsoft Detours
Microsoft Enterprise Library
Microsoft SEAL
Mimalloc
ML.NET
mod_mono
Mono
MonoDevelop
MSBuild
MsQuic
Neural Network Intelligence
npm
NuGet
OneFuzz
Open Management Infrastructure
Open Neural Network Exchange
Open Service Mesh
Open XML SDK
Orleans
ProcDump
ProcMon
Python Tools for Visual Studio
R Tools for Visual Studio
RecursiveExtractor
Roslyn
Sandcastle
SignalR
StyleCop
SVNBridge
T2 Temporal Prover
Text Template Transformation Toolkit
TLA+ Toolbox
U-Prove
vcpkg
Virtual File System for Git
Visual Studio Code
Voldemort
VoTT
Vowpal Wabbit
Windows App SDK
Windows Communication Foundation
Windows Driver Frameworks
KMDF
UMDF
Windows Forms
Windows Presentation Foundation
Windows Template Library
Windows UI Library
WinJS
WinObjC
WiX
XSP
xUnit.net
Z3 Theorem Prover
Operating systems
MS-DOS (v1.25 & v2.0)
Barrelfish
SONiC
CBL-Mariner
Other
ChronoZoom
Extensible Storage Engine
FlexWiki
FourQ
Gollum
Project Mu
ReactiveX
SILK
TLAPS
TPM 2.0 Reference Implementation
WikiBhasha
Licenses
Microsoft Public License
Microsoft Reciprocal License
Forges
CodePlex
GitHub
Related
.NET Foundation
F# Software Foundation
Microsoft Open Specification Promise
Open Letter to Hobbyists
Open Source Security Foundation
Outercurve Foundation
 Category
vteNode.jsPlatform
Node.js
NPM
V8
CommonJS
Frameworks
MEAN
MongoDB
Express.js
AngularJS/Angular
MEEN (substituted with Ember.js)
Backbone.js
Meteor
Sails.js (uses Express.js)
Next.js
Libraries
Lodash
Underscore.js
React.js
Vue.js
Languages
JavaScript
CoffeeScript
TypeScript

Authority control: National libraries  
United States





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=TypeScript&oldid=1067758134"
		Categories: TypeScript2012 softwareCross-platform softwareJavaScript programming language familyMicrosoft free softwareMicrosoft programming languagesObject-based programming languagesProgramming languages created in 2012Scripting languagesSoftware using the Apache licenseSource-to-source compilersStatically typed programming languagesHidden categories: CS1 maint: url-statusWebarchive template wayback linksArticles with short descriptionShort description is different from WikidataUse dmy dates from April 2020Articles with LCCN identifiers
	
