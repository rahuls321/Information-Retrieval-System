
Title:
Shortest path problem
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Computational problem of graph theory
This article includes a list of general references, but it remains largely unverified because it lacks sufficient corresponding inline citations. Please help to improve this article by introducing more precise citations.  (June 2009) (Learn how and when to remove this template message)
  Shortest path (A, C, E, D, F) between vertices A and F in the weighted directed graph
In graph theory, the shortest path problem is the problem of finding a path between two vertices (or nodes) in a graph such that the sum of the weights of its constituent edges is minimized.
The problem of finding the shortest path between two intersections on a road map may be modeled as a special case of the shortest path problem in graphs, where the vertices correspond to intersections and the edges correspond to road segments, each weighted by the length of the segment.

Contents

1 Definition
2 Algorithms
3 Single-source shortest paths

3.1 Undirected graphs
3.2 Unweighted graphs
3.3 Directed acyclic graphs (DAGs)
3.4 Directed graphs with nonnegative weights
3.5 Directed graphs with arbitrary weights without negative cycles
3.6 Directed graphs with arbitrary weights with negative cycles
3.7 Planar directed graphs with arbitrary weights


4 All-pairs shortest paths

4.1 Undirected graph
4.2 Directed graph


5 Applications

5.1 Road networks


6 Related problems

6.1 Strategic shortest-paths


7 Linear programming formulation
8 General algebraic framework on semirings: the algebraic path problem
9 Shortest path in stochastic time-dependent networks
10 See also
11 References

11.1 Notes
11.2 Bibliography


12 Further reading



Definition[edit]
The shortest path problem can be defined for graphs whether undirected, directed, or mixed.
It is defined here for undirected graphs; for directed graphs the definition of path
requires that consecutive vertices be connected by an appropriate directed edge.
Two vertices are adjacent when they are both incident to a common edge.
A path in an undirected graph is a sequence of vertices 
  
    
      
        P
        =
        (
        
          v
          
            1
          
        
        ,
        
          v
          
            2
          
        
        ,
        â¦
        ,
        
          v
          
            n
          
        
        )
        â
        V
        Ã
        V
        Ã
        â¯
        Ã
        V
      
    
    {\displaystyle P=(v_{1},v_{2},\ldots ,v_{n})\in V\times V\times \cdots \times V}
  

such that 
  
    
      
        
          v
          
            i
          
        
      
    
    {\displaystyle v_{i}}
  
 is adjacent to 
  
    
      
        
          v
          
            i
            +
            1
          
        
      
    
    {\displaystyle v_{i+1}}
  
 for 
  
    
      
        1
        â¤
        i
        <
        n
      
    
    {\displaystyle 1\leq i<n}
  
.
Such a path 
  
    
      
        P
      
    
    {\displaystyle P}
  
 is called a path of length 
  
    
      
        n
        â
        1
      
    
    {\displaystyle n-1}
  

from 
  
    
      
        
          v
          
            1
          
        
      
    
    {\displaystyle v_{1}}
  
 to 
  
    
      
        
          v
          
            n
          
        
      
    
    {\displaystyle v_{n}}
  
.
(The 
  
    
      
        
          v
          
            i
          
        
      
    
    {\displaystyle v_{i}}
  
 are variables; their numbering here relates to their position in the sequence and needs not to relate to any canonical labeling of the vertices.)
Let 
  
    
      
        
          e
          
            i
            ,
            j
          
        
      
    
    {\displaystyle e_{i,j}}
  
 be the edge incident to both 
  
    
      
        
          v
          
            i
          
        
      
    
    {\displaystyle v_{i}}
  
 and 
  
    
      
        
          v
          
            j
          
        
      
    
    {\displaystyle v_{j}}
  
. Given a real-valued weight function 
  
    
      
        f
        :
        E
        â
        
          R
        
      
    
    {\displaystyle f:E\rightarrow \mathbb {R} }
  
, and an undirected (simple) graph 
  
    
      
        G
      
    
    {\displaystyle G}
  
, the shortest path from 
  
    
      
        v
      
    
    {\displaystyle v}
  
 to 
  
    
      
        
          v
          â²
        
      
    
    {\displaystyle v'}
  
 is the path 
  
    
      
        P
        =
        (
        
          v
          
            1
          
        
        ,
        
          v
          
            2
          
        
        ,
        â¦
        ,
        
          v
          
            n
          
        
        )
      
    
    {\displaystyle P=(v_{1},v_{2},\ldots ,v_{n})}
  
 (where 
  
    
      
        
          v
          
            1
          
        
        =
        v
      
    
    {\displaystyle v_{1}=v}
  
 and 
  
    
      
        
          v
          
            n
          
        
        =
        
          v
          â²
        
      
    
    {\displaystyle v_{n}=v'}
  
) that over all possible 
  
    
      
        n
      
    
    {\displaystyle n}
  
 minimizes the sum 
  
    
      
        
          â
          
            i
            =
            1
          
          
            n
            â
            1
          
        
        f
        (
        
          e
          
            i
            ,
            i
            +
            1
          
        
        )
        .
      
    
    {\displaystyle \sum _{i=1}^{n-1}f(e_{i,i+1}).}
  
 When each edge in the graph has unit weight or 
  
    
      
        f
        :
        E
        â
        {
        1
        }
      
    
    {\displaystyle f:E\rightarrow \{1\}}
  
, this is equivalent to finding the path with fewest edges.
The problem is also sometimes called the single-pair shortest path problem, to distinguish it from the following variations:

The single-source shortest path problem, in which we have to find shortest paths from a source vertex v to all other vertices in the graph.
The single-destination shortest path problem, in which we have to find shortest paths from all vertices in the directed graph to a single destination vertex v. This can be reduced to the single-source shortest path problem by reversing the arcs in the directed graph.
The all-pairs shortest path problem, in which we have to find shortest paths between every pair of vertices v, v'  in the graph.
These generalizations have significantly more efficient algorithms than the simplistic approach of running a single-pair shortest path algorithm on all relevant pairs of vertices.

Algorithms[edit]
The most important algorithms for solving this problem are:

Dijkstra's algorithm solves the single-source shortest path problem with non-negative edge weight.
BellmanâFord algorithm solves the single-source problem if edge weights may be negative.
A* search algorithm solves for single-pair shortest path using heuristics to try to speed up the search.
FloydâWarshall algorithm solves all pairs shortest paths.
Johnson's algorithm solves all pairs shortest paths, and may be faster than FloydâWarshall on sparse graphs.
Viterbi algorithm solves the shortest stochastic path problem with an additional probabilistic weight on each node.
Additional algorithms and associated evaluations may be found in Cherkassky, Goldberg & Radzik (1996).

Single-source shortest paths[edit]
Undirected graphs[edit]


Weights
Time complexity
Author



  
    
      
        
          R
        
      
    
    {\displaystyle \mathbb {R} }
  
+
O(V2)
Dijkstra 1959



  
    
      
        
          R
        
      
    
    {\displaystyle \mathbb {R} }
  
+
O((EÂ +Â V)Â logÂ V)
Johnson 1977 (binary heap)



  
    
      
        
          R
        
      
    
    {\displaystyle \mathbb {R} }
  
+
O(EÂ +Â VÂ logÂ V)
Fredman & Tarjan 1984 (Fibonacci heap)



  
    
      
        
          N
        
      
    
    {\displaystyle \mathbb {N} }
  

O(E)
Thorup 1999 (requires constant-time multiplication)

Unweighted graphs[edit]


Algorithm
Time complexity
Author


Breadth-first search
O(EÂ +Â V)


Directed acyclic graphs (DAGs)[edit]
An algorithm using topological sorting can solve the single-source shortest path problem in time Î(E + V) in arbitrarily-weighted DAGs.[1]

Directed graphs with nonnegative weights[edit]
The following table is taken from Schrijver (2004), with some corrections and additions.
A green background indicates an asymptotically best bound in the table; L is the maximum length (or weight) among all edges, assuming integer edge weights.



Weights
Algorithm
Time complexity
Author



  
    
      
        
          R
        
      
    
    {\displaystyle \mathbb {R} }
  


O(V 2EL)
Ford 1956



  
    
      
        
          R
        
      
    
    {\displaystyle \mathbb {R} }
  

BellmanâFord algorithm
O(VE)
Shimbel 1955, Bellman 1958, Moore 1959



  
    
      
        
          R
        
      
    
    {\displaystyle \mathbb {R} }
  


O(V 2Â logÂ V)
Dantzig 1960



  
    
      
        
          R
        
      
    
    {\displaystyle \mathbb {R} }
  

Dijkstra's algorithm with list
O(V 2)
Leyzorek et al. 1957, Dijkstra 1959, Minty (see Pollack & Wiebenson 1960), Whiting & Hillier 1960



  
    
      
        
          R
        
      
    
    {\displaystyle \mathbb {R} }
  

Dijkstra's algorithm with binary heap
O((EÂ +Â V)Â logÂ V)
Johnson 1977



  
    
      
        
          R
        
      
    
    {\displaystyle \mathbb {R} }
  

Dijkstra's algorithm with Fibonacci heap
O(EÂ +Â VÂ logÂ V)
Fredman & Tarjan 1984, Fredman & Tarjan 1987



  
    
      
        
          N
        
      
    
    {\displaystyle \mathbb {N} }
  

Dial's algorithm[2] (Dijkstra's algorithm using a bucket queue with L buckets)
O(EÂ +Â LV)
Dial 1969





O(EÂ logÂ logÂ L)
Johnson 1981, Karlsson & Poblete 1983



Gabow's algorithm
O(EÂ logE/VÂ L)
Gabow 1983, Gabow 1985




O(EÂ +Â V âlog L)
Ahuja et al. 1990



Thorup
O(EÂ +Â VÂ logÂ logÂ V)
Thorup 2004

This list is incomplete; you can help by adding missing items.  (February 2011)
Directed graphs with arbitrary weights without negative cycles[edit]


Weights
Algorithm
Time complexity
Author



  
    
      
        
          R
        
      
    
    {\displaystyle \mathbb {R} }
  


O(V 2EL)
Ford 1956



  
    
      
        
          R
        
      
    
    {\displaystyle \mathbb {R} }
  

BellmanâFord algorithm
O(VE)
Shimbel 1955, Bellman 1958, Moore 1959



  
    
      
        
          R
        
      
    
    {\displaystyle \mathbb {R} }
  

Johnson-Dijkstra with binary heap
O(VÂ (EÂ +Â logÂ V))
Johnson 1977



  
    
      
        
          R
        
      
    
    {\displaystyle \mathbb {R} }
  

Johnson-Dijkstra with Fibonacci heap
O(VÂ (EÂ +Â logÂ V))
Fredman & Tarjan 1984, Fredman & Tarjan 1987, adapted after Johnson 1977



  
    
      
        
          N
        
      
    
    {\displaystyle \mathbb {N} }
  

Johnson's technique applied to Dial's algorithm[2]
O(VÂ (EÂ +Â L))
Dial 1969, adapted after Johnson 1977

This list is incomplete; you can help by adding missing items.  (December 2012)
Directed graphs with arbitrary weights with negative cycles[edit]
Finds a negative cycle or calculate distances to all vertices.



Weights
Algorithm
Time complexity
Author



  
    
      
        
          Z
        
      
    
    {\displaystyle \mathbb {Z} }
  

Andrew V. Goldberg
O(EâVlogN


Planar directed graphs with arbitrary weights[edit]
All-pairs shortest paths[edit]
The all-pairs shortest path problem finds the shortest paths between every pair of vertices v, v' in the graph.  The all-pairs shortest paths problem for unweighted directed graphs was introduced by Shimbel (1953), who observed that it could be solved by a linear number of matrix multiplications that takes a total time of O(V4).

Undirected graph[edit]


Weights
Time complexity
Algorithm



  
    
      
        
          R
        
      
    
    {\displaystyle \mathbb {R} }
  
+
O(V3)
FloydâWarshall algorithm



  
    
      
        {
        1
        ,
        â
        }
      
    
    {\displaystyle \{1,\infty \}}
  


  
    
      
        O
        (
        
          V
          
            Ï
          
        
        log
        â¡
        V
        )
      
    
    {\displaystyle O(V^{\omega }\log V)}
  

Seidel's algorithm (expected running time)



  
    
      
        
          N
        
      
    
    {\displaystyle \mathbb {N} }
  


  
    
      
        O
        (
        
          V
          
            3
          
        
        
          /
        
        
          2
          
            Î©
            (
            log
            â¡
            n
            
              )
              
                1
                
                  /
                
                2
              
            
          
        
        )
      
    
    {\displaystyle O(V^{3}/2^{\Omega (\log n)^{1/2}})}
  

Williams 2014



  
    
      
        
          R
        
      
    
    {\displaystyle \mathbb {R} }
  
+
O(EVÂ logÂ Î±(E,V))
Pettie & Ramachandran 2002



  
    
      
        
          N
        
      
    
    {\displaystyle \mathbb {N} }
  

O(EV)
Thorup 1999 applied to every vertex (requires constant-time multiplication).

Directed graph[edit]


Weights
Time complexity
Algorithm



  
    
      
        
          R
        
      
    
    {\displaystyle \mathbb {R} }
  
 (no negative cycles)
O(V3)
FloydâWarshall algorithm



  
    
      
        
          N
        
      
    
    {\displaystyle \mathbb {N} }
  


  
    
      
        O
        (
        
          V
          
            3
          
        
        
          /
        
        
          2
          
            Î©
            (
            log
            â¡
            n
            
              )
              
                1
                
                  /
                
                2
              
            
          
        
        )
      
    
    {\displaystyle O(V^{3}/2^{\Omega (\log n)^{1/2}})}
  

Williams 2014



  
    
      
        
          R
        
      
    
    {\displaystyle \mathbb {R} }
  
 (no negative cycles)
O(EVÂ +Â V2Â logÂ V)
JohnsonâDijkstra



  
    
      
        
          R
        
      
    
    {\displaystyle \mathbb {R} }
  
 (no negative cycles)
O(EVÂ +Â V2Â logÂ logÂ V)
Pettie 2004



  
    
      
        
          N
        
      
    
    {\displaystyle \mathbb {N} }
  

O(EVÂ +Â V2Â logÂ logÂ V)
Hagerup 2000

Applications[edit]
Shortest path algorithms are applied to automatically find directions between physical locations, such as driving directions on web mapping websites like MapQuest or Google Maps. For this application fast specialized algorithms are available.[3]
If one represents a nondeterministic abstract machine as a graph where vertices describe states and edges describe possible transitions, shortest path algorithms can be used to find an optimal sequence of choices to reach a certain goal state, or to establish lower bounds on the time needed to reach a given state. For example, if vertices represent the states of a puzzle like a Rubik's Cube and each directed edge corresponds to a single move or turn, shortest path algorithms can be used to find a solution that uses the minimum possible number of moves.
In a networking or telecommunications mindset, this shortest path problem is sometimes called the min-delay path problem and usually tied with a widest path problem. For example, the algorithm may seek the shortest (min-delay) widest path, or widest shortest (min-delay) path.
A more lighthearted application is the games of "six degrees of separation" that try to find the shortest path in graphs like movie stars appearing in the same film.
Other applications, often studied in operations research, include plant and facility layout, robotics, transportation, and VLSI design.[4]

Road networks[edit]
A road network can be considered as a graph with positive weights. The nodes represent road junctions and each edge of the graph is associated with a road segment between two junctions. The weight of an edge may correspond to the length of the associated road segment, the time needed to traverse the segment, or the cost of traversing the segment. Using directed edges it is also possible to model one-way streets. Such graphs are special in the sense that some edges are more important than others for long-distance travel (e.g. highways). This property has been formalized using the notion of highway dimension.[5] There are a great number of algorithms that exploit this property and are therefore able to compute the shortest path a lot quicker than would be possible on general graphs.
All of these algorithms work in two phases. In the first phase, the graph is preprocessed without knowing the source or target node. The second phase is the query phase. In this phase, source and target node are known. The idea is that the road network is static, so the preprocessing phase can be done once and used for a large number of queries on the same road network.
The algorithm with the fastest known query time is called hub labeling and is able to compute shortest path on the road networks of Europe or the US in a fraction of a microsecond.[6] Other techniques that have been used are:

ALT (A* search, landmarks, and triangle inequality)
Arc flags
Contraction hierarchies
Transit node routing
Reach-based pruning
Labeling
Hub labels
Related problems[edit]
For shortest path problems in computational geometry, see Euclidean shortest path.
The travelling salesman problem is the problem of finding the shortest path that goes through every vertex exactly once, and returns to the start.  Unlike the shortest path problem, which can be solved in polynomial time in graphs without negative cycles, the travelling salesman problem is NP-complete and, as such, is believed not to be efficiently solvable for large sets of data (see P = NP problem).  The problem of finding the longest path in a graph is also NP-complete.
The Canadian traveller problem and the stochastic shortest path problem are generalizations where either the graph isn't completely known to the mover, changes over time, or where actions (traversals) are probabilistic.
The shortest multiple disconnected path [7] is a representation of the primitive path network within the framework of Reptation theory.
The widest path problem seeks a path so that the minimum label of any edge is as large as possible.

Strategic shortest-paths[edit]
This section does not cite any sources. Please help improve this section by adding citations to reliable sources. Unsourced material may be challenged and removed.  (December 2015) (Learn how and when to remove this template message)
Sometimes, the edges in a graph have personalities: each edge has its own selfish interest. An example is a communication network, in which each edge is a computer that possibly belongs to a different person. Different computers have different transmission speeds, so every edge in the network has a numeric weight equal to the number of milliseconds it takes to transmit a message. Our goal is to send a message between two points in the network in the shortest time possible. If we know the transmission-time of each computer (the weight of each edge), then we can use a standard shortest-paths algorithm. If we do not know the transmission times, then we have to ask each computer to tell us its transmission-time. But, the computers may be selfish: a computer might tell us that its transmission time is very long, so that we will not bother it with our messages.  A possible solution to this problem is to use a variant of the VCG mechanism, which gives the computers an incentive to reveal their true weights.

Linear programming formulation[edit]
There is a natural linear programming formulation for the shortest path problem, given below. It is very simple compared to most other uses of linear programs in discrete optimization, however it illustrates connections to other concepts.
Given a directed graph (V, A) with source node s, target node t, and cost wij for each edge (i, j) in A, consider the program with variables xij

minimize 
  
    
      
        
          â
          
            i
            j
            â
            A
          
        
        
          w
          
            i
            j
          
        
        
          x
          
            i
            j
          
        
      
    
    {\displaystyle \sum _{ij\in A}w_{ij}x_{ij}}
  
 subject to 
  
    
      
        x
        â¥
        0
      
    
    {\displaystyle x\geq 0}
  
 and for all i, 
  
    
      
        
          â
          
            j
          
        
        
          x
          
            i
            j
          
        
        â
        
          â
          
            j
          
        
        
          x
          
            j
            i
          
        
        =
        
          
            {
            
              
                
                  1
                  ,
                
                
                  
                    ifÂ 
                  
                  i
                  =
                  s
                  ;
                
              
              
                
                  â
                  1
                  ,
                
                
                  
                    ifÂ 
                  
                  i
                  =
                  t
                  ;
                
              
              
                
                  0
                  ,
                
                
                  
                    Â otherwise.
                  
                
              
            
            
          
        
      
    
    {\displaystyle \sum _{j}x_{ij}-\sum _{j}x_{ji}={\begin{cases}1,&{\text{if }}i=s;\\-1,&{\text{if }}i=t;\\0,&{\text{ otherwise.}}\end{cases}}}
  

The intuition behind this is that 
  
    
      
        
          x
          
            i
            j
          
        
      
    
    {\displaystyle x_{ij}}
  
 is an indicator variable for whether edge (i, j) is part of the shortest path: 1 when it is, and 0 if it is not. We wish to select the set of edges with minimal weight, subject to the constraint that this set forms a path from s to t (represented by the equality constraint: for all vertices except s and t the number of incoming and outcoming edges that are part of the path must be the same (i.e., that it should be a path from s to t).
This LP has the special property that it is integral; more specifically, every basic optimal solution (when one exists) has all variables equal to 0 or 1, and the set of edges whose variables equal 1 form an s-t dipath. See Ahuja et al.[8] for one proof, although the origin of this approach dates back to mid-20th century.
The dual for this linear program is

maximize yt â ys subject to for all ij, yj â yi â¤ wij
and feasible duals correspond to the concept of a consistent heuristic for the A* algorithm for shortest paths. For any feasible dual y the reduced costs 
  
    
      
        
          w
          
            i
            j
          
          â²
        
        =
        
          w
          
            i
            j
          
        
        â
        
          y
          
            j
          
        
        +
        
          y
          
            i
          
        
      
    
    {\displaystyle w'_{ij}=w_{ij}-y_{j}+y_{i}}
  
 are nonnegative and A* essentially runs Dijkstra's algorithm on these reduced costs.

General algebraic framework on semirings: the algebraic path problem[edit]
This section needs expansion. You can help by adding to it.  (August 2014)
Many problems can be framed as a form of the shortest path for some suitably substituted notions of addition along a path and taking the minimum.  The general approach to these is to consider the two operations to be those of a semiring. Semiring multiplication is done along the path, and the addition is between paths. This general framework is known as the algebraic path problem.[9][10][11]
Most of the classic shortest-path algorithms (and new ones) can be formulated as solving linear systems over such algebraic structures.[12]
More recently, an even more general framework for solving these (and much less obviously related problems) has been developed under the banner of valuation algebras.[13]

Shortest path in stochastic time-dependent networks[edit]
In real-life situations, the transportation network is usually stochastic and time-dependent. In fact, a traveler traversing a link daily may experiences different travel times on that link due not only to the fluctuations in travel demand (origin-destination matrix) but also due to such incidents as work zones, bad weather conditions, accidents and vehicle breakdowns. As a result, a stochastic time-dependent (STD) network is a more realistic representation of an actual road network compared with the deterministic one.[14][15]
Despite considerable progress during the course of the past decade, it remains a controversial question how an optimal path should be defined and identified in stochastic road networks. In other words, there is no unique definition of an optimal path under uncertainty. One possible and common answer to this question is to find a path with the minimum expected travel time. The main advantage of using this approach is that efficient shortest path algorithms introduced for the deterministic networks can be readily employed to identify the path with the minimum expected travel time in a stochastic network. However, the resulting optimal path identified by this approach may not be reliable, because this approach fails to address travel time variability. To tackle this issue some researchers use distribution of travel time instead of expected value of it so they find the probability distribution of total travelling time using different optimization methods such as dynamic programming and Dijkstra's algorithm .[16] These methods use stochastic optimization, specifically stochastic dynamic programming to find the shortest path in networks with probabilistic arc length.[17] The concept of travel time reliability is used interchangeably with travel time variability in the transportation research literature, so that, in general, one can say that the higher the variability in travel time, the lower the reliability would be, and vice versa.
In order to account for travel time reliability more accurately, two common alternative definitions for an optimal path under uncertainty have been suggested. Some have introduced the concept of the most reliable path, aiming to maximize the probability of arriving on time or earlier than a given travel time budget. Others, alternatively, have put forward the concept of an Î±-reliable path based on which they intended to minimize the travel time budget required to ensure a pre-specified on-time arrival probability.

See also[edit]
Bidirectional search, an algorithm that finds the shortest path between two vertices on a directed graph
Euclidean shortest path
Flow network
K shortest path routing
Min-plus matrix multiplication
Pathfinding
Shortest Path Bridging
Shortest path tree
TRILL (TRansparent Interconnection of Lots of Links)
References[edit]
Notes[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ Cormen et al. 2001, p.Â 655 harvnb error: no target: CITEREFCormenLeisersonRivestStein2001 (help)

^ Jump up to: a b .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Dial, Robert B. (1969), "Algorithm 360: Shortest-Path Forest with Topological Ordering [H]", Communications of the ACM, 12 (11): 632â633, doi:10.1145/363269.363610, S2CIDÂ 6754003

^ Sanders, Peter (March 23, 2009). "Fast route planning". Google Tech Talk. Archived from the original on 2021-12-11. {{cite journal}}: Cite journal requires |journal= (help)

^ Chen, Danny Z. (December 1996). "Developing algorithms and software for geometric path planning problems". ACM Computing Surveys. 28 (4es). Article 18. doi:10.1145/242224.242246. S2CIDÂ 11761485.

^ Abraham, Ittai; Fiat, Amos; Goldberg, Andrew V.; Werneck, Renato F. "Highway Dimension, Shortest Paths, and Provably Efficient Algorithms". ACM-SIAM Symposium on Discrete Algorithms, pages 782â793, 2010.

^ Abraham, Ittai; Delling, Daniel; Goldberg, Andrew V.; Werneck, Renato F. research.microsoft.com/pubs/142356/HL-TR.pdf "A Hub-Based Labeling Algorithm for Shortest Paths on Road Networks". Symposium on Experimental Algorithms, pages 230â241, 2011.

^ Kroger, Martin (2005). "Shortest multiple disconnected path for the analysis of entanglements in two- and three-dimensional polymeric systems". Computer Physics Communications. 168 (3): 209â232. Bibcode:2005CoPhC.168..209K. doi:10.1016/j.cpc.2005.01.020.

^ Ahuja, Ravindra K.; Magnanti, Thomas L.; Orlin, James B. (1993). Network Flows: Theory, Algorithms and Applications. Prentice Hall. ISBNÂ 978-0-13-617549-0.

^ Pair, Claude (1967), "Sur des algorithmes pour des problÃ¨mes de cheminement dans les graphes finis (On algorithms for path problems in finite graphs)",  in Rosentiehl (ed.), ThÃ©orie des graphes (journÃ©es internationales d'Ã©tudes) -- Theory of Graphs (international symposium), Rome (Italy), July 1966: Dunod (Paris) et Gordon and Breach (New York), p.Â 271{{citation}}:  CS1 maint: location (link)

^ Derniame, Jean Claude; Pair, Claude (1971), ProblÃ¨mes de cheminement dans les graphes (Path Problems in Graphs), Dunod (Paris)

^ Baras, John; Theodorakopoulos, George (4 April 2010). Path Problems in Networks. Morgan & Claypool Publishers. pp.Â 9â. ISBNÂ 978-1-59829-924-3.

^ Gondran, Michel; Minoux, Michel (2008). Graphs, Dioids and Semirings: New Models and Algorithms. Springer Science & Business Media. chapter 4. ISBNÂ 978-0-387-75450-5.

^ Pouly, Marc; Kohlas, JÃ¼rg (2011). Generic Inference: A Unifying Theory for Automated Reasoning. John Wiley & Sons. Chapter 6. Valuation Algebras for Path Problems. ISBNÂ 978-1-118-01086-0.

^ Loui, R.P., 1983. Optimal paths in graphs with stochastic or multidimensional weights. Communications of the ACM, 26(9), pp.670-676.

^ Rajabi-Bahaabadi, Mojtaba; Shariat-Mohaymany, Afshin; Babaei, Mohsen; Ahn, Chang Wook (2015). "Multi-objective path finding in stochastic time-dependent road networks using non-dominated sorting genetic algorithm". Expert Systems with Applications. 42 (12): 5056â5064. doi:10.1016/j.eswa.2015.02.046.

^ Olya, Mohammad Hessam (2014). "Finding shortest path in a combined exponential â gamma probability distribution arc length". International Journal of Operational Research. 21 (1): 25â37. doi:10.1504/IJOR.2014.064020.

^ Olya, Mohammad Hessam (2014). "Applying Dijkstra's algorithm for general shortest path problem with normal probability distribution arc length". International Journal of Operational Research. 21 (2): 143â154. doi:10.1504/IJOR.2014.064541.


Bibliography[edit]
.mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li{margin-left:0;padding-left:3.2em;text-indent:-3.2em}.mw-parser-output .refbegin-hanging-indents ul,.mw-parser-output .refbegin-hanging-indents ul li{list-style:none}@media(max-width:720px){.mw-parser-output .refbegin-hanging-indents>ul>li{padding-left:1.6em;text-indent:-1.6em}}.mw-parser-output .refbegin-columns{margin-top:0.3em}.mw-parser-output .refbegin-columns ul{margin-top:0}.mw-parser-output .refbegin-columns li{page-break-inside:avoid;break-inside:avoid-column}
Ahuja, Ravindra K.; Mehlhorn, Kurt; Orlin, James; Tarjan, Robert E. (April 1990). "Faster algorithms for the shortest path problem". Journal of the ACM. ACM. 37 (2): 213â223. doi:10.1145/77600.77615. hdl:1721.1/47994. S2CIDÂ 5499589.
Bellman, Richard (1958). "On a routing problem". Quarterly of Applied Mathematics. 16: 87â90. doi:10.1090/qam/102435. MRÂ 0102435.
Cherkassky, Boris V.; Goldberg, Andrew V.; Radzik, Tomasz (1996). "Shortest paths algorithms: theory and experimental evaluation". Mathematical Programming. Ser. A. 73 (2): 129â174. doi:10.1016/0025-5610(95)00021-6. MRÂ 1392160.
Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; Stein, Clifford (2001) [1990]. "Single-Source Shortest Paths and All-Pairs Shortest Paths". Introduction to Algorithms (2ndÂ ed.). MIT Press and McGraw-Hill. pp.Â 580â642. ISBNÂ 0-262-03293-7.
Dantzig, G. B. (January 1960). "On the Shortest Route through a Network". Management Science. 6 (2): 187â190. doi:10.1287/mnsc.6.2.187.
Derniame, Jean Claude; Pair, Claude (1971), ProblÃ¨mes de cheminement dans les graphes (Path Problems in Graphs), Dunod (Paris)
Dijkstra, E. W. (1959). "A note on two problems in connexion with graphs". Numerische Mathematik. 1: 269â271. doi:10.1007/BF01386390. S2CIDÂ 123284777.
Ford, L. R. (1956). "Network Flow Theory". Rand Corporation. P-923. {{cite journal}}: Cite journal requires |journal= (help)
Fredman, Michael Lawrence; Tarjan, Robert E. (1984). Fibonacci heaps and their uses in improved network optimization algorithms. 25th Annual Symposium on Foundations of Computer Science. IEEE. pp.Â 338â346. doi:10.1109/SFCS.1984.715934. ISBNÂ 0-8186-0591-X.
Fredman, Michael Lawrence; Tarjan, Robert E. (1987). "Fibonacci heaps and their uses in improved network optimization algorithms". Journal of the Association for Computing Machinery. 34 (3): 596â615. doi:10.1145/28869.28874. S2CIDÂ 7904683.
Gabow, H. N. (1983). "Scaling algorithms for network problems". Proceedings of the 24th Annual Symposium on Foundations of Computer Science (FOCS 1983) (PDF). pp.Â 248â258. doi:10.1109/SFCS.1983.68.
Gabow, Harold N. (1985). "Scaling algorithms for network problems". Journal of Computer and System Sciences. 31 (2): 148â168. doi:10.1016/0022-0000(85)90039-X. MRÂ 0828519.
Hagerup, Torben (2000).  Montanari, Ugo; Rolim, JosÃ© D. P.; Welzl, Emo (eds.). Improved Shortest Paths on the Word RAM. Proceedings of the 27th International Colloquium on Automata, Languages and Programming. pp.Â 61â72. ISBNÂ 978-3-540-67715-4.
Johnson, Donald B. (1977). "Efficient algorithms for shortest paths in sparse networks". Journal of the ACM. 24 (1): 1â13. doi:10.1145/321992.321993. S2CIDÂ 207678246.
AltÄ±ntaÅ, GÃ¶khan (2020). Exact Solutions of Shortest-Path Problems Based on Mechanical Analogies: In Connection with Labyrinths. Amazon Digital Services LLC. p.Â 97. ISBNÂ 9798655831896.
Johnson, Donald B. (December 1981). "A priority queue in which initialization and queue operations take O(log log D) time". Mathematical Systems Theory. 15 (1): 295â309. doi:10.1007/BF01786986. MRÂ 0683047. S2CIDÂ 35703411.
Karlsson, Rolf G.; Poblete, Patricio V. (1983). "An O(m log log D) algorithm for shortest paths". Discrete Applied Mathematics. 6 (1): 91â93. doi:10.1016/0166-218X(83)90104-X. MRÂ 0700028.
Leyzorek, M.; Gray, R. S.; Johnson, A. A.; Ladew, W. C.; Meaker, S. R., Jr.; Petry, R. M.; Seitz, R. N. (1957). Investigation of Model Techniques â First Annual Report â 6 June 1956 â 1 July 1957 â A Study of Model Techniques for Communication Systems. Cleveland, Ohio: Case Institute of Technology.
Moore, E. F. (1959). "The shortest path through a maze". Proceedings of an International Symposium on the Theory of Switching (Cambridge, Massachusetts, 2â5 April 1957). Cambridge: Harvard University Press. pp.Â 285â292.
Pettie, Seth; Ramachandran, Vijaya (2002). Computing shortest paths with comparisons and additions. Proceedings of the Thirteenth Annual ACM-SIAM Symposium on Discrete Algorithms. pp.Â 267â276. ISBNÂ 978-0-89871-513-2.
Pettie, Seth (26 January 2004). "A new approach to all-pairs shortest paths on real-weighted graphs". Theoretical Computer Science. 312 (1): 47â74. doi:10.1016/s0304-3975(03)00402-x.
Pollack, Maurice; Wiebenson, Walter (MarchâApril 1960). "Solution of the Shortest-Route ProblemâA Review". Oper. Res. 8 (2): 224â230. doi:10.1287/opre.8.2.224.  Attributes Dijkstra's algorithm to Minty ("private communication") on p.Â 225.
Schrijver, Alexander (2004). Combinatorial Optimization â Polyhedra and Efficiency. Algorithms and Combinatorics. Vol.Â 24. Springer. ISBNÂ 978-3-540-20456-5. Here: vol.A, sect.7.5b, p.Â 103
Shimbel, Alfonso (1953). "Structural parameters of communication networks". Bulletin of Mathematical Biophysics. 15 (4): 501â507. doi:10.1007/BF02476438.
Shimbel, A. (1955). Structure in communication nets. Proceedings of the Symposium on Information Networks. New York, NY: Polytechnic Press of the Polytechnic Institute of Brooklyn. pp.Â 199â203.
Thorup, Mikkel (1999). "Undirected single-source shortest paths with positive integer weights in linear time". Journal of the ACM. 46 (3): 362â394. doi:10.1145/316542.316548. S2CIDÂ 207654795.
Thorup, Mikkel (2004). "Integer priority queues with decrease key in constant time and the single source shortest paths problem". Journal of Computer and System Sciences. 69 (3): 330â353. doi:10.1016/j.jcss.2004.04.003.
Whiting, P. D.; Hillier, J. A. (MarchâJune 1960). "A Method for Finding the Shortest Route through a Road Network". Operational Research Quarterly. 11 (1/2): 37â40. doi:10.1057/jors.1960.32.
Williams, Ryan (2014). "Faster all-pairs shortest paths via circuit complexity". Proceedings of the 46th Annual ACM Symposium on Theory of Computing (STOC '14). New York: ACM. pp.Â 664â673. arXiv:1312.6680. doi:10.1145/2591796.2591811. MRÂ 3238994.

Further reading[edit]
Frigioni, D.; Marchetti-Spaccamela, A.; Nanni, U. (1998). "Fully dynamic output bounded single source shortest path problem". Proc. 7th Annu. ACM-SIAM Symp. Discrete Algorithms. Atlanta, GA. pp.Â 212â221. CiteSeerXÂ 10.1.1.32.9856.
Dreyfus, S. E. (October 1967). An Appraisal of Some Shortest Path Algorithms (PDF) (Report). Project Rand. United States Air Force. RM-5433-PR. DTIC AD-661265.
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}Authority control 
Integrated Authority File (Germany)





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Shortest_path_problem&oldid=1065830308"
		Categories: Network theoryGraph distancePolynomial-time problemsComputational problems in graph theoryEdsger W. DijkstraHidden categories: Harv and Sfn no-target errorsCS1 errors: missing periodicalCS1 maint: locationArticles with short descriptionShort description is different from WikidataArticles lacking in-text citations from June 2009All articles lacking in-text citationsArticles using small message boxesIncomplete lists from February 2011Incomplete lists from December 2012Articles needing additional references from December 2015All articles needing additional referencesArticles to be expanded from August 2014All articles to be expandedArticles with GND identifiers
	
