
Title:
Fourth-generation programming language
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Group of computer programming languages
A fourth-generation programming language (4GL) is any computer programming language that belongs to a class of languages envisioned as an advancement upon third-generation programming languages (3GL). Each of the programming language generations aims to provide a higher level of abstraction of the internal computer hardware details, making the language more programmer-friendly, powerful, and versatile.  While the definition of 4GL has changed over time, it can be typified by operating more with large collections of information at once rather than focusing on just bits and bytes.  Languages claimed to be 4GL may include support for database management, report generation, mathematical optimization, GUI development, or web development. Some researchers state that 4GLs are a subset of domain-specific languages.[1][2]
The concept of 4GL was developed from the 1970s through the 1990s, overlapping most of the development of 3GL, with 4GLs identified as "non-procedural" or "program-generating" languages, contrasted with 3GLs being algorithmic or procedural languages. While 3GLs like C, C++, C#, Java, and JavaScript remain popular for a wide variety of uses, 4GLs as originally defined found uses focused on databases, reports, and websites.[3] Some advanced 3GLs like Python, Ruby, and Perl combine some 4GL abilities within a general-purpose 3GL environment,[4] and libraries with 4GL-like features have been developed as add-ons for most popular 3GLs, producing languages that are a mix of 3GL and 4GL, blurring the distinction.[5]
In the 1980s and 1990s, there were efforts to develop fifth-generation programming languages (5GL).

Contents

1 History
2 Types
3 Low code environments
4 Examples

4.1 General use / versatile
4.2 Database query languages
4.3 Report generators
4.4 Data manipulation, analysis, and reporting languages
4.5 Software creators
4.6 Mathematical optimization
4.7 Database-driven GUI application development
4.8 Low code / No code development platforms[12][13]
4.9 Screen painters and generators
4.10 Web development languages


5 See also
6 References



History[edit]
Though used earlier in papers and discussions, the term 4GL was first used formally by James Martin in his 1981 book Applications Development Without Programmers[6]  to refer to non-procedural, high-level specification languages. In some primitive way, early 4GLs were included in the Informatics MARK-IV (1967) product and Sperry's MAPPER (1969 internal use, 1979 release).
The motivations for the '4GL' inception and continued interest are several. The term can apply to a large set of software products. It can also apply to an approach that looks for greater semantic properties and implementation power. Just as the 3GL offered greater power to the programmer, so too did the 4GL open up the development environment to a wider population.
The early input scheme for the 4GL supported entry of data within the 72-character limit of the punched card (8 bytes used for sequencing) where a card's tag would identify the type or function. With judicious use of a few cards, the 4GL deck could offer a wide variety of processing and reporting capability whereas the equivalent functionality coded in a 3GL could subsume, perhaps, a whole box or more of cards.[7]
The 72-character format continued for a while as hardware progressed to larger memory and terminal interfaces. Even with its limitations, this approach supported highly sophisticated applications.
As interfaces improved and allowed longer statement lengths and grammar-driven input handling, greater power ensued. An example of this is described on the Nomad page.

Another example of Nomad's power is illustrated by Nicholas Rawlings in his comments for the Computer History Museum about NCSS (see citation below). He reports that James Martin asked Rawlings for a Nomad solution to a standard problem Martin called the Engineer's Problem: "give 6% raises to engineers whose job ratings had an average of 7 or better." Martin provided a "dozen pages of COBOL, and then just a page or two of Mark IV, from Informatics." Rawlings offered the following single statement, performing a set-at-a-time operation...
The development of the 4GL was influenced by several factors, with the hardware and operating system constraints having a large weight. When the 4GL was first introduced, a disparate mix of hardware and operating systems mandated custom application development support that was specific to the system in order to ensure sales. One example is the MAPPER system developed by Sperry. Though it has roots back to the beginning, the system has proven successful in many applications and has been ported to modern platforms. The latest variant is embedded in the BIS[8]  offering of Unisys. MARK-IV is now known as VISION:BUILDER and is offered by Computer Associates.
Santa Fe railroad used MAPPER to develop a system, in a project that was an early example of 4GL, rapid prototyping, and programming by users.[9] The idea was that it was easier to teach railroad experts to use MAPPER than to teach programmers the "intricacies of railroad operations".[10]
One of the early (and portable) languages that had 4GL properties was Ramis developed by Gerald C. Cohen at Mathematica, a mathematical software company.  Cohen left Mathematica and founded Information Builders to create a similar reporting-oriented 4GL, called FOCUS.
Later 4GL types are tied to a database system and are far different from the earlier types in their use of techniques and resources that have resulted from the general improvement of computing with time.
An interesting twist to the 4GL scene is realization that graphical interfaces and the related reasoning done by the user form a 'language' that is poorly understood.

Types[edit]
A number of different types of 4GLs exist:

Table-driven (codeless) programming, usually running with a runtime framework and libraries. Instead of using code, the developer defines their logic by selecting an operation in a pre-defined list of memory or data table manipulation commands. In other words, instead of coding, the developer uses table-driven algorithm programming (see also control tables that can be used for this purpose). A good example of this type of 4GL language is PowerBuilder. These types of tools can be used for business application development usually consisting in a package allowing for both business data manipulation and reporting, therefore they come with GUI screens and report editors. They usually offer integration with lower level DLLs generated from a typical 3GL for when the need arise for more hardware/OS specific operations.
Report-generator programming languages take a description of the data format and the report to generate and from that they either generate the required report directly or they generate a program to generate the report. See also RPG
Similarly, forms generators manage online interactions with the application system users or generate programs to do so.
More ambitious 4GLs (sometimes termed fourth generation environments) attempt to automatically generate whole systems from the outputs of CASE tools, specifications of screens and reports, and possibly also the specification of some additional processing logic.
Data management 4GLs such as SAS, SPSS, and Stata provide sophisticated coding commands for data manipulation, file reshaping, case selection, and data documentation in the preparation of data for statistical analysis and reporting.
So-called "XTalk" languages, developed initially with Apple's Hypercard in 1987. Hypercard was the progenitor of more modern and powerful programs such as SuperCard, Toolbook and LiveCode.
Some 4GLs have integrated tools that allow for the easy specification of all the required information:

James Martin's version of data engineering systems development methodology was automated to allow the input of the results of system analysis and design in the form of data flow diagrams, entity relationship diagrams, entity life history diagrams etc., from which hundreds of thousands of lines of COBOL would be generated overnight.
More recently Oracle Corporation's Oracle Designer and Oracle Developer Suite 4GL products could be integrated to produce database definitions and the forms and reports programs.
Low code environments[edit]
In the twenty-first century, 4GL systems have emerged as "low code" environments or platforms for the problem of rapid application development in short periods of time. Vendors often provide sample systems such as CRM, contract management, bug tracking from which development can occur with little programming.[11]

Examples[edit]
General use / versatile[edit]
.mw-parser-output .div-col{margin-top:0.3em;column-width:30em}.mw-parser-output .div-col-small{font-size:90%}.mw-parser-output .div-col-rules{column-rule:1px solid #aaa}.mw-parser-output .div-col dl,.mw-parser-output .div-col ol,.mw-parser-output .div-col ul{margin-top:0}.mw-parser-output .div-col li,.mw-parser-output .div-col dd{page-break-inside:avoid;break-inside:avoid-column}
Accelerator (Productivity)
Accell/SQL (4GL) from Unify Corporation.
Broadcom 2e Formerly Synon 4GL RPG/COBOL Generator
CA-Telon 4GL Cobol/PLI generator
Clarion
Clipper
Cognos PowerHouse 4GL
DataFlex
FOCUS
FortÃ© TOOL (transactional object-oriented language)
GeneXus
Harbour
IBM Rational EGL (Enterprise Generation Language)
LabVIEW
LANSA
LINC
LiveCode
M-Power
NATURAL
Omnis Studio SDK
Oracle Application Development Framework
OutSystems (Productivity/PaaS)
PowerBuilder
SheerPower4GL (Microsoft Windows only)
SQLWindows/Team Developer
Uniface
Unix Shell
DataFlex (Microsoft Windows, web, mobile)
Visual FoxPro
XBase++
Xojo

Database query languages[edit]
FOCUS
4D QL
Informix-4GL
NATURAL
OpenEdge ABL
OpenROAD (Ingres 4GL)
Ramis
SQL
Report generators[edit]
LINC
Oracle Reports
Progress 4GL Query/Results
RPG-II
Extract data from files or database to create reports in a wide range of formats is done by the report generator tools.

Data manipulation, analysis, and reporting languages[edit]

Ab Initio
ABAP
Audit Command Language
Clarion Programming Language
CorVision
Culprit
ADS/Online (plus transaction processing)
Easytrieve
FOCUS
GraphTalk
IDL
IGOR Pro
Informix-4GL
JSL
Judoscript
LANSA
M-Power
LabVIEW
LiveCode
MANTIS
MAPPER (Unisys/Sperry) now part of BIS
MARK-IV (Sterling/Informatics) now VISION:BUILDER of CA
Simulink a component of MATLAB
NATURAL
Nomad
Octave
PL/SQL
Progress 4GL
R
Ramis
S
Scilab
SAS
SPSS
SQL PL
SQR
Stata
Synon
Wolfram Language
XBase++
XQuery
XSLT

Software creators[edit]

4th Dimension (Software)
LiveCode
MATLAB's GUIDE
Omnis Studio
OpenROAD
Progress 4GL AppBuilder
SuperTalk
Visual DataFlex
Xojo
XUL Can be used with XQuery

Mathematical optimization[edit]
AIMMS
AMPL
GAMS
MathProg
MATLAB
Mathematica
Database-driven GUI application development[edit]
C/AL
Genexus
SB+/SystemBuilder
Unify VISION
Low code / No code development platforms[12][13][edit]

1C:Enterprise programming language
Appcelerator
Appian
Bizagi
DronaHQ[14]
K2[15]
Kony[16]
LANSA
M-Power
Mendix
OutSystems
Pegasystems
PNMsoft
Progress
ServiceNow
Servoy
ViziApps
WEM[17]

Screen painters and generators[edit]
Oracle Forms
Progress 4GL ProVision
SB+/SystemBuilder
Web development languages[edit]
ActiveVFP
CFML
LANSA
OutSystems
Wavemaker
See also[edit]
First-generation programming language
Second-generation programming language
Third-generation programming language
Fifth-generation programming language
List of fourth-generation programming languages
Domain-specific programming language
Rapid application development
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ 35th Hawaii International Conference on System Sciences - 1002 Domain-Specific Languages for Software Engineering  Archived May 16, 2011, at the Wayback Machine

^ 
.mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Arie van Deursen; Paul Klint; Joost Visser (1998). "Domain-Specific Languages:An Annotated Bibliography". Archived from the original on 2009-02-02. Retrieved 2009-03-15.

^ MacDonell, Stephen (November 1993). "Software development, CASE tools and 4GLsâA survey of New Zealand usage. Part 1: 750 New Zealand organisations". hdl:10523/928. {{cite journal}}: Cite journal requires |journal= (help)

^ "Roger Clarke's Software Generations".

^ "Definition of fourth-generation language". PCMAG. Retrieved 7 May 2020.

^ Martin, James. Application Development Without Programmers. Prentice-Hall, 1981. ISBNÂ 0-13-038943-9.

^ "IBM Punch Cards". www.columbia.edu. Archived from the original on 2019-02-16. Retrieved 2019-02-03.

^ "Data Mining Software, Data Analysis, and More: Unisys Business Information Server Features". Unisys. 2006-08-21. Archived from the original on 2006-08-21. Retrieved 2019-02-03.

^ Louis Schlueter (1988). User-Designed Computing: The Next Generation. [book on report generator and MAPPER systems]

^ Barbara Canning McNurlin; Ralph H. Sprague (2004). "Ch. 9". Information Systems Management in Practice (PDF). Pearson/Prentice Hall. ISBNÂ 978-0-13-101139-7.[permanent dead link]

^ Forrest, Conner. "How Salesforce is using low-code orchestration to save 'floundering IoT projects'". ZDNet.

^ Marvin, Rob; August 10, 2018 1:50PM EST; August 10, 2018. "The Best Low-Code Development Platforms for 2019". PCMAG.{{cite web}}:  CS1 maint: numeric names: authors list (link)

^ Sayer, Martin Heller and Peter (6 April 2018). "25 simple tools for building mobile apps fast". InfoWorld. Archived from the original on 18 November 2017. Retrieved 17 November 2017.

^ "DronaHQ. Build apps without coding". www.dronahq.com. Archived from the original on 2019-08-09. Retrieved 2019-09-11.

^ "K2 - Digital Process Automation". www.k2.com. Archived from the original on 2017-11-21. Retrieved 2017-11-20.

^ "Kony. Accelerate digital success". Kony. Archived from the original on 2017-11-24. Retrieved 2017-11-20.

^ "WEM Modeler. Build Modern Applications At Incredible Speed". wem.io. Archived from the original on 2021-09-07. Retrieved 2021-09-07.


.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteProgramming language generations
1GL
2GL
3GL
4GL
5GL

vteTypes of computer languageTypes
Architecture description
Data exchange
Hardware description
Knowledge representation
Markup
Modeling
Programming language
Query
Shading
Specification
Stylesheet
Transformation
See also
Category:Lists of computer languages
Category:Lists of programming languages
List of programming languages by type

Authority control: National libraries  
France (data)





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Fourth-generation_programming_language&oldid=1064090898"
		Categories: Programming language classificationFourth-generation programming languagesHidden categories: Webarchive template wayback linksCS1 errors: missing periodicalAll articles with dead external linksArticles with dead external links from October 2017Articles with permanently dead external linksCS1 maint: numeric names: authors listArticles with short descriptionShort description is different from WikidataArticles with BNF identifiers
	
