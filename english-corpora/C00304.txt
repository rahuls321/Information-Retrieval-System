
Title:
Cellular automaton
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Discrete model studied in computer science


  Gosper's Glider Gun creating "gliders" in the cellular automaton Conway's Game of Life[1]
A cellular automaton (pl. cellular automata, abbrev. CA) is a discrete model of computation studied in automata theory. Cellular automata are also called cellular spaces, tessellation automata, homogeneous structures, cellular structures, tessellation structures, and iterative arrays.[2] Cellular automata have found application in various areas, including physics, theoretical biology and microstructure modeling.
A cellular automaton consists of a regular grid of cells, each in one of a finite number of states, such as on and off (in contrast to a coupled map lattice). The grid can be in any finite number of dimensions. For each cell, a set of cells called its neighborhood is defined relative to the specified cell. An initial state (time tÂ =Â 0) is selected by assigning a state for each cell. A new generation is created (advancing t by 1), according to some fixed rule (generally, a mathematical function)[3] that determines the new state of each cell in terms of the current state of the cell and the states of the cells in its neighborhood. Typically, the rule for updating the state of cells is the same for each cell and does not change over time, and is applied to the whole grid simultaneously,[4] though exceptions are known, such as the stochastic cellular automaton and asynchronous cellular automaton.
The concept was originally discovered in the 1940s by Stanislaw Ulam and John von Neumann while they were contemporaries at Los Alamos National Laboratory. While studied by some throughout the 1950s and 1960s, it was not until the 1970s and Conway's Game of Life, a two-dimensional cellular automaton, that interest in the subject expanded beyond academia. In the 1980s, Stephen Wolfram engaged in a systematic study of one-dimensional cellular automata, or what he calls elementary cellular automata; his research assistant Matthew Cook showed that one of these rules is Turing-complete.
The primary classifications of cellular automata, as outlined by Wolfram, are numbered one to four. They are, in order, automata in which patterns generally stabilize into homogeneity, automata in which patterns evolve into mostly stable or oscillating structures, automata in which patterns evolve in a seemingly chaotic fashion, and automata in which patterns become extremely complex and may last for a long time, with stable local structures.  This last class is thought to be computationally universal, or capable of simulating a Turing machine. Special types of cellular automata are reversible, where only a single configuration leads directly to a subsequent one, and totalistic, in which the future value of individual cells only depends on the total value of a group of neighboring cells. Cellular automata can simulate a variety of real-world systems, including biological and chemical ones.

Contents

1 Overview
2 History
3 Classification

3.1 Reversible
3.2 Totalistic
3.3 Related automata


4 Elementary cellular automata
5 Rule space
6 Applications

6.1 Biology
6.2 Chemistry
6.3 Physics
6.4 Computer science, coding, and communication
6.5 Generative art and music


7 Specific rules
8 See also
9 Notes
10 References
11 External links



Overview[edit]
.mw-parser-output .tmulti .thumbinner{display:flex;flex-direction:column}.mw-parser-output .tmulti .trow{display:flex;flex-direction:row;clear:left;flex-wrap:wrap;width:100%;box-sizing:border-box}.mw-parser-output .tmulti .tsingle{margin:1px;float:left}.mw-parser-output .tmulti .theader{clear:both;font-weight:bold;text-align:center;align-self:center;background-color:transparent;width:100%}.mw-parser-output .tmulti .thumbcaption{background-color:transparent}.mw-parser-output .tmulti .text-align-left{text-align:left}.mw-parser-output .tmulti .text-align-right{text-align:right}.mw-parser-output .tmulti .text-align-center{text-align:center}@media all and (max-width:720px){.mw-parser-output .tmulti .thumbinner{width:100%!important;box-sizing:border-box;max-width:none!important;align-items:center}.mw-parser-output .tmulti .trow{justify-content:center}.mw-parser-output .tmulti .tsingle{float:none!important;max-width:100%!important;box-sizing:border-box;text-align:center}.mw-parser-output .tmulti .tsingle .thumbcaption{text-align:left}.mw-parser-output .tmulti .trow>.thumbcaption{text-align:center}}The red cells are the Moore neighborhood for the blue cell.The red cells are the von Neumann neighborhood for the blue cell. The range-2 "cross neighborhood" includes the pink cells as well.
One way to simulate a two-dimensional cellular automaton is with an infinite sheet of graph paper along with a set of rules for the cells to follow. Each square is called a "cell" and each cell has two possible states, black and white. The neighborhood of a cell is the nearby, usually adjacent, cells. The two most common types of neighborhoods are the von Neumann neighborhood and the Moore neighborhood.[5] The former, named after the founding cellular automaton theorist, consists of the four orthogonally adjacent cells.[5] The latter includes the von Neumann neighborhood as well as the four diagonally adjacent cells.[5] For such a cell and its Moore neighborhood, there are 512 (= 29) possible patterns. For each of the 512 possible patterns, the rule table would state whether the center cell will be black or white on the next time interval. Conway's Game of Life is a popular version of this model. Another common neighborhood type is the extended von Neumann neighborhood, which includes the two closest cells in each orthogonal direction, for a total of eight.[5] The general equation for such a system of rules is kks, where k is the number of possible states for a cell, and s is the number of neighboring cells (including the cell to be calculated itself) used to determine the cell's next state.[6] Thus, in the two-dimensional system with a Moore neighborhood, the total number of automata possible would be 229, or 1.34Ã10154.
It is usually assumed that every cell in the universe starts in the same state, except for a finite number of cells in other states; the assignment of state values is called a configuration.[7] More generally, it is sometimes assumed that the universe starts out covered with a periodic pattern, and only a finite number of cells violate that pattern. The latter assumption is common in one-dimensional cellular automata.

  A torus, a toroidal shape
Cellular automata are often simulated on a finite grid rather than an infinite one. In two dimensions, the universe would be a rectangle instead of an infinite plane. The obvious problem with finite grids is how to handle the cells on the edges. How they are handled will affect the values of all the cells in the grid. One possible method is to allow the values in those cells to remain constant. Another method is to define neighborhoods differently for these cells. One could say that they have fewer neighbors, but then one would also have to define new rules for the cells located on the edges. These cells are usually handled with a toroidal arrangement: when one goes off the top, one comes in at the corresponding position on the bottom, and when one goes off the left, one comes in on the right. (This essentially simulates an infinite periodic tiling, and in the field of partial differential equations is sometimes referred to as periodic boundary conditions.) This can be visualized as taping the left and right edges of the rectangle to form a tube, then taping the top and bottom edges of the tube to form a torus (doughnut shape). Universes of other dimensions are handled similarly. This solves boundary problems with neighborhoods, but another advantage is that it is easily programmable using modular arithmetic functions. For example, in a 1-dimensional cellular automaton like the examples below, the neighborhood of a cell xit is {xiâ1tâ1, xitâ1, xi+1tâ1}, where t is the time step (vertical), and i is the index (horizontal) in one generation.

History[edit]
Stanislaw Ulam, while working at the Los Alamos National Laboratory in the 1940s, studied the growth of crystals, using a simple lattice network as his model.[8] At the same time, John von Neumann, Ulam's colleague at Los Alamos, was working on the problem of self-replicating systems.[9] Von Neumann's initial design was founded upon the notion of one robot building another robot. This design is known as the kinematic model.[10][11] As he developed this design, von Neumann came to realize the great difficulty of building a self-replicating robot, and of the great cost in providing the robot with a "sea of parts" from which to build its replicant. Neumann wrote a paper entitled "The general and logical theory of automata" for the Hixon Symposium in 1948.[9] Ulam was the one who suggested using a discrete system for creating a reductionist model of self-replication.[12][13] Nils Aall Barricelli performed many of the earliest explorations of these models of artificial life.

  John von Neumann, Los Alamos ID badge
Ulam and von Neumann created a method for calculating liquid motion in the late 1950s. The driving concept of the method was to consider a liquid as a group of discrete units and calculate the motion of each based on its neighbors' behaviors.[14] Thus was born the first system of cellular automata. Like Ulam's lattice network, von Neumann's cellular automata are two-dimensional, with his self-replicator implemented algorithmically. The result was a universal copier and constructor working within a cellular automaton with a small neighborhood (only those cells that touch are neighbors; for von Neumann's cellular automata, only orthogonal cells), and with 29 states per cell.[15] Von Neumann gave an existence proof that a particular pattern would make endless copies of itself within the given cellular universe by designing a 200,000 cell configuration that could do so.[15] This design is known as the tessellation model, and is called a von Neumann universal constructor.[16]
Also in the 1940s, Norbert Wiener and Arturo Rosenblueth developed a model of excitable media with some of the characteristics of a cellular automaton.[17] Their specific motivation was the mathematical description of impulse conduction in cardiac systems. However their model is not a cellular automaton because the medium in which signals propagate is continuous, and wave fronts are curves.[17][18] A true cellular automaton model of excitable media was developed and studied by J. M. Greenberg and S. P. Hastings in 1978; see Greenberg-Hastings cellular automaton. The original work of Wiener and Rosenblueth contains many insights and continues to be cited in modern research publications on cardiac arrhythmia and excitable systems.[19]
In the 1960s, cellular automata were studied as a particular type of dynamical system and the connection with the mathematical field of symbolic dynamics was established for the first time. In 1969, Gustav A. Hedlund compiled many results following this point of view[20] in what is still considered as a seminal paper for the mathematical study of cellular automata. The most fundamental result is the characterization in the CurtisâHedlundâLyndon theorem of the set of global rules of cellular automata as the set of continuous endomorphisms of shift spaces.
In 1969, German computer pioneer Konrad Zuse published his book Calculating Space, proposing that the physical laws of the universe are discrete by nature, and that the entire universe is the output of a deterministic computation on a single cellular automaton; "Zuse's Theory" became the foundation of the field of study called digital physics.[21]
Also in 1969 computer scientist Alvy Ray Smith completed a Stanford PhD dissertation on Cellular Automata Theory, the first mathematical treatment of CA as a general class of computers. Many papers came from this dissertation: He showed the equivalence of neighborhoods of various shapes, how to reduce a Moore to a von Neumann neighborhood or how to reduce any neighborhood to a von Neumann neighborhood.[22] He proved that two-dimensional CA are computation universal, introduced 1-dimensional CA, and showed that they too are computation universal, even with simple neighborhoods.[23] He showed how to subsume the complex von Neumann proof of construction universality (and hence self-reproducing machines) into a consequence of computation universality in a 1-dimensional CA.[24] Intended as the introduction to the German edition of von Neumann's book on CA, he wrote a survey of the field with dozens of references to papers, by many authors in many countries over a decade or so of work, often overlooked by modern CA researchers.[25]
In the 1970s a two-state, two-dimensional cellular automaton named Game of Life became widely known, particularly among the early computing community. Invented by John Conway and popularized by Martin Gardner in a Scientific American article,[26] its rules are as follows:

Any live cell with fewer than two live neighbours dies, as if caused by underpopulation.
Any live cell with two or three live neighbours lives on to the next generation.
Any live cell with more than three live neighbours dies, as if by overpopulation.
Any dead cell with exactly three live neighbours becomes a live cell, as if by reproduction.
Despite its simplicity, the system achieves an impressive diversity of behavior, fluctuating between apparent randomness and order. One of the most apparent features of the Game of Life is the frequent occurrence of gliders, arrangements of cells that essentially move themselves across the grid. It is possible to arrange the automaton so that the gliders interact to perform computations, and after much effort it has been shown that the Game of Life can emulate a universal Turing machine.[27] It was viewed as a largely recreational topic, and little follow-up work was done outside of investigating the particularities of the Game of Life and a few related rules in the early 1970s.[28]
Stephen Wolfram independently began working on cellular automata in mid-1981 after considering how complex patterns seemed formed in nature in violation of the Second Law of Thermodynamics.[29] His investigations were initially spurred by an interest in modelling systems such as neural networks.[29] He published his first paper in Reviews of Modern Physics investigating elementary cellular automata (Rule 30 in particular) in June 1983.[2][29] The unexpected complexity of the behavior of these simple rules led Wolfram to suspect that complexity in nature may be due to similar mechanisms.[29] His investigations, however, led him to realize that cellular automata were poor at modelling neural networks.[29] Additionally, during this period Wolfram formulated the concepts of intrinsic randomness and computational irreducibility,[30] and suggested that rule 110 may be universalâa fact proved later by Wolfram's research assistant Matthew Cook in the 1990s.[31]

Classification[edit]
Wolfram, in A New Kind of Science and several papers dating from the mid-1980s, defined four classes into which cellular automata and several other simple computational models can be divided depending on their behavior. While earlier studies in cellular automata tended to try to identify type of patterns for specific rules, Wolfram's classification was the first attempt to classify the rules themselves. In order of complexity the classes are:

Class 1: Nearly all initial patterns evolve quickly into a stable, homogeneous state. Any randomness in the initial pattern disappears.[32]
Class 2: Nearly all initial patterns evolve quickly into stable or oscillating structures. Some of the randomness in the initial pattern may filter out, but some remains. Local changes to the initial pattern tend to remain local.[32]
Class 3: Nearly all initial patterns evolve in a pseudo-random or chaotic manner. Any stable structures that appear are quickly destroyed by the surrounding noise. Local changes to the initial pattern tend to spread indefinitely.[32]
Class 4: Nearly all initial patterns evolve into structures that interact in complex and interesting ways, with the formation of local structures that are able to survive for long periods of time.[33] Class 2 type stable or oscillating structures may be the eventual outcome, but the number of steps required to reach this state may be very large, even when the initial pattern is relatively simple. Local changes to the initial pattern may spread indefinitely. Wolfram has conjectured that many class 4 cellular automata, if not all, are capable of universal computation. This has been proven for Rule 110 and Conway's Game of Life.
These definitions are qualitative in nature and there is some room for interpretation. According to Wolfram, "...with almost any general classification scheme there are inevitably cases which get assigned to one class by one definition and another class by another definition. And so it is with cellular automata: there are occasionally rules...that show some features of one class and some of another."[34] Wolfram's classification has been empirically matched to a clustering of the compressed lengths of the outputs of cellular automata.[35]
There have been several attempts to classify cellular automata in formally rigorous classes, inspired by the Wolfram's classification. For instance, Culik and Yu proposed three well-defined classes (and a fourth one for the automata not matching any of these), which are sometimes called Culik-Yu classes; membership in these proved undecidable.[36][37][38]
Wolfram's class 2 can be partitioned into two subgroups of stable (fixed-point) and oscillating (periodic) rules.[39]
The idea that there are 4 classes of dynamical system came originally from Nobel-prize winning chemist Ilya Prigogine who identified these 4 classes of thermodynamical systems - (1) systems in thermodynamic equilibrium, (2) spatially/temporally uniform systems, (3) chaotic systems, and (4) complex far-from-equilibrium systems with dissipative structures (see figure 1 in Nicolis' paper (Prigogine's student)).[40]

Reversible[edit]
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}Main article: Reversible cellular automaton
A cellular automaton is reversible if, for every current configuration of the cellular automaton, there is exactly one past configuration (preimage).[41] If one thinks of a cellular automaton as a function mapping configurations to configurations, reversibility implies that this function is bijective.[41] If a cellular automaton is reversible, its time-reversed behavior can also be described as a cellular automaton; this fact is a consequence of the CurtisâHedlundâLyndon theorem, a topological characterization of cellular automata.[42][43] For cellular automata in which not every configuration has a preimage, the configurations without preimages are called Garden of Eden patterns.[44]
For one-dimensional cellular automata there are known algorithms for deciding whether a rule is reversible or irreversible.[45][46] However, for cellular automata of two or more dimensions reversibility is undecidable; that is, there is no algorithm that takes as input an automaton rule and is guaranteed to determine correctly whether the automaton is reversible. The proof by Jarkko Kari is related to the tiling problem by Wang tiles.[47]
Reversible cellular automata are often used to simulate such physical phenomena as gas and fluid dynamics, since they obey the laws of thermodynamics. Such cellular automata have rules specially constructed to be reversible. Such systems have been studied by Tommaso Toffoli, Norman Margolus and others. Several techniques can be used to explicitly construct reversible cellular automata with known inverses. Two common ones are the second-order cellular automaton and the block cellular automaton, both of which involve modifying the definition of a cellular automaton in some way. Although such automata do not strictly satisfy the definition given above, it can be shown that they can be emulated by conventional cellular automata with sufficiently large neighborhoods and numbers of states, and can therefore be considered a subset of conventional cellular automata. Conversely, it has been shown that every reversible cellular automaton can be emulated by a block cellular automaton.[48][49]

Totalistic[edit]
A special class of cellular automata are totalistic cellular automata. The state of each cell in a totalistic cellular automaton is represented by a number (usually an integer value drawn from a finite set), and the value of a cell at time t depends only on the sum of the values of the cells in its neighborhood (possibly including the cell itself) at timeÂ tÂ âÂ 1.[50][51] If the state of the cell at time t depends on both its own state and the total of its neighbors at timeÂ tÂ âÂ 1 then the cellular automaton is properly called outer totalistic.[51] Conway's Game of Life is an example of an outer totalistic cellular automaton with cell values 0 and 1; outer totalistic cellular automata with the same Moore neighborhood structure as Life are sometimes called life-like cellular automata.[52][53]

Related automata[edit]
There are many possible generalizations of the cellular automaton concept.

  A cellular automaton based on hexagonal cells instead of squares (rule 34/2)
  An example of the Combinations cellular automata creating the SierpiÅski triangle
One way is by using something other than a rectangular (cubic, etc.) grid. For example, if a plane is tiled with regular hexagons, those hexagons could be used as cells. In many cases the resulting cellular automata are equivalent to those with rectangular grids with specially designed neighborhoods and rules. Another variation would be to make the grid itself irregular, such as with Penrose tiles.[54]
Also, rules can be probabilistic rather than deterministic. Such cellular automata are called probabilistic cellular automata. A probabilistic rule gives, for each pattern at time t, the probabilities that the central cell will transition to each possible state at time tÂ +Â 1. Sometimes a simpler rule is used; for example: "The rule is the Game of Life, but on each time step there is a 0.001% probability that each cell will transition to the opposite color."
The neighborhood or rules could change over time or space. For example, initially the new state of a cell could be determined by the horizontally adjacent cells, but for the next generation the vertical cells would be used.
In cellular automata, the new state of a cell is not affected by the new state of other cells. This could be changed so that, for instance, a 2 by 2 block of cells can be determined by itself and the cells adjacent to itself.
There are continuous automata. These are like totalistic cellular automata, but instead of the rule and states being discrete (e.g. a table, using states {0,1,2}), continuous functions are used, and the states become continuous (usually values in [0,1]). The state of a location is a finite number of real numbers. Certain cellular automata can yield diffusion in liquid patterns in this way.
Continuous spatial automata have a continuum of locations. The state of a location is a finite number of real numbers. Time is also continuous, and the state evolves according to differential equations. One important example is reactionâdiffusion textures, differential equations proposed by Alan Turing to explain how chemical reactions could create the stripes on zebras and spots on leopards.[55] When these are approximated by cellular automata, they often yield similar patterns. MacLennan [1] considers continuous spatial automata as a model of computation.
There are known examples of continuous spatial automata, which exhibit propagating phenomena analogous to gliders in the Game of Life.[56]
Graph rewriting automata are extensions of cellular automata based on graph rewriting systems.[57]
Combinations automata function by checking if an odd/even indexed pair is equal to permutation X. If so, return X of the rulestring (for example: "120012101"). These CA work with brickwall neighborhoods. These CA types also act like Logic gate(s). For instance, the equivalent of the XOR gate in Combinations produces a SierpiÅski triangle when the initial state is a single centered cell.

Elementary cellular automata[edit]
Main article: Elementary cellular automaton
The simplest nontrivial cellular automaton would be one-dimensional, with two possible states per cell, and a cell's neighbors defined as the adjacent cells on either side of it. A cell and its two neighbors form a neighborhood of 3 cells, so there are 23Â =Â 8 possible patterns for a neighborhood. A rule consists of deciding, for each pattern, whether the cell will be a 1 or a 0 in the next generation. There are then 28Â =Â 256 possible rules.[6]

  An animation of the way the rules of a 1D cellular automaton determine the next generation.
These 256 cellular automata are generally referred to by their Wolfram code, a standard naming convention invented by Wolfram that gives each rule a number from 0 to 255. A number of papers have analyzed and compared these 256 cellular automata. The rule 30 and rule 110 cellular automata are particularly interesting. The images below show the history of each when the starting configuration consists of a 1 (at the top of each image) surrounded by 0s. Each row of pixels represents a generation in the history of the automaton, with t=0 being the top row. Each pixel is colored white for 0 and black forÂ 1.

  Rule 30
Rule 30 cellular automaton




current pattern

111
110
101
100
011
010
001
000


new state for center cell

0
0
0
1
1
1
1
0

Rule 30 exhibits class 3 behavior, meaning even simple input patterns such as that shown lead to chaotic, seemingly random histories.

  Rule 110
Rule 110 cellular automaton




current pattern

111
110
101
100
011
010
001
000


new state for center cell

0
1
1
0
1
1
1
0

Rule 110, like the Game of Life, exhibits what Wolfram calls class 4 behavior, which is neither completely random nor completely repetitive. Localized structures appear and interact in various complicated-looking ways. In the course of the development of A New Kind of Science, as a research assistant to Wolfram in 1994, Matthew Cook proved that some of these structures were rich enough to support universality. This result is interesting because rule 110 is an extremely simple one-dimensional system, and difficult to engineer to perform specific behavior. This result therefore provides significant support for Wolfram's view that class 4 systems are inherently likely to be universal. Cook presented his proof at a Santa Fe Institute conference on Cellular Automata in 1998, but Wolfram blocked the proof from being included in the conference proceedings, as Wolfram did not want the proof announced before the publication of A New Kind of Science.[58] In 2004, Cook's proof was finally published in Wolfram's journal Complex Systems (Vol. 15, No. 1), over ten years after Cook came up with it. Rule 110 has been the basis for some of the smallest universal Turing machines.[59]

Rule space[edit]
An elementary cellular automaton rule is specified by 8 bits, and all elementary cellular automaton rules can be considered to sit on the vertices of the 8-dimensional unit hypercube. This unit hypercube is the cellular automaton rule space. For next-nearest-neighbor cellular automata, a rule is specified by 25Â =Â 32 bits, and the cellular automaton rule space is a 32-dimensional unit hypercube. A distance between two rules can be defined by the number of steps required to move from one vertex, which represents the first rule, and another vertex, representing another rule, along the edge of the hypercube. This rule-to-rule distance is also called the Hamming distance.
Cellular automaton rule space allows us to ask the question concerning whether rules with similar dynamical behavior are "close" to each other. Graphically drawing a high dimensional hypercube on the 2-dimensional plane remains a difficult task, and one crude locator of a rule in the hypercube is the number of bit-1 in the 8-bit string for elementary rules (or 32-bit string for the next-nearest-neighbor rules). Drawing the rules in different Wolfram classes in these slices of the rule space show that class 1 rules tend to have lower number of bit-1s, thus located in one region of the space, whereas class 3 rules tend to have higher proportion (50%) of bit-1s.[39]
For larger cellular automaton rule space, it is shown that class 4 rules are located between the class 1 and class 3 rules.[60] This observation is the foundation for the phrase edge of chaos, and is reminiscent of the phase transition in thermodynamics.

Applications[edit]
Biology[edit]
  Conus textile exhibits a cellular automaton pattern on its shell.[61]
Further information: Patterns in nature
Several biological processes occurâor can be simulatedâby cellular automata.
Some examples of biological phenomena modeled by cellular automata with a simple state space are:

Patterns of some seashells, like the ones in the genera Conus and Cymbiola, are generated by natural cellular automata. The pigment cells reside in a narrow band along the shell's lip. Each cell secretes pigments according to the activating and inhibiting activity of its neighbor pigment cells, obeying a natural version of a mathematical rule.[61] The cell band leaves the colored pattern on the shell as it grows slowly. For example, the widespread species Conus textile bears a pattern resembling Wolfram's rule 30 cellular automaton.[61]
Plants regulate their intake and loss of gases via a cellular automaton mechanism. Each stoma on the leaf acts as a cell.[62]
Moving wave patterns on the skin of cephalopods can be simulated with a two-state, two-dimensional cellular automata, each state corresponding to either an expanded or retracted chromatophore.[63]
Threshold automata have been invented to simulate neurons, and complex behaviors such as recognition and learning can be simulated.[64]
Fibroblasts bear similarities to cellular automata, as each fibroblast only interacts with its neighbors.[65]
Additionally, biological phenomena which require explicit modeling of the agents' velocities (for example, those involved in collective cell migration) may be modeled by cellular automata with a more complex state space and rules, such as biological lattice-gas cellular automata. These include phenomena of great medical importance, such as:

Characterization of different modes of metastatic invasion.[66]
The role of heterogeneity in the development of aggressive carcinomas.[67]
Phenotypic switching during tumor proliferation.[68]
Chemistry[edit]
The BelousovâZhabotinsky reaction is a spatio-temporal chemical oscillator that can be simulated by means of a cellular automaton. In the 1950s A. M. Zhabotinsky (extending the work of B. P. Belousov) discovered that when a thin, homogenous layer of a mixture of malonic acid, acidified bromate, and a ceric salt were mixed together and left undisturbed, fascinating geometric patterns such as concentric circles and spirals propagate across the medium. In the "Computer Recreations" section of the August 1988 issue of Scientific American,[69] A. K. Dewdney discussed a cellular automaton[70] developed by Martin Gerhardt and Heike Schuster of the University of Bielefeld (Germany). This automaton produces wave patterns that resemble those in the Belousov-Zhabotinsky reaction.

Physics[edit]
  Visualization of a lattice gas automaton. The shades of grey of the individual pixels are proportional to the gas particle density (between 0 and 4) at that pixel. The gas is surrounded by a shell of yellow cells that act as reflectors to create a closed space.
Probabilistic cellular automata are used in statistical and condensed matter physics to study phenomena like fluid dynamics and phase transitions. The Ising model is a prototypical example, in which each cell can be in either of two states called "up" and "down", making an idealized representation of a magnet. By adjusting the parameters of the model, the proportion of cells being in the same state can be varied, in ways that help explicate how ferromagnets become demagnetized when heated. Moreover, results from studying the demagnetization phase transition can be transferred to other phase transitions, like the evaporation of a liquid into a gas; this convenient cross-applicability is known as universality.[71][72] The phase transition in the two-dimensional Ising model and other systems in its universality class has been of particular interest, as it requires conformal field theory to understand in depth.[73] Other cellular automata that have been of significance in physics include lattice gas automata, which simulate fluid flows.

Computer science, coding, and communication[edit]
Cellular automaton processors are physical implementations of CA concepts, which can process information computationally. Processing elements are arranged in a regular grid of identical cells. The grid is usually a square tiling, or tessellation, of two or three dimensions; other tilings are possible, but not yet used. Cell states are determined only by interactions with adjacent neighbor cells. No means exists to communicate directly with cells farther away.[74] One such cellular automaton processor array configuration is the systolic array. Cell interaction can be via electric charge, magnetism, vibration (phonons at quantum scales), or any other physically useful means. This can be done in several ways so that no wires are needed between any elements. This is very unlike processors used in most computers today (von Neumann designs) which are divided into sections with elements that can communicate with distant elements over wires.
Rule 30 was originally suggested as a possible block cipher for use in cryptography. Two-dimensional cellular automata can be used for constructing a pseudorandom number generator.[75]
Cellular automata have been proposed for public-key cryptography. The one-way function is the evolution of a finite CA whose inverse is believed to be hard to find. Given the rule, anyone can easily calculate future states, but it appears to be very difficult to calculate previous states.  Cellular automata have also been applied to design error correction codes.[76]
Other problems that can be solved with cellular automata include:

Firing squad synchronization problem
Majority problem
Generative art and music[edit]
Further information: Generative art
Cellular automata have been used in generative music[77] and evolutionary music composition[78] and procedural terrain generation in video games.[79]

Specific rules[edit]
Specific types of cellular automata include:

.mw-parser-output .div-col{margin-top:0.3em;column-width:30em}.mw-parser-output .div-col-small{font-size:90%}.mw-parser-output .div-col-rules{column-rule:1px solid #aaa}.mw-parser-output .div-col dl,.mw-parser-output .div-col ol,.mw-parser-output .div-col ul{margin-top:0}.mw-parser-output .div-col li,.mw-parser-output .div-col dd{page-break-inside:avoid;break-inside:avoid-column}
Brian's Brain
Codd's cellular automaton
CoDi
Langton's ant
Langton's loops
Nobili cellular automata
Rule 90
Rule 184
Von Neumann cellular automaton
Wireworld

See also[edit]

Agent-based modelÂ â Type of computational models
Automata theoryÂ â Study of abstract machines and automata
Bidirectional trafficÂ â Two streams of traffic that flow in opposite directions
Cyclic cellular automaton
Excitable medium
Golly
Movable cellular automatonÂ â Method in computational solid mechanics based on the discrete concept
Quantum cellular automatonÂ â Abstract model of quantum computation
Spatial decision support systemÂ â Computerised aid to land use decisions
TurmiteÂ â Turing machine on a two-dimensional grid
Discrete calculus
 Cellular automata in popular culture

Notes[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ Daniel Dennett (1995), Darwin's Dangerous Idea, Penguin Books, London, .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}ISBNÂ 978-0-14-016734-4, ISBNÂ 0-14-016734-X

^ Jump up to: a b Wolfram, Stephen (1983). "Statistical Mechanics of Cellular Automata". Reviews of Modern Physics. 55 (3): 601â644. Bibcode:1983RvMP...55..601W. doi:10.1103/RevModPhys.55.601. Archived from the original on 21 September 2013. Retrieved 28 February 2011.

^ Toffoli, Tommaso; Margolus, Norman (1987). Cellular Automata Machines: A New Environment for Modeling. MIT Press. p.Â 27. ISBNÂ 9780262200608.

^ Schiff, Joel L. (2011). Cellular Automata: A Discrete View of the World. Wiley & Sons, Inc. p.Â 40. ISBNÂ 9781118030639.

^ Jump up to: a b c d Kier, Seybold, Cheng 2005, p.Â 15

^ Jump up to: a b Bialynicki-Birula, Bialynicka-Birula 2004, p.Â 9

^ Schiff 2011, p.Â 41

^ Pickover, Clifford A. (2009). The Math Book: From Pythagoras to the 57th Dimension, 250 Milestones in the History of Mathematics. Sterling Publishing Company, Inc. p.Â 406. ISBNÂ 978-1402757969.

^ Jump up to: a b Schiff 2011, p.Â 1

^ John von Neumann, "The general and logical theory of automata," in L.A. Jeffress, ed., Cerebral Mechanisms in Behavior â The Hixon Symposium, John Wiley & Sons, New York, 1951, pp. 1â31.

^ Kemeny, John G. (1955). "Man viewed as a machine". Sci. Am. 192 (4): 58â67. Bibcode:1955SciAm.192d..58K. doi:10.1038/scientificamerican0455-58.; Sci. Am. 1955; 192:6 (errata).

^ Schiff 2011, p.Â 3

^ Ilachinski 2001, p.Â xxix

^ Bialynicki-Birula, Bialynicka-Birula 2004, p.Â 8

^ Jump up to: a b Wolfram 2002, p.Â 876

^ von Neumann, John; Burks, Arthur W. (1966). Theory of Self-Reproducing Automata. University of Illinois Press.

^ Jump up to: a b Wiener, N.; Rosenblueth, A. (1946). "The mathematical formulation of the problem of conduction of impulses in a network of connected excitable elements, specifically in cardiac muscle". Arch. Inst. Cardiol. MÃ©xico. 16 (3): 205â65. PMIDÂ 20245817.

^ Letichevskii, A. A.; Reshodko, L. V. (1974). "N. Wiener's theory of the activity of excitable media". Cybernetics. 8 (5): 856â864. doi:10.1007/bf01068458. S2CIDÂ 121306408.

^ Davidenko, J. M.; Pertsov, A. V.; Salomonsz, R.; Baxter, W.; Jalife, J. (1992). "Stationary and drifting spiral waves of excitation in isolated cardiac muscle". Nature. 355 (6358): 349â351. Bibcode:1992Natur.355..349D. doi:10.1038/355349a0. PMIDÂ 1731248. S2CIDÂ 4348759.

^ Hedlund, G. A. (1969). "Endomorphisms and automorphisms of the shift dynamical system". Math. Systems Theory. 3 (4): 320â3751. doi:10.1007/BF01691062. S2CIDÂ 21803927.

^ Schiff 2011, p.Â 182

^ Smith, Alvy Ray. "Cellular Automata Complexity Trade-Offs" (PDF).

^ Smith, Alvy Ray. "Simple Computation-Universal Cellular Spaces" (PDF).

^ Smith, Alvy Ray. "Simple Nontrivial Self-Reproducing Machines" (PDF).

^ Smith, Alvy Ray. "Introduction to and Survey of Cellular Automata or Polyautomata Theory" (PDF).

^ Gardner, Martin (1970). "Mathematical Games: The fantastic combinations of John Conway's new solitaire game "life"". Scientific American. 223 (4): 120â123. doi:10.1038/scientificamerican1070-120.

^ Paul Chapman. Life universal computer. http://www.igblan.free-online.co.uk/igblan/ca/ November 2002

^ Wainwright 2010, p.Â 16 harvnb error: no target: Adamatzky (help)

^ Jump up to: a b c d e Wolfram 2002, p.Â 880

^ Wolfram 2002, p.Â 881

^ Mitchell, Melanie (4 October 2002). "Is the Universe a Universal Computer?". Science. 298 (5591): 65â68. doi:10.1126/science.1075073. S2CIDÂ 122484855.

^ Jump up to: a b c Ilachinsky 2001, p.Â 12

^ Ilachinsky 2001, p.Â 13

^ Wolfram 2002, p.Â 231

^ Zenil, Hector (2010). "Compression-based investigation of the dynamical properties of cellular automata and other systems" (PDF). Complex Systems. 19 (1): 1â28. doi:10.25088/ComplexSystems.19.1.1. S2CIDÂ 15364755.

^ G. Cattaneo; E. Formenti; L. Margara (1998). "Topological chaos and CA".  In M. Delorme; J. Mazoyer (eds.). Cellular automata: a parallel model. Springer. p.Â 239. ISBNÂ 978-0-7923-5493-2.

^ Burton H. Voorhees (1996). Computational analysis of one-dimensional cellular automata. World Scientific. p.Â 8. ISBNÂ 978-981-02-2221-5.

^ Max Garzon (1995). Models of massive parallelism: analysis of cellular automata and neural networks. Springer. p.Â 149. ISBNÂ 978-3-540-56149-1.

^ Jump up to: a b Li, Wentian; Packard, Norman (1990). "The structure of the elementary cellular automata rule space" (PDF). Complex Systems. 4: 281â297. Retrieved 25 January 2013.

^ Nicolis (1974). "Dissipative Structures, Catastrophes, and Pattern Formation: A Bifurcation Analysis" (PDF). PNAS. 71 (7): 2748â2751. Bibcode:1974PNAS...71.2748N. doi:10.1073/pnas.71.7.2748. PMCÂ 388547. PMIDÂ 16592170. Retrieved 25 March 2017.

^ Jump up to: a b Kari, Jarrko 1991, p.Â 379

^ Richardson, D. (1972). "Tessellations with local transformations". J. Comput. Syst. Sci. 6 (5): 373â388. doi:10.1016/S0022-0000(72)80009-6.

^ Margenstern, Maurice (2007). Cellular Automata in Hyperbolic Spaces â Tome I, Volume 1. Archives contemporaines. p.Â 134. ISBNÂ 978-2-84703-033-4.

^ Schiff 2011, p.Â 103

^ Amoroso, Serafino; Patt, Yale N. (1972). "Decision Procedures for Surjectivity and Injectivity of Parallel Maps for Tessellation Structures". J. Comput. Syst. Sci. 6 (5): 448â464. doi:10.1016/s0022-0000(72)80013-8.

^ Sutner, Klaus (1991). "De Bruijn Graphs and Linear Cellular Automata" (PDF). Complex Systems. 5: 19â30.

^ Kari, Jarkko (1990). "Reversibility of 2D cellular automata is undecidable". Physica D. 45 (1â3): 379â385. Bibcode:1990PhyD...45..379K. doi:10.1016/0167-2789(90)90195-U.

^ Kari, Jarkko (1999). "On the circuit depth of structurally reversible cellular automata". Fundamenta Informaticae. 38: 93â107. doi:10.3233/FI-1999-381208.

^ Durand-Lose, JÃ©rÃ´me (2001). "Representing reversible cellular automata with reversible block cellular automata". Discrete Mathematics and Theoretical Computer Science. AA: 145â154. Archived from the original on 15 May 2011.

^ Wolfram 2002, p.Â 60

^ Jump up to: a b Ilachinski, Andrew (2001). Cellular automata: a discrete universe. World Scientific. pp.Â 44â45. ISBNÂ 978-981-238-183-5.

^ The phrase "life-like cellular automaton" dates back at least to Barral, ChatÃ© & Manneville (1992), who used it in a broader sense to refer to outer totalistic automata, not necessarily of two dimensions. The more specific meaning given here was used e.g. in several chapters of Adamatzky (2010). See: Barral, Bernard; ChatÃ©, Hugues; Manneville, Paul (1992). "Collective behaviors in a family of high-dimensional cellular automata". Physics Letters A. 163 (4): 279â285. Bibcode:1992PhLA..163..279B. doi:10.1016/0375-9601(92)91013-H.

^ Eppstein 2010, pp.Â 72â73 harvnb error: no target: Adamatzky (help)

^ Jacob Aron. "First gliders navigate ever-changing Penrose universe". New Scientist.

^ Murray, J. D. (2003). Mathematical biology (3rdÂ ed.). New York: Springer. ISBNÂ 0-387-95228-4.

^ Pivato, M: "RealLife: The continuum limit of Larger than Life cellular automata",  Theoretical Computer Science, 372 (1), March 2007, pp. 46â68

^ Tomita, Kohji; Kurokawa, Haruhisa; Murata, Satoshi (2009). "Graph-Rewriting Automata as a Natural Extension of Cellular Automata". Adaptive Networks. Understanding Complex Systems. pp.Â 291â309. doi:10.1007/978-3-642-01284-6_14. ISBNÂ 978-3-642-01283-9.

^ Giles, Jim (2002). "What Kind of Science is This?". Nature. 417 (6886): 216â218. Bibcode:2002Natur.417..216G. doi:10.1038/417216a. PMIDÂ 12015565. S2CIDÂ 10636328.

^ Weinberg, Steven (24 October 2002). "Is the Universe a Computer?". The New York Review of Books. Retrieved 12 October 2012.

^ Wentian Li; Norman Packard; Chris G Langton (1990). "Transition phenomena in cellular automata rule space". Physica D. 45 (1â3): 77â94. Bibcode:1990PhyD...45...77L. CiteSeerXÂ 10.1.1.15.2786. doi:10.1016/0167-2789(90)90175-O.

^ Jump up to: a b c Coombs, Stephen (15 February 2009), The Geometry and Pigmentation of Seashells (PDF), pp.Â 3â4, archived from the original (PDF) on 7 January 2013, retrieved 2 September 2012

^ Peak, West; Messinger, Mott (2004). "Evidence for complex, collective dynamics and emergent, distributed computation in plants". Proceedings of the National Academy of Sciences. 101 (4): 918â922. Bibcode:2004PNAS..101..918P. doi:10.1073/pnas.0307811100. PMCÂ 327117. PMIDÂ 14732685.

^ "Archived copy" (PDF). Archived from the original (PDF) on 25 July 2010. Retrieved 14 September 2008.{{cite web}}:  CS1 maint: archived copy as title (link)

^ Ilachinsky 2001, p.Â 275

^ Yves Bouligand (1986). Disordered Systems and Biological Organization. pp.Â 374â375.

^ Ilina, Olga; Gritsenko, Pavlo G.; Syga, Simon; Lippoldt, JÃ¼rgen; La Porta, Caterina A. M.; Chepizhko, Oleksandr; Grosser, Steffen; Vullings, Manon; Bakker, Gert-Jan; StarruÃ, JÃ¶rn; Bult, Peter (September 2020). "Cellâcell adhesion and 3D matrix confinement determine jamming transitions in breast cancer invasion". Nature Cell Biology. 22 (9): 1103â1115. doi:10.1038/s41556-020-0552-6. ISSNÂ 1465-7392. PMCÂ 7502685. PMIDÂ 32839548.

^ Reher, David; Klink, Barbara; Deutsch, Andreas; Voss-BÃ¶hme, Anja (11 August 2017). "Cell adhesion heterogeneity reinforces tumour cell dissemination: novel insights from a mathematical model". Biology Direct. 12 (1): 18. doi:10.1186/s13062-017-0188-z. ISSNÂ 1745-6150. PMCÂ 5553611. PMIDÂ 28800767.

^ Hatzikirou, H.; Basanta, D.; Simon, M.; Schaller, K.; Deutsch, A. (1 March 2012). "'Go or Grow': the key to the emergence of invasion in tumour progression?". Mathematical Medicine and Biology. 29 (1): 49â65. doi:10.1093/imammb/dqq011. ISSNÂ 1477-8599. PMIDÂ 20610469.

^ A. K. Dewdney, The hodgepodge machine makes waves, Scientific American, p. 104, August 1988.

^ Gerhardt, M.; Schuster, H. (1989). "A cellular automaton describing the formation of spatially ordered structures in chemical systems". Physica D. 36 (3): 209â221. Bibcode:1989PhyD...36..209G. doi:10.1016/0167-2789(89)90081-x.

^ Sethna, James P. (2008). Statistical Mechanics: Entropy, Order Parameters, and Complexity. Oxford University Press. ISBNÂ 978-0-198-56677-9. OCLCÂ 845714772.

^ Kardar, Mehran (2007). Statistical Physics of Fields. Cambridge University Press. ISBNÂ 978-0-521-87341-3. OCLCÂ 920137477.

^ Cappelli, Andrea; Zuber, Jean-Bernard (2010). "A-D-E Classification of Conformal Field Theories". Scholarpedia. 5 (4): 10314. arXiv:0911.3242. Bibcode:2010SchpJ...510314C. doi:10.4249/scholarpedia.10314. S2CIDÂ 18207779.

^ Muhtaroglu, Ali (August 1996). "4.1 Cellular Automaton Processor (CAP)". Cellular Automaton Processor Based Systems for Genetic Sequence Comparison/Database Searching. Cornell University. pp.Â 62â74.

^ Tomassini, M.; Sipper, M.; Perrenoud, M. (2000). "On the generation of high-quality random numbers by two-dimensional cellular automata". IEEE Transactions on Computers. 49 (10): 1146â1151. doi:10.1109/12.888056.

^ Chowdhury, D. Roy; Basu, S.; Gupta, I. Sen; Chaudhuri, P. Pal (June 1994). "Design of CAECC - cellular automata based error correcting code". IEEE Transactions on Computers. 43 (6): 759â764. doi:10.1109/12.286310.

^ Burraston, Dave, and Ernest Edmonds. "Cellular automata in generative electronic music and sonic art: a historical and technical review." Digital Creativity 16.3 (2005): 165-185.

^ Miranda, Eduardo Reck. "Evolving cellular automata music: From sound synthesis to composition." Proceedings of 2001 Workshop on Artificial Life Models for Musical Applications. 2001.

^ Ashlock, Daniel; Kreitzer, Matthew (2020). "Evolving Diverse Cellular Automata Based Level Maps". Proceedings of 6th International Conference in Software Engineering for Defence Applications. Advances in Intelligent Systems and Computing. Vol.Â 925. pp.Â 10â23. doi:10.1007/978-3-030-14687-0_2. ISBNÂ 978-3-030-14686-3.


References[edit]
.mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li{margin-left:0;padding-left:3.2em;text-indent:-3.2em}.mw-parser-output .refbegin-hanging-indents ul,.mw-parser-output .refbegin-hanging-indents ul li{list-style:none}@media(max-width:720px){.mw-parser-output .refbegin-hanging-indents>ul>li{padding-left:1.6em;text-indent:-1.6em}}.mw-parser-output .refbegin-columns{margin-top:0.3em}.mw-parser-output .refbegin-columns ul{margin-top:0}.mw-parser-output .refbegin-columns li{page-break-inside:avoid;break-inside:avoid-column}
Adamatzky, Andrew, ed. (2010). Game of Life Cellular Automata. Springer. ISBNÂ 978-1-84996-216-2.
Bialynicki-Birula, Iwo; Bialynicka-Birula, Iwona (2004). Modeling Reality: How Computers Mirror Life. Oxford University Press. ISBNÂ 978-0198531005.
Chopard, Bastien; Droz, Michel (2005). Cellular Automata Modeling of Physical Systems. Cambridge University Press. ISBNÂ 978-0-521-46168-9.
Gutowitz, Howard, ed. (1991). Cellular Automata: Theory and Experiment. MIT Press. ISBNÂ 9780262570862.
Ilachinski, Andrew (2001). Cellular Automata: A Discrete Universe. World Scientific. ISBNÂ 9789812381835.
Kier, Lemont B.; Seybold, Paul G.; Cheng, Chao-Kun (2005). Modeling Chemical Systems using Cellular Automata. Springer. ISBNÂ 9781402036576.
Kroc, JiÅÃ­; JimÃ©nez-Morales, Francisco; Guisado, JosÃ© Luis; Lemos, MarÃ­a Carmen; TkÃ¡Ä, Jakub (December 2019). "Building Efficient Computational Cellular Automata Models of Complex Systems: Background, Applications, Results, Software, and Pathologies". Advances in Complex Systems. 22 (5): 1950013 (38 pages). doi:10.1142/S0219525919500139.
Wolfram, Stephen (2002). A New Kind of Science. Wolfram Media. ISBNÂ 978-1579550080.
Cellular automaton FAQ from the newsgroup comp.theory.cell-automata
"Neighbourhood Survey" (includes discussion on triangular grids, and larger neighborhood CAs)
von Neumann, John, 1966, The Theory of Self-reproducing Automata, A. Burks, ed., Univ. of Illinois Press, Urbana, IL.
Cosma Shalizi's Cellular Automata Notebook contains an extensive list of academic and professional reference material.
Wolfram's papers on CAs Archived 27 September 2013 at the Wayback Machine
A.M. Turing. 1952. The Chemical Basis of Morphogenesis. Phil. Trans. Royal Society, vol. B237, pp.Â 37â72. (proposes reaction-diffusion, a type of continuous automaton).
Evolving Cellular Automata with Genetic Algorithms: A Review of Recent Work, Melanie Mitchell, James P. Crutchfeld, Rajarshi Das (In Proceedings of the First International Conference on Evolutionary Computation and Its Applications (EvCA'96). Moscow, Russia: Russian Academy of Sciences, 1996.)
The Evolutionary Design of Collective Computation in Cellular Automata, James P. Crutchfeld, Melanie Mitchell, Rajarshi Das (In J. P. CrutchÂ¯eld and P. K. Schuster (editors), Evolutionary Dynamics|Exploring the Interplay of Selection, Neutrality, Accident, and Function. New York: Oxford University Press, 2002.)
The Evolution of Emergent Computation, James P. Crutchfield and Melanie Mitchell (SFI Technical Report 94-03-012)
Ganguly, Sikdar, Deutsch and Chaudhuri "A Survey on Cellular Automata"

External links[edit]



Wikimedia Commons has media related to Cellular automata.




Wikibooks has a book on the topic of: Cellular Automata

Berto, Francesco; Tagliabue, Jacopo. "Cellular Automata".  In Zalta, Edward N. (ed.). Stanford Encyclopedia of Philosophy.
Mirek's Cellebration â Home to free MCell and MJCell cellular automata explorer software and rule libraries. The software supports a large number of 1D and 2D rules. The site provides both an extensive rules lexicon and many image galleries loaded with examples of rules. MCell is a Windows application, while MJCell is a Java applet. Source code is available.
Modern Cellular Automata â Easy to use interactive exhibits of live color 2D cellular automata, powered by Java applet. Included are exhibits of traditional, reversible, hexagonal, multiple step, fractal generating, and pattern generating rules. Thousands of rules are provided for viewing. Free software is available.
Self-replication loops in Cellular Space â Java applet powered exhibits of self replication loops.
A collection of over 10 different cellular automata applets (in Monash University's Virtual Lab)
Golly supports von Neumann, Nobili, GOL, and a great many other systems of cellular automata.  Developed by Tomas Rokicki and Andrew Trevorrow.  This is the only simulator currently available that can demonstrate von Neumann type self-replication.
Fourier Life - A collection of rules that demonstrate self-replicating patterns which spontaneously emerge from a field of random cells. Most of the rules were found using an algorithm that uses a Fourier transform to detect self-replication.
Wolfram Atlas â An atlas of various types of one-dimensional cellular automata.
Conway Life
First replicating creature spawned in life simulator
The Mathematics of the Models of Reference, featuring a general tutorial on CA, interactive applet, free code and resources on CA as model of fundamental physics
Fourmilab Cellular Automata Laboratory
Busy Boxes, a 3-D, reversible, SALT-architecture CA
Cellular Automata Repository (CA researchers, historic links, free software, books and beyond)
Cellular Automata in 256 Rules (A single sheet interactive visualization of 256 elementary rules )
Petri -- a Go cellular automata framework
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}showAuthority control General
Integrated Authority File (Germany)
National libraries
France (data)
United States

show.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteConway's Game of Life and related cellular automataStructures
Breeder
Garden of Eden
Glider
Gun
Methuselah
Oscillator
Puffer train
Rake
Reflector
Replicator
Sawtooth
Spacefiller
Spaceship
Spark
Still life
Life variants
Day and Night
Highlife
Life without Death
Seeds
Concepts
Moore neighborhood
Speed of light
Von Neumann neighborhood
Implementations
Golly
Life Genesis
Video Life
Key people
John Conway
Martin Gardner
Bill Gosper
Richard Guy
Popular culture
Bloom
Wake





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Cellular_automaton&oldid=1065850629"
		Categories: Cellular automataSystems theoryDynamical systemsComputational fields of studyHidden categories: Harv and Sfn no-target errorsCS1 maint: archived copy as titleArticles with short descriptionShort description is different from WikidataUse dmy dates from July 2020Webarchive template wayback linksCommons category link is on WikidataArticles with GND identifiersArticles with BNF identifiersArticles with LCCN identifiers
	
