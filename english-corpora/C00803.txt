
Title:
Nondeterministic Turing machine
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Theoretical model of computation
.mw-parser-output .sidebar{width:22em;float:right;clear:right;margin:0.5em 0 1em 1em;background:#f8f9fa;border:1px solid #aaa;padding:0.2em;text-align:center;line-height:1.4em;font-size:88%;border-collapse:collapse;display:table}body.skin-minerva .mw-parser-output .sidebar{display:table!important;float:right!important;margin:0.5em 0 1em 1em!important}.mw-parser-output .sidebar-subgroup{width:100%;margin:0;border-spacing:0}.mw-parser-output .sidebar-left{float:left;clear:left;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-none{float:none;clear:both;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-outer-title{padding:0 0.4em 0.2em;font-size:125%;line-height:1.2em;font-weight:bold}.mw-parser-output .sidebar-top-image{padding:0.4em}.mw-parser-output .sidebar-top-caption,.mw-parser-output .sidebar-pretitle-with-top-image,.mw-parser-output .sidebar-caption{padding:0.2em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-pretitle{padding:0.4em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-title,.mw-parser-output .sidebar-title-with-pretitle{padding:0.2em 0.8em;font-size:145%;line-height:1.2em}.mw-parser-output .sidebar-title-with-pretitle{padding:0.1em 0.4em}.mw-parser-output .sidebar-image{padding:0.2em 0.4em 0.4em}.mw-parser-output .sidebar-heading{padding:0.1em 0.4em}.mw-parser-output .sidebar-content{padding:0 0.5em 0.4em}.mw-parser-output .sidebar-content-with-subgroup{padding:0.1em 0.4em 0.2em}.mw-parser-output .sidebar-above,.mw-parser-output .sidebar-below{padding:0.3em 0.8em;font-weight:bold}.mw-parser-output .sidebar-collapse .sidebar-above,.mw-parser-output .sidebar-collapse .sidebar-below{border-top:1px solid #aaa;border-bottom:1px solid #aaa}.mw-parser-output .sidebar-navbar{text-align:right;font-size:115%;padding:0 0.4em 0.4em}.mw-parser-output .sidebar-list-title{padding:0 0.4em;text-align:left;font-weight:bold;line-height:1.6em;font-size:105%}.mw-parser-output .sidebar-list-title-c{padding:0 0.4em;text-align:center;margin:0 3.3em}@media(max-width:720px){body.mediawiki .mw-parser-output .sidebar{width:100%!important;clear:both;float:none!important;margin-left:0!important;margin-right:0!important}}Turing machines
Machine
Turing machine equivalents
Turing machine examples
Turing machine gallery

Variants
Alternating Turing machine
Neural Turing machine
Nondeterministic Turing machine
Quantum Turing machine
PostâTuring machine
Probabilistic Turing machine
Read-only Turing machine
Read-only right moving Turing machines
Multitape Turing machine
Multi-track Turing machine
Symmetric Turing machine
Total Turing machine
Unambiguous Turing machine
Universal Turing machine
Zeno machine

Science
Alan Turing
Category:Turing machine
.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteThis article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources:Â "Nondeterministic Turing machine"Â âÂ newsÂ Â· newspapersÂ Â· booksÂ Â· scholarÂ Â· JSTOR  (January 2019) (Learn how and when to remove this template message)
In theoretical computer science, a nondeterministic Turing machine (NTM) is a theoretical model of computation whose governing rules specify more than one possible action when in some given situations. That is, an NTM's next state is not completely determined by its action and the current symbol it sees, unlike a deterministic Turing machine.
NTMs are sometimes used in thought experiments to examine the abilities and limits of computers. One of the most important open problems in theoretical computer science is the P versus NP problem, which (among other equivalent formulations) concerns the question of how difficult it is to simulate nondeterministic computation with a deterministic computer.

Contents

1 Background

1.1 Deterministic Turing machine


2 Intuition

2.1 Resolution of multiple rules


3 Definition

3.1 Alternate definitions


4 Computational equivalence with DTMs

4.1 DTM as a special case of NTM
4.2 DTM simulation of NTM

4.2.1 Multiplicity of configuration states
4.2.2 Multiplicity of tapes
4.2.3 Time complexity and P versus NP




5 Bounded nondeterminism
6 Comparison with quantum computers
7 See also
8 References
9 External links



Background[edit]
In essence, a Turing machine is imagined to be a simple computer that reads and writes symbols one at a time on an endless tape by strictly following a set of rules. It determines what action it should perform next according to its internal state and what symbol it currently sees. An example of one of a Turing Machine's rules might thus be: "If you are in state 2 and you see an 'A', change it to 'B', move left, and change to state 3."

Deterministic Turing machine[edit]
In a deterministic Turing machine (DTM), the set of rules prescribes at most one action to be performed for any given situation.
A deterministic Turing machine has a transition function that, for a given state and symbol under the tape head, specifies three things: 

the symbol to be written to the tape (it may be the same as the symbol currently in that position, or not even write at all, resulting in no practical change),
the direction (left, right or neither) in which the head should move, and
the subsequent state of the finite control.
For example, an X on the tape in state 3 might make the DTM write a Y on the tape, move the head one position to the right, and switch to state 5.

Intuition[edit]
  Comparison of deterministic and nondeterministic computation
In contrast to a deterministic Turing machine, in a nondeterministic Turing machine (NTM) the set of rules may prescribe more than one action to be performed for any given situation. For example, an X on the tape in state 3 might allow the NTM to:

Write a Y, move right, and switch to state 5
or

Write an X, move left, and stay in state 3.
Resolution of multiple rules[edit]
How does the NTM "know" which of these actions it should take? There are two ways of looking at it. One is to say that the machine is the "luckiest possible guesser"; it always picks a transition that eventually leads to an accepting state, if there is such a transition. The other is to imagine that the machine "branches" into many copies, each of which follows one of the possible transitions. Whereas a DTM has a single "computation path" that it follows, an NTM has a "computation tree". If at least one branch of the tree halts with an "accept" condition, the NTM accepts the input.

Definition[edit]
A nondeterministic Turing machine can be formally defined as a six-tuple 
  
    
      
        M
        =
        (
        Q
        ,
        Î£
        ,
        Î¹
        ,
        â
        ,
        A
        ,
        Î´
        )
      
    
    {\displaystyle M=(Q,\Sigma ,\iota ,\sqcup ,A,\delta )}
  
, where


  
    
      
        Q
      
    
    {\displaystyle Q}
  
 is a finite set of states

  
    
      
        Î£
      
    
    {\displaystyle \Sigma }
  
 is a finite set of symbols (the tape alphabet)

  
    
      
        Î¹
        â
        Q
      
    
    {\displaystyle \iota \in Q}
  
 is the initial state

  
    
      
        â
        â
        Î£
      
    
    {\displaystyle \sqcup \in \Sigma }
  
 is the blank symbol

  
    
      
        A
        â
        Q
      
    
    {\displaystyle A\subseteq Q}
  
 is the set of accepting (final) states

  
    
      
        Î´
        â
        
          (
          
            Q
            â
            A
            Ã
            Î£
          
          )
        
        Ã
        
          (
          
            Q
            Ã
            Î£
            Ã
            {
            L
            ,
            S
            ,
            R
            }
          
          )
        
      
    
    {\displaystyle \delta \subseteq \left(Q\backslash A\times \Sigma \right)\times \left(Q\times \Sigma \times \{L,S,R\}\right)}
  
 is a relation on states and symbols called the transition relation. 
  
    
      
        L
      
    
    {\displaystyle L}
  
 is the movement to the left, 
  
    
      
        S
      
    
    {\displaystyle S}
  
 is no movement, and 
  
    
      
        R
      
    
    {\displaystyle R}
  
 is the movement to the right.
The difference with a standard (deterministic) Turing machine is that, for deterministic Turing machines, the transition relation is a function rather than just a relation.
Configurations and the yields relation on configurations, which describes the possible actions of the Turing machine given any possible contents of the tape, are as for standard Turing machines, except that the yields relation is no longer single-valued. (If the machine is deterministic, the possible computations are all prefixes of a single, possibly infinite, path.)
The input for an NTM is provided in the same manner as for a deterministic Turing machine: the machine is started in the configuration in which the tape head is on the first character of the string (if any), and the tape is all blank otherwise.
An NTM accepts an input string if and only if at least one of the possible computational paths starting from that string puts the machine into an accepting state.  When simulating the many branching paths of an NTM on a deterministic machine, we can stop the entire simulation as soon as any branch reaches an accepting state.

Alternate definitions[edit]
As a mathematical construction used primarily in proofs, there are a variety of minor variations on the definition of an NTM, but these variations all accept equivalent languages.
The head movement in the output of the transition relation is often encoded numerically instead of using letters to represent moving the head Left (-1), Stationary (0), and Right (+1); giving a transition function output of 
  
    
      
        
          (
          
            Q
            Ã
            Î£
            Ã
            {
            â
            1
            ,
            0
            ,
            +
            1
            }
          
          )
        
      
    
    {\displaystyle \left(Q\times \Sigma \times \{-1,0,+1\}\right)}
  
.  It is common to omit the stationary (0) output,[1] and instead insert the transitive closure of any desired stationary transitions.
Some authors add an explicit reject state,[2]
which causes the NTM to halt without accepting.  This definition still retains the asymmetry that any nondeterministic branch can accept, but every branch must reject for the string to be rejected.

Computational equivalence with DTMs[edit]
Any computational problem that can be solved by a DTM can also be solved by a NTM, and vice versa. However, it is believed that in general the time complexity may not be the same.

DTM as a special case of NTM[edit]
NTMs include DTMs as special cases, so every computation that can be carried out by a DTM can also be carried out by the equivalent NTM.

DTM simulation of NTM[edit]
It might seem that NTMs are more powerful than DTMs, since they can allow trees of possible computations arising from the same initial configuration, accepting a string if any one branch in the tree accepts it. However, it is possible to simulate NTMs with DTMs, and in fact this can be done in more than one way.

Multiplicity of configuration states[edit]
One approach is to use a DTM of which the configurations represent multiple configurations of the NTM, and the DTM's operation consists of visiting each of them in turn, executing a single step at each visit, and spawning new configurations whenever the transition relation defines multiple continuations.

Multiplicity of tapes[edit]
Another construction simulates NTMs with 3-tape DTMs, of which the first tape always holds the original input string, the second is used to simulate a particular computation of the NTM, and the third encodes a path in the NTM's computation tree.[3] The 3-tape DTMs are easily simulated with a normal single-tape DTM.

Time complexity and P versus NP[edit]
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}Main article: P versus NP problem
In the second construction, the constructed DTM effectively performs a breadth-first search of the NTM's computation tree, visiting all possible computations of the NTM in order of increasing length until it finds an accepting one. Therefore, the length of an accepting computation of the DTM is, in general, exponential in the length of the shortest accepting computation of the NTM. This is believed to be a general property of simulations of NTMs by DTMs. The P = NP problem, the most famous unresolved question in computer science, concerns one case of this issue: whether or not every problem solvable by a NTM in polynomial time is necessarily also solvable by a DTM in polynomial time.

Bounded nondeterminism[edit]
An NTM has the property of bounded nondeterminism.  That is, if an NTM always halts on a given input tape T then it halts in a bounded number of steps, and therefore can only have a bounded number of possible configurations.

Comparison with quantum computers[edit]
  The suspected shape of the range of problems solvable by quantum computers in polynomial time (BQP). Note that the figure suggests 
  
    
      
        
          
            P
          
        
        â 
        
          
            N
            P
          
        
      
    
    {\displaystyle {\mathsf {P}}\neq {\mathsf {NP}}}
  
 and 
  
    
      
        
          
            N
            P
          
        
        â 
        
          
            P
            S
            P
            A
            C
            E
          
        
      
    
    {\displaystyle {\mathsf {NP}}\neq {\mathsf {PSPACE}}}
  
. If this is not true then the figure should look different.
Because quantum computers use quantum bits, which can be in superpositions of states, rather than conventional bits, there is sometimes a misconception that quantum computers are NTMs.[4] However, it is believed by experts (but has not been proven) that the power of quantum computers is, in fact, incomparable to that of NTMs; that is, problems likely exist that an NTM could efficiently solve that a quantum computer cannot and vice versa.[5][betterÂ sourceÂ needed] In particular, it is likely that NP-complete problems are solvable by NTMs but not by quantum computers in polynomial time.
Intuitively speaking, while a quantum computer can indeed be in a superposition state corresponding to all possible computational branches having been executed at the same time (similar to an NTM), the final measurement will collapse the quantum computer into a randomly selected branch. This branch then does not, in general, represent the sought-for solution, unlike the NTM, which is allowed to pick the right solution among the exponentially many branches.

See also[edit]
Probabilistic Turing machine
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Garey, Michael R.; David S. Johnson (1979). Computers and Intractability: A Guide to the Theory of NP-Completeness. W. H. Freeman. ISBNÂ 0-7167-1045-5.

^ Erickson, Jeff. "Nondeterministic Turing Machines" (PDF). U. Illinois Urbana-Champaign. Retrieved 2019-04-07.

^ Lewis, Harry R.; Papadimitriou, Christos (1981). "Section 4.6: Nondeterministic Turing machines". Elements of the Theory of Computation (1stÂ ed.). Englewood Cliffs, New Jersey: Prentice-Hall. pp.Â 204â211. ISBNÂ 978-0132624787.

^ The Orion Quantum Computer Anti-Hype FAQ, Scott Aaronson.

^ TuÅ¡arovÃ¡, Tereza (2004). "Quantum complexity classes". arXiv:cs/0409051..


Martin, John C. (1997). "Section 9.6: Nondeterministic Turing machines". Introduction to Languages and the Theory of Computation (2ndÂ ed.). McGraw-Hill. pp.Â 277â281. ISBNÂ 978-0073191461.
Papadimitriou, Christos (1993). "Section 2.7: Nondeterministic machines". Computational Complexity (1stÂ ed.). Addison-Wesley. pp.Â 45â50. ISBNÂ 978-0201530827.
External links[edit]
C++ Simulator of a Nondeterministic Multitape Turing Machine (free software).
C++ Simulator of a Nondeterministic Multitape Turing Machine download link from sourceforge.net




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Nondeterministic_Turing_machine&oldid=1068809013"
		Categories: Turing machineHidden categories: Articles with short descriptionShort description is different from WikidataArticles needing additional references from January 2019All articles needing additional referencesAll articles lacking reliable referencesArticles lacking reliable references from September 2017AC with 0 elements
	
