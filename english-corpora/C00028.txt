
Title:
Rust (programming language)
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Memory-safe programming language without garbage collection


.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}RustThe official Rust logoParadigmsMulti-paradigm: concurrent, functional, generic, imperative, structuredDesignedÂ byGraydon HoareDeveloperThe Rust FoundationFirstÂ appearedJulyÂ 7, 2010; 11 years agoÂ (2010-07-07)Stable release1.58.1[1]Â 
   / January 20, 2022; 13 days agoÂ (January 20, 2022)
Typing disciplineAffine, inferred, nominal, static, strongImplementation languageRustPlatformAMD64 , i686, arm, AArch64, armv7, mips, mips64, mipsel, mips64el, powerpc, powerpc64, powerpc64le, risc-v, s390x, WebAssembly[note 1]OSWindows, Linux, macOS, FreeBSD, NetBSD, Illumos, Haiku, Android, Redox, iOS, Fuchsia[note 2]LicenseMIT or Apache 2.0[2]Filename extensions.rs, .rlibWebsitewww.rust-lang.orgInfluenced by.mw-parser-output ul.cslist,.mw-parser-output ul.sslist{margin:0;padding:0;display:inline-block;list-style:none}.mw-parser-output ul.cslist-embedded{display:inline}.mw-parser-output .cslist li,.mw-parser-output .sslist li{margin:0;padding:0 0.25em 0 0;display:inline-block}.mw-parser-output .cslist li:after{content:", "}.mw-parser-output .sslist li:after{content:"; "}.mw-parser-output .cslist li:last-child:after,.mw-parser-output .sslist li:last-child:after{content:none}AlefC#C++Cyclone[3]ErlangHaskellLimboNewsqueakOCamlRubySchemeStandard MLSwift[4][note 3]InfluencedCrystalElm[6]Idris[7]Spark[8]Swift[9]Project Verona[10]ZigPHP[11]
Rust is a multi-paradigm, general-purpose programming language designed for performance and safety, especially safe concurrency.[12][13] Rust is syntactically similar to C++,[14] but can guarantee memory safety by using a borrow checker to validate references.[15] Rust achieves memory safety without garbage collection, and reference counting is optional.[16][17] Rust has been called a systems programming language and in addition to high-level features such as functional programming it also offers mechanisms for low-level memory management.
First appearing in 2010, Rust was designed by Graydon Hoare at Mozilla Research,[18] with contributions from Dave Herman, Brendan Eich, and others.[19][20] The designers refined the language while writing the Servo experimental browser engine[21] and the Rust compiler. Rust's major influences include C++, OCaml, Haskell, and Erlang.[5] It has gained increasing use and investment in industry, by companies including Amazon, Discord, Dropbox, Facebook (Meta), Google (Alphabet), and Microsoft.
Rust has been voted the "most loved programming language" in the Stack Overflow Developer Survey every year since 2016, and was used by 7% of the respondents in 2021.[22]

Contents

1 History
2 Syntax
3 Features

3.1 Memory safety
3.2 Memory management
3.3 Ownership
3.4 Types and polymorphism
3.5 Macros for language extension
3.6 Interface with C and C++


4 Components

4.1 Cargo
4.2 Rustfmt
4.3 Clippy
4.4 IDE support


5 Performance
6 Adoption

6.1 Web browsers and services
6.2 Operating systems
6.3 Other notable projects and platforms


7 Community
8 Governance
9 See also
10 Explanatory notes
11 References
12 Further reading
13 External links



History[edit]
  An example of compiling a Rust program
The language grew out of a personal project begun in 2006 by Mozilla employee Graydon Hoare.[13] Hoare has stated that the project was possibly named after rust fungi and that the name is also a subsequence of "robust".[23] Mozilla began sponsoring the project in 2009[13] and announced it in 2010.[24][25] The same year, work shifted from the initial compiler (written in OCaml) to an LLVM-based self-hosting compiler written in Rust.[26]  Named .mw-parser-output .monospaced{font-family:monospace,monospace}rustc, it successfully compiled itself in 2011.[27]
The first numbered pre-alpha release of the Rust compiler occurred in January 2012.[28] Rust 1.0, the first stable release, was released on May 15, 2015.[29][30] Following 1.0, stable point releases are delivered every six weeks, while features are developed in nightly Rust with daily releases, then tested with beta releases that last six weeks.[31][32] Every two to three years, a new Rust "Edition" is produced. This is to provide an easy reference point for changes due to the frequent nature of Rust's Train release schedule, as well as to provide a window to make breaking changes. Editions are largely compatible.[33]
Along with conventional static typing, before version 0.4, Rust also supported typestates.  The typestate system modeled assertions before and after program statements, through use of a special check statement. Discrepancies could be discovered at compile time, rather than at runtime, as might be the case with assertions in C or C++ code. The typestate concept was not unique to Rust, as it was first introduced in the language NIL.[34] Typestates were removed because in practice they were little used,[35] though the same functionality can be achieved by leveraging Rust's move semantics.[36]
The object system style changed considerably within versions 0.2, 0.3, and 0.4 of Rust. Version 0.2 introduced classes for the first time, and version 0.3 added several features, including destructors and polymorphism through the use of interfaces. In Rust 0.4, traits were added as a means to provide inheritance; interfaces were unified with traits and removed as a separate feature. Classes were also removed and replaced by a combination of implementations and structured types.[37]
Starting in Rust 0.9 and ending in Rust 0.11, Rust had two built-in pointer types: ~ and @, simplifying the core memory model. It reimplemented those pointer types in the standard library as Box and (the now removed) Gc.
In January 2014, before the first stable release, Rust 1.0, the editor-in-chief of Dr. Dobb's, Andrew Binstock, commented on Rust's chances of becoming a competitor to C++ and to the other up-and-coming languages D, Go, and Nim (then Nimrod). According to Binstock, while Rust was "widely viewed as a remarkably elegant language", adoption slowed because it repeatedly changed between versions.[38]
In August 2020, Mozilla laid off 250 of its 1,000 employees worldwide as part of a corporate restructuring caused by the long-term impact of the COVID-19 pandemic.[39][40] Among those laid off were most of the Rust team,[41][betterÂ sourceÂ needed] while the Servo team was completely disbanded.[42][betterÂ sourceÂ needed] The event raised concerns about the future of Rust.[43]
In the following week, the Rust Core Team acknowledged the severe impact of the layoffs and announced that plans for a Rust foundation were underway. The first goal of the foundation would be taking ownership of all trademarks and domain names, and also take financial responsibility for their costs.[44]
On February 8, 2021 the formation of the Rust Foundation was officially announced by its five founding companies (AWS, Huawei, Google, Microsoft,[45][46] and Mozilla).[47][48]
On April 6, 2021, Google announced support for Rust within Android Open Source Project as an alternative to C/C++.[49]

Syntax[edit]
Here is a "Hello, World!" program written in Rust. The println! macro prints the message to standard output.fn main() {
    println!("Hello, World!");
}

The syntax of Rust is similar to C and C++, with blocks of code delimited by curly brackets, and control flow keywords such as if, else, while, and for, although the specific syntax for defining functions is more similar to Pascal. Despite the syntactic resemblance to C and C++, the semantics of Rust are closer to that of the ML family of languages and the Haskell language. Nearly every part of a function body is an expression,[50] even control flow operators. For example, the ordinary if expression also takes the place of C's ternary conditional, an idiom used by ALGOL 60. As in Lisp, a function need not end with a return expression: in this case if the semicolon is omitted, the last expression in the function creates the return value, as seen in the following recursive implementation of the factorial function:

fn factorial(i: u64) -> u64 {
    match i {
        0 => 1,
        n => n * factorial(n-1)
    }
}

The following iterative implementation uses the ..= operator to create an inclusive range:

fn factorial(i: u64) -> u64 {
    (2..=i).product()
}

More advanced features in Rust include the use of generic functions to achieve type polymorphism. The following is a Rust program to calculate the sum of two things, for which addition is implemented, using a generic function:

use std::ops::Add;

fn sum<T: Add<Output = T>>(num1: T, num2: T) -> T {
    num1 + num2
}

fn main() {
    let result1 = sum(10, 20);
    println!("Sum is: {}", result1);
    
    let result2 = sum(10.23, 20.45);
    println!("Sum is: {}", result2);
}

Features[edit]
Play media  A presentation on Rust by Emily Dunham from Mozilla's Rust team (linux.conf.au conference, Hobart, 2017)
Rust is intended to be a language for highly concurrent and highly safe systems,[51] and programming in the large, that is, creating and maintaining boundaries that preserve large-system integrity.[52] This has led to a feature set with an emphasis on safety, control of memory layout, and concurrency.

Memory safety[edit]
Rust is designed to be memory safe. It does not permit null pointers, dangling pointers, or data races.[53][54][55] Data values can be initialized only through a fixed set of forms, all of which require their inputs to be already initialized.[56]  To replicate pointers being either valid or NULL, such as in linked list or binary tree data structures, the Rust core library provides an option type, which can be used to test whether a pointer has Some value or None.[54]  Rust has added syntax to manage lifetimes, which are checked at compile time by the borrow checker. Unsafe code can subvert some of these restrictions using the unsafe keyword.[15]

Memory management[edit]
Rust does not use automated garbage collection. Memory and other resources are managed through the resource acquisition is initialization convention,[57] with optional reference counting. Rust provides deterministic management of resources, with very low overhead.[58] Rust favors stack allocation of values and does not perform implicit boxing.
There is the concept of references (using the & symbol), which does not involve run-time reference counting. The safety of such pointers is verified at compile time, preventing dangling pointers and other forms of undefined behavior. Rust's type system separates shared, immutable pointers of the form &T from unique, mutable pointers of the form &mut T. A mutable pointer can be coerced to an immutable pointer, but not vice versa.

Ownership[edit]
Rust has an ownership system where all values have a unique owner, and the scope of the value is the same as the scope of the owner.[59][60] Values can be passed by immutable reference, using &T, by mutable reference, using &mut T, or by value, using T. At all times, there can either be multiple immutable references or one mutable reference (an implicit readersâwriter lock). The Rust compiler enforces these rules at compile time and also checks that all references are valid.

Types and polymorphism[edit]
Rust's type system supports a mechanism called traits, inspired by type classes in the Haskell language. Traits annotate types and are used to define shared behavior between different types. For example, floats and integers both implement the Add trait because they can both be added; and any type that can be printed out as a string implements the Display or Debug traits. This facility is known as ad hoc polymorphism.
Rust uses type inference for variables declared with the keyword let. Such variables do not require a value to be initially assigned to determine their type. A compile time error results if any branch of code leaves the variable without an assignment.[61] Variables assigned multiple times must be marked with the keyword mut (short for mutable).
A function can be given generic parameters, which allows the same function to be applied to different types. Generic functions can constrain the generic type to implement a particular trait or traits; for example, an "add one" function might require the type to implement "Add". This means that a generic function can be type-checked as soon as it is defined.
The implementation of Rust generics is similar to the typical implementation of C++ templates: a separate copy of the code is generated for each instantiation. This is called monomorphization and contrasts with the type erasure scheme typically used in Java and Haskell. Rust's type erasure is also available by using the keyword dyn. The benefit of monomorphization is optimized code for each specific use case; the drawback is increased compile time and size of the resulting binaries.
In Rust, user-defined types are created with the struct keyword. These types usually contains fields of data like objects or classes in other languages. The impl keyword can define methods for the struct (data and function are defined separately in a struct) or implement a trait for the structure. A trait is a contract that a structure has certain required methods implemented. Traits are used to restrict generic parameters and because traits can provide a struct with more methods than the user defined. For example, the trait Iterator requires that the next method be defined for the type. Once the next method is defined the trait provides common functional helper methods over the iterator like map or filter.
The object system within Rust is based around implementations, traits and structured types. Implementations fulfill a role similar to that of classes within other languages and are defined with the keyword impl. Traits provide inheritance and polymorphism; they allow methods to be defined and mixed in to implementations. Structured types are used to define fields. Implementations and traits cannot define fields themselves, and only traits can provide inheritance. Among other benefits, this prevents the diamond problem of multiple inheritance, as in C++. In other words, Rust supports interface inheritance but replaces implementation inheritance with composition; see composition over inheritance.

Macros for language extension[edit]
It is possible to extend the Rust language using the procedural macro mechanism.[62]
Procedural macros use Rust functions that run at compile time to modify the compiler's token stream. This complements the declarative macro mechanism (also known as macros by example), which uses pattern matching to achieve similar goals.
Procedural macros come in three flavors:

Function-like macros custom!(...)
Derive macros #[derive(CustomDerive)]
Attribute macros #[custom_attribute]
The println! macro is an example of a function-like macro and serde_derive[63] is a commonly used library for generating code
for reading and writing data in many formats such as JSON. Attribute macros are commonly used for language bindings such as the extendr library for Rust bindings to R.[64]
The following code shows the use of the Serialize, Deserialize and Debug derive procedural macros
to implement JSON reading and writing as well as the ability to format a structure for debugging.

use serde_json::{Serialize, Deserialize};

#[derive(Serialize, Deserialize, Debug)]
struct Point {
    x: i32,
    y: i32,
}

fn main() {
    let point = Point { x: 1, y: 2 };

    let serialized = serde_json::to_string(&point).unwrap();
    println!("serialized = {}", serialized);

    let deserialized: Point = serde_json::from_str(&serialized).unwrap();
    println!("deserialized = {:?}", deserialized);
}

Interface with C and C++[edit]
Rust has a foreign function interface (FFI) that can be used both to call code written in languages such as C from Rust and to call Rust code from those languages. While calling C++ has historically been challenging (from any language), Rust has a library, CXX, to allow calling to or from C++, and "CXX has zero or negligible overhead."[65]

Components[edit]
Besides the compiler and standard library, the Rust ecosystem includes additional components for software development. Component installation is typically managed by rustup, a Rust toolchain installer developed by the Rust project.[66]

Cargo[edit]
Cargo is Rust's build system and package manager. Cargo handles downloading and building dependencies. Cargo also acts as a wrapper for Clippy and other Rust components. It requires projects to follow a certain directory structure.[67]
The dependencies for a Rust package are specified in a Cargo.toml file along with version requirements, telling Cargo which versions of the dependency are compatible with the package. By default, Cargo sources its dependencies from the user-contributed registry crates.io, but Git repositories and packages in the local filesystem can be specified as dependencies, too.[68]

Rustfmt[edit]
Rustfmt is a code formatter for Rust. It takes Rust source code as input and changes the whitespace and indentation to produce code formatted in accordance to the Rust style guide or rules specified in a rustfmt.toml file. Rustfmt can be invoked as a standalone program or on a Rust project through Cargo.[69][70]

Clippy[edit]
Clippy is Rust's built-in linting tool to improve the correctness, performance, and readability of Rust code. It was created in 2014[71] and named after the eponymous Microsoft Office feature.[72] As of 2021, Clippy has more than 450 rules,[73] which can be browsed online and filtered by category.[74] Some rules are disabled by default.

IDE support[edit]
The most popular language servers for Rust are rust-analyzer[75] and RLS.[76] These projects provide IDEs and text editors with more information about a Rust project.
Basic features include linting checks via Clippy and formatting via Rustfmt, among other functions. RLS also provides automatic code completion via Racer, though development of Racer was slowed down in favor of rust-analyzer.[77]

Performance[edit]
Rust aims "to be as efficient and portable as idiomatic C++, without sacrificing safety".[78] Since Rust utilizes LLVM, any performance improvements in LLVM also carry over to Rust.[79]

Adoption[edit]
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}See also: Category:Rust (programming language) software

Rust has been adopted by major software engineering companies. For example, Dropbox is now written in Rust as well as some components at Amazon,[80] Microsoft, Facebook,[81] Discord,[82]
and the Mozilla Foundation. Rust was the third-most-loved programming language in the 2015 Stack Overflow annual survey[83] and took first place for 2016â2021.[84][85]

Web browsers and services[edit]
Firefox has two projects written in Rust: the Servo parallel browser engine[86] developed by Mozilla in collaboration with Samsung;[87] and Quantum, which is composed of several sub-projects for improving Mozilla's Gecko browser engine.[88]
OpenDNS uses Rust in two of its components.[89][90][91]
Deno, a secure runtime for JavaScript and TypeScript, is built with V8, Rust, and Tokio.[92]
Figma, a web-based vector graphics editor, is written in Rust.
Operating systems[edit]
Redox is a "full-blown Unix-like operating system" including a microkernel written in Rust.[93]
Theseus, an experimental OS with "intralingual design", is written in Rust.[94]
The Google Fuchsia capability-based operating system has some[vague] tools written in Rust.[95]
Stratis is a file system manager written in Rust for Fedora[96] and RHEL 8.[97]
exa is a Unix/Linux command line alternative to ls written in Rust.
Other notable projects and platforms[edit]
Discord uses Rust for portions of its backend, as well as client-side video encoding,[98] to augment the core infrastructure written in Elixir.[99]
Microsoft Azure IoT Edge, a platform used to run Azure services and artificial intelligence on IoT devices, has components implemented in Rust.[100]
Amethyst and Bevy are data-driven game engines built in Rust.
Polkadot (cryptocurrency) is a blockchain platform written in Rust.
Ruffle is an open-source SWF emulator written in Rust.[101]
TerminusDB, an open source graph database designed for collaboratively building and curating knowledge graphs, is written in Prolog and Rust.[102]
Amazon Web Services has multiple projects written in Rust, including Firecracker, a virtualization solution,[103] and Bottlerocket, a Linux distribution and containerization solution.[104]
Community[edit]
  Some Rust users refer to themselves as Rustaceans (a pun on crustacean) and use Ferris (the orange crab above) as their unofficial mascot.[105]
Rust's official website lists online forums, messaging platforms, and in-person meetups for the Rust community.[106]
Conferences dedicated to Rust development include:

RustConf: an annual conference in Portland, Oregon. Held annually since 2016 (except in 2020 and 2021 because of the COVID-19 pandemic).[107]
Rust Belt Rust: a #rustlang conference in the Rust Belt[108]
RustFest: Europe's @rustlang conference[109]
RustCon Asia[citation needed]
Rust LATAM[citation needed]
Oxidize Global[110]
Governance[edit]
Rust FoundationFormationFebruaryÂ 8, 2021; 11 months agoÂ (2021-02-08)FoundersAmazon Web ServicesGoogleHuaweiMicrosoftMozilla FoundationTypeNonprofit organizationLocationUnited StatesChairpersonShane MillerExecutive DirectorRebecca RumbulWebsitefoundation.rust-lang.org
The Rust Foundation is a non-profit membership organization incorporated in Delaware, United States, with the primary purposes of supporting the maintenance and development of the language, cultivating the Rust project team members and user communities, managing the technical infrastructure underlying the development of Rust, and managing and stewarding the Rust trademark.
It was established on February 8, 2021, with five founding corporate members (Amazon Web Services, Huawei, Google, Microsoft, and Mozilla).[111] The foundation's board is chaired by Shane Miller.[112] Starting in late 2021, its Executive Director and CEO is Rebecca Rumbul .[113] Prior to this, Ashley Williams was interim executive director.[114]

See also[edit]
List of programming languages
History of programming languages
Comparison of programming languages
Explanatory notes[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ The list is incomplete; the degree of standard library support varies.

^ Host build tools on Haiku, Android, Redox, iOS, and Fuchsia are not officially shipped; these operating systems are supported as targets.

^ For a complete list, see [5]



References[edit]


^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}"Announcing Rust 1.58.1". January 20, 2022. Retrieved January 21, 2022.

^ "Rust Legal Policies". Rust-lang.org. Archived from the original on April 4, 2018. Retrieved April 3, 2018.

^ "Note Research: Type System". GitHub. February 1, 2015. Archived from the original on February 17, 2019. Retrieved March 25, 2015.

^ "RFC for 'if let' expression". GitHub. Archived from the original on March 4, 2016. Retrieved December 4, 2014.

^ Jump up to: a b "The Rust Reference: Appendix: Influences". Archived from the original on January 26, 2019. Retrieved November 11, 2018.

^ "Command Optimizations?". June 26, 2014. Archived from the original on July 10, 2019. Retrieved December 10, 2014.

^ "Idris â Uniqueness Types". Archived from the original on November 21, 2018. Retrieved November 20, 2018.

^ Jaloyan, Georges-Axel (October 19, 2017). "Safe Pointers in SPARK 2014". arXiv:1710.07047. Bibcode:2017arXiv171007047J.

^ Lattner, Chris. "Chris Lattner's Homepage". Nondot.org. Archived from the original on December 25, 2018. Retrieved May 14, 2019.

^ "Microsoft opens up Rust-inspired Project Verona programming language on GitHub". ZDNet. Archived from the original on January 17, 2020. Retrieved January 17, 2020.

^ "PHP RFC: Shorter Attribute Syntax". June 3, 2020. Archived from the original on March 7, 2021. Retrieved March 17, 2021.

^ Hoare, Graydon (December 28, 2016). "Rust is mostly safety". Graydon2. Dreamwidth Studios. Archived from the original on May 2, 2019. Retrieved May 13, 2019.

^ Jump up to: a b c "FAQ â The Rust Project". Rust-lang.org. Archived from the original on June 9, 2016. Retrieved June 27, 2019.

^ "Rust vs. C++ Comparison". Archived from the original on November 20, 2018. Retrieved November 20, 2018.

^ Jump up to: a b "Unsafe Rust". Archived from the original on October 14, 2020. Retrieved October 17, 2020.

^ "Fearless Security: Memory Safety". Archived from the original on November 8, 2020. Retrieved November 4, 2020.

^ "Rc<T>, the Reference Counted Smart Pointer". Archived from the original on November 11, 2020. Retrieved November 4, 2020.

^ "Rust language". Archived from the original on September 6, 2020. Retrieved September 9, 2020. Mozilla was the first investor for Rust and continues to sponsor the work of the open source project. Mozilla also utilizes Rust in many of its core initiatives including Servo and key parts of Firefox.

^ Noel (July 8, 2010). "The Rust Language". Lambda the Ultimate. Archived from the original on November 23, 2012. Retrieved October 30, 2010.

^ "Contributors to rust-lang/rust". GitHub. Archived from the original on May 26, 2020. Retrieved October 12, 2018.

^ Bright, Peter (April 3, 2013). "Samsung teams up with Mozilla to build browser engine for multicore machines". Ars Technica. Archived from the original on December 16, 2016. Retrieved April 4, 2013.

^ "Stack Overflow Developer Survey 2021". Stack Overflow. Retrieved August 3, 2021.{{cite web}}:  CS1 maint: url-status (link)

^ Hoare, Graydon (June 7, 2014). "Internet archaeology: the definitive, end-all source for why Rust is named "Rust"". Reddit.com. Archived from the original on July 14, 2016. Retrieved November 3, 2016.

^ "Future Tense". April 29, 2011. Archived from the original on September 18, 2012. Retrieved February 6, 2012.

^ Hoare, Graydon (July 7, 2010). Project Servo (PDF). Mozilla Annual Summit 2010. Whistler, Canada. Archived (PDF) from the original on July 11, 2017. Retrieved February 22, 2017.

^ Hoare, Graydon (October 2, 2010). "Rust Progress". Archived from the original on August 15, 2014. Retrieved October 30, 2010.

^ Hoare, Graydon (April 20, 2011). "[rust-dev] stage1/rustc builds". Archived from the original on July 20, 2011. Retrieved April 20, 2011.

^ catamorphism (January 20, 2012). "Mozilla and the Rust community release Rust 0.1 (a strongly-typed systems programming language with a focus on memory safety and concurrency)". Archived from the original on January 24, 2012. Retrieved February 6, 2012.

^ "Version History". GitHub. Archived from the original on May 15, 2015. Retrieved January 1, 2017.

^ The Rust Core Team (May 15, 2015). "Announcing Rust 1.0". Archived from the original on May 15, 2015. Retrieved December 11, 2015.

^ "Scheduling the Trains". Archived from the original on January 2, 2017. Retrieved January 1, 2017.

^ "G - How Rust is Made and "Nightly Rust" - The Rust Programming Language". doc.rust-lang.org. Retrieved May 22, 2021.

^ "What are editions? - The Edition Guide". doc.rust-lang.org. Retrieved May 22, 2021.

^ Strom, Robert E.; Yemini, Shaula (1986). "Typestate: A Programming Language Concept for Enhancing Software Reliability" (PDF). IEEE Transactions on Software Engineering: 157â171. doi:10.1109/TSE.1986.6312929. ISSNÂ 0098-5589. S2CIDÂ 15575346. Archived (PDF) from the original on July 14, 2010. Retrieved November 14, 2010.

^ Walton, Patrick (December 26, 2012). "Typestate Is Dead, Long Live Typestate!". GitHub. Archived from the original on February 23, 2018. Retrieved November 3, 2016.

^ Biffle, Cliff (June 5, 2019). "The Typestate Pattern in Rust". Archived from the original on February 6, 2021. Retrieved February 1, 2021.

^ "[rust-dev] Rust 0.4 released". mail.mozilla.org. Retrieved October 31, 2021.

^ Binstock, Andrew. "The Rise And Fall of Languages in 2013". Dr Dobb's. Archived from the original on August 7, 2016. Retrieved December 11, 2015.

^ Cimpanu, Catalin (August 11, 2020). "Mozilla lays off 250 employees while it refocuses on commercial products". ZDNet. Retrieved December 2, 2020.

^ Cooper, Daniel (August 11, 2020). "Mozilla lays off 250 employees due to the pandemic". Engadget. Archived from the original on December 13, 2020. Retrieved December 2, 2020.

^ @tschneidereit (August 12, 2020). "Much of the team I used to manage was part of the Mozilla layoffs on Tuesday. That team was Mozilla's Rust team, and Mozilla's Wasmtime team. I thought I'd know how to talk about it by now, but I don't. It's heartbreaking, incomprehensible, and staggering in its impact" (Tweet). Retrieved December 2, 2020 â via Twitter.

^ @asajeffrey (August 11, 2020). "Mozilla is closing down the team I'm on, so I am one of the many folks now wondering what the next gig will be. It's been a wild ride!" (Tweet). Retrieved December 2, 2020 â via Twitter.

^ Kolakowski, Nick (August 27, 2020). "Is Rust in Trouble After Big Mozilla Layoffs?". Dice. Archived from the original on November 24, 2020. Retrieved December 2, 2020.

^ "Laying the foundation for Rust's future". Rust Blog. August 18, 2020. Archived from the original on December 2, 2020. Retrieved December 2, 2020.

^ "How Microsoft Is Adopting Rust". August 6, 2020. Archived from the original on August 10, 2020. Retrieved August 7, 2020.

^ "Why Rust for safe systems programming". Archived from the original on July 22, 2019. Retrieved July 22, 2019.

^ "Rust Foundation". foundation.rust-lang.org. February 8, 2021. Archived from the original on February 9, 2021. Retrieved February 9, 2021.

^ "Mozilla Welcomes the Rust Foundation". Mozilla Blog. February 9, 2021. Archived from the original on February 8, 2021. Retrieved February 9, 2021.

^ Amadeo, Ron (April 7, 2021). "Google is now writing low-level Android code in Rust". Ars Technica. Archived from the original on April 8, 2021. Retrieved April 8, 2021.

^ "rust/src/grammar/parser-lalr.y". GitHub. May 23, 2017. Retrieved May 23, 2017.

^ Avram, Abel (August 3, 2012). "Interview on Rust, a Systems Programming Language Developed by Mozilla". InfoQ. Archived from the original on July 24, 2013. Retrieved August 17, 2013.

^ "Debian -- Details of package rustc in sid". packages.debian.org. Archived from the original on February 22, 2017. Retrieved February 21, 2017.

^ Rosenblatt, Seth (April 3, 2013). "Samsung joins Mozilla's quest for Rust". Archived from the original on April 4, 2013. Retrieved April 5, 2013.

^ Jump up to: a b Brown, Neil (April 17, 2013). "A taste of Rust". Archived from the original on April 26, 2013. Retrieved April 25, 2013.

^ "Races - The Rustonomicon". doc.rust-lang.org. Archived from the original on July 10, 2017. Retrieved July 3, 2017.

^ "The Rust Language FAQ". static.rust-lang.org. 2015. Archived from the original on April 20, 2015. Retrieved April 24, 2017.

^ "RAII â Rust By Example". doc.rust-lang.org. Archived from the original on April 21, 2019. Retrieved November 22, 2020.

^ "Abstraction without overhead: traits in Rust". Rust Blog.

^ Klabnik, Steve; Nichols, Carol (June 2018). "Chapter 4: Understanding Ownership". The Rust Programming Language. San Francisco, California: No Starch Press. p.Â 44. ISBNÂ 978-1-593-27828-1. Archived from the original on May 3, 2019. Retrieved May 14, 2019.

^ "The Rust Programming Language: What is Ownership". Rust-lang.org. Archived from the original on May 19, 2019. Retrieved May 14, 2019.

^ Walton, Patrick (October 1, 2010). "Rust Features I: Type Inference". Archived from the original on July 8, 2011. Retrieved January 21, 2011.

^ "Procedural Macros". The Rust Programming Language Reference. Archived from the original on November 7, 2020. Retrieved March 23, 2021.

^ "Serde Derive". Serde Derive documentation. Archived from the original on April 17, 2021. Retrieved March 23, 2021.

^ "extendr_api - Rust". Extendr Api Documentation. Retrieved March 23, 2021.

^ "Safe Interoperability between Rust and C++ with CXX". InfoQ. December 6, 2020. Retrieved January 3, 2021.

^ rust-lang/rustup, The Rust Programming Language, May 17, 2021, retrieved May 17, 2021

^ "Why Cargo Exists". The Cargo Book. Retrieved May 18, 2021.

^ "Specifying Dependencies - The Cargo Book". doc.rust-lang.org. Retrieved May 17, 2021.

^ "rust-dev-tools/fmt-rfcs". GitHub. Retrieved September 21, 2021.

^ "rustfmt". GitHub. Retrieved May 19, 2021.

^ "Create README.md Â· rust-lang/rust-clippy@507dc2b". GitHub. Retrieved November 22, 2021.

^ "Day 1 - cargo subcommands | 24 days of Rust". zsiciarz.github.io. Retrieved November 22, 2021.

^ "rust-lang/rust-clippy". GitHub. Retrieved May 21, 2021.

^ "ALL the Clippy Lints". Retrieved May 22, 2021.

^ rust-analyzer/rust-analyzer, rust-analyzer, January 2, 2022, retrieved January 2, 2022

^ "rust-lang/rls". GitHub. Retrieved May 26, 2021.

^ "racer-rust/racer". GitHub. Retrieved May 26, 2021.

^ Walton, Patrick (December 5, 2010). "C++ Design Goals in the Context of Rust". Archived from the original on December 9, 2010. Retrieved January 21, 2011.

^ "How Fast Is Rust?". The Rust Programming Language FAQ. Archived from the original on October 28, 2020. Retrieved April 11, 2019.

^ "How our AWS Rust team will contribute to Rust's future successes". Amazon Web Services. March 3, 2021. Retrieved January 2, 2022.

^ "A brief history of Rust at Facebook". Engineering at Meta. Retrieved January 19, 2022.

^ 9 Companies That Use Rust in Production, Serokell, November 18, 2020, retrieved October 7, 2021

^ "Stack Overflow Developer Survey 2015". Stackoverflow.com. Archived from the original on December 31, 2016. Retrieved November 3, 2016.

^ "Stack Overflow Developer Survey 2019". Stack Overflow. Archived from the original on October 8, 2020. Retrieved March 31, 2021.

^ "Stack Overflow Developer Survey 2021". Stack Overflow. Retrieved August 24, 2021.{{cite web}}:  CS1 maint: url-status (link)

^ Yegulalp, Serdar (April 3, 2015). "Mozilla's Rust-based Servo browser engine inches forward". InfoWorld. Archived from the original on March 16, 2016. Retrieved March 15, 2016.

^ Lardinois, Frederic (April 3, 2015). "Mozilla And Samsung Team Up To Develop Servo, Mozilla's Next-Gen Browser Engine For Multicore Processors". TechCrunch. Archived from the original on September 10, 2016. Retrieved June 25, 2017.

^ Bryant, David (October 27, 2016). "A Quantum Leap for the web". Medium. Archived from the original on December 9, 2020. Retrieved October 27, 2016.

^ Balbaert, Ivo (May 27, 2015). Rust Essentials. Packt Publishing. p.Â 6. ISBNÂ 978-1785285769. Retrieved March 21, 2016.

^ Frank, Denis (December 5, 2013). "Using HyperLogLog to Detect Malware Faster Than Ever". OpenDNS Security Labs. Archived from the original on August 14, 2017. Retrieved March 19, 2016.

^ Denis, Frank (October 4, 2013). "ZeroMQ: Helping us Block Malicious Domains in Real Time". OpenDNS Security Labs. Archived from the original on August 14, 2017. Retrieved March 19, 2016.

^ Garbutt, James (January 27, 2019). "First thoughts on Deno, the JavaScript/TypeScript run-time". 43081j.com. Archived from the original on November 7, 2020. Retrieved September 27, 2019.

^ Yegulalp, Serdar. "Rust's Redox OS could show Linux a few new tricks". infoworld. Archived from the original on March 21, 2016. Retrieved March 21, 2016.

^ "Introduction to Theseus". Theseus OS Book. Retrieved July 11, 2021.{{cite web}}:  CS1 maint: url-status (link)

^ "Google Fushcia's source code". Google Git. Retrieved July 2, 2021.{{cite web}}:  CS1 maint: url-status (link)

^ Sei, Mark (October 10, 2018). "Fedora 29 new features: Startis now officially in Fedora". Marksei, Weekly sysadmin pills. Archived from the original on April 13, 2019. Retrieved May 13, 2019.

^ "RHEL 8: Chapter 8. Managing layered local storage with Stratis". October 10, 2018. Archived from the original on April 13, 2019. Retrieved April 13, 2019.

^ Howarth, Jesse (February 4, 2020). "Why Discord is switching from Go to Rust". Archived from the original on June 30, 2020. Retrieved April 14, 2020.

^ Vishnevskiy, Stanislav (July 6, 2017). "How Discord Scaled Elixir to 5,000,000 Concurrent Users". Discord Blog.

^ Nichols, Shaun (June 27, 2018). "Microsoft's next trick? Kicking things out of the cloud to Azure IoT Edge". The Register. Archived from the original on September 27, 2019. Retrieved September 27, 2019.

^ "Ruffle". Ruffle. Archived from the original on January 26, 2021. Retrieved April 14, 2021.

^ terminusdb/terminusdb-store, TerminusDB, December 14, 2020, archived from the original on December 15, 2020, retrieved December 14, 2020

^ "Firecracker â Lightweight Virtualization for Serverless Computing". Amazon Web Services. November 26, 2018. Retrieved January 2, 2022.

^ "Announcing the General Availability of Bottlerocket, an open source Linux distribution built to run containers". Amazon Web Services. August 31, 2020. Retrieved January 2, 2022.

^ "Getting Started". rust-lang.org. Archived from the original on November 1, 2020. Retrieved October 11, 2020.

^ "Community". www.rust-lang.org. Retrieved January 3, 2022.

^ "RustConf 2020 - Thursday, August 20". rustconf.com. Archived from the original on August 25, 2019. Retrieved August 25, 2019.

^ Rust Belt Rust. Dayton, Ohio. October 18, 2019. Archived from the original on May 14, 2019. Retrieved May 14, 2019.

^ RustFest. Barcelona, Spain: asquera Event UG. 2019. Archived from the original on April 24, 2019. Retrieved May 14, 2019.

^ "Oxidize Global". Oxidize Berlin Conference. Retrieved February 1, 2021.

^ Krill, Paul. "Rust language moves to independent foundation". InfoWorld. Archived from the original on April 10, 2021. Retrieved April 10, 2021.

^ Vaughan-Nichols, Steven J. (April 9, 2021). "AWS's Shane Miller to head the newly created Rust Foundation". ZDNet. Archived from the original on April 10, 2021. Retrieved April 10, 2021.

^ Vaughan-Nichols, Steven J. (November 17, 2021). "Rust Foundation appoints Rebecca Rumbul as executive director". ZDNet. Retrieved November 18, 2021.

^ "The Rust programming language now has its own independent foundation". TechRepublic. February 10, 2021. Retrieved November 18, 2021.


Further reading[edit]
Klabnik, Steve; Nichols, Carol (August 12, 2019). The Rust Programming Language (Covers Rust 2018). No Starch Press. ISBNÂ 978-1-7185-0044-0. (online version)
Blandy, Jim; Orendorff, Jason (2017). Programming Rust: Fast, Safe Systems Development. O'Reilly Media. ISBNÂ 978-1-4919-2728-1.
External links[edit]
.mw-parser-output .sister-box{border:1px solid #aaa;padding:0;background:#f9f9f9}.mw-parser-output .sister-box>div{padding:0.75em 0;text-align:center}.mw-parser-output .sister-box>div>b{display:block}.mw-parser-output .sister-box>ul{border-top:1px solid #aaa;padding:0.75em 0;width:217px;margin:0 auto}.mw-parser-output .sister-box>ul>li{min-height:31px}.mw-parser-output .sister-logo{display:inline-block;width:31px;line-height:31px;vertical-align:middle;text-align:center}.mw-parser-output .sister-link{display:inline-block;margin-left:4px;width:182px;vertical-align:middle}.mw-parser-output .sister-bar{display:flex;justify-content:center;align-items:baseline;font-size:88%;background-color:#fdfdfd;border:1px solid #a2a9b1;clear:both;margin:1em 0 0;padding:0 2em}.mw-parser-output .sister-bar-header{margin:0 1em 0 0.5em;padding:0.2em 0;flex:0 0 auto;min-height:24px;line-height:22px}.mw-parser-output .sister-bar-content{display:flex;flex-flow:row wrap;flex:0 1 auto;align-items:baseline;padding:0.2em 0;column-gap:1em}.mw-parser-output .sister-bar-item{display:flex;align-items:baseline;margin:0.15em 0;min-height:24px;text-align:left}.mw-parser-output .sister-bar-logo{width:22px;line-height:22px;margin:0 0.2em;text-align:right}.mw-parser-output .sister-bar-link{margin:0 0.2em;text-align:left}@media screen and (max-width:960px){.mw-parser-output .sister-bar{display:flex;flex-flow:column wrap;font-size:88%;background-color:#fdfdfd;clear:both;margin:1em auto 0;padding:0 2em}.mw-parser-output .sister-bar-header{padding:0.2em 0;flex:0 1}.mw-parser-output .sister-bar-content{display:flex;flex-flow:row wrap;flex:1;align-items:baseline;padding:0.2em 0;border-top:1px solid #a2a9b1}.mw-parser-output .sister-bar-item{display:flex;align-items:baseline;flex:0 0 20em;min-width:20em;margin:0.15em 0;min-height:24px}}.mw-parser-output .navbox+link+.sister-bar{margin-top:-1px}.mw-parser-output .navbox+style+.sister-bar{margin-top:-1px}.mw-parser-output .portal-bar+link+.sister-bar{margin-top:-1px}.mw-parser-output .portal-bar+style+.sister-bar{margin-top:-1px}.mw-parser-output .sister-bar+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .sister-bar+.navbox-styles+.portal-bar{margin-top:-1px}Rustat Wikipedia's sister projectsMedia from CommonsResources from WikiversityData from Wikidata
Official website 
Rust-lang on GitHub
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteProgramming languages
Comparison
Timeline
History

Ada
ALGOL
APL
Assembly
BASIC
C
C++
C#
COBOL
Erlang
Forth
Fortran
Go
Haskell
Java
JavaScript
Kotlin
Lisp
Lua
ML
Pascal
Perl
PHP
Prolog
Python
R
Ruby
Rust
SQL
Shell
Simula
Smalltalk
Swift
more...

 Category
 Lists: Alphabetical
Categorical
Generational
Non-English-based

vteMozillaProjectsMozillaLabs
Bugzilla
ChatZilla
Electrolysis Project
Jetpack
Lightning
Persona
Prism
Raindrop
Skywriter
Sunbird
PDF.js
Sync
Tinderbox
Ubiquity
MozillaResearch
Open Media
Rust
Servo
Shumway
WebAssembly
WebXR
asm.js
Daala
Firefox OS
OpenFlint
MozillaFoundation
Mozilla Location Service
SeaMonkey
ThunderbirdFirefox
Firefox Browser
1
1.5
2
3
3.5
3.6
4
5âcurrent
Future releases
for Android
for iOS
Focus
Firefox Lockwise
Firefox Monitor
Firefox Send
Mozilla VPN
Pocket
Origins
Mozilla Application Suite
Netscape Navigator
Netscape Communicator
Netscape Communications
Beonex Communicator
Forks
Basilisk
BurningDog
Classilla
Flock
Gnuzilla
Goanna
Iceape
IceCat
Icedove
Iceowl
Miro
Netscape 9
Pale Moon
Portable Edition
Swiftfox
Swiftweasel
TenFourFox
UXP
Waterfox
xB Browser
Frameworks
Add-on
Gecko
Necko
NPAPI
XPConnect
Components
Composer
NSPR
NSS
Rhino
SpiderMonkey
Tamarin
Typefaces
Fira Sans
Zilla Slab
Discontinued
Calendar Project
Camino
Firefox Home
Firefox Send
Grendel
Minimo
XUL (XBL, XPCOM, XPInstall, XULRunner)

Discontinued projects are in italics. Some projects abandoned by Mozilla that are still maintained by third parties are in underline.OrganizationFoundation
Former Mozilla Organization
Mozilla Foundation
Subsidiaries
Mozilla Corporation
Mozilla Messaging
Mozilla Online
Official affiliates
Mozilla China
Mozilla Europe
Mozilla Japan
Mozilla Taiwan
People
Mitchell Baker
David Baron
Sheeri Cabral
Tantek Ãelik
Brendan Eich
John Hammink
Robert O'Callahan
Johnny StenbÃ¤ck
Doug Turner
Boris Zbarsky
Community
mozdev.org
Mozilla Add-ons
MDN Web Docs
MozillaZine
Spread Firefox
Other topics
Mozilla Manifesto
The Book of Mozilla
Code Rush
Mozilla Public License
Localizations
Mascot
Rebranding / forking
Common Voice

.mw-parser-output .portal-bar{font-size:88%;font-weight:bold;display:flex;justify-content:center;align-items:baseline}.mw-parser-output .portal-bar-bordered{padding:0 2em;background-color:#fdfdfd;border:1px solid #a2a9b1;clear:both;margin:1em auto 0}.mw-parser-output .portal-bar-unbordered{padding:0 1.7em;margin-left:0}.mw-parser-output .portal-bar-header{margin:0 1em 0 0.5em;padding:0.2em 0;flex:0 0 auto;min-height:24px;line-height:22px}.mw-parser-output .portal-bar-content{display:flex;flex-flow:row wrap;align-items:baseline;flex:0 1 auto;padding:0.15em 0;column-gap:1em}.mw-parser-output .portal-bar-item{display:flex;align-items:baseline;margin:0.15em 0;min-height:24px;text-align:left}.mw-parser-output .portal-bar-logo{width:22px;line-height:22px;margin:0 0.2em;text-align:right}.mw-parser-output .portal-bar-link{margin:0 0.2em;text-align:left}@media screen and (max-width:768px){.mw-parser-output .portal-bar{font-size:88%;font-weight:bold;display:flex;flex-flow:column wrap}.mw-parser-output .portal-bar-header{text-align:center;flex:0;padding-left:0.5em;margin:0 auto}.mw-parser-output .portal-bar-content{display:flex;flex-flow:row wrap;align-items:baseline;flex:0;margin:0 auto;column-gap:1em;border-top:1px solid #a2a9b1}}.mw-parser-output .navbox+link+.portal-bar-bordered{margin-top:-1px}.mw-parser-output .navbox+style+.portal-bar-bordered{margin-top:-1px}.mw-parser-output .portal-bar+.navbox-styles+.navbox{margin-top:-1px}Portal:Computer programming
Authority control General
Integrated Authority File (Germany)
National libraries
United States





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Rust_(programming_language)&oldid=1069451436"
		Categories: Rust (programming language)2010 softwareConcurrent programming languagesFree compilers and interpretersFree software projectsFunctional languagesHigh-level programming languagesMozillaMulti-paradigm programming languagesPattern matching programming languagesProcedural programming languagesProgramming languages created in 2010Software using the Apache licenseSoftware using the MIT licenseStatically typed programming languagesSystems programming languagesHidden categories: CS1 maint: url-statusArticles with short descriptionShort description matches WikidataUse mdy dates from May 2021All articles lacking reliable referencesArticles lacking reliable references from April 2021All Wikipedia articles needing clarificationWikipedia articles needing clarification from August 2021All articles with unsourced statementsArticles with unsourced statements from January 2022Pages using Sister project links with hidden wikidataArticles with GND identifiersArticles with LCCN identifiersArticles with example code
	
