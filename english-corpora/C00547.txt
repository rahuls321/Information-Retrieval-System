
Title:
Set cover problem
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		The set cover problem is a classical question in combinatorics, computer science, operations research, and complexity theory. It is one of Karp's 21 NP-complete problems shown to be NP-complete in 1972.
It is a problem "whose study has led to the development of fundamental techniques for the entire field" of approximation algorithms.[1]
Given a set of elements 
  
    
      
        {
        1
        ,
        2
        ,
        .
        .
        .
        ,
        n
        }
      
    
    {\displaystyle \{1,2,...,n\}}
  
 (called the universe) and a collection 
  
    
      
        S
      
    
    {\displaystyle S}
  
 of 
  
    
      
        m
      
    
    {\displaystyle m}
  
 sets whose union equals the universe, the set cover problem is to identify the smallest sub-collection of 
  
    
      
        S
      
    
    {\displaystyle S}
  
 whose union equals the universe.  For example, consider the universe 
  
    
      
        U
        =
        {
        1
        ,
        2
        ,
        3
        ,
        4
        ,
        5
        }
      
    
    {\displaystyle U=\{1,2,3,4,5\}}
  
 and the collection of sets 
  
    
      
        S
        =
        {
        {
        1
        ,
        2
        ,
        3
        }
        ,
        {
        2
        ,
        4
        }
        ,
        {
        3
        ,
        4
        }
        ,
        {
        4
        ,
        5
        }
        }
      
    
    {\displaystyle S=\{\{1,2,3\},\{2,4\},\{3,4\},\{4,5\}\}}
  
. Clearly the union of 
  
    
      
        S
      
    
    {\displaystyle S}
  
 is 
  
    
      
        U
      
    
    {\displaystyle U}
  
. However, we can cover all of the elements with the following, smaller number of sets: 
  
    
      
        {
        {
        1
        ,
        2
        ,
        3
        }
        ,
        {
        4
        ,
        5
        }
        }
      
    
    {\displaystyle \{\{1,2,3\},\{4,5\}\}}
  
.
More formally, given a universe 
  
    
      
        
          
            U
          
        
      
    
    {\displaystyle {\mathcal {U}}}
  
 and a family 
  
    
      
        
          
            S
          
        
      
    
    {\displaystyle {\mathcal {S}}}
  
 of subsets of 
  
    
      
        
          
            U
          
        
      
    
    {\displaystyle {\mathcal {U}}}
  
,
a cover is a subfamily 
  
    
      
        
          
            C
          
        
        â
        
          
            S
          
        
      
    
    {\displaystyle {\mathcal {C}}\subseteq {\mathcal {S}}}
  
 of sets whose union is 
  
    
      
        
          
            U
          
        
      
    
    {\displaystyle {\mathcal {U}}}
  
. In the set covering decision problem, the input is a pair 
  
    
      
        (
        
          
            U
          
        
        ,
        
          
            S
          
        
        )
      
    
    {\displaystyle ({\mathcal {U}},{\mathcal {S}})}
  
 and an integer 
  
    
      
        k
      
    
    {\displaystyle k}
  
; the question is whether
there is a set covering of size 
  
    
      
        k
      
    
    {\displaystyle k}
  
 or less. In the set covering optimization problem, the input is a pair 
  
    
      
        (
        
          
            U
          
        
        ,
        
          
            S
          
        
        )
      
    
    {\displaystyle ({\mathcal {U}},{\mathcal {S}})}
  
, and the task is to find a set covering that uses the fewest sets.
The decision version of set covering is NP-complete, and the optimization/search version of set cover is NP-hard.[2]
If each set is assigned a cost, it becomes a weighted set cover problem.

.mw-parser-output .sidebar{width:22em;float:right;clear:right;margin:0.5em 0 1em 1em;background:#f8f9fa;border:1px solid #aaa;padding:0.2em;text-align:center;line-height:1.4em;font-size:88%;border-collapse:collapse;display:table}body.skin-minerva .mw-parser-output .sidebar{display:table!important;float:right!important;margin:0.5em 0 1em 1em!important}.mw-parser-output .sidebar-subgroup{width:100%;margin:0;border-spacing:0}.mw-parser-output .sidebar-left{float:left;clear:left;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-none{float:none;clear:both;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-outer-title{padding:0 0.4em 0.2em;font-size:125%;line-height:1.2em;font-weight:bold}.mw-parser-output .sidebar-top-image{padding:0.4em}.mw-parser-output .sidebar-top-caption,.mw-parser-output .sidebar-pretitle-with-top-image,.mw-parser-output .sidebar-caption{padding:0.2em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-pretitle{padding:0.4em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-title,.mw-parser-output .sidebar-title-with-pretitle{padding:0.2em 0.8em;font-size:145%;line-height:1.2em}.mw-parser-output .sidebar-title-with-pretitle{padding:0.1em 0.4em}.mw-parser-output .sidebar-image{padding:0.2em 0.4em 0.4em}.mw-parser-output .sidebar-heading{padding:0.1em 0.4em}.mw-parser-output .sidebar-content{padding:0 0.5em 0.4em}.mw-parser-output .sidebar-content-with-subgroup{padding:0.1em 0.4em 0.2em}.mw-parser-output .sidebar-above,.mw-parser-output .sidebar-below{padding:0.3em 0.8em;font-weight:bold}.mw-parser-output .sidebar-collapse .sidebar-above,.mw-parser-output .sidebar-collapse .sidebar-below{border-top:1px solid #aaa;border-bottom:1px solid #aaa}.mw-parser-output .sidebar-navbar{text-align:right;font-size:115%;padding:0 0.4em 0.4em}.mw-parser-output .sidebar-list-title{padding:0 0.4em;text-align:left;font-weight:bold;line-height:1.6em;font-size:105%}.mw-parser-output .sidebar-list-title-c{padding:0 0.4em;text-align:center;margin:0 3.3em}@media(max-width:720px){body.mediawiki .mw-parser-output .sidebar{width:100%!important;clear:both;float:none!important;margin-left:0!important;margin-right:0!important}}Covering/packing-problem pairs
 Covering problems Packing problems Minimum set cover Maximum set packing Minimum edge cover Maximum matching Minimum vertex cover Maximum independent set Bin covering Bin packing Polygon covering Rectangle packing
.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vte
Contents

1 Integer linear program formulation
2 Hitting set formulation
3 Greedy algorithm
4 Low-frequency systems
5 Inapproximability results
6 Weighted set cover
7 Related problems
8 Notes
9 References
10 External links



Integer linear program formulation[edit]
The minimum set cover problem can be formulated as the following integer linear program (ILP).[3]



minimize


  
    
      
        
          â
          
            s
            â
            
              
                S
              
            
          
        
        
          x
          
            s
          
        
      
    
    {\displaystyle \sum _{s\in {\mathcal {S}}}x_{s}}
  




(minimize the number of sets)


subject to


  
    
      
        
          â
          
            s
            :
            e
            â
            s
          
        
        
          x
          
            s
          
        
        â©¾
        1
      
    
    {\displaystyle \sum _{s\colon e\in s}x_{s}\geqslant 1}
  


for all 
  
    
      
        e
        â
        
          
            U
          
        
      
    
    {\displaystyle e\in {\mathcal {U}}}
  


(cover every element of the universe)





  
    
      
        
          x
          
            s
          
        
        â
        {
        0
        ,
        1
        }
      
    
    {\displaystyle x_{s}\in \{0,1\}}
  


for all 
  
    
      
        s
        â
        
          
            S
          
        
      
    
    {\displaystyle s\in {\mathcal {S}}}
  
.

(every set is either in the set cover or not)

This ILP belongs to the more general class of ILPs for covering problems.
The integrality gap of this ILP is at most 
  
    
      
        
          log
          â¡
          n
        
      
    
    {\displaystyle \scriptstyle \log n}
  
, so its relaxation gives a factor-
  
    
      
        
          log
          â¡
          n
        
      
    
    {\displaystyle \scriptstyle \log n}
  
 approximation algorithm for the minimum set cover problem (where 
  
    
      
        
          n
        
      
    
    {\displaystyle \scriptstyle n}
  
 is the size of the universe).[4]
In weighted set cover, the sets are assigned weights. Denote the weight of set 
  
    
      
        s
        â
        
          
            S
          
        
      
    
    {\displaystyle s\in {\mathcal {S}}}
  
 by 
  
    
      
        
          w
          
            s
          
        
      
    
    {\displaystyle w_{s}}
  
. Then the integer linear program describing weighted set cover is identical to the one given above, except that the objective function to minimize is 
  
    
      
        
          â
          
            s
            â
            
              
                S
              
            
          
        
        
          w
          
            s
          
        
        
          x
          
            s
          
        
      
    
    {\displaystyle \sum _{s\in {\mathcal {S}}}w_{s}x_{s}}
  
.

Hitting set formulation[edit]
Set covering is equivalent to the hitting set problem. That is seen by observing that an instance of set covering can
be viewed as an arbitrary bipartite graph, with sets represented by vertices on the left, the universe represented by vertices on the
right, and edges representing the inclusion of elements in sets. The task is then to find a minimum cardinality subset of left-vertices which covers all of the right-vertices. In the Hitting set problem, the objective is to cover the left-vertices using a minimum subset of the right vertices. Converting from one problem to the other is therefore achieved by interchanging the two sets of vertices.

Greedy algorithm[edit]
There is a greedy algorithm for polynomial time approximation of set covering that chooses sets according to one rule: at each stage, choose the set that contains the largest number of uncovered elements. This method can be implemented in time linear in the sum of sizes of the input sets, using a bucket queue to prioritize the sets.[5] It achieves an approximation ratio of 
  
    
      
        H
        (
        s
        )
      
    
    {\displaystyle H(s)}
  
, where 
  
    
      
        s
      
    
    {\displaystyle s}
  
 is the size of the set to be covered.[6] In other words, it finds a covering that may be 
  
    
      
        H
        (
        n
        )
      
    
    {\displaystyle H(n)}
  
 times as large as the minimum one, where 
  
    
      
        H
        (
        n
        )
      
    
    {\displaystyle H(n)}
  
 is the 
  
    
      
        n
      
    
    {\displaystyle n}
  
-th harmonic number:

  
    
      
        H
        (
        n
        )
        =
        
          â
          
            k
            =
            1
          
          
            n
          
        
        
          
            1
            k
          
        
        â¤
        ln
        â¡
        
          n
        
        +
        1
      
    
    {\displaystyle H(n)=\sum _{k=1}^{n}{\frac {1}{k}}\leq \ln {n}+1}
  

This greedy algorithm actually achieves an approximation ratio of 
  
    
      
        H
        (
        
          s
          
            â²
          
        
        )
      
    
    {\displaystyle H(s^{\prime })}
  
 where 
  
    
      
        
          s
          
            â²
          
        
      
    
    {\displaystyle s^{\prime }}
  
 is the maximum cardinality set of 
  
    
      
        S
      
    
    {\displaystyle S}
  
. For 
  
    
      
        Î´
        â
      
    
    {\displaystyle \delta -}
  
dense instances, however, there exists a 
  
    
      
        c
        ln
        â¡
        
          m
        
      
    
    {\displaystyle c\ln {m}}
  
-approximation algorithm for every 
  
    
      
        c
        >
        0
      
    
    {\displaystyle c>0}
  
.[7]

  Tight example for the greedy algorithm with k=3
There is a standard example on which the greedy algorithm achieves an approximation ratio of 
  
    
      
        
          log
          
            2
          
        
        â¡
        (
        n
        )
        
          /
        
        2
      
    
    {\displaystyle \log _{2}(n)/2}
  
.
The universe consists of 
  
    
      
        n
        =
        
          2
          
            (
            k
            +
            1
            )
          
        
        â
        2
      
    
    {\displaystyle n=2^{(k+1)}-2}
  
 elements. The set system consists of 
  
    
      
        k
      
    
    {\displaystyle k}
  
 pairwise disjoint sets 

  
    
      
        
          S
          
            1
          
        
        ,
        â¦
        ,
        
          S
          
            k
          
        
      
    
    {\displaystyle S_{1},\ldots ,S_{k}}
  
 with sizes 
  
    
      
        2
        ,
        4
        ,
        8
        ,
        â¦
        ,
        
          2
          
            k
          
        
      
    
    {\displaystyle 2,4,8,\ldots ,2^{k}}
  
 respectively, as well as two additional disjoint sets 
  
    
      
        
          T
          
            0
          
        
        ,
        
          T
          
            1
          
        
      
    
    {\displaystyle T_{0},T_{1}}
  
,
each of which contains half of the elements from each 
  
    
      
        
          S
          
            i
          
        
      
    
    {\displaystyle S_{i}}
  
. On this input, the greedy algorithm takes the sets

  
    
      
        
          S
          
            k
          
        
        ,
        â¦
        ,
        
          S
          
            1
          
        
      
    
    {\displaystyle S_{k},\ldots ,S_{1}}
  
, in that order, while the optimal solution consists only of 
  
    
      
        
          T
          
            0
          
        
      
    
    {\displaystyle T_{0}}
  
 and 
  
    
      
        
          T
          
            1
          
        
      
    
    {\displaystyle T_{1}}
  
.
An example of such an input for 
  
    
      
        k
        =
        3
      
    
    {\displaystyle k=3}
  
 is pictured on the right.
Inapproximability results show that the greedy algorithm is essentially the best-possible polynomial time approximation algorithm for set cover up to lower order terms
(see Inapproximability results below), under plausible complexity assumptions. A tighter analysis for the greedy algorithm shows that the approximation ratio is exactly 
  
    
      
        ln
        â¡
        
          n
        
        â
        ln
        â¡
        
          ln
          â¡
          
            n
          
        
        +
        Î
        (
        1
        )
      
    
    {\displaystyle \ln {n}-\ln {\ln {n}}+\Theta (1)}
  
.[8]

Low-frequency systems[edit]
If each element occurs in at most f sets, then a solution can be found in polynomial time that approximates the optimum to within a factor of f using LP relaxation.
If the constraint 
  
    
      
        
          x
          
            S
          
        
        â
        {
        0
        ,
        1
        }
      
    
    {\displaystyle x_{S}\in \{0,1\}}
  
 is replaced by 
  
    
      
        
          x
          
            S
          
        
        â¥
        0
      
    
    {\displaystyle x_{S}\geq 0}
  
 for all S in 
  
    
      
        
          
            S
          
        
      
    
    {\displaystyle {\mathcal {S}}}
  
 in the integer linear program shown above, then it becomes a (non-integer) linear program L. The algorithm can be described as follows:

Find an optimal solution O for the program L using some polynomial-time method of solving linear programs.
Pick all sets S for which the corresponding variable xS has value at least 1/f in the solution O.[9]
Inapproximability results[edit]
When 
  
    
      
        n
      
    
    {\displaystyle n}
  
 refers to the size of the universe, Lund & Yannakakis (1994) showed that set covering cannot be approximated in polynomial time to within a factor of 
  
    
      
        
          
            
              1
              2
            
          
        
        
          log
          
            2
          
        
        â¡
        
          n
        
        â
        0.72
        ln
        â¡
        
          n
        
      
    
    {\displaystyle {\tfrac {1}{2}}\log _{2}{n}\approx 0.72\ln {n}}
  
, unless NP has quasi-polynomial time algorithms. Feige (1998) improved this lower bound to 
  
    
      
        
          
            (
          
        
        1
        â
        o
        (
        1
        )
        
          
            )
          
        
        â
        ln
        â¡
        
          n
        
      
    
    {\displaystyle {\bigl (}1-o(1){\bigr )}\cdot \ln {n}}
  
 under the same assumptions, which essentially matches the approximation ratio achieved by the greedy algorithm. Raz & Safra (1997) established a lower bound
of 
  
    
      
        c
        â
        ln
        â¡
        
          n
        
      
    
    {\displaystyle c\cdot \ln {n}}
  
, where 
  
    
      
        c
      
    
    {\displaystyle c}
  
 is a certain constant, under the weaker assumption that P
  
    
      
        â 
      
    
    {\displaystyle \not =}
  
NP.
A similar result with a higher value of 
  
    
      
        c
      
    
    {\displaystyle c}
  
 was recently proved by Alon, Moshkovitz & Safra (2006). Dinur & Steurer (2013) showed optimal inapproximability by proving that it cannot be approximated to 
  
    
      
        
          
            (
          
        
        1
        â
        o
        (
        1
        )
        
          
            )
          
        
        â
        ln
        â¡
        
          n
        
      
    
    {\displaystyle {\bigl (}1-o(1){\bigr )}\cdot \ln {n}}
  
 unless P
  
    
      
        =
      
    
    {\displaystyle =}
  
NP.

Weighted set cover[edit]
This section needs expansion. You can help by adding to it.  (November 2017)
Relaxing the integer linear program for weighted set cover stated above, one may use randomized rounding to get an 
  
    
      
        O
        (
        log
        â¡
        n
        )
      
    
    {\displaystyle O(\log n)}
  
-factor approximation. The corresponding analysis for nonweighted set cover is outlined in Randomized rounding#Randomized-rounding algorithm for set cover and can be adapted to the weighted case.[10]

Related problems[edit]
Hitting set is an equivalent reformulation of Set Cover.
Vertex cover is a special case of Hitting Set.
Edge cover is a special case of Set Cover.
Geometric set cover is a special case of Set Cover when the universe is a set of points in 
  
    
      
        
          
            R
          
          
            d
          
        
      
    
    {\displaystyle \mathbb {R} ^{d}}
  
 and the sets are induced by the intersection of the universe and geometric shapes (e.g., disks, rectangles).
Set packing
Maximum coverage problem is to choose at most k sets to cover as many elements as possible.
Dominating set is the problem of selecting a set of vertices (the dominating set) in a graph such that all other vertices are adjacent to at least one vertex in the dominating set. The Dominating set problem was shown to be NP complete through a reduction from Set cover.
Exact cover problem is to choose a set cover with no element included in more than one covering set.
Red Blue Set Cover.[11]
Set-cover abduction.
Notes[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ Vazirani (2001, p.Â 15)

^ Korte & Vygen 2012, p.Â 414.

^ Vazirani (2001, p.Â 108)

^ Vazirani (2001, pp.Â 110â112)

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; Stein, Clifford (2009) [1990], "Exercise 35.3-3", Introduction to Algorithms (3rdÂ ed.), MIT Press and McGraw-Hill, p.Â 1122, ISBNÂ 0-262-03384-4

^ Chvatal, V. A Greedy Heuristic for the Set-Covering Problem. Mathematics of Operations Research
Vol. 4, No. 3 (Aug., 1979), pp. 233-235

^ 
Karpinski & Zelikovsky 1998

^ SlavÃ­k Petr  A tight analysis of the greedy algorithm for set cover. STOC'96, Pages 435-441, doi:10.1145/237814.237991

^ Vazirani (2001, pp.Â 118â119)

^ Vazirani (2001, Chapter 14)

^ Information., Sandia National Laboratories. United States. Department of Energy. United States. Department of Energy. Office of Scientific and Technical (1999). On the Red-Blue Set Cover Problem. United States. Dept. of Energy. OCLCÂ 68396743.


References[edit]
Alon, Noga; Moshkovitz, Dana; Safra, Shmuel (2006), "Algorithmic construction of sets for k-restrictions", ACM Trans. Algorithms, 2 (2): 153â177, CiteSeerXÂ 10.1.1.138.8682, doi:10.1145/1150334.1150336, ISSNÂ 1549-6325, S2CIDÂ 11922650.
Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; Stein, Clifford (2001), Introduction to Algorithms, Cambridge, Mass.: MIT Press and McGraw-Hill, pp.Â 1033â1038, ISBNÂ 978-0-262-03293-3
Feige, Uriel (1998), "A threshold of ln n for approximating set cover", Journal of the ACM, 45 (4): 634â652, CiteSeerXÂ 10.1.1.70.5014, doi:10.1145/285055.285059, ISSNÂ 0004-5411, S2CIDÂ 52827488.
Karpinski, Marek; Zelikovsky, Alexander (1998), "Approximating dense cases of covering problems", Proceedings of the DIMACS Workshop on Network Design: Connectivity and Facilities Location, vol.Â 40, pp.Â 169â178, ISBNÂ 9780821870846
Lund, Carsten; Yannakakis, Mihalis (1994), "On the hardness of approximating minimization problems", Journal of the ACM, 41 (5): 960â981, doi:10.1145/185675.306789, ISSNÂ 0004-5411, S2CIDÂ 9021065.
Raz, Ran; Safra, Shmuel (1997), "A sub-constant error-probability low-degree test, and a sub-constant error-probability PCP characterization of NP", STOC '97: Proceedings of the twenty-ninth annual ACM symposium on Theory of computing, ACM, pp.Â 475â484, ISBNÂ 978-0-89791-888-6.
Dinur, Irit; Steurer, David (2013), "Analytical approach to parallel repetition", STOC '14: Proceedings of the forty-sixth annual ACM symposium on Theory of computing, ACM, pp.Â 624â633.
Vazirani, Vijay V. (2001), Approximation Algorithms (PDF), Springer-Verlag, ISBNÂ 978-3-540-65367-7
Korte, Bernhard; Vygen, Jens (2012), Combinatorial Optimization: Theory and Algorithms (5Â ed.), Springer, ISBNÂ 978-3-642-24487-2
Cardoso, Nuno; Abreu, Rui (2014), "An Efficient Distributed Algorithm for Computing Minimal Hitting Sets" (PDF), Proceedings of the 25th International Workshop on Principles of Diagnosis, Graz, Austria, doi:10.5281/zenodo.10037
External links[edit]



Wikimedia Commons has media related to Set cover problem.

Benchmarks with Hidden Optimum Solutions for Set Covering, Set Packing and Winner Determination
A compendium of NP optimization problems - Minimum Set Cover




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Set_cover_problem&oldid=1059484844"
		Categories: Set familiesNP-complete problemsLinear programmingApproximation algorithmsCovering problemsHidden categories: Articles to be expanded from November 2017All articles to be expandedArticles using small message boxesCommons category link from Wikidata
	
