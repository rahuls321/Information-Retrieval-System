
Title:
Snippet (programming)
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Small region of re-usable source code, machine code, or text
  Example of a code snippet.
Snippet is a programming term for a small region of re-usable source code, machine code, or text. Ordinarily, these are formally defined operative units to incorporate into larger programming modules. Snippet management is a feature of some text editors, program source code editors, IDEs, and related software. It allows the user to avoid repetitive typing in the course of routine edit operations.[1]

Contents

1 Definition
2 Overview

2.1 Snippets in text editors
2.2 Snippets in IDEs
2.3 Snippets in JIT compilers


3 Example
4 Conventions
5 Snippet placeholders

5.1 Placeholder identifiers
5.2 Placeholder duplication
5.3 Placeholder transformation


6 Snippet programming features

6.1 Plain text
6.2 Constants and variables
6.3 Interpreted code


7 Alternatives

7.1 Software assistance


8 See also
9 References
10 Examples of code snippets



Definition[edit]
In programming practice, "snippet" refers narrowly to a portion of source code that is literally included by an editor program into a file, and is a form of copy and paste programming.[2] This concrete inclusion is in contrast to abstraction methods, such as functions or macros, which are abstraction within the language. Snippets are thus primarily used when these abstractions are not available or not desired, such as in languages that lack abstraction, or for clarity and absence of overhead.
Snippets are similar to having static preprocessing included in the editor, and do not require support by a compiler. On the flip side, this means that snippets cannot be invariably modified after the fact, and thus is vulnerable to all of the problems of copy and paste programming. For this reason snippets are primarily used for simple sections of code (with little logic), or for boilerplate, such as copyright notices, function prototypes, common control structures, or standard library imports.

Overview[edit]
Snippet management is a text editor feature popular among software developers or others who routinely require content from a catalogue of repeatedly entered text (such as with source code or boilerplate). Often this feature is justified because the content varies only slightly (or not at all) each time it is entered.

Snippets in text editors[edit]
Text editors that include this feature ordinarily provide a mechanism to manage the catalogue, and separate "snippets" in the same manner that the text editor and operating system allow management of separate files. These basic management abilities include operations such as viewing, adding, editing, deleting, sorting, filtering, grouping, renaming, and storing snippets in a repository, catalogue, or database. Some editors provide a macro ability to snippets allowing function prototypes and variable control structures to be generated based on a standard template.

Snippets in IDEs[edit]
Some programmer's applications such as Eclipse, NetBeans, and Microsoft's Visual Studio (uses TextMate-inspired snippets underhood) and other IDEs include built-in parts of structure for ease of coding.
Other applications such as Macromedia Dreamweaver make use of these code snippets as well for Web development.

Snippets in JIT compilers[edit]
Just-in-time (JIT) compilers can "splice together" pre-compiled sections of code as longer object code/machine code segments. This reduces interpret time significantly and simultaneously speeds execution.

Example[edit]
Consider the process of swapping the values of two variables, x and y. Assuming weak typing and not being concerned about name collision, this is represented by the code:

temp = x
x = y
y = temp

When the snippet is inserted, the programmer is prompted for the values of the two parameters. Assuming they are type foo and bar, which are the actual names of the variables they wish to swap, this will yield the code:

temp = foo
foo = bar
bar = temp

If the snippet is subsequently changed, say to use __temp instead of temp, it will not change the code that has already been inserted, but will be used in subsequent insertions of the snippet.
A snippet for this might be represented as:

temp = $1
$1 = $2
$2 = temp

Conventions[edit]
In addition to the basic management abilities described previously, snippet management features can be classified according to the scope of interactivity between snippets and the text editor or application that hosts them.
These snippet feature groups include:

plain-text or "static" snippets
interactive or "dynamic" snippets
scriptable snippets
Static
Snippets of this type consist primarily of fixed text that the user can choose to insert into the current document. The user is not able to specify anything else, except perhaps the cursor position relative to the newly inserted text. Static snippets are similar to simple macros.
Dynamic
Snippets consist of fixed text combined with dynamic elements (placeholders) which are allowed to be modified either by editor or by user. The user may specify both the content of the dynamic elements, as well as their position relative to the fixed text, as part of choosing what to insert into the current document. Examples of dynamic elements could be variables such as the current date or system time, or input from the user that is supplied via a GUI, or input from another application. (see also: programmable macro).
Scriptable
Snippets consist of runnable segments of code in either a macro language or a scripting language. Scriptable snippets provide the greatest degree of flexibility to the user, although that depends somewhat on the programming languages supported by the text editor, and whether or not the programming language is well-known, or particular and unique to that specific editor.
The type of scripting support varies, but may include features such as running shell commands, providing a GUI dialog or other methods of user interaction with the operating system; other applications; or other sub-components of the hosting application itself.


Snippet placeholders[edit]
Placeholders are elements within a snippet that are left to be supplied by the user or other external process.  The values for placeholders are not determined until the text of the snippet is inserted during an editing session.
Placeholders may have special markup syntax that allows the editor to identify the boundaries of placeholders relative to the other text in the current edit buffer.
Other applications employ graphical user interfaces and modal dialog boxes that allow the user to enter one or more values to be supplied for the placeholders.

Placeholder identifiers[edit]
Placeholders are usually indicated by some special character or sequence of characters to distinguish them from the rest of the snippet text. Some systems allow snippet placeholders to be named identifiers. The identifiers may be useful for supporting such features as placeholder duplication or placeholder transformation.
The following example uses the identifiers first_name, last_name, and item:

Hello {%first_name%} {%last_name%},

Your shipment of {%item%} is now ready to pick up.

Thanks {%first_name%}!

Placeholder duplication[edit]
This allows the user to indicate that the value supplied for one placeholder should be replicated in multiple places, relative to the entire text of the programmable snippet. In the previous example, the named placeholder first_name is an example of this usage.

Placeholder transformation[edit]
This allows the user to indicate that one or more values supplied for a placeholder should be replicated and transformed in other places within the text of the programmable snippet. For example, the user may supply a document title in one part of the snippet, and specify that the document title should be repeated in other places, with the first instance being all-uppercase and every other instance being lower-case.

Snippet programming features[edit]
For applications that support scriptable snippets, the range of supported programming features varies. The following enumerates some of the features that are commonly implemented for programmable snippets.

Plain text[edit]
Although plain text is a fundamental feature included even with applications that support only non-programmable "static" snippets, programmable snippets are also used for working with plain text.
One common complication, however, is that environments that support programmable snippets often have to make distinctions between what counts as "plain text" and what counts as "programming instructions". Further complicating this distinction is the fact that applications that support programmable snippets almost always include support for recognition of multiple programming languages, either through basic syntax highlighting or execution of embedded commands.
For these and other reasons, emitting plain text from programmable snippets almost always entails being careful to avoid problems with syntax and delimiter collisions.

Constants and variables[edit]
Programmable snippets often include an ability to establish a binding to an existing variable scope or namespace, from which the user can select any of various constants or variables. These might include values such as the email address of the currently logged-in user on a given machine, the current system time and date, or the output value of a function.
Scriptable snippets are often associated with one or more currently active files. Consequently, variables may also include environment variables and arguments that specify the filename, cursor position, and parent directory among other stats relating to the files in a current editing session.

Interpreted code[edit]
Scriptable snippets may allow execution of code in one or more programming languages. This may include one or more standalone languages, or a language that is specific to the application in which the language is hosted.

Alternatives[edit]
The most basic alternative to code snippets is subroutines in libraries. Subroutines can be incorporated into a reusable software library and shared between multiple programming projects.
Design patterns in object-oriented programming, and functional programming, are both techniques that can allow programmers to avoid or reduce the practice of repeatedly inserting snippets into different pieces of code with slight variations each time. In languages in the C family, preprocessors are sometimes used for this purpose.
The disadvantage of this approach however is that it's harder to remember pattern or documentation.

Software assistance[edit]
As of 2021 some sophisticated deep-learning tooling emerged that can help to infer specific functionality from a human readable text and generate corresponding source code snippets (e.g. GitHub Copilot).[3][4]

See also[edit]



Look up snippet in Wiktionary, the free dictionary.

.mw-parser-output .div-col{margin-top:0.3em;column-width:30em}.mw-parser-output .div-col-small{font-size:90%}.mw-parser-output .div-col-rules{column-rule:1px solid #aaa}.mw-parser-output .div-col dl,.mw-parser-output .div-col ol,.mw-parser-output .div-col ul{margin-top:0}.mw-parser-output .div-col li,.mw-parser-output .div-col dd{page-break-inside:avoid;break-inside:avoid-column}
AutocompleteÂ â Computing feature predicting ending to a word a user is typing
CodebaseÂ â Source-code collection used to build a system, application, or component
Code refactoringÂ â Restructuring existing computer code without changing its external behavior
Content management
PastebinÂ â Type of online content hosting service where users can store plain text
Scrapbook (Mac OS)
Version controlÂ â Activity of managing version of one or more files
Web widget

References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}"Gedit/Plugins/Snippets". Archived from the original on 2012-08-25. Retrieved 2010-01-09. Example of the feature in the Gedit editor.

^ Kim, Miryung; Bergman, Lawrence; Lau, Tessa; Notkin, David (2004). "An ethnographic study of copy and paste programming practices in OOPL" (PDF). Proceedings: 2004 International Symposium on Empirical Software Engineering, ISESE 2004: 19â20 August 2004, Redondo Beach, California. Los Alamitos, CA: IEEE. pp.Â 83â92. ISBNÂ 978-0-7695-2165-7. OCLCÂ 326620442. For each C&P instance, we also noted the relationship between a copied code snippet and code elsewhere in the code base.

^ H. M. LE, TRIET; CHEN, HAO; ALI BABAR, MUHAMMAD (February 13, 2020). "Deep Learning for Source Code Modeling and Generation: Models, Applications and Challenges" (PDF). The University of Adelaide.{{cite web}}:  CS1 maint: url-status (link)

^ "GitHub previews new AI tool that makes coding suggestions". TechCrunch. Retrieved 2021-07-25.


Examples of code snippets[edit]
"15 useful code snippet tools that will help you store and manage your code library". onextrapixel.com. 29 September 2009. Retrieved 18 October 2016.
"17 slick snippet storage sites". appstorm.net. Gartner, Inc. 11 February 2013. Retrieved 18 October 2016.
"45+ excellent code snippet resources and repositories". smashingmagazine.com. Smashing Magazine. 21 July 2009. Retrieved 18 October 2016.
"Most liked apps tagged with 'code snippets'". alternativeto.net. AlternativeTo. Retrieved 18 October 2016.




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Snippet_(programming)&oldid=1065818745"
		Categories: Source codeText editor featuresHidden categories: CS1 maint: url-statusArticles with short descriptionShort description is different from Wikidata
	
