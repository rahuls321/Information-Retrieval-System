
Title:
Computational complexity
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Amount of resources to perform an algorithm
This article includes a list of references, related reading or external links, but its sources remain unclear because it lacks inline citations. Please help to improve this article by introducing more precise citations.  (December 2017) (Learn how and when to remove this template message)
In computer science, the computational complexity or simply complexity of an algorithm is the amount of resources required to run it. Particular focus is given to time and memory requirements. The complexity of a problem is the complexity of the best algorithms that allow solving the problem.
The study of the complexity of explicitly given algorithms is called analysis of algorithms, while the study of the complexity of problems is called computational complexity theory. Both areas are highly related, as the complexity of an algorithm is always an upper bound on the complexity of the problem solved by this algorithm. Moreover, for designing efficient algorithms, it is often fundamental to compare the complexity of a specific algorithm to the complexity of the problem to be solved. Also, in most cases, the only thing that is known about the complexity of a problem is that it is lower than the complexity of the most efficient known algorithms. Therefore, there is a large overlap between analysis of algorithms and complexity theory. 
As the amount of resources required to run an algorithm generally varies with the size of the input, the complexity is typically expressed as a function n â f(n), where n is the size of the input and f(n) is either the worst-case complexity (the maximum of the amount of resources that are needed over all inputs of size n) or the average-case complexity (the average of the amount of resources over all inputs of size n). Time complexity is generally expressed as the number of required elementary operations on an input of size n, where elementary operations are assumed to take a constant amount of time on a given computer and change only by a constant factor when run on a different computer. Space complexity is generally expressed as the amount of memory required by an algorithm on an input of size n.

Contents

1 Resources

1.1 Time
1.2 Space
1.3 Others


2 Complexity as a function of input size
3 Asymptotic complexity
4 Models of computation

4.1 Deterministic models
4.2 Non-deterministic computation
4.3 Parallel and distributed computation
4.4 Quantum computing


5 Problem complexity (lower bounds)
6 Use in algorithm design
7 See also
8 References



Resources[edit]
Time[edit]
The resource that is most commonly considered is time. When "complexity" is used without qualification, this generally means time complexity.
The usual units of time (seconds, minutes etc.) are not used in complexity theory because they are too dependent on the choice of a specific computer and on the evolution of technology. For instance, a computer today can execute an algorithm significantly faster than a computer from the 1960s; however, this is not an intrinsic feature of the algorithm but rather a consequence of technological advances in computer hardware. Complexity theory seeks to quantify the intrinsic time requirements of algorithms, that is, the basic time constraints an algorithm would place on any computer. This is achieved by counting the number of elementary operations that are executed during the computation. These operations are assumed to take constant time (that is, not affected by the size of the input) on a given machine, and are often called steps.

Space[edit]
Another important resource is the size of computer memory that is needed for running algorithms.

Others[edit]
The number of arithmetic operations is another resource that is commonly used. In this case, one talks of arithmetic complexity. If one knows an upper bound on the size of the binary representation of the numbers that occur during a computation, the time complexity is generally the product of the arithmetic complexity by a constant factor.

For many algorithms the size of the integers that are used during a computation is not bounded, and it is not realistic to consider that arithmetic operations take a constant time. Therefore, the time complexity, generally called bit complexity in this context, may be much larger than the arithmetic complexity. For example, the arithmetic complexity of the computation of the determinant of a nÃn integer matrix is 
  
    
      
        O
        (
        
          n
          
            3
          
        
        )
      
    
    {\displaystyle O(n^{3})}
  
 for the usual algorithms (Gaussian elimination). The bit complexity of the same algorithms is exponential in n, because the size of the coefficients may grow exponentially during the computation. On the other hand, if these algorithms are coupled with multi-modular arithmetic, the bit complexity may be reduced to O~(n4). 
Formally, the bit complexity refers to the number of operations on bits that are needed for running an algorithm. With most models of computation, it equals the time complexity up to a constant factor. On computers, the number of operations on machine words that are needed is also proportional to the bit complexity. So, the time complexity and the bit complexity are equivalent  for realistic models of computation
In sorting and searching, the resource that is generally considered is the number of entries comparisons. This is generally a good measure of the time complexity if data are suitably organized.

Complexity as a function of input size[edit]
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}Only time complexity is considered in this section, but everything applies (with slight modifications) to the complexity with respect to other resources
It is impossible to count the number of steps of an algorithm on all possible inputs. As the complexity generally increases with the size of the input, the complexity is typically expressed as a function of the size n (in bits) of the input, and therefore, the complexity is a function of n. However, the complexity of an algorithm may vary dramatically for different inputs of the same size. Therefore, several complexity functions are commonly used.
The worst-case complexity is the maximum of the complexity over all inputs of size n, and the average-case complexity is the average of the complexity over all inputs of size n (this makes sense, as the number of possible inputs of a given size is finite). Generally, when "complexity" is used without being further specified, this is the worst-case time complexity that is considered.

Asymptotic complexity[edit]
See also: Asymptotic computational complexity
It is generally difficult to compute precisely the worst-case and the average-case complexity. In addition, these exact values provide little practical application, as any change of computer or of model of computation would change the complexity somewhat. Moreover, the resource use is not critical for small values of n, and this makes that, for small n, the ease of implementation is generally more interesting than a low complexity.
For these reasons, one generally focuses on the behavior of the complexity for large n, that is on its asymptotic behavior when n tends to the infinity. Therefore, the complexity is generally expressed by using big O notation.
For example, the usual algorithm for integer multiplication has a complexity of 
  
    
      
        O
        (
        
          n
          
            2
          
        
        )
        ,
      
    
    {\displaystyle O(n^{2}),}
  
 this means that there is a constant 
  
    
      
        
          c
          
            u
          
        
      
    
    {\displaystyle c_{u}}
  
 such that the multiplication of two integers of at most n digits may be done in a time less than 
  
    
      
        
          c
          
            u
          
        
        
          n
          
            2
          
        
        .
      
    
    {\displaystyle c_{u}n^{2}.}
  
 This bound is sharp in the sense that the worst-case complexity and the average-case complexity are 
  
    
      
        Î©
        (
        
          n
          
            2
          
        
        )
        ,
      
    
    {\displaystyle \Omega (n^{2}),}
  
 which means that there is a constant 
  
    
      
        
          c
          
            l
          
        
      
    
    {\displaystyle c_{l}}
  
 such that these complexities are larger than 
  
    
      
        
          c
          
            l
          
        
        
          n
          
            2
          
        
        .
      
    
    {\displaystyle c_{l}n^{2}.}
  
 The radix does not appear in these complexity, as changing of radix changes only the constants 
  
    
      
        
          c
          
            u
          
        
      
    
    {\displaystyle c_{u}}
  
 and 
  
    
      
        
          c
          
            l
          
        
        .
      
    
    {\displaystyle c_{l}.}
  


Models of computation[edit]
The evaluation of the complexity relies on the choice of a model of computation, which consists in defining the basic operations that are done in a unit of time. When the model of computation is not explicitly specified, this is generally meant as being multitape Turing machine.

Deterministic models[edit]
A deterministic model of computation is a model of computation such that the successive states of the machine and the operations to be performed are completely determined by the preceding state. Historically, the first deterministic models were recursive functions, lambda calculus, and Turing machines. The model of random-access machines (also called RAM-machines) is also widely used, as a closer counterpart to real computers.
When the model of computation is not specified, it is generally assumed to be a multitape Turing machine. For most algorithms, the time complexity is the same on multitape Turing machines as on RAM-machines, although some care may be needed in how data is stored in memory to get this equivalence.

Non-deterministic computation[edit]
In a non-deterministic model of computation, such as non-deterministic Turing machines, some choices may be done at some steps of the computation. In complexity theory, one considers all possible choices simultaneously, and the non-deterministic time complexity is the time needed, when the best choices are always done. In other words, one considers that the computation is done simultaneously on as many (identical) processors as needed, and the non-deterministic computation time is the time spent by the first processor that finishes the computation. This parallelism is partly amenable to quantum computing via superposed entangled states in running specific quantum algorithms, like e.g. Shor's factorization of yet only small integers (as of MarchÂ 2018[update]: 21 = 3 Ã 7).
Even when such a computation model is not realistic yet, it has theoretical importance, mostly related to the P = NP problem, which questions the identity of the complexity classes formed by taking "polynomial time" and "non-deterministic polynomial time" as least upper bounds. Simulating an NP-algorithm on a deterministic computer usually takes "exponential time". A problem is in the complexity class NP, if it may be solved in polynomial time on a non-deterministic machine. A problem is NP-complete if, roughly speaking, it is in NP and is not easier than any other NP problem. Many combinatorial problems, such as the Knapsack problem, the travelling salesman problem, and the Boolean satisfiability problem are NP-complete. For all these problems, the best known algorithm has exponential complexity. If any one of these problems could be solved in polynomial time on a deterministic machine, then all NP problems could also be solved in polynomial time, and one would have P = NP. As of 2017[update] it is generally conjectured that P â  NP, with the practical implication that the worst cases of NP problems are intrinsically difficult to solve, i.e., take longer than any reasonable time span (decades!) for interesting lengths of input.

Parallel and distributed computation[edit]
Main articles: Parallel computing and Distributed computing
Parallel and distributed computing consist of splitting computation on several processors, which work simultaneously. The difference between the different model lies mainly in the way of transmitting information between processors. Typically, in parallel computing the data transmission between processors is very fast, while, in distributed computing, the data transmission is done through a network and is therefore much slower.
The time needed for a computation on N processors is at least the quotient by N of the time needed by a single processor. In fact this theoretically optimal bound can never be reached, because some subtasks cannot be parallelized, and some processors may have to wait a result from another processor.
The main complexity problem is thus to design algorithms such that the product of the computation time by the number of processors is as close as possible to the time needed for the same computation on a single processor.

Quantum computing[edit]
A quantum computer is a computer whose model of computation is based on quantum mechanics. The ChurchâTuring thesis applies to quantum computers; that is, every problem that can be solved by a quantum computer can also be solved by a Turing machine. However, some problems may theoretically be solved with a much lower time complexity using a quantum computer rather than a classical computer. This is, for the moment, purely theoretical, as no one knows how to build an efficient quantum computer.
Quantum complexity theory has been developed to study the complexity classes of problems solved using quantum computers. It is used in post-quantum cryptography, which consists of designing cryptographic protocols that are resistant to attacks by quantum computers.

Problem complexity (lower bounds)[edit]
The complexity of a problem is the infimum of the complexities of the algorithms that may solve the problem, including unknown algorithms. Thus the complexity of a problem is not greater than the complexity of any algorithm that solves the problems.
It follows that every complexity that is expressed with big O notation is a complexity of the algorithm as well as of the corresponding problem.
On the other hand, it is generally hard to obtain nontrivial lower bounds for problem complexity, and there are few methods for obtaining such lower bounds.
For solving most problems, it is required to read all input data, which, normally, needs a time proportional to the size of the data. Thus, such problems have a complexity that is at least linear, that is, using big omega notation, a complexity 
  
    
      
        Î©
        (
        n
        )
        .
      
    
    {\displaystyle \Omega (n).}
  

The solution of some problems, typically in computer algebra and computational algebraic geometry, may be very large. In such a case, the complexity is lower bounded by the maximal size of the output, since the output must be written. For example, a system of n polynomial equations of degree d in n indeterminates may have up to 
  
    
      
        
          d
          
            n
          
        
      
    
    {\displaystyle d^{n}}
  
 complex solutions, if the number of solutions is finite (this is BÃ©zout's theorem). As these solutions must be written down, the complexity of this problem is 
  
    
      
        Î©
        (
        
          d
          
            n
          
        
        )
        .
      
    
    {\displaystyle \Omega (d^{n}).}
  
 For this problem, an algorithm of complexity 
  
    
      
        
          d
          
            O
            (
            n
            )
          
        
      
    
    {\displaystyle d^{O(n)}}
  
 is known, which may thus be considered as asymptotically quasi-optimal.
A nonlinear lower bound of 
  
    
      
        Î©
        (
        n
        log
        â¡
        n
        )
      
    
    {\displaystyle \Omega (n\log n)}
  
 is known for the number of comparisons needed for a sorting algorithm. Thus the best sorting algorithms are optimal, as their complexity is 
  
    
      
        O
        (
        n
        log
        â¡
        n
        )
        .
      
    
    {\displaystyle O(n\log n).}
  
 This lower bound results from the fact that there are n! ways of ordering n objects. As each comparison splits in two parts this set of n! orders, the number of N of comparisons that are needed for distinguishing all orders must verify 
  
    
      
        
          2
          
            N
          
        
        >
        n
        !
        ,
      
    
    {\displaystyle 2^{N}>n!,}
  
 which implies 
  
    
      
        N
        =
        Î©
        (
        n
        log
        â¡
        n
        )
        ,
      
    
    {\displaystyle N=\Omega (n\log n),}
  
 by Stirling's formula.
A standard method for getting lower bounds of complexity consists of reducing a problem to another problem. More precisely, suppose that one may encode a problem A of size n into a subproblem of size f(n) of a problem B, and that the complexity of A is 
  
    
      
        Î©
        (
        g
        (
        n
        )
        )
        .
      
    
    {\displaystyle \Omega (g(n)).}
  
 Without loss of generality, one may suppose that the function f increases with n and has an inverse function h. Then the complexity of the problem B is 
  
    
      
        Î©
        (
        g
        (
        h
        (
        n
        )
        )
        )
        .
      
    
    {\displaystyle \Omega (g(h(n))).}
  
 This is the method that is used to prove that, if P â  NP (an unsolved conjecture), the complexity of every NP-complete problem is 
  
    
      
        Î©
        (
        
          n
          
            k
          
        
        )
        ,
      
    
    {\displaystyle \Omega (n^{k}),}
  
 for every positive integer k.

Use in algorithm design[edit]
Evaluating the complexity of an algorithm is an important part of algorithm design, as this gives useful information on the performance that may be expected.
It is a common misconception that the evaluation of the complexity of algorithms will become less important as a result of Moore's law, which posits the exponential growth of the power of modern computers. This is wrong because this power increase allows working with large input data (big data). For example, when one wants to sort alphabetically a list of a few hundreds of entries, such as the bibliography of a book, any algorithm should work well in less than a second. On the other hand, for a list of a million of entries (the phone numbers of a large town, for example), the elementary algorithms that require 
  
    
      
        O
        (
        
          n
          
            2
          
        
        )
      
    
    {\displaystyle O(n^{2})}
  
 comparisons would have to do a trillion of comparisons, which would need around three hours at the speed of 10 million of comparisons per second. On the other hand, the quicksort and merge sort require only 
  
    
      
        n
        
          log
          
            2
          
        
        â¡
        n
      
    
    {\displaystyle n\log _{2}n}
  
 comparisons (as average-case complexity for the former, as worst-case complexity for the latter). For n = 1,000,000, this gives approximately 30,000,000 comparisons, which would only take 3 seconds at 10 million comparisons per second.
Thus the evaluation of the complexity may allow eliminating many inefficient algorithms before any implementation. This may also be used for tuning complex algorithms without testing all variants. By determining the most costly steps of a complex algorithm, the study of complexity allows also focusing on these steps the effort for improving the efficiency of an implementation.

See also[edit]
Computational complexity of mathematical operations
References[edit]
.mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Arora, Sanjeev; Barak, Boaz (2009), Computational Complexity: A Modern Approach, Cambridge, ISBNÂ 978-0-521-42426-4, ZblÂ 1193.68112
Du, Ding-Zhu; Ko, Ker-I (2000), Theory of Computational Complexity, John Wiley & Sons, ISBNÂ 978-0-471-34506-0
Garey, Michael R.; Johnson, David S. (1979), Computers and Intractability: A Guide to the Theory of NP-Completeness, W.Â H.Â Freeman, ISBNÂ 0-7167-1045-5
Goldreich, Oded (2008), Computational Complexity: A Conceptual Perspective, Cambridge University Press
van Leeuwen, Jan, ed. (1990), Handbook of theoretical computer science (vol. A): algorithms and complexity, MIT Press, ISBNÂ 978-0-444-88071-0
Papadimitriou, Christos (1994), Computational Complexity (1stÂ ed.), Addison Wesley, ISBNÂ 0-201-53082-1
Sipser, Michael (2006), Introduction to the Theory of Computation (2ndÂ ed.), USA: Thomson Course Technology, ISBNÂ 0-534-95097-3




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Computational_complexity&oldid=1061546156"
		Categories: Analysis of algorithmsComputational complexity theoryComputational resourcesHidden categories: Articles with short descriptionShort description is different from WikidataArticles lacking in-text citations from December 2017All articles lacking in-text citationsArticles containing potentially dated statements from March 2018All articles containing potentially dated statementsArticles containing potentially dated statements from 2017
	
