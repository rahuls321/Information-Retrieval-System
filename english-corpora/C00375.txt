
Title:
Particle swarm optimization
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		

Iterative simulation method
  A particle swarm searching for the global minimum of a function
.mw-parser-output .sidebar{width:22em;float:right;clear:right;margin:0.5em 0 1em 1em;background:#f8f9fa;border:1px solid #aaa;padding:0.2em;text-align:center;line-height:1.4em;font-size:88%;border-collapse:collapse;display:table}body.skin-minerva .mw-parser-output .sidebar{display:table!important;float:right!important;margin:0.5em 0 1em 1em!important}.mw-parser-output .sidebar-subgroup{width:100%;margin:0;border-spacing:0}.mw-parser-output .sidebar-left{float:left;clear:left;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-none{float:none;clear:both;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-outer-title{padding:0 0.4em 0.2em;font-size:125%;line-height:1.2em;font-weight:bold}.mw-parser-output .sidebar-top-image{padding:0.4em}.mw-parser-output .sidebar-top-caption,.mw-parser-output .sidebar-pretitle-with-top-image,.mw-parser-output .sidebar-caption{padding:0.2em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-pretitle{padding:0.4em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-title,.mw-parser-output .sidebar-title-with-pretitle{padding:0.2em 0.8em;font-size:145%;line-height:1.2em}.mw-parser-output .sidebar-title-with-pretitle{padding:0.1em 0.4em}.mw-parser-output .sidebar-image{padding:0.2em 0.4em 0.4em}.mw-parser-output .sidebar-heading{padding:0.1em 0.4em}.mw-parser-output .sidebar-content{padding:0 0.5em 0.4em}.mw-parser-output .sidebar-content-with-subgroup{padding:0.1em 0.4em 0.2em}.mw-parser-output .sidebar-above,.mw-parser-output .sidebar-below{padding:0.3em 0.8em;font-weight:bold}.mw-parser-output .sidebar-collapse .sidebar-above,.mw-parser-output .sidebar-collapse .sidebar-below{border-top:1px solid #aaa;border-bottom:1px solid #aaa}.mw-parser-output .sidebar-navbar{text-align:right;font-size:115%;padding:0 0.4em 0.4em}.mw-parser-output .sidebar-list-title{padding:0 0.4em;text-align:left;font-weight:bold;line-height:1.6em;font-size:105%}.mw-parser-output .sidebar-list-title-c{padding:0 0.4em;text-align:center;margin:0 3.3em}@media(max-width:720px){body.mediawiki .mw-parser-output .sidebar{width:100%!important;clear:both;float:none!important;margin-left:0!important;margin-right:0!important}}Part of a series on theEvolutionary algorithm
Artificial development
Artificial life
Cellular evolutionary algorithm
Cultural algorithm
Differential evolution
Effective fitness
Evolutionary computation
Evolution strategy
Gaussian adaptation
Evolutionary multimodal optimization
Particle swarm optimization
Memetic algorithm
Natural evolution strategy
Neuroevolution
Promoter based genetic algorithm
Spiral optimization algorithm
Self-modifying code
Polymorphic code

Genetic algorithm
Chromosome
Clonal selection algorithm
Crossover
Mutation
Genetic memory
Genetic fuzzy systems
Selection
Fly algorithm

Genetic programming
Cartesian genetic programming
Linear genetic programming
Grammatical evolution
Multi expression programming
Genetic Improvement
Schema
Eurisko
Parity benchmark
.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vte
In computational science, particle swarm optimization (PSO)[1] is a computational method that optimizes a problem by iteratively trying to improve a candidate solution with regard to a given measure of quality. It solves a problem by having a population of candidate solutions, here dubbed particles, and moving these particles around in the search-space according to simple mathematical formula over the particle's position and velocity. Each particle's movement is influenced by its local best known position, but is also guided toward the best known positions in the search-space, which are updated as better positions are found by other particles. This is expected to move the swarm toward the best solutions.
PSO is originally attributed to Kennedy, Eberhart and Shi[2][3] and was first intended for simulating social behaviour,[4] as a stylized representation of the movement of organisms in a bird flock or fish school. The algorithm was simplified and it was observed to be performing optimization. The book by Kennedy and Eberhart[5] describes many philosophical aspects of PSO and swarm intelligence. An extensive  survey of PSO applications is made by Poli.[6][7] Recently, a comprehensive review on theoretical and experimental works on PSO has been published by Bonyadi and Michalewicz.[1]
PSO is a metaheuristic as it makes few or no assumptions about the problem being optimized and can search very large spaces of candidate solutions. Also, PSO does not use the gradient of the problem being optimized, which means PSO does not require that the optimization problem be differentiable as is required by classic optimization methods such as gradient descent and quasi-newton methods. However, metaheuristics such as PSO do not guarantee an optimal solution is ever found. 

Contents

1 Algorithm
2 Parameter selection
3 Neighbourhoods and topologies
4 Inner workings

4.1 Convergence
4.2 Adaptive mechanisms


5 Variants

5.1 Hybridization
5.2 Gradient based PSO algorithms
5.3 Alleviate premature convergence
5.4 Simplifications
5.5 Multi-objective optimization
5.6 Binary, discrete, and combinatorial


6 See also
7 References
8 External links



Algorithm[edit]
A basic variant of the PSO algorithm works by having a population (called a swarm) of candidate solutions (called particles). These particles are moved around in the search-space according to a few simple formulae.[8] The movements of the particles are guided by their own best-known position in the search-space as well as the entire swarm's best-known position. When improved positions are being discovered these will then come to guide the movements of the swarm. The process is repeated and by doing so it is hoped, but not guaranteed, that a satisfactory solution will eventually be discovered.
Formally, let f:Â ânÂ â â be the cost function which must be minimized. The function takes a candidate solution as an argument in the form of a vector of real numbers and produces a real number as output which indicates the objective function value of the given candidate solution. The gradient of f is not known. The goal is to find a solution a for which f(a)Â â¤Â f(b) for all b in the search-space, which would mean a is the global minimum.
Let S be the number of particles in the swarm, each having a position xiÂ â ân in the search-space and a velocity viÂ â ân. Let pi be the best known position of particle i and let g be the best known position of the entire swarm. A basic PSO algorithm is then:[9]

for each particle iÂ =Â 1,Â ...,Â S do
    Initialize the particle's position with a uniformly distributed random vector: xiÂ ~Â U(blo,Â bup)
    Initialize the particle's best known position to its initial position: piÂ âÂ xi
    if f(pi) < f(g) then
        update the swarm's best known position: gÂ âÂ pi
    Initialize the particle's velocity: viÂ ~Â U(-|bup-blo|,Â |bup-blo|)
while a termination criterion is not met do:
    for each particle iÂ =Â 1,Â ...,Â S do
        for each dimension dÂ =Â 1,Â ...,Â n do
            Pick random numbers: rp, rg ~ U(0,1)
            Update the particle's velocity: vi,dÂ âÂ w vi,d + Ïp rp (pi,d-xi,d) + Ïg rg (gd-xi,d)
        Update the particle's position: xiÂ âÂ xi + vi
        if f(xi) < f(pi) then
            Update the particle's best known position: piÂ âÂ xi
            if f(pi) < f(g) then
                Update the swarm's best known position: gÂ âÂ pi

The values blo and bup represent the lower and upper boundaries of the search-space respectively. The w parameter is the inertia weight.  The parameters Ïp  and  Ïg are often called cognitive coefficient and social coefficient.
The termination criterion can be the number of iterations performed, or a solution where the adequate objective function value is found.[10] The parameters w, Ïp, and Ïg are selected by the practitioner and control the behaviour and efficacy of the PSO method (below). 

Parameter selection[edit]
  Performance landscape showing how a simple PSO variant performs in aggregate on several benchmark problems when varying two PSO parameters.
The choice of PSO parameters can have a large impact on optimization performance. Selecting PSO parameters that yield good performance has therefore been the subject of much research.[11][12][13][14][15][16][17][18][19]
To prevent divergence ("explosion") the inertia weight must be smaller than 1. The two other parameters  can be then derived thanks to the constriction approach,[16] or freely selected, but the analyses suggest convergence domains to constrain them. Typical values are in 
  
    
      
        [
        1
        ,
        3
        ]
      
    
    {\displaystyle [1,3]}
  
.
The PSO parameters can also be tuned by using another overlaying optimizer, a concept known as meta-optimization,[20][21][22][23] or even fine-tuned during the optimization, e.g., by means of fuzzy logic.[24][25]
Parameters have also been tuned for various optimization scenarios.[26][27]

Neighbourhoods and topologies[edit]
The topology of the swarm defines the subset of particles with which each particle can exchange information.[28] The basic version of the algorithm uses the global topology as the swarm communication structure.[10] This topology allows all particles to communicate with all the other particles, thus the whole swarm share the same best position g from a single particle. However, this approach might lead the swarm to be trapped into a local minimum,[29] thus different topologies have been used to control the flow of information among particles. For instance, in local topologies, particles only share information with a subset of particles.[10] This subset can be a geometrical one[30] â for example "the m nearest particles" â or, more often, a social one, i.e. a set of particles that is not depending on any distance. In such cases, the PSO variant is said to be local best (vs global best for the basic PSO).
A commonly used swarm topology is the ring, in which each particle has just two neighbours, but there are many others.[10] The topology is not necessarily static. In fact, since the topology is related to the diversity of communication of the particles,[31] some efforts have been done to create adaptive topologies (SPSO,[32] APSO,[33] stochastic star,[34] TRIBES,[35] Cyber Swarm,[36] and C-PSO[37]).

Inner workings[edit]
There are several schools of thought as to why and how the PSO algorithm can perform optimization.
A common belief amongst researchers is that the swarm behaviour varies between exploratory behaviour, that is, searching a broader region of the search-space, and exploitative behaviour, that is, a locally oriented search so as to get closer to a (possibly local) optimum. This school of thought has been prevalent since the inception of PSO.[3][4][12][16] This school of thought contends that the PSO algorithm and its parameters must be chosen so as to properly balance between exploration and exploitation to avoid premature convergence to a local optimum yet still ensure a good rate of convergence to the optimum. This belief is the precursor of many PSO variants, see below.
Another school of thought is that the behaviour of a PSO swarm is not well understood in terms of how it affects actual optimization performance, especially for higher-dimensional search-spaces and optimization problems that may be discontinuous, noisy, and time-varying. This school of thought merely tries to find PSO algorithms and parameters that cause good performance regardless of how the swarm behaviour can be interpreted in relation to e.g. exploration and exploitation. Such studies have led to the simplification of the PSO algorithm, see below.

Convergence[edit]
In relation to PSO the word convergence typically refers to two different definitions:

Convergence of the sequence of solutions (aka, stability analysis, converging) in which all particles have converged to a point in the search-space, which may or may not be the optimum,
Convergence to a local optimum where all personal bests p or, alternatively, the swarm's best known position g, approaches a local optimum of the problem, regardless of how the swarm behaves.
Convergence of the sequence of solutions has been investigated for PSO.[15][16][17] These analyses have resulted in guidelines for selecting PSO parameters that are believed to cause convergence to a point and prevent divergence of the swarm's particles (particles do not move unboundedly and will converge to somewhere). However, the analyses were criticized by Pedersen[22] for being oversimplified as they assume the swarm has only one particle, that it does not use stochastic variables and that the points of attraction, that is, the particle's best known position p and the swarm's best known position g, remain constant throughout the optimization process. However, it was shown[38] that these simplifications do not affect the boundaries found by these studies for parameter where the swarm is convergent. Considerable effort has been made in recent years to weaken the modelling assumption utilized during the stability analysis of PSO,[39] with the most recent generalized result applying to numerous PSO variants and utilized what was shown to be the minimal necessary modeling assumptions.[40]
Convergence to a local optimum has been analyzed for PSO in[41] and.[42] It has been proven that PSO needs some modification to guarantee finding a local optimum.
This means that determining convergence capabilities of different PSO algorithms and parameters still depends on empirical results. One attempt at addressing this issue is the development of an "orthogonal learning" strategy for an improved use of the information already existing in the relationship between p and g, so as to form a leading converging exemplar and to be effective with any PSO topology. The aims are to improve the performance of PSO overall, including faster global convergence, higher solution quality, and stronger robustness.[43] However, such studies do not provide theoretical evidence to actually prove their claims.

Adaptive mechanisms[edit]
Without the need for a trade-off between convergence ('exploitation') and divergence ('exploration'), an adaptive mechanism can be introduced. Adaptive particle swarm optimization (APSO) [44] features better search efficiency than standard PSO. APSO can perform global search over the entire search space with a higher convergence speed. It enables automatic control of the inertia weight, acceleration coefficients, and other algorithmic parameters at the run time, thereby improving the search effectiveness and efficiency at the same time. Also, APSO can act on the globally best particle to jump out of the likely local optima. However, APSO will introduce new algorithm parameters, it does not introduce additional design or implementation complexity nonetheless.

Variants[edit]
Numerous variants of even a basic PSO algorithm are possible. For example, there are different ways to initialize the particles and velocities (e.g. start with zero velocities instead), how to dampen the velocity, only update pi and g after the entire swarm has been updated, etc. Some of these choices and their possible performance impact have been discussed in the literature.[14]
A series of standard implementations have been created by leading researchers, "intended for use both as a baseline for performance testing of improvements to the technique, as well as to represent PSO to the wider optimization community. Having a well-known, strictly-defined standard algorithm provides a valuable point of comparison which can be used throughout the field of research to better test new advances."[10] The latest is Standard PSO 2011 (SPSO-2011).[45]

Hybridization[edit]
New and more sophisticated PSO variants are also continually being introduced in an attempt to improve optimization performance. There are certain trends in that research; one is to make a hybrid optimization method using PSO combined with other optimizers,[46][47][48] e.g., combined PSO with biogeography-based optimization,[49] and the incorporation of an effective learning method.[43]

Gradient based PSO algorithms[edit]
The ability of the PSO algorithm to efficiently explore multiple local minimum can be combined with the ability of gradient based local search algorithms to effectively compute an accurate local minimum to produce gradient based PSO algorithms.[50] In gradient based PSO algorithms, the PSO algorithm is used to explore many local minima and locate a point in the basin of attraction of a deep local minimum. Then efficient gradient based local search algorithms are used to accurately locate the deep local minimum. The computation of gradients and Hessians of complex high-dimensional cost functions is often computationally costly and manually impossible in many cases preventing the widespread adoption of gradient based PSO algorithms. However in recent years the availability of high quality symbolic Automatic Differentiation (AD) software[51] has led to a resurgence of interest in gradient based PSO algorithms.

Alleviate premature convergence[edit]
Another research trend is to try and alleviate premature convergence (that is, optimization stagnation), e.g. by reversing or perturbing the movement of the PSO particles,[19][52][53][54] another approach to deal with premature convergence is the use of multiple swarms[55] (multi-swarm optimization). The multi-swarm approach can also be used to implement multi-objective optimization.[56] Finally, there are  developments in adapting the behavioural parameters of PSO during optimization.[44][24]

Simplifications[edit]
Another school of thought is that PSO should be simplified as much as possible without impairing its performance; a general concept often referred to as Occam's razor. Simplifying PSO was originally suggested by Kennedy[4] and has been studied more extensively,[18][21][22][57] where it appeared that optimization performance was improved, and the parameters were easier to tune and they performed more consistently across different optimization problems.
Another argument in favour of simplifying PSO is that metaheuristics can only have their efficacy demonstrated empirically by doing computational experiments on a finite number of optimization problems. This means a metaheuristic such as PSO cannot be proven correct and this increases the risk of making errors in its description and implementation. A good example of this[58] presented a promising variant of a genetic algorithm (another popular metaheuristic) but it was later found to be defective as it was strongly biased in its optimization search towards similar values for different dimensions in the search space, which happened to be the optimum of the benchmark problems considered. This bias was because of a programming error, and has now been fixed.[59]
Initialization of velocities may require extra inputs. The Bare Bones PSO variant[60] has been proposed in 2003 by James Kennedy, and does not need to use velocity at all.
Another simpler variant is the accelerated particle swarm optimization (APSO),[61] which also does not need to use velocity and can speed up the convergence in many applications. A simple demo code of APSO is available.[62]

Multi-objective optimization[edit]
PSO has also been applied to multi-objective problems,[63][64][65] in which the objective function comparison takes pareto dominance into account when moving the PSO particles and non-dominated solutions are stored so as to approximate the pareto front.

Binary, discrete, and combinatorial[edit]
As the PSO equations given above work on real numbers, a commonly used method to solve discrete problems is to map the discrete search space to a continuous domain, to apply a classical PSO, and then to demap the result.  Such a mapping can be very simple (for example by just using rounded values) or more sophisticated.[66]
However, it can be noted that the equations of movement make use of operators that perform four actions:

computing the difference of two positions. The result is a velocity (more precisely a displacement)
multiplying a velocity by a numerical coefficient
adding two velocities
applying a velocity to a position
Usually a position and a velocity are represented by n real numbers, and these operators are simply -, *, +, and again +. But all these mathematical objects can be defined in a completely different way, in order to cope with binary problems (or more generally discrete ones), or even combinatorial ones.[67][68][69][70] One approach is to redefine the operators based on sets.[71]

See also[edit]
Artificial bee colony algorithm
Bees algorithm
Derivative-free optimization
Multi-swarm optimization
Particle filter
Swarm intelligence
Fish School Search
Dispersive flies optimisation
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ Jump up to: a b .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Bonyadi, M. R.; Michalewicz, Z. (2017). "Particle swarm optimization for single objective continuous space problems: a review". Evolutionary Computation. 25 (1): 1â54. doi:10.1162/EVCO_r_00180. PMIDÂ 26953883. S2CIDÂ 8783143.

^ Kennedy, J.; Eberhart, R. (1995). "Particle Swarm Optimization". Proceedings of IEEE International Conference on Neural Networks. Vol.Â IV. pp.Â 1942â1948. doi:10.1109/ICNN.1995.488968.

^ Jump up to: a b Shi, Y.; Eberhart, R.C. (1998). "A modified particle swarm optimizer". Proceedings of IEEE International Conference on Evolutionary Computation. pp.Â 69â73. doi:10.1109/ICEC.1998.699146.

^ Jump up to: a b c Kennedy, J. (1997). "The particle swarm: social adaptation of knowledge". Proceedings of IEEE International Conference on Evolutionary Computation. pp.Â 303â308. doi:10.1109/ICEC.1997.592326.

^ Kennedy, J.; Eberhart, R.C. (2001). Swarm Intelligence. Morgan Kaufmann. ISBNÂ 978-1-55860-595-4.

^ Poli, R. (2007). "An analysis of publications on particle swarm optimisation applications" (PDF). Technical Report CSM-469. Archived from the original (PDF) on 2011-07-16. Retrieved 2010-05-03.

^ Poli, R. (2008). "Analysis of the publications on the applications of particle swarm optimisation" (PDF). Journal of Artificial Evolution and Applications. 2008: 1â10. doi:10.1155/2008/685175.

^ Zhang, Y. (2015). "A Comprehensive Survey on Particle Swarm Optimization Algorithm and Its Applications". Mathematical Problems in Engineering. 2015: 931256.

^ Clerc, M. (2012). "Standard Particle Swarm Optimisation" (PDF). HAL Open Access Archive.

^ Jump up to: a b c d e Bratton, Daniel; Kennedy, James (2007). Defining a Standard for Particle Swarm Optimization (PDF). Proceedings of the 2007 IEEE Swarm Intelligence Symposium (SIS 2007). pp.Â 120â127. doi:10.1109/SIS.2007.368035. ISBNÂ 978-1-4244-0708-8. S2CIDÂ 6217309.

^ Taherkhani, M.; Safabakhsh, R. (2016). "A novel stability-based adaptive inertia weight for particle swarm optimization". Applied Soft Computing. 38: 281â295. doi:10.1016/j.asoc.2015.10.004.

^ Jump up to: a b Shi, Y.; Eberhart, R.C. (1998). "Parameter selection in particle swarm optimization". Proceedings of Evolutionary Programming VII (EP98). pp.Â 591â600.

^ Eberhart, R.C.; Shi, Y. (2000). "Comparing inertia weights and constriction factors in particle swarm optimization". Proceedings of the Congress on Evolutionary Computation. Vol.Â 1. pp.Â 84â88.

^ Jump up to: a b Carlisle, A.; Dozier, G. (2001). "An Off-The-Shelf PSO" (PDF). Proceedings of the Particle Swarm Optimization Workshop. pp.Â 1â6. Archived from the original (PDF) on 2003-05-03.

^ Jump up to: a b van den Bergh, F. (2001). An Analysis of Particle Swarm Optimizers (PDF) (PhD thesis). University of Pretoria, Faculty of Natural and Agricultural Science.

^ Jump up to: a b c d Clerc, M.; Kennedy, J. (2002). "The particle swarm - explosion, stability, and convergence in a multidimensional complex space". IEEE Transactions on Evolutionary Computation. 6 (1): 58â73. CiteSeerXÂ 10.1.1.460.6608. doi:10.1109/4235.985692.

^ Jump up to: a b Trelea, I.C. (2003). "The Particle Swarm Optimization Algorithm: convergence analysis and parameter selection". Information Processing Letters. 85 (6): 317â325. doi:10.1016/S0020-0190(02)00447-7.

^ Jump up to: a b Bratton, D.; Blackwell, T. (2008). "A Simplified Recombinant PSO" (PDF). Journal of Artificial Evolution and Applications. 2008: 1â10. doi:10.1155/2008/654184.

^ Jump up to: a b Evers, G. (2009). An Automatic Regrouping Mechanism to Deal with Stagnation in Particle Swarm Optimization (Master's thesis). The University of Texas - Pan American, Department of Electrical Engineering.

^ Meissner, M.; Schmuker, M.; Schneider, G. (2006). "Optimized Particle Swarm Optimization (OPSO) and its application to artificial neural network training". BMC Bioinformatics. 7 (1): 125. doi:10.1186/1471-2105-7-125. PMCÂ 1464136. PMIDÂ 16529661.

^ Jump up to: a b Pedersen, M.E.H. (2010). Tuning & Simplifying Heuristical Optimization (PDF). University of Southampton, School of Engineering Sciences, Computational Engineering and Design Group. S2CIDÂ 107805461. Archived from the original (PhD thesis) on 2020-02-13.

^ Jump up to: a b c Pedersen, M.E.H.; Chipperfield, A.J. (2010). "Simplifying particle swarm optimization". Applied Soft Computing. 10 (2): 618â628. CiteSeerXÂ 10.1.1.149.8300. doi:10.1016/j.asoc.2009.08.029.

^ Mason, Karl; Duggan, Jim; Howley, Enda (2018). "A Meta Optimisation Analysis of Particle Swarm Optimisation Velocity Update Equations for Watershed Management Learning". Applied Soft Computing. 62: 148â161. doi:10.1016/j.asoc.2017.10.018.

^ Jump up to: a b Nobile, M.S; Cazzaniga, P.; Besozzi, D.; Colombo, R.; Mauri, G.; Pasi, G. (2018). "Fuzzy Self-Tuning PSO: a settings-free algorithm for global optimization". Swarm and Evolutionary Computation. 39: 70â85. doi:10.1016/j.swevo.2017.09.001.

^ Nobile, M.S; Pasi, G.; Cazzaniga, P.; Besozzi, D.; Colombo, R.; Mauri, G. (2015). "Proactive particles in swarm optimization: a self-tuning algorithm based on fuzzy logic". Proceedings of the 2015 IEEE International Conference on Fuzzy Systems (FUZZ-IEEE 2015), Istanbul (Turkey). pp.Â 1â8. doi:10.1109/FUZZ-IEEE.2015.7337957.

^ Cazzaniga, P.; Nobile, M.S.; Besozzi, D. (2015). "The impact of particles initialization in PSO: parameter estimation as a case in point, (Canada)". Proceedings of IEEE Conference on Computational Intelligence in Bioinformatics and Computational Biology. doi:10.1109/CIBCB.2015.7300288.

^ Pedersen, M.E.H. (2010). "Good parameters for particle swarm optimization". Technical Report HL1001. CiteSeerXÂ 10.1.1.298.4359.

^ Kennedy, J.; Mendes, R. (2002). Population structure and particle swarm performance. Evolutionary Computation, 2002. CEC'02. Proceedings of the 2002 Congress on. Vol.Â 2. pp.Â 1671â1676 vol.2. CiteSeerXÂ 10.1.1.114.7988. doi:10.1109/CEC.2002.1004493. ISBNÂ 978-0-7803-7282-5. S2CIDÂ 14364974.

^ Mendes, R. (2004). Population Topologies and Their Influence in Particle Swarm Performance (PhD thesis). Universidade do Minho.

^ Suganthan, Ponnuthurai N. "Particle swarm optimiser with neighbourhood operator." Evolutionary Computation, 1999. CEC 99. Proceedings of the 1999 Congress on. Vol. 3. IEEE, 1999.

^ Oliveira, M.; Pinheiro, D.; Andrade, B.; Bastos-Filho, C.; Menezes, R. (2016). Communication Diversity in Particle Swarm Optimizers. International Conference on Swarm Intelligence. Lecture Notes in Computer Science. Vol.Â 9882. pp.Â 77â88. doi:10.1007/978-3-319-44427-7_7. ISBNÂ 978-3-319-44426-0. S2CIDÂ 37588745.

^ SPSO Particle Swarm Central

^  Almasi, O. N. and Khooban, M. H. (2017). A parsimonious SVM model selection criterion for classification of real-world data sets via an adaptive population-based algorithm. Neural Computing and Applications, 1-9. https://doi.org/10.1007/s00521-017-2930-y

^ Miranda, V., Keko, H. and Duque, Ã. J. (2008). Stochastic Star Communication Topology in Evolutionary Particle Swarms (EPSO). International Journal of Computational Intelligence Research (IJCIR), Volume 4, Number 2, pp. 105-116

^ Clerc, M. (2006). Particle Swarm Optimization. ISTE (International Scientific and Technical Encyclopedia), 2006

^ Yin, P., Glover, F., Laguna, M., & Zhu, J. (2011). A Complementary Cyber Swarm Algorithm. International Journal of Swarm Intelligence Research (IJSIR), 2(2), 22-41

^ Elshamy, W.; Rashad, H.; Bahgat, A. (2007). "Clubs-based Particle Swarm Optimization" (PDF). IEEE Swarm Intelligence Symposium 2007 (SIS2007). Honolulu, HI. pp.Â 289â296. Archived from the original (PDF) on 2013-10-23. Retrieved 2012-04-27.

^ Cleghorn, Christopher W (2014). "Particle Swarm Convergence: Standardized Analysis and Topological Influence". Swarm Intelligence Conference. Lecture Notes in Computer Science. 8667: 134â145. doi:10.1007/978-3-319-09952-1_12. ISBNÂ 978-3-319-09951-4.

^ Liu, Q (2015). "Order-2 stability analysis of particle swarm optimization". Evolutionary Computation. 23 (2): 187â216. doi:10.1162/EVCO_a_00129. PMIDÂ 24738856. S2CIDÂ 25471827.

^ Cleghorn, Christopher W.; Engelbrecht, Andries. (2018). "Particle Swarm Stability: A Theoretical Extension using the Non-Stagnate Distribution Assumption". Swarm Intelligence. 12 (1): 1â22. doi:10.1007/s11721-017-0141-x. hdl:2263/62934. S2CIDÂ 9778346.

^ Van den Bergh, F. "A convergence proof for the particle swarm optimiser" (PDF). Fundamenta Informaticae.

^ Bonyadi, Mohammad reza.; Michalewicz, Z. (2014). "A locally convergent rotationally invariant particle swarm optimization algorithm" (PDF). Swarm Intelligence. 8 (3): 159â198. doi:10.1007/s11721-014-0095-1. S2CIDÂ 2261683.

^ Jump up to: a b Zhan, Z-H.; Zhang, J.; Li, Y; Shi, Y-H. (2011). "Orthogonal Learning Particle Swarm Optimization" (PDF). IEEE Transactions on Evolutionary Computation. 15 (6): 832â847. doi:10.1109/TEVC.2010.2052054.

^ Jump up to: a b Zhan, Z-H.; Zhang, J.; Li, Y; Chung, H.S-H. (2009). "Adaptive Particle Swarm Optimization" (PDF). IEEE Transactions on Systems, Man, and Cybernetics. 39 (6): 1362â1381. doi:10.1109/TSMCB.2009.2015956. PMIDÂ 19362911. S2CIDÂ 11191625.

^ Zambrano-Bigiarini, M.; Clerc, M.; Rojas, R. (2013). Standard Particle Swarm Optimisation 2011 at CEC-2013: A baseline for future PSO improvements. Evolutionary Computation (CEC), 2013 IEEE Congress on. pp.Â 2337â2344. doi:10.1109/CEC.2013.6557848. ISBNÂ 978-1-4799-0454-9. S2CIDÂ 206553432.

^ Lovbjerg, M.; Krink, T. (2002). "The LifeCycle Model: combining particle swarm optimisation, genetic algorithms and hillclimbers" (PDF). Proceedings of Parallel Problem Solving from Nature VII (PPSN). pp.Â 621â630.

^ Niknam, T.; Amiri, B. (2010). "An efficient hybrid approach based on PSO, ACO and k-means for cluster analysis". Applied Soft Computing. 10 (1): 183â197. doi:10.1016/j.asoc.2009.07.001.

^ Zhang, Wen-Jun; Xie, Xiao-Feng (2003). DEPSO: hybrid particle swarm with differential evolution operator. IEEE International Conference on Systems, Man, and Cybernetics (SMCC), Washington, DC, USA: 3816-3821.

^ Zhang, Y.; Wang, S. (2015). "Pathological Brain Detection in Magnetic Resonance Imaging Scanning by Wavelet Entropy and Hybridization of Biogeography-based Optimization and Particle Swarm Optimization". Progress in Electromagnetics Research. 152: 41â58. doi:10.2528/pier15040602.

^ Noel, Mathew M. (2012-01-01). "A new gradient based particle swarm optimization algorithm for accurate computation of global minimum". Applied Soft Computing. 12 (1): 353â359. doi:10.1016/j.asoc.2011.08.037. ISSNÂ 1568-4946.

^ "Automatic differentiation", Wikipedia, 2021-06-20, retrieved 2021-09-04

^ Lovbjerg, M.; Krink, T. (2002). "Extending Particle Swarm Optimisers with Self-Organized Criticality" (PDF). Proceedings of the Fourth Congress on Evolutionary Computation (CEC). Vol.Â 2. pp.Â 1588â1593.

^ Xinchao, Z. (2010). "A perturbed particle swarm algorithm for numerical optimization". Applied Soft Computing. 10 (1): 119â124. doi:10.1016/j.asoc.2009.06.010.

^ Xie, Xiao-Feng; Zhang, Wen-Jun; Yang, Zhi-Lian (2002). A dissipative particle swarm optimization. Congress on Evolutionary Computation (CEC), Honolulu, HI, USA: 1456-1461.

^ Cheung, N. J.; Ding, X.-M.; Shen, H.-B. (2013). "OptiFel: A Convergent Heterogeneous Particle Sarm Optimization Algorithm for Takagi-Sugeno Fuzzy Modeling". IEEE Transactions on Fuzzy Systems. 22 (4): 919â933. doi:10.1109/TFUZZ.2013.2278972. S2CIDÂ 27974467.

^ Nobile, M.; Besozzi, D.; Cazzaniga, P.; Mauri, G.; Pescini, D. (2012). "A GPU-Based Multi-Swarm PSO Method for Parameter Estimation in Stochastic Biological Systems Exploiting Discrete-Time Target Series". Evolutionary Computation, Machine Learning and Data Mining in Bioinformatics. Lecture Notes in Computer Science. Vol.Â 7264. pp.Â 74â85. doi:10.1007/978-3-642-29066-4_7.

^ Yang, X.S. (2008). Nature-Inspired Metaheuristic Algorithms. Luniver Press. ISBNÂ 978-1-905986-10-1.

^ Tu, Z.; Lu, Y. (2004). "A robust stochastic genetic algorithm (StGA) for global numerical optimization". IEEE Transactions on Evolutionary Computation. 8 (5): 456â470. doi:10.1109/TEVC.2004.831258. S2CIDÂ 22382958.

^ Tu, Z.; Lu, Y. (2008). "Corrections to "A Robust Stochastic Genetic Algorithm (StGA) for Global Numerical Optimization". IEEE Transactions on Evolutionary Computation. 12 (6): 781. doi:10.1109/TEVC.2008.926734. S2CIDÂ 2864886.

^ Kennedy, James (2003). "Bare Bones Particle Swarms". Proceedings of the 2003 IEEE Swarm Intelligence Symposium: 80â87. doi:10.1109/SIS.2003.1202251. ISBNÂ 0-7803-7914-4. S2CIDÂ 37185749.

^ X. S. Yang, S. Deb and S. Fong, Accelerated particle swarm optimization and support vector machine for business optimization and applications, NDT 2011, Springer CCIS 136, pp. 53-66 (2011).

^ "Search Results: APSO - File Exchange - MATLAB Central".

^ Parsopoulos, K.; Vrahatis, M. (2002). "Particle swarm optimization method in multiobjective problems". Proceedings of the ACM Symposium on Applied Computing (SAC). pp.Â 603â607. doi:10.1145/508791.508907.

^ Coello Coello, C.; Salazar Lechuga, M. (2002). "MOPSO: A Proposal for Multiple Objective Particle Swarm Optimization". Congress on Evolutionary Computation (CEC'2002). pp.Â 1051â1056.

^ Mason, Karl; Duggan, Jim; Howley, Enda (2017). "Multi-objective dynamic economic emission dispatch using particle swarm optimisation variants". Neurocomputing. 270: 188â197. doi:10.1016/j.neucom.2017.03.086.

^ Roy, R., Dehuri, S., & Cho, S. B. (2012). A Novel Particle Swarm Optimization Algorithm for Multi-Objective Combinatorial Optimization Problem. 'International Journal of Applied Metaheuristic Computing (IJAMC)', 2(4), 41-57

^ Kennedy, J. & Eberhart, R. C. (1997). A discrete binary version of the particle swarm algorithm, Conference on Systems, Man, and Cybernetics, Piscataway, NJ: IEEE Service Center, pp. 4104-4109

^ Clerc, M. (2004). Discrete Particle Swarm Optimization, illustrated by the Traveling Salesman Problem, New Optimization Techniques in Engineering, Springer, pp. 219-239

^ Clerc, M. (2005). Binary Particle Swarm Optimisers: toolbox, derivations, and mathematical insights, Open Archive HAL

^ Jarboui, B.; Damak, N.; Siarry, P.; Rebai, A. (2008). "A combinatorial particle swarm optimization for solving multi-mode resource-constrained project scheduling problems". Applied Mathematics and Computation. 195: 299â308. doi:10.1016/j.amc.2007.04.096.

^ Chen, Wei-neng; Zhang, Jun (2010). "A novel set-based particle swarm optimization method for discrete optimization problem". IEEE Transactions on Evolutionary Computation. 14 (2): 278â300. CiteSeerXÂ 10.1.1.224.5378. doi:10.1109/tevc.2009.2030331. S2CIDÂ 17984726.


External links[edit]



Wikimedia Commons has media related to Particle swarm optimization.

Particle Swarm Central is a repository for information on PSO. Several source codes are freely available.
A brief video of particle swarms optimizing three benchmark functions.
Simulation of PSO convergence in a two-dimensional space (Matlab).
Applications of PSO.
Liu, Yang (2009). "Automatic calibration of a rainfallârunoff model using a fast and elitist multi-objective particle swarm algorithm". Expert Systems with Applications. 36 (5): 9533â9538. doi:10.1016/j.eswa.2008.10.086.
Links to PSO source code
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}showvteMajor subfields of optimization
Convex programming
Integer programming
Quadratic programming
Nonlinear programming
Stochastic programming
Robust optimization
Combinatorial optimization
Infinite-dimensional optimization
Metaheuristics
Constraint satisfaction
Multiobjective optimization
Simulated annealing

showvteSwarmingBiological swarming
Agent-based model in biology
Bait ball
Collective animal behavior
Feeding frenzy
Flock
Flocking
Herd
Herd behavior
Mixed-species foraging flock
Mobbing behavior
Pack
Pack hunter
Patterns of self-organization in ants
Shoaling and schooling
Sort sol
Symmetry breaking of escaping ants
Swarming behaviour
Swarming (honey bee)
Swarming motility
Animal migration
Animal migration
altitudinal
tracking
coded wire tag
Bird migration
flyways
reverse migration
Cell migration
Fish migration
diel vertical
Lessepsian
salmon run
sardine run
Homing
natal
philopatry
Insect migration
butterflies
monarch
Sea turtle migration
Swarm algorithms
Agent-based models
Ant colony optimization
Boids
Crowd simulation
Particle swarm optimization
Swarm intelligence
Swarm (simulation)
Collective motion
Active matter
Collective motion
Self-propelled particles
clustering
Vicsek model
BIO-LGCA
Swarm robotics
Ant robotics
Microbotics
Nanorobotics
Swarm robotics
Symbrion
Related topics
Allee effect
Animal navigation
Collective intelligence
Decentralised system
Eusociality
Group size measures
Microbial intelligence
Mutualism
Predator satiation
Quorum sensing
Spatial organization
Stigmergy
Military swarming
Task allocation and partitioning of social insects





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Particle_swarm_optimization&oldid=1050772675"
		Categories: MetaheuristicsEvolutionary algorithmsHidden categories: Use American English from January 2019All Wikipedia articles written in American EnglishArticles with short descriptionShort description is different from WikidataCommons category link is on Wikidata
	
