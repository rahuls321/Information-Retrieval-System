
Title:
Signed zero
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Differentiating positive and negative zero
Signed zero is zero with an associated sign. In ordinary arithmetic, the number 0 does not have a sign, so that â0, +0 and 0 are identical. However, in computing, some number representations allow for the existence of two zeros, often denoted by â0 (negative zero) and +0 (positive zero), regarded as equal by the numerical comparison operations but with possible different behaviors in particular operations. This occurs in the sign and magnitude and ones' complement signed number representations for integers, and in most floating-point number representations. The number 0 is usually encoded as +0, but can be represented by either +0 or â0.
The IEEE 754 standard for floating-point arithmetic (presently used by most computers and programming languages that support floating-point numbers) requires both +0 and â0. Real arithmetic with signed zeros can be considered a variant of the extended real number line such that 1/â0 = ââ and 1/+0 = +â; division is only undefined for Â±0/Â±0 and Â±â/Â±â.
Negatively signed zero echoes the mathematical analysis concept of approaching 0 from below as a one-sided limit, which may be denoted by xÂ âÂ 0â, xÂ âÂ 0â, or xÂ âÂ â0.  The notation "â0" may be used informally to denote a negative number that has been rounded to zero.  The concept of negative zero also has some theoretical applications in statistical mechanics and other disciplines.
It is claimed that the inclusion of signed zero in IEEEÂ 754 makes it much easier to achieve numerical accuracy in some critical problems,[1] in particular when computing with complex elementary functions.[2] On the other hand, the concept of signed zero runs contrary to the general assumption made in most mathematical fields that negative zero is the same thing as zero.  Representations that allow negative zero can be a source of errors in programs, if software developers do not take into account that while the two zero representations behave as equal under numeric comparisons, they yield different results in some operations.

Contents

1 Representations
2 Properties and handling

2.1 Notation
2.2 Arithmetic
2.3 Comparisons


3 In rounded values such as temperatures
4 In statistical mechanics
5 See also
6 References
7 Further reading



Representations[edit]
Binary integer formats can use various encodings. In the widely used two's complement encoding, zero is unsigned. In a 1+7-bit sign-and-magnitude representation for integers, negative zero is represented by the bit string 10000000. In an 8-bit ones' complement representation, negative zero is represented by the bit string 11111111. In all these three encodings, positive or unsigned zero is represented by 00000000. However, the latter two encodings (with a signed zero) are uncommon for integer formats. The most common formats with a signed zero are floating-point formats (IEEE 754 formats or similar), described below.

  Negative zero by IEEE 754 representation in binary32
In IEEE 754 binary floating-point formats, zero values are represented by the biased exponent and significand both being zero. Negative zero has the sign bit set to one. One may obtain negative zero as the result of certain computations, for instance as the result of arithmetic underflow on a negative number (other results may also be possible), or â1.0Ã0.0, or simply as â0.0.
In IEEE 754 decimal floating-point formats, a negative zero is represented by an exponent being any valid exponent in the range for the format, the true significand being zero, and the sign bit being one.

Properties and handling[edit]
The IEEE 754 floating-point standard specifies the behavior of positive zero and negative zero under various operations.  The outcome may depend on the current IEEE rounding mode settings.

Notation[edit]
In systems that include both signed and unsigned zeros, the notation 
  
    
      
        
          0
          
            +
          
        
      
    
    {\displaystyle 0^{+}}
  
 and 
  
    
      
        
          0
          
            â
          
        
      
    
    {\displaystyle 0^{-}}
  
 is sometimes used for signed zeros.

Arithmetic[edit]
Addition and multiplication are commutative, but there are some special rules that have to be followed, which mean the usual mathematical rules for algebraic simplification may not apply. The 
  
    
      
        =
      
    
    {\displaystyle =}
  
 sign below shows the obtained floating-point results (it is not the usual equality operator).
The usual rule for signs is always followed when multiplying or dividing:


  
    
      
        (
        â
        0
        )
        â
        
          |
          x
          |
        
        =
        â
        0
        
        
      
    
    {\displaystyle (-0)\cdot \left|x\right|=-0\,\!}
  
 (for 
  
    
      
        x
      
    
    {\displaystyle x}
  
 different from Â±â)

  
    
      
        
          
            
              â
              0
            
            
              |
              x
              |
            
          
        
        =
        â
        0
        
        
      
    
    {\displaystyle {\frac {-0}{\left|x\right|}}=-0\,\!}
  
 (for 
  
    
      
        x
      
    
    {\displaystyle x}
  
 different from 0)

  
    
      
        (
        â
        0
        )
        â
        (
        â
        0
        )
        =
        +
        0
        
        
      
    
    {\displaystyle (-0)\cdot (-0)=+0\,\!}
  

There are special rules for adding or subtracting signed zero:


  
    
      
        x
        +
        (
        Â±
        0
        )
        =
        x
        
        
      
    
    {\displaystyle x+(\pm 0)=x\,\!}
  
 (for 
  
    
      
        x
      
    
    {\displaystyle x}
  
 different from 0)

  
    
      
        (
        â
        0
        )
        +
        (
        â
        0
        )
        =
        (
        â
        0
        )
        â
        (
        +
        0
        )
        =
        â
        0
        
        
      
    
    {\displaystyle (-0)+(-0)=(-0)-(+0)=-0\,\!}
  


  
    
      
        (
        +
        0
        )
        +
        (
        +
        0
        )
        =
        (
        +
        0
        )
        â
        (
        â
        0
        )
        =
        +
        0
        
        
      
    
    {\displaystyle (+0)+(+0)=(+0)-(-0)=+0\,\!}
  


  
    
      
        x
        â
        x
        =
        x
        +
        (
        â
        x
        )
        =
        +
        0
        
        
      
    
    {\displaystyle x-x=x+(-x)=+0\,\!}
  
 (for any finite 
  
    
      
        x
      
    
    {\displaystyle x}
  
, â0 when rounding toward negative)
Because of negative zero (and also when the rounding mode is upward or downward), the expressions â(x â y) and (âx) â (ây), for floating-point variables x and y, cannot be replaced by y â x. However (â0) + x can be replaced by x with rounding to nearest (except when x can be a signaling NaN).
Some other special rules:


  
    
      
        
          |
          
            â
            0
          
          |
        
        =
        +
        0
        
        
      
    
    {\displaystyle \left|-0\right|=+0\,\!}
  


  
    
      
        
          
            â
            0
          
        
        =
        â
        0
        
        
      
    
    {\displaystyle {\sqrt {-0}}=-0\,\!}
  
[3]

  
    
      
        
          
            
              â
              0
            
            
              â
              â
            
          
        
        =
        +
        0
        
        
      
    
    {\displaystyle {\frac {-0}{-\infty }}=+0\,\!}
  
  (follows the sign rule for division)

  
    
      
        
          
            
              |
              x
              |
            
            
              â
              0
            
          
        
        =
        â
        â
        
        
      
    
    {\displaystyle {\frac {\left|x\right|}{-0}}=-\infty \,\!}
  
  (for non-zero 
  
    
      
        x
      
    
    {\displaystyle x}
  
, follows the sign rule for division)

  
    
      
        
          Â±
          0
        
        Ã
        
          Â±
          â
        
        =
        
          
            NaN
          
        
        
        
      
    
    {\displaystyle {\pm 0}\times {\pm \infty }={\mbox{NaN}}\,\!}
  
 (Not a Number or interrupt for indeterminate form)

  
    
      
        
          
            
              Â±
              0
            
            
              Â±
              0
            
          
        
        =
        
          
            NaN
          
        
        
        
      
    
    {\displaystyle {\frac {\pm 0}{\pm 0}}={\mbox{NaN}}\,\!}
  

Division of a non-zero number by zero sets the divide by zero flag, and an operation producing a NaN sets the invalid operation flag. An exception handler is called if enabled for the corresponding flag.

Comparisons[edit]
According to the IEEEÂ 754 standard, negative zero and positive zero should compare as equal with the usual (numerical) comparison operators, like the == operators of C and Java.  In those languages, special programming tricks may be needed to distinguish the two values:

Type punning the number to an integer type, so as to look at the sign bit in the bit pattern;
using the ISO C copysign() function (IEEEÂ 754 copySign operation) to copy the sign of the zero to some non-zero number;
using the ISO C signbit() macro (IEEEÂ 754 isSignMinus operation) that returns whether the sign bit of a number is set;
taking the reciprocal of the zero to obtain either 1/(+0)Â =Â +â or 1/(â0)Â =Â ââ (if the division by zero exception is not trapped).
Note: Casting to integral type will not always work, especially on two's complement systems.
However, some programming languages may provide alternative comparison operators that do distinguish the two zeros. This is the case, for example, of the .mw-parser-output .monospaced{font-family:monospace,monospace}equals method in Java's Double wrapper class.[4]

In rounded values such as temperatures[edit]
Informally, one may use the notation "â0" for a negative value that was rounded to zero.  This notation may be useful when a negative sign is significant; for example, when tabulating Celsius temperatures, where a negative sign means below freezing.

In statistical mechanics[edit]
In statistical mechanics, one sometimes uses negative temperatures to describe systems with population inversion, which can be considered to have a temperature greater than positive infinity, because the coefficient of energy in the population distribution function is â1/Temperature. In this context, a temperature of â0 is a (theoretical) temperature larger than any other negative temperature, corresponding to the (theoretical) maximum conceivable extent of population inversion, the opposite extreme to +0.[5]

See also[edit]
Line with two origins
Extended real number line
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ William Kahan, "Branch Cuts for Complex Elementary Functions, or Much Ado About Nothing's Sign Bit", in The State of the Art in Numerical Analysis (eds. Iserles and Powell), Clarendon Press, Oxford, 1987.

^ William Kahan, Derivatives in the Complex z-plane, p. 10.

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Cowlishaw, Mike (7 April 2009). "Decimal Arithmetic: Arithmetic operationsÂ â square-root". speleotrove.com (IBM Corporation). Retrieved 7 December 2010.

^ http://java.sun.com/javase/6/docs/api/java/lang/Double.html#equals(java.lang.Object)

^ Kittel, Charles and Herbert Kroemer (1980). Thermal Physics (2nd ed.). W. H. Freeman and Company. p.Â 462. ISBNÂ 0-7167-1088-9.


.mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li{margin-left:0;padding-left:3.2em;text-indent:-3.2em}.mw-parser-output .refbegin-hanging-indents ul,.mw-parser-output .refbegin-hanging-indents ul li{list-style:none}@media(max-width:720px){.mw-parser-output .refbegin-hanging-indents>ul>li{padding-left:1.6em;text-indent:-1.6em}}.mw-parser-output .refbegin-columns{margin-top:0.3em}.mw-parser-output .refbegin-columns ul{margin-top:0}.mw-parser-output .refbegin-columns li{page-break-inside:avoid;break-inside:avoid-column}
"Floating point types". MSDN C# Language Specification. Retrieved 15 October 2005.
"Division operator". MSDN C# Language Specification. Retrieved 15 October 2005.
Thomas Wang (March 2000). "Java Floating-Point Number Intricacies". September 2000. Archived from the original on 2005-09-21. {{cite journal}}: Cite journal requires |journal= (help)
Mike Colishaw (28 July 2008). "Decimal Arithmetic Specification, version 1.68". Retrieved 2008-08-14.Â â a decimal floating-point specification that includes negative zero

Further reading[edit]

Michael Ingrassia. "Fortran 95 SIGN Change". Sun Developer Network. Retrieved October 15, 2005.Â â the changes in the Fortran SIGN function in Fortran 95 to accommodate negative zero
"JScript data types". MSDN JScript. Retrieved October 16, 2005.Â â JScript's floating-point type with negative zero by definition
Venners, Bill (October 1, 1996). "Floating-point arithmetic". Learn Java. JavaWorld. Under the Hood. Retrieved 2020-07-14.Â â representation of negative zero in the Java virtual machine
Bruce Dawson (25 February 2012). "Comparing floating point numbers, 2012 Edition".Â â how to handle negative zero when comparing floating-point numbers
John Walker. "Minus Zero". UNIVAC Memories. Retrieved October 17, 2005.Â â one's complement numbers on the UNIVAC 1100 family computers





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Signed_zero&oldid=1064135500"
		Categories: Computer arithmetic0 (number)Hidden categories: Articles with short descriptionShort description is different from WikidataCS1 errors: missing periodical
	
