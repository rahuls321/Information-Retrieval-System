
Title:
Rule 30
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Elementary cellular automaton
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}This article is about the cellular automaton. For the United States federal court rule, see Federal Rules of Civil Procedure and deposition (law).
  A Conus textile shell similar in appearance to Rule 30.[1]
Rule 30 is an elementary cellular automaton introduced by Stephen Wolfram in 1983.[2] Using Wolfram's classification scheme, Rule 30 is a Class III rule, displaying aperiodic, chaotic behaviour.
This rule is of particular interest because it produces complex, seemingly random patterns from simple, well-defined rules. Because of this, Wolfram believes that Rule 30, and cellular automata in general, are the key to understanding how simple rules produce complex structures and behaviour in nature. For instance, a pattern resembling Rule 30 appears on the shell of the widespread cone snail species Conus textile. Rule 30 has also been used as a random number generator in Mathematica,[3] and has also been proposed as a possible stream cipher for use in cryptography.[4][5]
Rule 30 is so named because 30 is the smallest Wolfram code which describes its rule set (as described below). The mirror image, complement, and mirror complement of Rule 30 have Wolfram codes 86, 135, and 149, respectively.

Contents

1 Rule set
2 Structure and properties
3 Chaos
4 Applications

4.1 Random number generation
4.2 Decoration
4.3 Programming


5 See also
6 References
7 External links



Rule set[edit]
In all of Wolfram's elementary cellular automata, an infinite one-dimensional array of cellular automaton cells with only two states is considered, with each cell in some initial state. At discrete time intervals, every cell spontaneously changes state based on its current state and the state of its two neighbors. For Rule 30, the rule set which governs the next state of the automaton is:




current pattern
111
110
101
100
011
010
001
000


new state for center cell

0
0
0
1
1
1
1
0

The corresponding formula is [left_cell XOR (central_cell OR right_cell)]. It is called Rule 30 because in binary, 000111102 = 30.
The following diagram shows the pattern created, with cells colored based on the previous state of their neighborhood.  Darker colors represent "1" and lighter colors represent "0". Time increases down the vertical axis.


Structure and properties[edit]
The following pattern emerges from an initial state in which a single cell with state 1 (shown as black) is surrounded by cells with state 0 (white).



Rule 30 cellular automaton


Here, the vertical axis represents time and any horizontal cross-section of the image represents the state of all the cells in the array at a specific point in the pattern's evolution. Several motifs are present in this structure, such as the frequent appearance of white triangles and a well-defined striped pattern on the left side; however the structure as a whole has no discernible pattern. The number of black cells at generation 
  
    
      
        n
      
    
    {\displaystyle n}
  
 is given by the sequence

1, 3, 3, 6, 4, 9, 5, 12, 7, 12, 11, 14, 12, 19, 13, 22, 15, 19, ... (sequence A070952 in the OEIS)
and is approximately 
  
    
      
        n
      
    
    {\displaystyle n}
  
.

Chaos[edit]
Wolfram based his classification of Rule 30 as chaotic based primarily on its visual appearance,[citation needed] and it was later shown to meet more rigorous definitions of chaos proposed by Devaney and Knudson. In particular, according to Devaney's criteria, Rule 30 displays sensitive dependence on initial conditions (two initial configurations that differ only in a small number of cells rapidly diverge), its periodic configurations are dense in the space of all configurations, according to the Cantor topology on the space of configurations (there is a periodic configuration with any finite pattern of cells), and it is mixing (for any two finite patterns of cells, there is a configuration containing one pattern that eventually leads to a configuration containing the other pattern). According to Knudson's criteria, it displays sensitive dependence and there is a dense orbit (an initial configuration that eventually displays any finite pattern of cells). Both of these characterizations of the rule's chaotic behavior follow from a simpler and easy to verify property of Rule 30: it is left permutative, meaning that if two configurations C and D differ in the state of a single cell at position i, then after a single step the new configurations will differ at cell i + 1.[6]

Applications[edit]
Random number generation[edit]
As is apparent from the image above, Rule 30 generates seeming randomness despite the lack of anything that could reasonably be considered random input. Stephen Wolfram proposed using its center column as a pseudorandom number generator (PRNG); it passes many standard tests for randomness, and Wolfram previously used this rule in the Mathematica product for creating random integers.[7] 
Sipper and Tomassini have shown that as a random number generator Rule 30 exhibits poor behavior on a chi squared test when applied to all the rule columns as compared to other cellular automaton-based generators.[8] The authors also expressed their concern that "The relatively low results obtained by the rule 30 CA may be due to the fact that we considered N random sequences generated in parallel, rather than the single one considered by Wolfram."[9]

Decoration[edit]
  Detail of Cambridge North railway station cladding
The Cambridge North railway station is decorated with architectural panels displaying the evolution of Rule 30 (or equivalently under black-white reversal, Rule 135).[10] The design was described by its architect as inspired by Conway's Game of Life, a different cellular automaton studied by Cambridge mathematician John Horton Conway, but is not actually based on Life.[11][12]

Programming[edit]
The state update can be done quickly by bitwise operations, if the cell values are represented by the bits within one (or more) computer words. Here shown in C++:

#include <stdint.h>
#include <iostream>
int main() {
  uint64_t state = 1u << 31;
  for (int i=0 ; i<32 ; ++i) {
    for (int j=64 ; j-- ;) {
      std::cout << char(state >> j & 1 ? '1' : '-');
    }
    std::cout << '\n';
    state = (state >> 1) ^ (state | state << 1);
  }
}

See also[edit]
Rule 90
Rule 110
Rule 184
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Stephen Coombes (February 2009). "The Geometry and Pigmentation of Seashells" (PDF). www.maths.nottingham.ac.uk. University of Nottingham. Retrieved 2013-04-10.

^ Wolfram, S. (1983). "Statistical mechanics of cellular automata". Rev. Mod. Phys. 55 (3): 601â644. Bibcode:1983RvMP...55..601W. doi:10.1103/RevModPhys.55.601.

^ "Random Number Generation". Wolfram Mathematica 8 Documentation. Retrieved 31 December 2011.

^ Wolfram, S. (1985). "Cryptography with cellular automata". Proceedings of Advances in Cryptology - CRYPTO '85. Lecture Notes in Computer Science 218, Springer-Verlag. p.Â 429. doi:10.1007/3-540-39799-X_32.

^ Meier, Willi; Staffelbach, Othmar (1991). "Analysis of pseudo random sequences generated by cellular automata". Advances in Cryptology: Proc. Workshop on the Theory and Application of Cryptographic Techniques, EUROCRYPT '91. Lecture Notes in Computer Science 547, Springer-Verlag. p.Â 186. doi:10.1007/3-540-46416-6_17.

^ Cattaneo, Gianpiero; Finelli, Michele; Margara, Luciano (2000). "Investigating topological chaos by elementary cellular automata dynamics". Theoretical Computer Science. 244 (1â2): 219â241. doi:10.1016/S0304-3975(98)00345-4. MRÂ 1774395.

^ Lex Fridman (2018-03-02), MIT AGI: Computational Universe (Stephen Wolfram), archived from the original on 2021-12-19, retrieved 2018-03-07

^ Sipper, Moshe; Tomassini, Marco (1996). "Generating parallel random number generators by cellular programming". International Journal of Modern Physics C. 7 (2): 181â190. Bibcode:1996IJMPC...7..181S. doi:10.1142/S012918319600017X.

^ Page 6 of Sipper, Moshe; Tomassini, Marco (1996). "Generating parallel random number generators by cellular programming". International Journal of Modern Physics C. 7 (2): 181â190. Bibcode:1996IJMPC...7..181S. doi:10.1142/S012918319600017X.

^ Wolfram, Stephen (June 1, 2017), "Oh My Gosh, It's Covered in Rule 30s!", Stephen Wolfram's blog

^ Lawson-Perfect, Christian (May 23, 2017), "Right answer for the wrong reason: cellular automaton on the new Cambridge North station", The Aperiodical

^ Purtill, Corinne. "A UK train station's tribute to a famous mathematician got everything right except his math". Quartz. Retrieved 2017-06-12.


Wolfram, Stephen, 1985, Cryptography with Cellular Automata, CRYPTO'85.
External links[edit]



Wikimedia Commons has media related to Rule 30.

Weisstein, Eric W. "Rule 30". MathWorld.
"Announcing the Rule 30 Prizes". Stephen Wolfram Writings. 1 October 2019.
Rule 30 in Wolfram's atlas of cellular automata
Rule 30: Wolfram's Pseudo-random Bit Generator. Recipe 32 at David Griffeath's Primordial Soup Kitchen.
Repeating Rule 30 patterns. A list of patterns that, when repeated to fill the cells of a Rule 30 automaton, repeat themselves after finitely many time steps. Frans Faase, 2003. Archived from the Original on 2013-08-08
Paving Mosaic Fractal. Basic introduction to the pattern of Rule 30 from the perspective of a LOGO software expert Olivier Schmidt-Chevalier.
TED Talk from February 2010. Stephen Wolfram speaks about computing a theory of everything where he talks about rule 30 among other things.




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Rule_30&oldid=1061168605"
		Categories: Cellular automaton rules1983 introductionsWolfram codeHidden categories: Articles with short descriptionShort description is different from WikidataAll articles with unsourced statementsArticles with unsourced statements from April 2020Commons category link from Wikidata
	
