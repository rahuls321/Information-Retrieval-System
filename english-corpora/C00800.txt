
Title:
Longest increasing subsequence
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		In computer science, the longest increasing subsequence problem is to find a subsequence of a given sequence in which the subsequence's elements are in sorted order, lowest to highest, and in which the subsequence is as long as possible. This subsequence is not necessarily contiguous, or unique.
Longest increasing subsequences are studied in the context of various disciplines related to mathematics, including algorithmics, random matrix theory, representation theory, and physics.[1] The longest increasing subsequence problem is solvable in time O(n log n), where n denotes the length of the input sequence.[2]

Contents

1 Example
2 Relations to other algorithmic problems
3 Efficient algorithms
4 Length bounds
5 Online algorithms
6 Application
7 See also
8 References
9 External links



Example[edit]
In the first 16 terms of the binary Van der Corput sequence

0, 8, 4, 12, 2, 10, 6, 14, 1, 9, 5, 13, 3, 11, 7, 15
a longest increasing subsequence is

0, 2, 6, 9, 11, 15.
This subsequence has length six; the input sequence has no seven-member increasing subsequences. The longest increasing subsequence in this example is not the only solution: for instance,

0, 4, 6, 9, 11, 15
0, 2, 6, 9, 13, 15
0, 4, 6, 9, 13, 15
are other increasing subsequences of equal length in the same input sequence.

Relations to other algorithmic problems[edit]
The longest increasing subsequence problem is closely related to the longest common subsequence problem, which has a quadratic time dynamic programming solution: the longest increasing subsequence of a sequence S is the longest common subsequence of S and T, where T is the result of sorting S. However, for the special case in which the input is a permutation of the integers 1, 2, ..., n, this approach can be made much more efficient, leading to time bounds of the form O(n log log n).[3]
The largest clique in a permutation graph corresponds to the longest decreasing subsequence of the permutation that defines the graph (assuming the original non-permuted sequence is sorted from lowest value to highest). Similarly, the maximum independent set in a permutation graph corresponds to the longest non-decreasing subsequence. Therefore, longest increasing subsequence algorithms can be used to solve the clique problem efficiently in permutation graphs.[4]
In the RobinsonâSchensted correspondence between permutations and Young tableaux, the length of the first row of the tableau corresponding to a permutation equals the length of the longest increasing subsequence of the permutation, and the length of the first column equals the length of the longest decreasing subsequence.[2]

Efficient algorithms[edit]
The algorithm outlined below solves the longest increasing subsequence problem efficiently with arrays and binary searching. 
It processes the sequence elements in order, maintaining the longest increasing subsequence found so far. Denote the sequence values as 
  
    
      
        X
        [
        0
        ]
        ,
        X
        [
        1
        ]
        ,
        â¦
        ,
      
    
    {\displaystyle X[0],X[1],\ldots ,}
  
 etc. Then, after processing 
  
    
      
        X
        [
        i
        ]
        ,
      
    
    {\displaystyle X[i],}
  
 the algorithm will have stored values in two arrays:


  
    
      
        M
        [
        j
        ]
      
    
    {\displaystyle M[j]}
  
 â stores the index 
  
    
      
        k
      
    
    {\displaystyle k}
  
 of the smallest value 
  
    
      
        X
        [
        k
        ]
      
    
    {\displaystyle X[k]}
  
 such that there is an increasing subsequence of length 
  
    
      
        j
      
    
    {\displaystyle j}
  
 ending at 
  
    
      
        X
        [
        k
        ]
      
    
    {\displaystyle X[k]}
  
 on the range 
  
    
      
        k
        â¤
        i
      
    
    {\displaystyle k\leq i}
  
 (Need to make this statement clearer). So if 
  
    
      
        
          K
          
            i
            ,
            j
          
        
      
    
    {\displaystyle K_{i,j}}
  
 denotes the set of all indices 
  
    
      
        k
      
    
    {\displaystyle k}
  
 such that 
  
    
      
        k
        â¤
        i
      
    
    {\displaystyle k\leq i}
  
 and there exists an increasing subsequence of length 
  
    
      
        j
      
    
    {\displaystyle j}
  
 ending at 
  
    
      
        X
        [
        k
        ]
      
    
    {\displaystyle X[k]}
  
 (that is, there exist 
  
    
      
        j
      
    
    {\displaystyle j}
  
 indices 
  
    
      
        
          l
          
            1
          
        
        <
        
          l
          
            2
          
        
        <
        â¯
        <
        
          l
          
            j
          
        
        =
        k
      
    
    {\displaystyle l_{1}<l_{2}<\cdots <l_{j}=k}
  
 ending at 
  
    
      
        k
      
    
    {\displaystyle k}
  
 such that 
  
    
      
        X
        
          [
          
            l
            
              1
            
          
          ]
        
        â¤
        X
        
          [
          
            l
            
              2
            
          
          ]
        
        â¤
        â¯
        â¤
        X
        
          [
          k
          ]
        
      
    
    {\displaystyle X\left[l_{1}\right]\leq X\left[l_{2}\right]\leq \cdots \leq X\left[k\right]}
  
), then 
  
    
      
        M
        [
        j
        ]
      
    
    {\displaystyle M[j]}
  
 is the index for which the following holds: 
  
    
      
        M
        [
        j
        ]
        â
        
          K
          
            i
            ,
            j
          
        
      
    
    {\displaystyle M[j]\in K_{i,j}}
  
 and 
  
    
      
        X
        [
        M
        [
        j
        ]
        ]
        =
        
          min
          
            k
            â
            
              K
              
                i
                ,
                j
              
            
          
        
        X
        [
        k
        ]
      
    
    {\displaystyle X[M[j]]=\min _{k\in K_{i,j}}X[k]}
  
 (or equivalently, 
  
    
      
        M
        [
        j
        ]
        â
        
          K
          
            i
            ,
            j
          
        
      
    
    {\displaystyle M[j]\in K_{i,j}}
  
 and for every 
  
    
      
        k
        â
        
          K
          
            i
            ,
            j
          
        
        ,
      
    
    {\displaystyle k\in K_{i,j},}
  
 
  
    
      
        X
        [
        M
        [
        j
        ]
        ]
        â¤
        X
        [
        k
        ]
      
    
    {\displaystyle X[M[j]]\leq X[k]}
  
). Note that 
  
    
      
        j
        â¤
        i
        +
        1
        ,
      
    
    {\displaystyle j\leq i+1,}
  
 because 
  
    
      
        j
        â¥
        1
      
    
    {\displaystyle j\geq 1}
  
 represents the length of the increasing subsequence, and 
  
    
      
        k
        â¥
        0
      
    
    {\displaystyle k\geq 0}
  
 represents the index of its termination.

  
    
      
        P
        [
        k
        ]
      
    
    {\displaystyle P[k]}
  
 â stores the index of the predecessor of 
  
    
      
        X
        [
        k
        ]
      
    
    {\displaystyle X[k]}
  
 in the longest increasing subsequence ending at 
  
    
      
        X
        [
        k
        ]
        .
      
    
    {\displaystyle X[k].}
  

In addition the algorithm stores a variable L representing the length of the longest increasing subsequence found so far. Because the algorithm below uses zero-based numbering, for clarity 
  
    
      
        M
      
    
    {\displaystyle M}
  
 is padded with 
  
    
      
        M
        [
        0
        ]
        ,
      
    
    {\displaystyle M[0],}
  
 which goes unused so that 
  
    
      
        M
        [
        j
        ]
      
    
    {\displaystyle M[j]}
  
 corresponds to a subsequence of length 
  
    
      
        j
        .
      
    
    {\displaystyle j.}
  
 A real implementation can skip 
  
    
      
        M
        [
        0
        ]
      
    
    {\displaystyle M[0]}
  
 and adjust the indices accordingly.
Note that, at any point in the algorithm, the sequence

  
    
      
        X
        [
        M
        [
        1
        ]
        ]
        ,
        X
        [
        M
        [
        2
        ]
        ]
        ,
        â¦
        ,
        X
        [
        M
        [
        L
        ]
        ]
      
    
    {\displaystyle X[M[1]],X[M[2]],\ldots ,X[M[L]]}
  

is increasing.  For, if there is an increasing subsequence of length 
  
    
      
        j
        â¥
        2
      
    
    {\displaystyle j\geq 2}
  
 ending at 
  
    
      
        X
        [
        M
        [
        j
        ]
        ]
        ,
      
    
    {\displaystyle X[M[j]],}
  
 then there is also a subsequence of length 
  
    
      
        j
        â
        1
      
    
    {\displaystyle j-1}
  
 ending at a smaller value: namely the one ending at 
  
    
      
        X
        [
        P
        [
        M
        [
        j
        ]
        ]
        ]
        .
      
    
    {\displaystyle X[P[M[j]]].}
  
 Thus, we may do binary searches in this sequence in logarithmic time.
The algorithm, then, proceeds as follows:

  A demo of the code.
P = array of length N
M = array of length N + 1

L = 0
for i in range 0 to N-1:
    // Binary search for the largest positive j â¤ L
    // such that X[M[j]] < X[i]
    lo = 1
    hi = L + 1
    while lo < hi:
        mid = lo + floor((hi-lo)/2)
        if X[M[mid]] < X[i]:
            lo = mid+1
        else:
            hi = mid

    // After searching, lo is 1 greater than the
    // length of the longest prefix of X[i]
    newL = lo

    // The predecessor of X[i] is the last index of 
    // the subsequence of length newL-1
    P[i] = M[newL-1]
    M[newL] = i
    
    if newL > L:
        // If we found a subsequence longer than any we've
        // found yet, update L
        L = newL

// Reconstruct the longest increasing subsequence
S = array of length L
k = M[L]
for i in range L-1 to 0:
    S[i] = X[k]
    k = P[k]

return S

Because the algorithm performs a single binary search per sequence element, its total time can be expressed using Big O notation as O(nÂ logÂ n). Fredman (1975) discusses a variant of this algorithm, which he credits to Donald Knuth; in the variant that he studies, the algorithm tests whether each value 
  
    
      
        X
        [
        i
        ]
      
    
    {\displaystyle X[i]}
  
 can be used to extend the current longest increasing sequence, in constant time, prior to doing the binary search. With this modification, the algorithm uses at most n log2 n â n log2log2 n + O(n) comparisons in the worst case, which is optimal for a comparison-based algorithm up to the constant factor in the O(n) term.[5]

Length bounds[edit]
According to the ErdÅsâSzekeres theorem, any sequence of n2+1 distinct integers has an increasing or a decreasing subsequence of length  n + 1.[6][7] For inputs in which each permutation of the input is equally likely, the expected length of the longest increasing subsequence is approximately 2ân.
[8] 
In the limit as n approaches infinity, the length of the longest increasing subsequence of a randomly permuted sequence of n items has a distribution approaching the TracyâWidom distribution, the distribution of the largest eigenvalue of a random matrix in the Gaussian unitary ensemble.[9]

Online algorithms[edit]
The longest increasing subsequence has also been studied in the setting of online algorithms, in which the elements of a sequence of independent random variables with continuous distribution F â or alternatively the elements of a random permutation â are presented one at a time to an algorithm that must decide whether to include or exclude each element, without knowledge of the later elements. In this variant of the problem, which allows for interesting applications in several contexts, it is possible to devise an optimal selection procedure that, given a random sample of size n as input, will generate an increasing sequence with maximal expected length of size approximately â2n.
[10]
The length of the increasing subsequence selected by this optimal procedure has variance approximately equal to â2n/3, and its limiting distribution is asymptotically normal after the usual centering and scaling.[11]
The same asymptotic  results hold with more precise bounds for the corresponding problem in the setting of a Poisson arrival process.[12]
A further refinement in the Poisson process setting is given through the proof of a central limit theorem for the optimal selection process
which holds, with a suitable normalization, in a more complete sense than one would expect. The proof yields not only the "correct" functional limit theorem
but also the (singular) covariance matrix of the three-dimensional process summarizing all interacting processes.
[13]

Application[edit]
Part of MUMmer (Maximum Unique Match finder) system for aligning entire genomes.
Used in version control systems like Git etc.
Used in Patience Diff, a diffing algorithm (computes and displays the differences between the content of files), which is used in the âBazaarâ (Bazaar is a version control system that helps you track project history over time and to collaborate easily with others..)
See also[edit]
Patience sorting, an efficient technique for finding the length of the longest increasing subsequence
Plactic monoid, an algebraic system defined by transformations that preserve the length of the longest increasing subsequence
Anatoly Vershik, a Russian mathematician who studied applications of group theory to longest increasing subsequences
Longest common subsequence
Longest alternating subsequence
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Aldous, David; Diaconis, Persi (1999), "Longest increasing subsequences: from patience sorting to the BaikâDeiftâJohansson theorem", Bulletin of the American Mathematical Society, 36 (4): 413â432, doi:10.1090/S0273-0979-99-00796-X.

^ Jump up to: a b Schensted, C. (1961), "Longest increasing and decreasing subsequences", Canadian Journal of Mathematics, 13: 179â191, doi:10.4153/CJM-1961-015-3, MRÂ 0121305.

^ Hunt, J.; Szymanski, T. (1977), "A fast algorithm for computing longest common subsequences", Communications of the ACM, 20 (5): 350â353, doi:10.1145/359581.359603, S2CIDÂ 3226080.

^ Golumbic, M. C. (1980), Algorithmic Graph Theory and Perfect Graphs, Computer Science and Applied Mathematics, Academic Press, p.Â 159.

^ Fredman, Michael L. (1975), "On computing the length of longest increasing subsequences", Discrete Mathematics, 11 (1): 29â35, doi:10.1016/0012-365X(75)90103-X.

^ ErdÅs, Paul; Szekeres, George (1935), "A combinatorial problem in geometry", Compositio Mathematica, 2: 463â470.

^ Steele, J. Michael (1995), "Variations on the monotone subsequence theme of ErdÅs and Szekeres",  in Aldous, David; Diaconis, Persi; Spencer, Joel;  etÂ al. (eds.), Discrete Probability and Algorithms (PDF), IMA Volumes in Mathematics and its Applications, vol.Â 72, Springer-Verlag, pp.Â 111â131.

^ Vershik, A. M.; Kerov, C. V. (1977), "Asymptotics of the Plancheral measure of the symmetric group and a limiting form for Young tableaux", Dokl. Akad. Nauk SSSR, 233: 1024â1027.

^ Baik, Jinho; Deift, Percy; Johansson, Kurt (1999), "On the distribution of the length of the longest increasing subsequence of random permutations", Journal of the American Mathematical Society, 12 (4): 1119â1178, arXiv:math/9810105, doi:10.1090/S0894-0347-99-00307-0.

^ Samuels, Stephen. M.; Steele, J. Michael (1981), "Optimal Sequential Selection of a Monotone Sequence From a Random Sample" (PDF), Annals of Probability, 9 (6): 937â947, doi:10.1214/aop/1176994265

^ Arlotto, Alessandro; Nguyen, Vinh V.; Steele, J. Michael (2015), "Optimal online selection of a monotone subsequence: a central limit theorem", Stochastic Processes and Their Applications, 125 (9): 3596â3622, arXiv:1408.6750, doi:10.1016/j.spa.2015.03.009, S2CIDÂ 15900488

^ Bruss, F. Thomas; Delbaen, Freddy (2001), "Optimal rules for the sequential selection of monotone subsequences of maximum expected length", Stochastic Processes and Their Applications, 96 (2): 313â342, doi:10.1016/S0304-4149(01)00122-3.

^ Bruss, F. Thomas; Delbaen, Freddy (2004), "A central limit theorem for the optimal selection process for monotone subsequences of maximum expected length", Stochastic Processes and Their Applications, 114 (2): 287â311, doi:10.1016/j.spa.2004.09.002.


External links[edit]
Algorithmist's Longest Increasing Subsequence
Simplified Longest Increasing Subsequence
Finding count of longest increased subsequences
Poldo's diet




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Longest_increasing_subsequence&oldid=1062224625"
		Categories: Problems on stringsCombinatoricsFormal languagesDynamic programming
	
