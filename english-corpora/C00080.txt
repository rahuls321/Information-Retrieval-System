
Title:
Brainfuck
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Esoteric, minimalist programming language
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}Not to be confused with Brain Fuck Scheduler or Mindfuck.
.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}BrainfuckParadigmEsoteric, imperative, structuredDesignedÂ byUrban MÃ¼llerFirstÂ appearedSeptember 1993Typing disciplineTypelessFilename extensions.b, .bfInfluenced byPâ²â², FALSEInfluencedMalbolge
Brainfuck is an esoteric programming language created in 1993 by Urban MÃ¼ller.[1]
Notable for its extreme minimalism, the language consists of only eight simple commands, a data pointer and an instruction pointer. While it is fully Turing complete, it is not intended for practical use, but to challenge and amuse programmers. Brainfuck simply requires one to break commands into microscopic steps.
The language's name is a reference to the slang term brainfuck, which refers to things so complicated or unusual that they exceed the limits of one's understanding.

Contents

1 History

1.1 Pâ²â²: Brainfuck's formal "parent language"
1.2 The Infinite Abacus: Brainfuck's "grand-parent" language


2 Language design

2.1 Commands


3 Examples

3.1 Adding two values
3.2 Hello World!
3.3 ROT13


4 Portability issues

4.1 Cell size
4.2 Array size
4.3 End-of-line code
4.4 End-of-file behavior


5 Implementations
6 Derivatives
7 See also
8 References
9 External links



History[edit]
In 1992, Urban MÃ¼ller, a Swiss physics student, took over a small online archive for Amiga software.[2] The archive grew more popular, and was soon mirrored around the world. Today, it is the world's largest Amiga archive, known as Aminet.
MÃ¼ller designed Brainfuck with the goal of implementing the smallest possible compiler,[3] inspired by the 1024-byte compiler for the FALSE programming language.[4] MÃ¼ller's original compiler was implemented in machine language and compiled to a binary with a size of 296 bytes. He uploaded the first Brainfuck compiler to Aminet in 1993. The program came with a "Readme" file, which briefly described the language, and challenged the reader "Who can program anything useful with it? :)". MÃ¼ller also included an interpreter and some quite elaborate examples. A second version of the compiler used only 240 bytes.[5] There are currently many brainfuck compilers in the web.
As Aminet grew, the compiler became popular among the Amiga community, and in time it was implemented for other platforms.

Pâ²â²: Brainfuck's formal "parent language"[edit]
Except for its two I/O commands, Brainfuck is a minor variation of the formal programming language Pâ²â² created by Corrado BÃ¶hm in 1964, which in turn is explicitly based on the Turing machine. In fact, using six symbols equivalent to the respective Brainfuck commands +, -, <, >, [, ], BÃ¶hm provided an explicit program for each of the basic functions that together serve to compute any computable function. So the first "Brainfuck" programs appear in BÃ¶hm's 1964 paper â and they were sufficient to prove Turing completeness.

The Infinite Abacus: Brainfuck's "grand-parent" language[edit]
A version with explicit memory addressing â rather than relative moves on a stack â and a conditional jump â instead of loops â was introduced by Joachim Lambek in 1961 under the name of the Infinite Abacus,[6] consisting of an infinite number of cells and two instructions:

X+ (increment cell X)
X- else jump T (decrement X if it is positive else jump to T)
He proves the Infinite Abacus can compute any computable recursive function by programming Kleene set of basic Î¼-recursive function.
His machine was simulated by Melzac's machine[7] modeling computation via arithmetic (rather than binary logic) mimicking a human operator moving pebbles on an abacus, hence the requirement that all numbers must be positive. Melzac, whose one instruction set computer is equivalent to an Infinite Abacus, gives programs for multiplication, gcd, nth prime number, representation in base b, sorting by magnitude, and shows how to simulate an arbitrary Turing machine.

Language design[edit]
The language consists of eight commands, listed below. A brainfuck program is a sequence of these commands, possibly interspersed with other characters (which are ignored). The commands are executed sequentially, with some exceptions: an instruction pointer begins at the first command, and each command it points to is executed, after which it normally moves forward to the next command. The program terminates when the instruction pointer moves past the last command.
The brainfuck language uses a simple machine model consisting of the program and instruction pointer, as well as a one-dimensional array of at least 30,000 byte cells initialized to zero; a movable data pointer (initialized to point to the leftmost byte of the array); and two streams of bytes for input and output (most often connected to a keyboard and a monitor respectively, and using the ASCII character encoding).

Commands[edit]
The eight language commands each consist of a single character:




Character

Meaning


>

Increment the data pointer (to point to the next cell to the right).


<

Decrement the data pointer (to point to the next cell to the left).


+

Increment (increase by one) the byte at the data pointer.


-

Decrement (decrease by one) the byte at the data pointer.


.

Output the byte at the data pointer.


,

Accept one byte of input, storing its value in the byte at the data pointer.


[

If the byte at the data pointer is zero, then instead of moving the instruction pointer forward to the next command, jump it forward to the command after the matching ] command.


]

If the byte at the data pointer is nonzero, then instead of moving the instruction pointer forward to the next command, jump it back to the command after the matching [ command.

(Alternatively, the ] command may instead be translated as an unconditional jump to the corresponding [ command, or vice versa; programs will behave the same but will run more slowly, due to unnecessary double searching.)
[ and ] match as parentheses usually do: each [ matches exactly one ] and vice versa, the [ comes first, and there can be no unmatched [ or ] between the two.
Brainfuck programs can be translated into C using the following substitutions, assuming ptr is of type  char* and has been initialized to point to an array of zeroed bytes:




brainfuck command

C equivalent


(Program Start)
char array[30000] = {0}; char *ptr = array;


>
++ptr;


<
--ptr;


+
++*ptr;


-
--*ptr;


.
putchar(*ptr);


,
*ptr = getchar();


[
while (*ptr) {


]
}

As the name suggests, Brainfuck programs tend to be difficult to comprehend. This is partly because any mildly complex task requires a long sequence of commands and partly because the program's text gives no direct indications of the program's state. These, as well as Brainfuck's inefficiency and its limited input/output capabilities, are some of the reasons it is not used for serious programming. Nonetheless, like any Turing complete language, Brainfuck is theoretically capable of computing any computable function or simulating any other computational model, if given access to an unlimited amount of memory.[8] A variety of Brainfuck programs have been written.[9] Although Brainfuck programs, especially complicated ones, are difficult to write, it is quite trivial to write an interpreter for Brainfuck in a more typical language such as C due to its simplicity. There even exist Brainfuck interpreters written in the Brainfuck language itself.[10][11]
Brainfuck is an example of a so-called Turing tarpit: It can be used to write any program, but it is not practical to do so, because Brainfuck provides so little abstraction that the programs get very long or complicated.

Examples[edit]
Adding two values[edit]
As a first, simple example, the following code snippet will add the current cell's value to the next cell: Each time the loop is executed, the current cell is decremented, the data pointer moves to the right, that next cell is incremented, and the data pointer moves left again. This sequence is repeated until the starting cell is 0.

[->+<]

This can be incorporated into a simple addition program as follows:

++       Cell c0 = 2
> +++++  Cell c1 = 5

[        Start your loops with your cell pointer on the loop counter (c1 in our case)
< +      Add 1 to c0
> -      Subtract 1 from c1
]        End your loops with the cell pointer on the loop counter

At this point our program has added 5 to 2 leaving 7 in c0 and 0 in c1
but we cannot output this value to the terminal since it is not ASCII encoded.

To display the ASCII character "7" we must add 48 to the value 7.
We use a loop to compute 48 = 6 * 8.

++++ ++++  c1 = 8 and this will be our loop counter again
[
< +++ +++  Add 6 to c0
> -        Subtract 1 from c1
]
< .        Print out c0 which has the value 55 which translates to "7"!

Hello World![edit]
The following program prints "Hello World!" and a newline to the screen:

[ This program prints "Hello World!" and a newline to the screen, its
  length is 106 active command characters. [It is not the shortest.]

  This loop is an "initial comment loop", a simple way of adding a comment
  to a BF program such that you don't have to worry about any command
  characters. Any ".", ",", "+", "-", "<" and ">" characters are simply
  ignored, the "[" and "]" characters just have to be balanced. This
  loop and the commands it contains are ignored because the current cell
  defaults to a value of 0; the 0 value causes this loop to be skipped.
]
++++++++               Set Cell #0 to 8
[
    >++++               Add 4 to Cell #1; this will always set Cell #1 to 4
    [                   as the cell will be cleared by the loop
        >++             Add 2 to Cell #2
        >+++            Add 3 to Cell #3
        >+++            Add 3 to Cell #4
        >+              Add 1 to Cell #5
        <<<<-           Decrement the loop counter in Cell #1
    ]                   Loop until Cell #1 is zero; number of iterations is 4
    >+                  Add 1 to Cell #2
    >+                  Add 1 to Cell #3
    >-                  Subtract 1 from Cell #4
    >>+                 Add 1 to Cell #6
    [<]                 Move back to the first zero cell you find; this will
                        be Cell #1 which was cleared by the previous loop
    <-                  Decrement the loop Counter in Cell #0
]                       Loop until Cell #0 is zero; number of iterations is 8

The result of this is:
Cell noÂ :   0   1   2   3   4   5   6
Contents:   0   0  72 104  88  32   8
PointerÂ :   ^

>>.                     Cell #2 has value 72 which is 'H'
>---.                   Subtract 3 from Cell #3 to get 101 which is 'e'
+++++++..+++.           Likewise for 'llo' from Cell #3
>>.                     Cell #5 is 32 for the space
<-.                     Subtract 1 from Cell #4 for 87 to give a 'W'
<.                      Cell #3 was set to 'o' from the end of 'Hello'
+++.------.--------.    Cell #3 for 'rl' and 'd'
>>+.                    Add 1 to Cell #5 gives us an exclamation point
>++.                    And finally a newline from Cell #6

For "readability", this code has been spread across many lines, and blanks and comments have been added. Brainfuck ignores all characters except the eight commands +-<>[],. so no special syntax for comments is needed (as long as the comments do not contain the command characters). The code could just as well have been written as:

++++++++[>++++[>++>+++>+++>+<<<<-]>+>+>->>+[<]<-]>>.>---.+++++++..+++.>>.<-.<.+++.------.--------.>>+.>++.

ROT13[edit]
This program enciphers its input with the ROT13 cipher. To do this, it must map characters A-M (ASCII 65-77) to N-Z (78-90), and vice versa. Also it must map a-m (97-109) to n-z (110-122) and vice versa. It must map all other characters to themselves; it reads characters one at a time and outputs their enciphered equivalents until it reads an EOF (here assumed to be represented as either -1 or "no change"), at which point the program terminates.
The basic approach used is as follows. Calling the input character x, divide x-1 by 32, keeping quotient and remainder. Unless the quotient is 2 or 3, just output x, having kept a copy of it during the division. If the quotient is 2 or 3, divide the remainder ((x-1) modulo 32) by 13; if the quotient here is 0, output x+13; if 1, output x-13; if 2, output x.
Regarding the division algorithm, when dividing y by z to get a quotient q and remainder r, there is an outer loop which sets q and r first to the quotient and remainder of 1/z, then to those of 2/z, and so on; after it has executed y times, this outer loop terminates, leaving q and r set to the quotient and remainder of y/z. (The dividend y is used as a diminishing counter that controls how many times this loop is executed.) Within the loop, there is code to increment r and decrement y, which is usually sufficient; however, every zth time through the outer loop, it is necessary to zero r and increment q. This is done with a diminishing counter set to the divisor z; each time through the outer loop, this counter is decremented, and when it reaches zero, it is refilled by moving the value from r back into it.

-,+[                         Read first character and start outer character reading loop
    -[                       Skip forward if character is 0
        >>++++[>++++++++<-]  Set up divisor (32) for division loop
                               (MEMORY LAYOUT: dividend copy remainder divisor quotient zero zero)
        <+<-[                Set up dividend (x minus 1) and enter division loop
            >+>+>-[>>>]      Increase copy and remainder / reduce divisor / Normal case: skip forward
            <[[>+<-]>>+>]    Special case: move remainder back to divisor and increase quotient
            <<<<<-           Decrement dividend
        ]                    End division loop
    ]>>>[-]+                 End skip loop; zero former divisor and reuse space for a flag
    >--[-[<->+++[-]]]<[         Zero that flag unless quotient was 2 or 3; zero quotient; check flag
        ++++++++++++<[       If flag then set up divisor (13) for second division loop
                               (MEMORY LAYOUT: zero copy dividend divisor remainder quotient zero zero)
            >-[>+>>]         Reduce divisor; Normal case: increase remainder
            >[+[<+>-]>+>>]   Special case: increase remainder / move it back to divisor / increase quotient
            <<<<<-           Decrease dividend
        ]                    End division loop
        >>[<+>-]             Add remainder back to divisor to get a useful 13
        >[                   Skip forward if quotient was 0
            -[               Decrement quotient and skip forward if quotient was 1
                -<<[-]>>     Zero quotient and divisor if quotient was 2
            ]<<[<<->>-]>>    Zero divisor and subtract 13 from copy if quotient was 1
        ]<<[<<+>>-]          Zero divisor and add 13 to copy if quotient was 0
    ]                        End outer skip loop (jump to here if ((character minus 1)/32) was not 2 or 3)
    <[-]                     Clear remainder from first division if second division was skipped
    <.[-]                    Output ROT13ed character from copy and clear it
    <-,+                     Read next character
]                            End character reading loop

Portability issues[edit]
Partly because Urban MÃ¼ller did not write a thorough language specification, the many subsequent brainfuck interpreters and compilers have implemented slightly different dialects of brainfuck.

Cell size[edit]
In the classic distribution, the cells are of 8-bit size (cells are bytes), and this is still the most common size. However, to read non-textual data, a brainfuck program may need to distinguish an end-of-file condition from any possible byte value; thus 16-bit cells have also been used. Some implementations have used 32-bit cells, 64-bit cells, or bignum cells with theoretically unlimited range, but programs that use this extra range are likely to be slow, since storing the value 
  
    
      
        n
      
    
    {\displaystyle n}
  
 into a cell requires 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
  
 time as a cell's value may only be changed by incrementing and decrementing.
In all these variants, the , and . commands still read and write data in bytes. In most of them, the cells wrap around, i.e. incrementing a cell which holds its maximal value (with the + command) will bring it to its minimal value and vice versa. The exceptions are implementations which are distant from the underlying hardware, implementations that use bignums, and implementations that try to enforce portability.
It is usually easy to write brainfuck programs that do not ever cause integer wraparound or overflow, and therefore don't depend on cell size. Generally this means avoiding increment of +255 (unsigned 8-bit wraparound), or avoiding overstepping the boundaries of [-128, +127] (signed 8-bit wraparound) (since there are no comparison operators, a program cannot distinguish between a signed and unsigned two's complement fixed-bit-size cell and negativeness of numbers is a matter of interpretation). For more details on integer wraparound, see the Integer overflow article.

Array size[edit]
In the classic distribution, the array has 30,000 cells, and the pointer begins at the leftmost cell. Even more cells are needed to store things like the millionth Fibonacci number, and the easiest way to make the language Turing complete is to make the array unlimited on the right.
A few implementations[12] extend the array to the left as well; this is an uncommon feature, and therefore portable brainfuck programs do not depend on it.
When the pointer moves outside the bounds of the array, some implementations will give an error message, some will try to extend the array dynamically, some will not notice and will produce undefined behavior, and a few will move the pointer to the opposite end of the array. Some tradeoffs are involved: expanding the array dynamically to the right is the most user-friendly approach and is good for memory-hungry programs, but it carries a speed penalty. If a fixed-size array is used it is helpful to make it very large, or better yet let the user set the size. Giving an error message for bounds violations is very useful for debugging but even that carries a speed penalty unless it can be handled by the operating system's memory protections.

End-of-line code[edit]
Different operating systems (and sometimes different programming environments) use subtly different versions of ASCII. The most important difference is in the code used for the end of a line of text. MS-DOS and Microsoft Windows use a CRLF, i.e. a 13 followed by a 10, in most contexts. UNIX and its descendants (including Linux and macOS) and Amigas use just 10, and older Macs use just 13. It would be difficult if brainfuck programs had to be rewritten for different operating systems. However, a unified standard was easy to create. Urban MÃ¼ller's compiler and his example programs use 10, on both input and output; so do a large majority of existing brainfuck programs; and 10 is also more convenient to use than CRLF. Thus, brainfuck implementations should make sure that brainfuck programs that assume newline = 10 will run properly; many do so, but some do not.
This assumption is also consistent with most of the world's sample code for C and other languages, in that they use "\n", or 10, for their newlines. On systems that use CRLF line endings, the C standard library transparently remaps "\n" to "\r\n" on output and "\r\n" to "\n" on input for streams not opened in binary mode.

End-of-file behavior[edit]
The behavior of the , command when an end-of-file condition has been encountered varies. Some implementations set the cell at the pointer to 0, some set it to the C constant EOF (in practice this is usually -1), some leave the cell's value unchanged. There is no real consensus; arguments for the three behaviors are as follows.
Setting the cell to 0 avoids the use of negative numbers, and makes it marginally more concise to write a loop that reads characters until EOF occurs. This is a language extension devised by Panu Kalliokoski.
Setting the cell to -1 allows EOF to be distinguished from any byte value (if the cells are larger than bytes), which is necessary for reading non-textual data; also, it is the behavior of the C translation of , given in MÃ¼ller's readme file. However, it is not obvious that those C translations are to be taken as normative.
Leaving the cell's value unchanged is the behavior of Urban MÃ¼ller's brainfuck compiler. This behavior can easily coexist with either of the others; for instance, a program that assumes EOF = 0 can set the cell to 0 before each , command, and will then work correctly on implementations that do either EOF = 0 or EOF = "no change". It is so easy to accommodate the "no change" behavior that any brainfuck programmer interested in portability should do so.

Implementations[edit]
Although it is trivial to make a naive brainfuck interpreter, writing an optimizing compiler or interpreter becomes more of a challenge and amusement much like writing programs in brainfuck itself is: to produce reasonably fast results, the compiler needs to piece together the fragmentary instructions forced by the language. Possible optimizations range from simple run-length peephole optimizations on repeated commands and common loop patterns like [-], to more complicated ones like dead code elimination and constant folding.[13]
In addition to optimization, other types of unusual brainfuck interpreters have also been written. Several brainfuck compilers have been made smaller than 200 bytes â one is only 100 bytes in x86 machine code.[14]

Derivatives[edit]
Many people have created brainfuck equivalents (languages with commands that directly map to brainfuck) or brainfuck derivatives (languages that extend its behavior or alter its semantics).
Some examples:

Pi, which maps brainfuck into errors in individual digits of Pi.[15]
VerboseFuck, which looks like a traditional programming language, only what appears as parameters or expressions are actually parts of longer commands that cannot be altered.[16]
DerpPlusPlus, in which the commands are replaced with words such as 'HERP', 'DERP', 'GIGITY', etc.[17]
Ook!, which maps brainfuck's eight commands to two-word combinations of "Ook.", "Ook?", and "Ook!", jokingly designed to be "writable and readable by orang-utans" according to its creator, a reference to the orang-utan Librarian in the novels of Terry Pratchett.[18][19]
Ternary, similar in concept to Ook! but instead consisting of permutations of the ASCII characters 0, 1, and 2.[20]
BodyFuck, a BrainFuck implementation based on a gesture-controlled system so that programmer's movements are captured by a video camera and converted into the 8 possible characters.[21]
OooWee, commands are variations of OooWee (e.g. ooo,ooe,wee etc.). Inspired from the Rick and Morty character Mr. PoopyButthole.[22]
I Use Arch btw, which maps brainfuck into the words found in the phrase "I Use Arch btw". Inspired by a phrase coined by the Arch Linux community.[23]
Brainfunk, maps brainfuck to voice samples, which are used in a dance track, whose words encode a brainfuck program.[24]
DNA# is a superset based on DNA molecules, with commands replaced by Nucleobase. One form uses the helix representation of the DNA molecule.[25]
See also[edit]
JSFuck â an esoteric JavaScript programming language with a very limited set of characters
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Easter, Brandee (2020-04-02). "Fully Human, Fully Machine: Rhetorics of Digital Disembodiment in Programming". Rhetoric Review. 39 (2): 202â215. doi:10.1080/07350198.2020.1727096. ISSNÂ 0735-0198. S2CIDÂ 219665562.

^ "Aminet hits 5000 files". Urban MÃ¼ller. 1993-09-24. Retrieved 2015-05-03.

^ "The Brainfuck Programming Language". Muppetlabs.com. Retrieved 2013-10-30.

^ "Wouter's WikiÂ : False Language". Strlen.com. 2013-08-03. Retrieved 2013-10-30.

^ "dev/lang/brainfuck-2.lha". Aminet. Archived from the original on 2005-11-06. Retrieved 2013-10-30.

^ J. Lambek (1961). "How to program an infinite abacus". Canadian Mathematical Bulletin. 4 (3): 295â302. doi:10.4153/CMB-1961-032-6.

^ Z. A. Melzak (1961). "An informal arithmetical approach to computability and computation". Canadian Mathematical Bulletin. 4 (3): 279â293. doi:10.4153/CMB-1961-031-9.

^ "BF is Turing-complete". Iwriteiam.nl. Retrieved 2013-10-30.

^ "Index of /brainfuck/bf-source/prog". Esoteric.sange.fi. 2002-01-22. Retrieved 2013-10-30.

^ "BF interpreter written in BF". Iwriteiam.nl. Retrieved 2013-10-30.

^ "brainfuck interpreter". Daniel B. Cristofani.

^ Bolognani, Andrea. "Beef â". Kiyuko.org. Retrieved 2013-10-30.

^ Hughes, Wilfred (5 August 2020). "Wilfred/bfc: An industrial-grade brainfuck compiler". GitHub.

^ "Brainfuck in 100 Bytes!". github.com. Retrieved 2016-03-22.

^ "Pi â Esolang". esolangs.org. Retrieved 2019-03-19.

^ "VerboseFuck â Esolang". esolangs.org. Retrieved 2019-09-11.

^ "TheRaz/DerpPlusPlus". Github.com. Retrieved 2015-04-08.

^ Morgan-Mar, David (2009-03-21). "Ook!". DM's Esoteric Programming Languages. Retrieved 2014-06-28.

^ Paloque-BergÃ¨s, Camille (2009). PoÃ©tique des codes sur le rÃ©seau informatique (in French). Paris: Ãditions des archives contemporaines. p.Â 73. ISBNÂ 978-2-914610-70-4.

^ "Ternary Programming Language". GitHub. Retrieved 2015-06-14.

^ Hanselmann, Nik. "There is no hardware". Retrieved 2 February 2016.

^ "omkarjc27/OooWee". Github.com. Retrieved 2019-01-19.

^ "OverMighty/I Use Arch btw". Github.com. Retrieved 2021-02-03.

^ brainfunk (get with the program), retrieved 2021-03-16

^ "DNA-Sharp - Esolang". esolangs.org. Retrieved 2021-12-16.


External links[edit]
Brainfuck at Curlie
Brainfuck interpreter on-line in JavaScript with collection of programs
Brainfuck IDE â A brainfuck development environment with interactive debugger
Brainfuck generator â A text to brainfuck generator
Brainfuck collection of Interpreters and scripts
Brainfuck to COBOL, C, ASM, PL/1, ... compiler
Brainfuck Assembler translating x86 assembly code (reduced set) into brainfuck code
Brainfuck playground at tio.run




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Brainfuck&oldid=1067674493"
		Categories: Non-English-based programming languagesEsoteric programming languagesProgramming languages created in 1993Hidden categories: CS1 French-language sources (fr)Articles with short descriptionShort description matches WikidataArticles with example C codeArticles with Curlie links
	
