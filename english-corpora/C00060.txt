
Title:
Breadth-first search
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Algorithm for searching the nodes of a graph in order by their hop count from a starting node
This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources:Â "Breadth-first search"Â âÂ newsÂ Â· newspapersÂ Â· booksÂ Â· scholarÂ Â· JSTOR  (April 2012) (Learn how and when to remove this template message)
.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}Breadth-first searchOrder in which the nodes are expandedClassSearch algorithmData structureGraphWorst-case performance
  
    
      
        O
        (
        
          |
        
        V
        
          |
        
        +
        
          |
        
        E
        
          |
        
        )
        =
        O
        (
        
          b
          
            d
          
        
        )
      
    
    {\displaystyle O(|V|+|E|)=O(b^{d})}
  
Worst-case space complexity
  
    
      
        O
        (
        
          |
        
        V
        
          |
        
        )
        =
        O
        (
        
          b
          
            d
          
        
        )
      
    
    {\displaystyle O(|V|)=O(b^{d})}
  

.mw-parser-output .sidebar{width:22em;float:right;clear:right;margin:0.5em 0 1em 1em;background:#f8f9fa;border:1px solid #aaa;padding:0.2em;text-align:center;line-height:1.4em;font-size:88%;border-collapse:collapse;display:table}body.skin-minerva .mw-parser-output .sidebar{display:table!important;float:right!important;margin:0.5em 0 1em 1em!important}.mw-parser-output .sidebar-subgroup{width:100%;margin:0;border-spacing:0}.mw-parser-output .sidebar-left{float:left;clear:left;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-none{float:none;clear:both;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-outer-title{padding:0 0.4em 0.2em;font-size:125%;line-height:1.2em;font-weight:bold}.mw-parser-output .sidebar-top-image{padding:0.4em}.mw-parser-output .sidebar-top-caption,.mw-parser-output .sidebar-pretitle-with-top-image,.mw-parser-output .sidebar-caption{padding:0.2em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-pretitle{padding:0.4em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-title,.mw-parser-output .sidebar-title-with-pretitle{padding:0.2em 0.8em;font-size:145%;line-height:1.2em}.mw-parser-output .sidebar-title-with-pretitle{padding:0.1em 0.4em}.mw-parser-output .sidebar-image{padding:0.2em 0.4em 0.4em}.mw-parser-output .sidebar-heading{padding:0.1em 0.4em}.mw-parser-output .sidebar-content{padding:0 0.5em 0.4em}.mw-parser-output .sidebar-content-with-subgroup{padding:0.1em 0.4em 0.2em}.mw-parser-output .sidebar-above,.mw-parser-output .sidebar-below{padding:0.3em 0.8em;font-weight:bold}.mw-parser-output .sidebar-collapse .sidebar-above,.mw-parser-output .sidebar-collapse .sidebar-below{border-top:1px solid #aaa;border-bottom:1px solid #aaa}.mw-parser-output .sidebar-navbar{text-align:right;font-size:115%;padding:0 0.4em 0.4em}.mw-parser-output .sidebar-list-title{padding:0 0.4em;text-align:left;font-weight:bold;line-height:1.6em;font-size:105%}.mw-parser-output .sidebar-list-title-c{padding:0 0.4em;text-align:center;margin:0 3.3em}@media(max-width:720px){body.mediawiki .mw-parser-output .sidebar{width:100%!important;clear:both;float:none!important;margin-left:0!important;margin-right:0!important}}Graph and treesearch algorithms
Î±âÎ²
A*
B*
Backtracking
Beam
BellmanâFord
Best-first
Bidirectional
BorÅ¯vka
Branch & bound
BFS
British Museum
D*
DFS
Dijkstra
Edmonds
FloydâWarshall
Fringe search
Hill climbing
IDA*
Iterative deepening
Johnson
Jump point
Kruskal
Lexicographic BFS
LPA*
Prim
SMA*

Listings
Graph algorithms
Search algorithms
List of graph algorithms

Related topics
Dynamic programming
Graph traversal
Tree traversal
Search games
Graph coloring
.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vte
  Animated example of a breadth-first search. Black: explored, grey: queued to be explored later on
  Top part of Tic-tac-toe game tree
Breadth-first search (BFS) is an algorithm for searching a tree data structure for a node that satisfies a given property. It starts at the tree root and explores all nodes at the present depth prior to moving on to the nodes at the next depth level. Extra memory, usually a queue, is needed to keep track of the child nodes that were encountered but not yet explored. 
For example, in a chess endgame a chess engine may build the game tree from the current position by applying all possible moves, and use breadth-first search to find a win position for white. Implicit trees (such as game trees or other problem-solving trees) may be of infinite size; breadth-first search is guaranteed to find a solution node[1] if one exists.
In contrast, (plain) depth-first search, which explores the node branch as far as possible before backtracking and expanding other nodes,[2] may get lost in an infinite branch and never make it to the solution node. Iterative deepening depth-first search avoids the latter drawback at the price of exploring the tree's top parts over and over again. On the other hand, both depth-first algorithms get along without extra memory.
Breadth-first search can be generalized to graphs, when the start node (sometimes referred to as a 'search key')[3] is explicitly given, and precautions are taken against following a vertex twice.
BFS and its application in finding connected components of graphs were invented in 1945 by Konrad Zuse, in his (rejected) Ph.D. thesis on the PlankalkÃ¼l programming language, but this was not published until 1972.[4] It was reinvented in 1959 by Edward F. Moore, who used it to find the shortest path out of a maze,[5][6] and later developed by C. Y. Lee into a wire routing algorithm (published 1961).[7]

Contents

1 Pseudocode

1.1 More details
1.2 Example


2 Analysis

2.1 Time and space complexity
2.2 Completeness


3 BFS ordering
4 Applications
5 See also
6 References
7 External links



Pseudocode[edit]
Input: A graph G and a starting vertex root of G
Output: Goal state. The parent links trace the shortest path back to root[8]

 1  procedure BFS(G, root) is
 2      let Q be a queue
 3      label root as explored
 4      Q.enqueue(root)
 5      while Q is not empty do
 6          vÂ := Q.dequeue()
 7          if v is the goal then
 8              return v
 9          for all edges from v to w in G.adjacentEdges(v) do
10              if w is not labeled as explored then
11                  label w as explored
12                  Q.enqueue(w)

More details[edit]
This non-recursive implementation is similar to the non-recursive implementation of depth-first search, but differs from it in two ways:

it uses a queue (First In First Out) instead of a stack and
it checks whether a vertex has been explored before enqueueing the vertex rather than delaying this check until the vertex is dequeued from the queue.
If G is a tree, replacing the queue of this breadth-first search algorithm with a stack will yield a depth-first search algorithm. For general graphs, replacing the stack of the iterative depth-first search implementation with a queue would also produce a breadth-first search algorithm, although a somewhat nonstandard one.[9]
The Q queue contains the frontier along which the algorithm is currently searching.
Nodes can be labelled as explored by storing them in a set, or by an attribute on each node, depending on the implementation.
Note that the word node is usually interchangeable with the word vertex.
The parent attribute of each node is useful for accessing the nodes in a shortest path, for example by backtracking from the destination node up to the starting node, once the BFS has been run, and the predecessors nodes have been set.
Breadth-first search produces a so-called breadth first tree. You can see how a breadth first tree looks in the following example.

Example[edit]
The following is an example of the breadth-first tree obtained by running a BFS on German cities starting from Frankfurt:

  An example map of Southern Germany with some connections between cities
  The breadth-first tree obtained when running BFS on the given map and starting in Frankfurt
Analysis[edit]
Time and space complexity[edit]
The time complexity can be expressed as 
  
    
      
        O
        (
        
          |
        
        V
        
          |
        
        +
        
          |
        
        E
        
          |
        
        )
      
    
    {\displaystyle O(|V|+|E|)}
  
, since every vertex and every edge will be explored in the worst case. 
  
    
      
        
          |
        
        V
        
          |
        
      
    
    {\displaystyle |V|}
  
 is the number of vertices and 
  
    
      
        
          |
        
        E
        
          |
        
      
    
    {\displaystyle |E|}
  
 is the number of edges in the graph.
Note that 
  
    
      
        O
        (
        
          |
        
        E
        
          |
        
        )
      
    
    {\displaystyle O(|E|)}
  
 may vary between 
  
    
      
        O
        (
        1
        )
      
    
    {\displaystyle O(1)}
  
 and 
  
    
      
        O
        (
        
          |
        
        V
        
          
            |
          
          
            2
          
        
        )
      
    
    {\displaystyle O(|V|^{2})}
  
, depending on how sparse the input graph is.[10]
When the number of vertices in the graph is known ahead of time, and additional data structures are used to determine which vertices have already been added to the queue, the space complexity can be expressed as 
  
    
      
        O
        (
        
          |
        
        V
        
          |
        
        )
      
    
    {\displaystyle O(|V|)}
  
, where 
  
    
      
        
          |
        
        V
        
          |
        
      
    
    {\displaystyle |V|}
  
 is the number of vertices. This is in addition to the space
required for the graph itself, which may vary depending on the graph representation used by an implementation of the algorithm.
When working with graphs that are too large to store explicitly (or infinite), it is more practical to describe the complexity of breadth-first search in different terms: to find the nodes that are at distance d from the start node (measured in number of edge traversals), BFS takes O(bd + 1) time and memory, where b is the "branching factor" of the graph (the average out-degree).[11]:â81â

Completeness[edit]
In the analysis of algorithms, the input to breadth-first search is assumed to be a finite graph, represented as an adjacency list, adjacency matrix, or similar representation. However, in the application of graph traversal methods in artificial intelligence the input may be an implicit representation of an infinite graph. In this context, a search method is described as being complete if it is guaranteed to find a goal state if one exists. Breadth-first search is complete, but depth-first search is not. When applied to infinite graphs represented implicitly, breadth-first search will eventually find the goal state, but depth first search may get lost in parts of the graph that have no goal state and never return.[12]

BFS ordering[edit]
An enumeration of the vertices of a graph is said to be a BFS ordering if it is the possible output of the application of BFS to this graph.
Let 
  
    
      
        G
        =
        (
        V
        ,
        E
        )
      
    
    {\displaystyle G=(V,E)}
  
 be a graph  with 
  
    
      
        n
      
    
    {\displaystyle n}
  
 vertices.  Recall that 
  
    
      
        N
        (
        v
        )
      
    
    {\displaystyle N(v)}
  
 is the set of neighbors of 
  
    
      
        v
      
    
    {\displaystyle v}
  
.
Let 
  
    
      
        Ï
        =
        (
        
          v
          
            1
          
        
        ,
        â¦
        ,
        
          v
          
            m
          
        
        )
      
    
    {\displaystyle \sigma =(v_{1},\dots ,v_{m})}
  
 be a list of distinct elements of 
  
    
      
        V
      
    
    {\displaystyle V}
  
, for 
  
    
      
        v
        â
        V
        â
        {
        
          v
          
            1
          
        
        ,
        â¦
        ,
        
          v
          
            m
          
        
        }
      
    
    {\displaystyle v\in V\setminus \{v_{1},\dots ,v_{m}\}}
  
, let 
  
    
      
        
          Î½
          
            Ï
          
        
        (
        v
        )
      
    
    {\displaystyle \nu _{\sigma }(v)}
  
 be the least 
  
    
      
        i
      
    
    {\displaystyle i}
  
 such that 
  
    
      
        
          v
          
            i
          
        
      
    
    {\displaystyle v_{i}}
  
 is a neighbor of 
  
    
      
        v
      
    
    {\displaystyle v}
  
, if such a 
  
    
      
        i
      
    
    {\displaystyle i}
  
 exists, and be 
  
    
      
        â
      
    
    {\displaystyle \infty }
  
 otherwise.
Let 
  
    
      
        Ï
        =
        (
        
          v
          
            1
          
        
        ,
        â¦
        ,
        
          v
          
            n
          
        
        )
      
    
    {\displaystyle \sigma =(v_{1},\dots ,v_{n})}
  
 be an enumeration of the vertices of 
  
    
      
        V
      
    
    {\displaystyle V}
  
.
The enumeration 
  
    
      
        Ï
      
    
    {\displaystyle \sigma }
  
 is said to be a BFS ordering (with source 
  
    
      
        
          v
          
            1
          
        
      
    
    {\displaystyle v_{1}}
  
) if, for all 
  
    
      
        1
        <
        i
        â¤
        n
      
    
    {\displaystyle 1<i\leq n}
  
, 
  
    
      
        
          v
          
            i
          
        
      
    
    {\displaystyle v_{i}}
  
 is the vertex 
  
    
      
        w
        â
        V
        â
        {
        
          v
          
            1
          
        
        ,
        â¦
        ,
        
          v
          
            i
            â
            1
          
        
        }
      
    
    {\displaystyle w\in V\setminus \{v_{1},\dots ,v_{i-1}\}}
  
 such that 
  
    
      
        
          Î½
          
            (
            
              v
              
                1
              
            
            ,
            â¦
            ,
            
              v
              
                i
                â
                1
              
            
            )
          
        
        (
        w
        )
      
    
    {\displaystyle \nu _{(v_{1},\dots ,v_{i-1})}(w)}
  
 is minimal. Equivalently, 
  
    
      
        Ï
      
    
    {\displaystyle \sigma }
  
 is a BFS ordering if, for all 
  
    
      
        1
        â¤
        i
        <
        j
        <
        k
        â¤
        n
      
    
    {\displaystyle 1\leq i<j<k\leq n}
  
 with 
  
    
      
        
          v
          
            i
          
        
        â
        N
        (
        
          v
          
            k
          
        
        )
        â
        N
        (
        
          v
          
            j
          
        
        )
      
    
    {\displaystyle v_{i}\in N(v_{k})\setminus N(v_{j})}
  
, there exists a neighbor  
  
    
      
        
          v
          
            m
          
        
      
    
    {\displaystyle v_{m}}
  
 of 
  
    
      
        
          v
          
            j
          
        
      
    
    {\displaystyle v_{j}}
  
 such that 
  
    
      
        m
        <
        i
      
    
    {\displaystyle m<i}
  
.

Applications[edit]
Breadth-first search can be used to solve many problems in graph theory, for example:

Copying garbage collection, Cheney's algorithm
Finding the shortest path between two nodes u and v, with path length measured by number of edges (an advantage over depth-first search)[13]
(Reverse) CuthillâMcKee mesh numbering
FordâFulkerson method for computing the maximum flow in a flow network
Serialization/Deserialization of a binary tree vs serialization in sorted order, allows the tree to be re-constructed in an efficient manner.
Construction of the failure function of the Aho-Corasick pattern matcher.
Testing bipartiteness of a graph.
Implementing parallel algorithms for computing a graph's transitive closure. [14]
See also[edit]
Depth-first search
Iterative deepening depth-first search
Level structure
Lexicographic breadth-first search
Parallel breadth-first search
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ that is, a node satisfying the specified property

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Cormen Thomas H.;  etÂ al. (2009). "22.3". Introduction to Algorithms. MIT Press.

^ "Graph500 benchmark specification (supercomputer performance evaluation)". Graph500.org, 2010. Archived from the original on 2015-03-26. Retrieved 2015-03-15.

^ Zuse, Konrad (1972), Der PlankalkÃ¼l (in German), Konrad Zuse Internet Archive. See pp. 96â105 of the linked pdf file (internal numbering 2.47â2.56).

^ Moore, Edward F. (1959). "The shortest path through a maze". Proceedings of the International Symposium on the Theory of Switching. Harvard University Press. pp.Â 285â292. As cited by Cormen, Leiserson, Rivest, and Stein.

^ Skiena, Steven (2008). "Sorting and Searching". The Algorithm Design Manual. Springer. p.Â 480. Bibcode:2008adm..book.....S. doi:10.1007/978-1-84800-070-4_4. ISBNÂ 978-1-84800-069-8.

^ Lee, C. Y. (1961). "An Algorithm for Path Connections and Its Applications". IRE Transactions on Electronic Computers. doi:10.1109/TEC.1961.5219222.

^ Cormen, Thomas H. "22.2 Breadth-first search". Introduction to algorithms. ISBNÂ 978-81-203-4007-7. OCLCÂ 1006880283.

^ "Stack-based graph traversal â  depth first search". 11011110.github.io. Retrieved 2020-06-10.

^ Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; Stein, Clifford (2001) [1990]. "22.2 Breadth-first search". Introduction to Algorithms (2ndÂ ed.). MIT Press and McGraw-Hill. pp.Â 531â539. ISBNÂ 0-262-03293-7.

^ Russell, Stuart; Norvig, Peter (2003) [1995]. Artificial Intelligence: A Modern Approach (2ndÂ ed.). Prentice Hall. ISBNÂ 978-0137903955.

^ Coppin, B. (2004). Artificial intelligence illuminated. Jones & Bartlett Learning. pp.Â 79â80.

^ Aziz, Adnan; Prakash, Amit (2010). "4. Algorithms on Graphs". Algorithms for Interviews. p.Â 144. ISBNÂ 978-1453792995.

^ Dhulipala, Laxman; Blelloch, Guy E.; Shun, Julian (August 21, 2019). Theoretically Efficient Parallel Graph Algorithms Can Be Fast and Scalable. p.Â 17. arXiv:1805.05208. doi:10.1145/3210377.3210414. ISBNÂ 9781450357999. S2CIDÂ 44126609.


.mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li{margin-left:0;padding-left:3.2em;text-indent:-3.2em}.mw-parser-output .refbegin-hanging-indents ul,.mw-parser-output .refbegin-hanging-indents ul li{list-style:none}@media(max-width:720px){.mw-parser-output .refbegin-hanging-indents>ul>li{padding-left:1.6em;text-indent:-1.6em}}.mw-parser-output .refbegin-columns{margin-top:0.3em}.mw-parser-output .refbegin-columns ul{margin-top:0}.mw-parser-output .refbegin-columns li{page-break-inside:avoid;break-inside:avoid-column}
Knuth, Donald E. (1997), The Art of Computer Programming Vol 1. 3rd ed., Boston: Addison-Wesley, ISBNÂ 978-0-201-89683-1

External links[edit]



Wikimedia Commons has media related to Breadth-first search.

Open Data Structures - Section 12.3.1 - Breadth-First Search, Pat Morin
Simplified Breadth-first Search
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}hidevteData structures and algorithmsData structures
Array
Associative array
Binary search tree
Fenwick tree
Graph
Hash table
Heap
Linked list
Queue
Segment tree
Stack
String
Tree
Trie
Algorithms
Backtracking
Binary search
Breadth-first search
Depth-first search
Divide and conquer
Dynamic programming
Fold
Greedy
Minimax
Recursion
Sorting
Streaming
Sweep line
Topological sorting





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Breadth-first_search&oldid=1067391087"
		Categories: Graph algorithmsSearch algorithmsHidden categories: CS1 German-language sources (de)Articles with short descriptionShort description matches WikidataArticles needing additional references from April 2012All articles needing additional referencesCommons category link is on Wikidata
	
