Combinatorial optimization is a subfield of mathematical optimization   that consists of finding an optimal object from a finite set of objects, where the set of feasible solutions is discrete or can be reduced to a discrete set. Typical combinatorial optimization problems are the travelling salesman problem ("TSP"), the minimum spanning tree problem ("MST"), and the knapsack problem. In many such problems, such as the ones previously mentioned, exhaustive search is not tractable, and so specialized algorithms that quickly rule out large parts of the search space or approximation algorithms must be resorted to instead.Combinatorial optimization is related to operations research, algorithm theory, and computational complexity theory. It has important applications in several fields, including artificial intelligence, machine learning, auction theory, software engineering, applied mathematics and theoretical computer science.Some research literature considers discrete optimization to consist of integer programming together with combinatorial optimization (which in turn is composed of optimization problems dealing with graph structures), although all of these topics have closely intertwined research literature. It often involves determining the way to efficiently allocate resources used to find solutions to mathematical problems. Applications Applications of combinatorial optimization include, but are not limited to:LogisticsSupply chain optimizationDeveloping the best airline network of spokes and destinationsDeciding which taxis in a fleet to route to pick up faresDetermining the optimal way to deliver packagesAllocating jobs to people optimallyDesigning water distribution networksEarth science problems (e.g. reservoir flow-rates) Methods There is a large amount of literature on polynomial-time algorithms for certain special classes of discrete optimization. A considerable amount of it is unified by the theory of linear programming. Some examples of combinatorial optimization problems that are covered by this framework are shortest paths and shortest-path trees, flows and circulations, spanning trees, matching, and matroid problems.For NP-complete discrete optimization problems, current research literature includes the following topics:polynomial-time exactly solvable special cases of the problem at hand (e.g. fixed-parameter tractable problems)algorithms that perform well on "random" instances (e.g. for the traveling salesman problem)approximation algorithms that run in polynomial time and find a solution that is close to optimalsolving real-world instances that arise in practice and do not necessarily exhibit the worst-case behavior of in NP-complete problems (e.g. real-world TSP instances with tens of thousands of nodes).Combinatorial optimization problems can be viewed as searching for the best element of some set of discrete items; therefore, in principle, any sort of search algorithm or metaheuristic can be used to solve them. Perhaps the most universally applicable approaches are branch-and-bound (an exact algorithm which can be stopped at any point in time to serve as heuristic), branch-and-cut (uses linear optimisation to generate bounds), dynamic programming (a recursive solution construction with limited search window) and tabu search (a greedy-type swapping algorithm). However, generic search algorithms are not guaranteed to find an optimal solution first, nor are they guaranteed to run quickly (in polynomial time). Since some discrete optimization problems are NP-complete, such as the traveling salesman problem, this is expected unless P=NP. Formal definition Formally, a combinatorial optimization problem                     A              {\displaystyle A}   is a quadruple                     (        I        ,        f        ,        m        ,        g        )              {\displaystyle (I,f,m,g)}  , where                    I              {\displaystyle I}   is a set of instances;given an instance                     x        ∈        I              {\displaystyle x\in I}  ,                     f        (        x        )              {\displaystyle f(x)}   is the finite set of feasible solutions;given an instance                     x              {\displaystyle x}   and a feasible solution                     y              {\displaystyle y}   of                     x              {\displaystyle x}  ,                     m        (        x        ,        y        )              {\displaystyle m(x,y)}   denotes the measure of                     y              {\displaystyle y}  , which is usually a positive real.                    g              {\displaystyle g}   is the goal function, and is either                     min              {\displaystyle \min }   or                     max              {\displaystyle \max }  .The goal is then to find for some instance                     x              {\displaystyle x}   an optimal solution, that is, a feasible solution                     y              {\displaystyle y}   with                    m        (        x        ,        y        )        =        g        {        m        (        x        ,                  y          ′                )        ∣                  y          ′                ∈        f        (        x        )        }        .              {\displaystyle m(x,y)=g\{m(x,y')\mid y'\in f(x)\}.}  For each combinatorial optimization problem, there is a corresponding decision problem that asks whether there is a feasible solution for some particular measure                               m                      0                                {\displaystyle m_{0}}  . For example, if there is a graph                     G              {\displaystyle G}   which contains vertices                     u              {\displaystyle u}   and                     v              {\displaystyle v}  , an optimization problem might be "find a path from                     u              {\displaystyle u}   to                     v              {\displaystyle v}   that uses the fewest edges". This problem might have an answer of, say, 4. A corresponding decision problem would be "is there a path from                     u              {\displaystyle u}   to                     v              {\displaystyle v}   that uses 10 or fewer edges?" This problem can be answered with a simple 'yes' or 'no'.The field of approximation algorithms deals with algorithms to find near-optimal solutions to hard problems. The usual decision version is then an inadequate definition of the problem since it only specifies acceptable solutions. Even though we could introduce suitable decision problems, the problem is then more naturally characterized as an optimization problem. NP optimization problem An NP-optimization problem (NPO) is a combinatorial optimization problem with the following additional conditions. Note that the below referred polynomials are functions of the size of the respective functions' inputs, not the size of some implicit set of input instances.the size of every feasible solution                     y        ∈        f        (        x        )              {\displaystyle y\in f(x)}   is polynomially bounded in the size of the given instance                     x              {\displaystyle x}  ,the languages                     {                x                ∣                x        ∈        I                }              {\displaystyle \{\,x\,\mid \,x\in I\,\}}   and                     {                (        x        ,        y        )                ∣                y        ∈        f        (        x        )                }              {\displaystyle \{\,(x,y)\,\mid \,y\in f(x)\,\}}   can be recognized in polynomial time, and                    m              {\displaystyle m}   is polynomial-time computable.This implies that the corresponding decision problem is in NP. In computer science, interesting optimization problems usually have the above properties and are therefore NPO problems. A problem is additionally called a P-optimization (PO) problem, if there exists an algorithm which finds optimal solutions in polynomial time. Often, when dealing with the class NPO, one is interested in optimization problems for which the decision versions are NP-complete. Note that hardness relations are always with respect to some reduction. Due to the connection between approximation algorithms and computational optimization problems, reductions which preserve approximation in some respect are for this subject preferred than the usual Turing and Karp reductions. An example of such a reduction would be L-reduction. For this reason, optimization problems with NP-complete decision versions are not necessarily called NPO-complete.NPO is divided into the following subclasses according to their approximability:NPO(I): Equals FPTAS. Contains the Knapsack problem.NPO(II): Equals PTAS. Contains the Makespan scheduling problem.NPO(III): :The class of NPO problems that have polynomial-time algorithms which computes solutions with a cost at most c times the optimal cost (for minimization problems) or a cost at least                     1                  /                c              {\displaystyle 1/c}   of the optimal cost (for maximization problems). In Hromkovič's book, excluded from this class are all NPO(II)-problems save if P=NP. Without the exclusion, equals APX. Contains MAX-SAT and metric TSP.NPO(IV): :The class of NPO problems with polynomial-time algorithms approximating the optimal solution by a ratio that is polynomial in a logarithm of the size of the input. In Hromkovič's book, all NPO(III)-problems are excluded from this class unless P=NP. Contains the set cover problem.NPO(V): :The class of NPO problems with polynomial-time algorithms approximating the optimal solution by a ratio bounded by some function on n. In Hromkovic's book, all NPO(IV)-problems  are excluded from this class unless P=NP. Contains the TSP and clique problem.An NPO problem is called polynomially bounded (PB) if, for every instance                     x              {\displaystyle x}   and for every solution                     y        ∈        f        (        x        )              {\displaystyle y\in f(x)}  , the measure                     m        (        x        ,        y        )              {\displaystyle m(x,y)}  is bounded by a polynomial function of the size of                     x              {\displaystyle x}  . The class NPOPB is the class of NPO problems that are polynomially-bounded. Specific problems Assignment problemClosure problemConstraint satisfaction problemCutting stock problemDominating set problemInteger programmingKnapsack problemMinimum relevant variables in linear systemMinimum spanning treeNurse scheduling problemSet cover problemJob shop schedulingTraveling salesman problemVehicle rescheduling problemVehicle routing problemWeapon target assignment problem See also Constraint composite graph Notes  References Beasley, J. E. "Integer programming" (lecture notes).Cook, William J.; Cunningham, William H.; Pulleyblank, William R.; Schrijver, Alexander (1997). Combinatorial Optimization. Wiley. ISBN 0-471-55894-X.Cook, William (2016). "Optimal TSP Tours". University of Waterloo. (Information on the largest TSP instances solved to date.)Crescenzi, Pierluigi; Kann, Viggo; Halldórsson, Magnús; Karpinski, Marek; Woeginger, Gerhard (eds.). "A Compendium of NP Optimization Problems". (This is a continuously updated catalog of approximability results for NP optimization problems.)Das, Arnab; Chakrabarti, Bikas K, eds. (2005). Quantum Annealing and Related Optimization Methods. Lecture Notes in Physics. Vol. 679. Springer. Bibcode:2005qnro.book.....D.Das, Arnab; Chakrabarti, Bikas K (2008). "Colloquium: Quantum annealing and analog quantum computation". Rev. Mod. Phys. 80 (3): 1061. arXiv:0801.2193. Bibcode:2008RvMP...80.1061D. CiteSeerX 10.1.1.563.9990. doi:10.1103/RevModPhys.80.1061. S2CID 14255125.Lawler, Eugene (2001). Combinatorial Optimization: Networks and Matroids. Dover. ISBN 0-486-41453-1.Lee, Jon (2004). A First Course in Combinatorial Optimization. Cambridge University Press. ISBN 0-521-01012-8.Papadimitriou, Christos H.; Steiglitz, Kenneth (July 1998). Combinatorial Optimization : Algorithms and Complexity. Dover. ISBN 0-486-40258-4.Schrijver, Alexander (2003). Combinatorial Optimization: Polyhedra and Efficiency. Algorithms and Combinatorics. Vol. 24. Springer. ISBN 9783540443896.Schrijver, Alexander (2005). "On the history of combinatorial optimization (till 1960)" (PDF).  In Aardal, K.; Nemhauser, G.L.; Weismantel, R. (eds.). Handbook of Discrete Optimization. Elsevier. pp. 1–68.Schrijver, Alexander (February 1, 2006). A Course in Combinatorial Optimization (PDF).Sierksma, Gerard; Ghosh, Diptesh (2010). Networks in Action; Text and Computer Exercises in Network Optimization. Springer. ISBN 978-1-4419-5512-8.Gerard Sierksma; Yori Zwols (2015). Linear and Integer Optimization: Theory and Practice. CRC Press. ISBN 978-1-498-71016-9.Pintea, C-M. (2014). Advances in Bio-inspired Computing for Combinatorial Optimization Problem. Intelligent Systems Reference Library. Springer. ISBN 978-3-642-40178-7. External links Journal of Combinatorial OptimizationThe Aussois Combinatorial Optimization WorkshopJava Combinatorial Optimization Platform (open source code)Why is scheduling people hard?Complexity classes for optimization problems / Stefan Kugele