
Title:
UTF-8
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		ASCII-compatible variable-width encoding of Unicode, using one to four bytes
.mw-parser-output .monospaced{font-family:monospace,monospace}.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}UTF-8StandardUnicode StandardClassificationUnicode Transformation Format, extended ASCII, variable-width encodingExtendsUS-ASCIITransforms / EncodesISO 10646 (Unicode)Preceded byUTF-1.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vte
UTF-8 is a variable-width character encoding used for electronic communication. Defined by the Unicode Standard, the name is derived from Unicode (or Universal Coded Character Set) Transformation FormatÂ â  8-bit.[1]
UTF-8 is capable of encoding all 1,112,064[nb 1] valid character code points in Unicode using one to four one-byte (8-bit) code units. Code points with lower numerical values, which tend to occur more frequently, are encoded using fewer bytes. It was designed for backward compatibility with ASCII: the first 128 characters of Unicode, which correspond one-to-one with ASCII, are encoded using a single byte with the same binary value as ASCII, so that valid ASCII text is valid UTF-8-encoded Unicode as well. Since ASCII bytes do not occur when encoding non-ASCII code points into UTF-8, UTF-8 is safe to use within most programming and document languages that interpret certain ASCII characters in a special way, such as / (slash) in filenames, \ (backslash) in escape sequences, and % in printf.
UTF-8 was designed as a superior alternative to UTF-1, a proposed variable-width encoding with partial ASCII compatibility which lacked some features including self-synchronization and fully ASCII-compatible handling of characters such as slashes. Ken Thompson and Rob Pike produced the first implementation for the Plan 9 operating system in September 1992.[2][3] This led to its adoption by X/Open as its specification for FSS-UTF, which would first be officially presented at USENIX in January 1993 and subsequently adopted by the Internet Engineering Task Force (IETF) in RFC 2277 (BCP 18) for future internet standards work, replacing Single Byte Character Sets such as Latin-1 in older RFCs.
UTF-8 is the dominant encoding for the World Wide Web (and internet technologies), accounting for 98% of all web pages, and up to 100.0%  for some languages, as of 2022.[4]

Contents

1 Naming
2 Encoding

2.1 Examples
2.2 Octal
2.3 Codepage layout
2.4 Overlong encodings
2.5 Invalid sequences and error handling
2.6 Byte order mark


3 Adoption
4 History

4.1 FSS-UTF


5 Standards
6 Comparison with other encodings

6.1 Single-byte
6.2 Other multi-byte
6.3 UTF-16


7 Derivatives

7.1 CESU-8
7.2 MySQL utf8mb3
7.3 Modified UTF-8
7.4 WTF-8
7.5 PEP 383


8 See also
9 Notes
10 References
11 External links



Naming[edit]
The official Internet Assigned Numbers Authority (IANA) code for the encoding is "UTF-8".[5] All letters are upper-case, and the name is hyphenated. This spelling is used in all the Unicode Consortium documents relating to the encoding.
However, the name "utf-8" may be used by all standards conforming to the IANA list (which include CSS, HTML, XML, and HTTP headers),[6] as the declaration is case-insensitive.[5]
Other variants, such as those that omit the hyphen or replace it with a space, i.e. "utf8" or "UTF 8", are not accepted as correct by the governing standards.[7] Despite this, most web browsers can understand them, and so standards intended to describe existing practice (such as HTML5) may effectively require their recognition.[8]
Unofficially, UTF-8-BOM and UTF-8-NOBOM are sometimes used for text files which contain or don't contain a byte order mark (BOM), respectively.[citation needed] In Japan especially, UTF-8 encoding without a BOM is sometimes called "UTF-8N".[9][10]
Windows XP and later, including all supported Windows versions, have codepage 65001, as a synonym for UTF-8 (since Windows 7 support for UTF-8 is better).[11] Since Windows 10 version 1903, the default for Windows Notepad changed to UTF-8.[12][13]
In PCL, UTF-8 is called Symbol-ID "18N" (PCL supports 183 character encodings, called Symbol Sets, which potentially could be reduced to one, 18N, that is UTF-8).[14]

Encoding[edit]
Since the restriction of the Unicode code-space to 21-bit values in 2003, UTF-8 is defined to encode code points in one to four bytes, depending on the number of significant bits in the numerical value of the code point. The following table shows the structure of the encoding. The x characters are replaced by the bits of the code point.


Code point <-> UTF-8 conversion


First code point

Last code point

Byte 1

Byte 2

Byte 3

Byte 4


U+0000

U+007F

0xxxxxxx




U+0080

U+07FF

110xxxxx
10xxxxxx




U+0800

U+FFFF

1110xxxx
10xxxxxx
10xxxxxx




U+10000

[nb 2]U+10FFFF

11110xxx
10xxxxxx
10xxxxxx
10xxxxxx

The first 128 characters (US-ASCII) need one byte. The next 1,920 characters need two bytes to encode, which covers the remainder of almost all Latin-script alphabets, and also IPA extensions, Greek, Cyrillic, Coptic, Armenian, Hebrew, Arabic, Syriac, Thaana and N'Ko alphabets, as well as Combining Diacritical Marks. Three bytes are needed for characters in the rest of the Basic Multilingual Plane, which contains virtually all characters in common use,[15] including most Chinese, Japanese and Korean characters. Four bytes are needed for characters in the other planes of Unicode, which include less common CJK characters, various historic scripts, mathematical symbols, and emoji (pictographic symbols).
A "character" can actually take more than 4 bytes; e.g., a national flag character takes 8 bytes since it's "constructed from a pair of Unicode scalar values".[16][nb 3]

Examples[edit]
Consider the encoding of the euro sign, â¬:

The Unicode code point for â¬ is U+20AC.
As this code point lies between U+0800 and U+FFFF, this will take three bytes to encode.
Hexadecimal 20AC is binary 0010 0000 1010 1100. The two leading zeros are added because a three-byte encoding needs exactly sixteen bits from the code point.
Because the encoding will be three bytes long, its leading byte starts with three 1s, then a 0 (1110...)
The four most significant bits of the code point are stored in the remaining low order four bits of this byte (11100010), leaving 12 bits of the code point yet to be encoded (...0000 1010 1100).
All continuation bytes contain exactly six bits from the code point. So the next six bits of the code point are stored in the low order six bits of the next byte, and 10 is stored in the high order two bits to mark it as a continuation byte (so 10000010).
Finally the last six bits of the code point are stored in the low order six bits of the final byte, and again 10 is stored in the high order two bits (10101100).
The three bytes 11100010 10000010 10101100 can be more concisely written in hexadecimal, as E2 82 AC.
The following table summarizes this conversion, as well as others with different lengths in UTF-8. The colors indicate how bits from the code point are distributed among the UTF-8 bytes. Additional bits added by the UTF-8 encoding process are shown in black.


Examples of UTF-8 encoding


Character
Binary code point
Binary UTF-8
Hex UTF-8


$
U+0024

010 0100

00100100

24


Â£
U+00A3

000 1010 0011

11000010 10100011

C2 A3


à¤¹
U+0939

0000 1001 0011 1001

11100000 10100100 10111001

E0 A4 B9


â¬
U+20AC

0010 0000 1010 1100

11100010 10000010 10101100

E2 82 AC


í
U+D55C

1101 0101 0101 1100

11101101 10010101 10011100

ED 95 9C


ð
U+10348

0 0001 0000 0011 0100 1000

11110000 10010000 10001101 10001000

F0 90 8D 88

Octal[edit]
UTF-8's use of six bits per byte to represent the actual characters being encoded means that octal notation (which uses 3-bit groups) can aid in the comparison of UTF-8 sequences with one another and in manual conversion.[17]


Octal code point <-> Octal UTF-8 conversion


First code point

Last code point

Code point

Byte 1

Byte 2

Byte 3

Byte 4


000

0177

xxx

xxx




0200

03777

xxyy

3xx
2yy




04000

077777

xyyzz

34x
2yy
2zz




0100000

0177777

1xyyzz

35x
2yy
2zz




0200000

04177777

xyyzzww

36x
2yy
2zz
2ww

With octal notation, the arbitrary octal digits, marked with x, y, z or w in the table, will remain unchanged when converting to or from UTF-8.

Example: Ã = U+00C1 = 0301 (in octal) is encoded as 303 201 in UTF-8 (C3 81 in hex).
Example: â¬ = U+20AC = 020254 is encoded as 342 202 254 in UTF-8 (E2 82 AC in hex).
Codepage layout[edit]
The following table summarizes usage of UTF-8 code units (individual bytes or octets) in a code page format. The upper half is for bytes used only in single-byte codes, so it looks like a normal code page; the lower half is for continuation bytes and leading bytes and is explained further in the legend below.



UTF-8




0

1

2

3

4

5

6

7

8

9

A

B

C

D

E

F


0x

NUL

SOH

STX

ETX

EOT

ENQ

ACK

BEL

BS

HT

LF

VT

FF

CR

SO

SI


1x

DLE

DC1

DC2

DC3

DC4

NAK

SYN

ETB

CAN

EM

SUB

ESC

FS

GS

RS

US



2x

Â SPÂ 

!

"

#

$

%

&

'

(

)

*

+

,

-

.

/


3x

0

1

2

3

4

5

6

7

8

9

:

;

<

=

>

?


4x

@

A

B

C

D

E

F

G

H

I

J

K

L

M

N

O


5x

P

Q

R

S

T

U

V

W

X

Y

Z

[

\

]

^

_


6x

`

a

b

c

d

e

f

g

h

i

j

k

l

m

n

o


7x

p

q

r

s

t

u

v

w

x

y

z

{

|

}

~

DEL


8x

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢


9x

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢


Ax

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢


Bx

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢

â¢


Cx

2

2

2

2

2

2

2

2

2

2

2

2

2

2

2

2


Dx

2

2

2

2

2

2

2

2

2

2

2

2

2

2

2

2


Ex

3

3

3

3

3

3

3

3

3

3

3

3

3

3

3

3


Fx

4

4

4

4

4

4

4

4

5

5

5

5

6

6





.mw-parser-output .legend{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .legend-color{display:inline-block;min-width:1.25em;height:1.25em;line-height:1.25;margin:1px 0;text-align:center;border:1px solid black;background-color:transparent;color:black}.mw-parser-output .legend-text{}Â Â 7-bit (single-byte) code points. They must not be followed by a continuation byte.[18]
Â Â Continuation bytes.[19] The tooltip shows in hex the value of the 6 bits they add.[nb 4]
Â Â Leading bytes for a sequence of multiple bytes, must be followed by exactly Nâ1 continuation bytes.[20] The tooltip shows the code point range and the Unicode blocks encoded by sequences starting with this byte.
Â Â Leading bytes where not all arrangements of continuation bytes are valid. E0 and F0 could start overlong encodings. F4 can start code points greater than U+10FFFF. ED can start code points in the range U+D800âU+DFFF, which are invalid UTF-16 surrogate halves.[21]
Â Â Do not appear in a valid UTF-8 sequence. C0 and C1 could be used only for an "overlong" encoding of a 1-byte character.[22] F5 to FD are leading bytes of 4-byte or longer sequences that can only encode code points larger than U+10FFFF.[23] FE and FF were never assigned any meaning.[24]
Overlong encodings[edit]
In principle, it would be possible to inflate the number of bytes in an encoding by padding the code point with leading 0s. To encode the euro sign â¬ from the above example in four bytes instead of three, it could be padded with leading 0s until it was 21Â bits longÂ â 
000 000010 000010 101100, and encoded as 11110000 10000010 10000010  10101100 (or F0  82 82 AC in hexadecimal). This is called an overlong encoding.
The standard specifies that the correct encoding of a code point uses only the minimum number of bytes required to hold the significant bits of the code point. Longer encodings are called overlong and are not valid UTF-8 representations of the code point. This rule maintains a one-to-one correspondence between code points and their valid encodings, so that there is a unique valid encoding for each code point. This ensures that string comparisons and searches are well-defined.

Invalid sequences and error handling[edit]
Not all sequences of bytes are valid UTF-8. A UTF-8 decoder should be prepared for:

invalid bytes
an unexpected continuation byte
a non-continuation byte before the end of the character
the string ending before the end of the character (which can happen in simple string truncation)
an overlong encoding
a sequence that decodes to an invalid code point
Many of the first UTF-8 decoders would decode these, ignoring incorrect bits and accepting overlong results. Carefully crafted invalid UTF-8 could make them either skip or create ASCII characters such as NUL, slash, or quotes. Invalid UTF-8 has been used to bypass security validations in high-profile products including Microsoft's IIS web server[25] and Apache's Tomcat servlet container.[26] RFC 3629 states "Implementations of the decoding algorithm MUST protect against decoding invalid sequences."[7] The Unicode Standard requires decoders to "...treat any ill-formed code unit sequence as an error condition. This guarantees that it will neither interpret nor emit an ill-formed code unit sequence."
Since RFC 3629 (November 2003), the high and low surrogate halves used by UTF-16 (U+D800 through U+DFFF) and code points not encodable by UTF-16 (those after U+10FFFF) are not legal Unicode values, and their UTF-8 encoding must be treated as an invalid byte sequence. Not decoding unpaired surrogate halves makes it impossible to store invalid UTF-16 (such as Windows filenames or UTF-16 that has been split between the surrogates) as UTF-8,[27] while it is possible with WTF-8.
Some implementations of decoders throw exceptions on errors.[28] This has the disadvantage that it can turn what would otherwise be harmless errors (such as a "no such file" error) into a denial of service. For instance early versions of Python 3.0 would exit immediately if the command line or environment variables contained invalid UTF-8.[29] An alternative practice is to replace errors with a replacement character. Since Unicode 6[30] (October 2010), the standard (chapter 3) has recommended a "best practice" where the error ends as soon as a disallowed byte is encountered. In these decoders E1,A0,C0 is two errors (2 bytes in the first one). This means an error is no more than three bytes long and never contains the start of a valid character, and there are 21,952 different possible errors.[31] The standard also recommends replacing each error with the replacement character "ï¿½" (U+FFFD).

Byte order mark[edit]
If the UTF-16 Unicode byte order mark (BOM, U+FEFF) character is at the start of a UTF-8 file, the first three bytes will be 0xEF, 0xBB, 0xBF.
The Unicode Standard neither requires nor recommends the use of the BOM for UTF-8, but warns that it may be encountered at the start of a file trans-coded from another encoding.[32] While ASCII text encoded using UTF-8 is backward compatible with ASCII, this is not true when Unicode Standard recommendations are ignored and a BOM is added. A BOM can confuse software that isn't prepared for it but can otherwise accept UTF-8, e.g. programming languages that permit non-ASCII bytes in string literals but not at the start of the file. Nevertheless, there was and still is software that always inserts a BOM when writing UTF-8, and refuses to correctly interpret UTF-8 unless the first character is a BOM (or the file only contains ASCII).[citation needed]
Some file formats and programming languages have their own way of marking usage of encodings like UTF-8 in source code. Examples include HTML <meta charset="UTF-8"/> and Python 2.7 # coding: utf-8

Adoption[edit]
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}See also: Popularity of text encodings
  Declared character set for 10Â million most popular websites since 2010
  Use of the main encodings on the web from 2001 to 2012 as recorded by Google,[33] with UTF-8 (labeled "Unicode") overtaking all others in 2008 and over 60% of the web in 2012 (since then approaching 100%). The ASCII-only figure includes all web pages that only contain ASCII characters, regardless of the declared header. Other encodings of Unicode such as GB2312 are added to "others".
Many standards only support UTF-8, e.g. open JSON exchange requires it (without a byte order mark (BOM)).[34] UTF-8 is also the recommendation from the WHATWG for HTML and DOM specifications,[35] and the Internet Mail Consortium recommends that all e-mail programs be able to display and create mail using UTF-8.[36][37] The World Wide Web Consortium recommends UTF-8 as the default encoding in XML and HTML (and not just using UTF-8, also stating it in metadata), "even when all characters are in the ASCII range ..  Using non-UTF-8 encodings can have unexpected results".[38]
Lots of software has the ability to read/write UTF-8, though this often requires the user to change options from the normal settings, and may require a BOM (byte order mark) as the first character to read the file. Examples include Microsoft Word[39][40][41] and Microsoft Excel.[42][43] Most databases support UTF-8 (sometimes the only option as with some file formats), including Microsoft's since SQL Server 2019, resulting in 35% speed increase, and "nearly 50% reduction in storage requirements."[44]
UTF-8 has been the most common encoding for the World Wide Web since 2008.[45] As of JanuaryÂ 2022[update], UTF-8 accounts for on average 97.7% of all web pages (and 986 of the top 1,000 highest ranked web pages).[4] UTF-8 includes ASCII as a subset; almost no websites declare only ASCII used.[46] Over a third of the languages tracked have 100.0% UTF-8 use.
For local text files UTF-8 usage is lower, and many legacy single-byte (and CJK multi-byte) encodings remain in use. The primary cause is editors that do not display or write UTF-8 unless the first character in a file is a byte order mark (BOM), making it impossible for other software to use UTF-8 without being rewritten to ignore the byte order mark on input and add it on output.[47][48] There has been some improvement, Notepad on Windows 10 writes UTF-8 without a BOM by default,[49] and some system files on Windows 11 require UTF-8,[50] and almost all files on macOS and Linux are required to be UTF-8 (without a BOM).[citation needed] Java's NIO API defaults to reading and writing UTF-8 files, with plans to update all other file APIs in the Java 18 release.[51] Many other programming languages default to UTF-8 for I/O; or plan to migrate to UTF-8, such as Python  which already made changes to help programmers prepare for the change "to UTF-8 [since it has] become the de-facto standard text encoding".[52]
Internally in software usage is lower, with UTF-16 or UCS-2 in use, particularly on Windows, but also by JavaScript, Python,[53] Qt, and many other cross-platform software libraries. Compatibility with the Windows API is the primary reasons for this, though the belief that direct indexing of BMP improves speed also was a factor. More recent software has started to use UTF-8: the default string primitive used in Go,[54] Julia, Rust, Swift 5,[55] and PyPy[56] is UTF-8, a future version of Python intends to store strings as UTF-8,[57] and modern versions of Microsoft Visual Studio use UTF-8 internally[58] (however still require a command-line switch to read or write UTF-8[59]). UTF-8 is the "only text encoding mandated to be supported by the C++ standard", as of C++20.[60] As of May 2019, Microsoft reversed its course of only supporting UTF-16 for the Windows API, providing the ability to set UTF-8 as the "code page" for the multi-byte API (previously this was impossible), and now Microsoft recommends (programmers) use UTF-8.[61]

History[edit]
See also: Universal Coded Character Set Â§Â History
The International Organization for Standardization (ISO) set out to compose a universal multi-byte character set in 1989. The draft ISO 10646 standard contained a non-required annex called UTF-1 that provided a byte stream encoding of its 32-bit code points. This encoding was not satisfactory on performance grounds, among other problems, and the biggest problem was probably that it did not have a clear separation between ASCII and non-ASCII: new UTF-1 tools would be backward compatible with ASCII-encoded text, but UTF-1-encoded text could confuse existing code expecting ASCII (or extended ASCII), because it could contain continuation bytes in the range 0x21â0x7E that meant something else in ASCII, e.g., 0x2F for '/', the Unix path directory separator, and this example is reflected in the name and introductory text of its replacement. The table below was derived from a textual description in the annex.


UTF-1


Numberof bytes
Firstcode point
Lastcode point
Byte 1
Byte 2
Byte 3
Byte 4
Byte 5


1

U+0000

U+009F

00â9F










2

U+00A0

U+00FF

A0

A0âFF








2

U+0100

U+4015

A1âF5

21â7E, A0âFF








3

U+4016

U+38E2D

F6âFB

21â7E, A0âFF

21â7E, A0âFF






5

U+38E2E

U+7FFFFFFF

FCâFF

21â7E, A0âFF

21â7E, A0âFF

21â7E, A0âFF

21â7E, A0âFF

In July 1992, the X/Open committee XoJIG was looking for a better encoding. Dave Prosser of Unix System Laboratories submitted a proposal for one that had faster implementation characteristics and introduced the improvement that 7-bit ASCII characters would only represent themselves; all multi-byte sequences would include only bytes where the high bit was set. The name File System Safe UCS Transformation Format (FSS-UTF) and most of the text of this proposal were later preserved in the final specification.[62][63][64][65]

FSS-UTF[edit]

FSS-UTF proposal (1992)


Numberof bytes
Firstcode point
Lastcode point
Byte 1
Byte 2
Byte 3
Byte 4
Byte 5


1

U+0000

U+007F

0xxxxxxx










2

U+0080

U+207F

10xxxxxx
1xxxxxxx








3

U+2080

U+8207F

110xxxxx
1xxxxxxx
1xxxxxxx






4

U+82080

U+208207F

1110xxxx
1xxxxxxx
1xxxxxxx
1xxxxxxx




5

U+2082080

U+7FFFFFFF

11110xxx
1xxxxxxx
1xxxxxxx
1xxxxxxx
1xxxxxxx

In August 1992, this proposal was circulated by an IBM X/Open representative to interested parties. A modification by Ken Thompson of the Plan 9 operating system group at Bell Labs made it somewhat less bit-efficient than the previous proposal but crucially allowed it to be self-synchronizing, letting a reader start anywhere and immediately detect byte sequence boundaries. It also abandoned the use of biases and instead added the rule that only the shortest possible encoding is allowed; the additional loss in compactness is relatively insignificant, but readers now have to look out for invalid encodings to avoid reliability and especially security issues. Thompson's design was outlined on September 2, 1992, on a placemat in a New Jersey diner with Rob Pike. In the following days, Pike and Thompson implemented it and updated Plan 9 to use it throughout, and then communicated their success back to X/Open, which accepted it as the specification for FSS-UTF.[64]


FSS-UTF (1992) / UTF-8 (1993)[2]


Numberof bytes
Firstcode point
Lastcode point
Byte 1
Byte 2
Byte 3
Byte 4
Byte 5
Byte 6


1

U+0000

U+007F

0xxxxxxx












2

U+0080

U+07FF

110xxxxx
10xxxxxx










3

U+0800

U+FFFF

1110xxxx
10xxxxxx
10xxxxxx








4

U+10000

U+1FFFFF

11110xxx
10xxxxxx
10xxxxxx
10xxxxxx






5

U+200000

U+3FFFFFF

111110xx
10xxxxxx
10xxxxxx
10xxxxxx
10xxxxxx




6

U+4000000

U+7FFFFFFF

1111110x
10xxxxxx
10xxxxxx
10xxxxxx
10xxxxxx
10xxxxxx

UTF-8 was first officially presented at the USENIX conference in San Diego, from January 25 to 29, 1993. The Internet Engineering Task Force adopted UTF-8 in its Policy on Character Sets and Languages in RFCÂ 2277 (BCP 18) for future internet standards work, replacing Single Byte Character Sets such as Latin-1 in older RFCs.[66]
In November 2003, UTF-8 was restricted by .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}RFCÂ 3629 to match the constraints of the UTF-16 character encoding: explicitly prohibiting code points corresponding to the high and low surrogate characters removed  more than 3% of the three-byte sequences, and ending at U+10FFFF removed  more than 48% of the four-byte sequences and all five- and six-byte sequences.

Standards[edit]
There are several current definitions of UTF-8 in various standards documents:

RFCÂ 3629 / STD 63 (2003), which establishes UTF-8 as a standard internet protocol element
RFCÂ 5198 defines UTF-8 NFC for Network Interchange (2008)
ISO/IEC 10646:2014 Â§9.1 (2014)[67]
The Unicode Standard, Version 11.0 (2018)[68]
They supersede the definitions given in the following obsolete works:

The Unicode Standard, Version 2.0, Appendix A (1996)
ISO/IEC 10646-1:1993 Amendment 2 / Annex R (1996)
RFCÂ 2044 (1996)
RFCÂ 2279 (1998)
The Unicode Standard, Version 3.0, Â§2.3 (2000) plus Corrigendum #1Â : UTF-8 Shortest Form (2000)
Unicode Standard Annex #27: Unicode 3.1 (2001)[69]
The Unicode Standard, Version 5.0 (2006)[70]
The Unicode Standard, Version 6.0 (2010)[71]
They are all the same in their general mechanics, with the main differences being on issues such as allowed range of code point values and safe handling of invalid input.

Comparison with other encodings[edit]
See also: Comparison of Unicode encodings
Some of the important features of this encoding are as follows:

Backward compatibility: Backward compatibility with ASCII and the enormous amount of software designed to process ASCII-encoded text was the main driving force behind the design of UTF-8. In UTF-8, single bytes with values in the range of 0 to 127 map directly to Unicode code points in the ASCII range. Single bytes in this range represent characters, as they do in ASCII. Moreover, 7-bit bytes (bytes where the most significant bit is 0) never appear in a multi-byte sequence, and no valid multi-byte sequence decodes to an ASCII code-point. A sequence of 7-bit bytes is both valid ASCII and valid UTF-8, and under either interpretation represents the same sequence of characters. Therefore, the 7-bit bytes in a UTF-8 stream represent all and only the ASCII characters in the stream. Thus, many text processors, parsers, protocols, file formats, text display programs, etc., which use ASCII characters for formatting and control purposes, will continue to work as intended by treating the UTF-8 byte stream as a sequence of single-byte characters, without decoding the multi-byte sequences. ASCII characters on which the processing turns, such as punctuation, whitespace, and control characters will never be encoded as multi-byte sequences. It is therefore safe for such processors to simply ignore or pass-through the multi-byte sequences, without decoding them. For example, ASCII whitespace may be used to tokenize a UTF-8 stream into words; ASCII line-feeds may be used to split a UTF-8 stream into lines; and ASCII NUL characters can be used to split UTF-8-encoded data into null-terminated strings. Similarly, many format strings used by library functions like "printf" will correctly handle UTF-8-encoded input arguments.
Fallback and auto-detection: Only a small subset of possible byte strings are a valid UTF-8 string: the bytes C0, C1, and F5 through FF cannot appear, and bytes with the high bit set must be in pairs, and other requirements. It is extremely unlikely that a readable text in any extended ASCII is valid UTF-8. Part of the popularity of UTF-8 is due to it providing a form of backward compatibility for these as well. A UTF-8 processor which erroneously receives extended ASCII as input can thus "auto-detect" this with very high reliability. Fallback errors will be false negatives, and these will be rare. Moreover, in many applications, such as text display, the consequence of incorrect fallback is usually slight.[original research?] A UTF-8 stream may simply contain errors, resulting in the auto-detection scheme producing false positives; but auto-detection is successful in the majority of cases, especially with longer texts, and is widely used. It also works to "fall back" or replace 8-bit bytes using the appropriate code-point for a legacy encoding only when errors in the UTF-8 are detected, allowing recovery even if UTF-8 and legacy encoding is concatenated in the same file.
Prefix code: The first byte indicates the number of bytes in the sequence. Reading from a stream can instantaneously decode each individual fully received sequence, without first having to wait for either the first byte of a next sequence or an end-of-stream indication. The length of multi-byte sequences is easily determined by humans as it is simply the number of high-order 1s in the leading byte. An incorrect character will not be decoded if a stream ends mid-sequence.
Self-synchronization: The leading bytes and the continuation bytes do not share values (continuation bytes start with the bits 10 while single bytes start with 0 and longer lead bytes start with 11). This means a search will not accidentally find the sequence for one character starting in the middle of another character. It also means the start of a character can be found from a random position by backing up at most 3 bytes to find the leading byte. An incorrect character will not be decoded if a stream starts mid-sequence, and a shorter sequence will never appear inside a longer one.
Sorting order: The chosen values of the leading bytes means that a list of UTF-8 strings can be sorted in code point order by sorting the corresponding byte sequences.
Single-byte[edit]
UTF-8 can encode any Unicode character, avoiding the need to figure out and set a "code page" or otherwise indicate what character set is in use, and allowing output in multiple scripts at the same time. For many scripts there have been more than one single-byte encoding in usage, so even knowing the script was insufficient information to display it correctly.
The bytes 0xFE and 0xFF do not appear, so a valid UTF-8 stream never matches the UTF-16 byte order mark and thus cannot be confused with it. The absence of 0xFF (0377) also eliminates the need to escape this byte in Telnet (and FTP control connection).
UTF-8 encoded text is larger than specialized single-byte encodings except for plain ASCII characters. In the case of scripts which used 8-bit character sets with non-Latin characters encoded in the upper half (such as most Cyrillic and Greek alphabet code pages), characters in UTF-8 will be double the size. For some scripts, such as Thai and Devanagari (which is used by various South Asian languages), characters will triple in size. There are even examples where a single byte turns into a composite character in Unicode and is thus six times larger in UTF-8. This has caused objections in India and other countries.
It is possible in UTF-8 (or any other variable-length encoding) to split or truncate a string in the middle of a character. If the two pieces are not re-appended later before interpretation as characters, this can introduce an invalid sequence at both the end of the previous section and the start of the next, and some decoders will not preserve these bytes and result in data loss. Because UTF-8 is self-synchronizing this will however never introduce a different valid character, and it is also fairly easy to move the truncation point backward to the start of a character.
If the code points are all the same size, measurements of a fixed number of them is easy. Due to ASCII-era documentation where "character" is used as a synonym for "byte" this is often considered important. However, by measuring string positions using bytes instead of "characters" most algorithms can be easily and efficiently adapted for UTF-8. Searching for a string within a long string can for example be done byte by byte; the self-synchronization property prevents false positives.
Other multi-byte[edit]
UTF-8 can encode any Unicode character. Files in different scripts can be displayed correctly without having to choose the correct code page or font. For instance, Chinese and Arabic can be written in the same file without specialized markup or manual settings that specify an encoding.
UTF-8 is self-synchronizing: character boundaries are easily identified by scanning for well-defined bit patterns in either direction. If bytes are lost due to error or corruption, one can always locate the next valid character and resume processing. If there is a need to shorten a string to fit a specified field, the previous valid character can easily be found. Many multi-byte encodings such as Shift JIS are much harder to resynchronize. This also means that byte-oriented string-searching algorithms can be used with UTF-8 (as a character is the same as a "word" made up of that many bytes), optimized versions of byte searches can be much faster due to hardware support and lookup tables that have only 256 entries. Self-synchronization does however require that bits be reserved for these markers in every byte, increasing the size.
Efficient to encode using simple bitwise operations. UTF-8 does not require slower mathematical operations such as multiplication or division (unlike Shift JIS, GB 2312 and other encodings).
UTF-8 will take more space than a multi-byte encoding designed for a specific script. East Asian legacy encodings generally used two bytes per character yet take three bytes per character in UTF-8.
UTF-16[edit]
Byte encodings and UTF-8 are represented by byte arrays in programs, and often nothing needs to be done to a function when converting source code from a byte encoding to UTF-8. UTF-16 is represented by 16-bit word arrays, and converting to UTF-16 while maintaining compatibility with existing ASCII-based programs (such as was done with Windows) requires every API and data structure that takes a string to be duplicated, one version accepting byte strings and another version accepting UTF-16. If backward compatibility is not needed, all string handling still must be modified.
Text encoded in UTF-8 will be smaller than the same text encoded in UTF-16 if there are more code points below U+0080 than in the range U+0800..U+FFFF. This is true for all modern European languages. It is often true even for languages like Chinese, due to the large number of spaces, newlines, digits, and HTML markup in typical files.
Most communication (e.g. HTML and IP) and storage (e.g. for Unix) was designed for a stream of bytes. A UTF-16 string must use a pair of bytes for each code unit:
The order of those two bytes becomes an issue and must be specified in the UTF-16 protocol, such as with a byte order mark.
If an odd number of bytes is missing from UTF-16, the whole rest of the string will be meaningless text. Any bytes missing from UTF-8 will still allow the text to be recovered accurately starting with the next character after the missing bytes.
Derivatives[edit]
The following implementations show slight differences from the UTF-8 specification. They are incompatible with the UTF-8 specification and may be rejected by conforming UTF-8 applications.

CESU-8[edit]
Main article: CESU-8
Unicode Technical Report #26[72] assigns the name CESU-8 to a nonstandard variant of UTF-8, in which Unicode characters in supplementary planes are encoded using six bytes, rather than the four bytes required by UTF-8. CESU-8 encoding treats each half of a four-byte UTF-16 surrogate pair as a two-byte UCS-2 character, yielding two three-byte UTF-8 characters, which together represent the original supplementary character. Unicode characters within the Basic Multilingual Plane appear as they would normally in UTF-8. The Report was written to acknowledge and formalize the existence of data encoded as CESU-8, despite the Unicode Consortium discouraging its use, and notes that a possible intentional reason for CESU-8 encoding is preservation of UTF-16 binary collation.
CESU-8 encoding can result from converting UTF-16 data with supplementary characters to UTF-8, using conversion methods that assume UCS-2 data, meaning they are unaware of four-byte UTF-16 supplementary characters. It is primarily an issue on operating systems which extensively use UTF-16 internally, such as Microsoft Windows.[citation needed]
In Oracle Database, the UTF8 character set uses CESU-8 encoding, and is deprecated. The AL32UTF8 character set uses standards-compliant UTF-8 encoding, and is preferred.[73][74]
CESU-8 is prohibited for use in HTML5 documents.[75][76][77]

MySQL utf8mb3[edit]
In MySQL, the utf8mb3 character set is defined to be UTF-8 encoded data with a maximum of three bytes per character, meaning only Unicode characters in the Basic Multilingual Plane (i.e. from UCS-2) are supported. Unicode characters in supplementary planes are explicitly not supported. utf8mb3 is deprecated in favor of the utf8mb4 character set, which uses standards-compliant UTF-8 encoding. utf8 is an alias for utf8mb3, but is intended to become an alias to utf8mb4 in a future release of MySQL.[78] It is possible, though unsupported, to store CESU-8 encoded data in utf8mb3, by handling UTF-16 data with supplementary characters as though it is UCS-2.

Modified UTF-8[edit]
Modified UTF-8 (MUTF-8) originated in the Java programming language. In Modified UTF-8, the null character (U+0000) uses the two-byte overlong encoding 11000000 10000000 (hexadecimal C0 80), instead of 00000000 (hexadecimal 00).[79] Modified UTF-8 strings never contain any actual null bytes but can contain all Unicode code points including U+0000,[80] which allows such strings (with a null byte appended) to be processed by traditional null-terminated string functions. All known Modified UTF-8 implementations also treat the surrogate pairs as in CESU-8.
In normal usage, the language supports standard UTF-8 when reading and writing strings through InputStreamReader and OutputStreamWriter (if it is the platform's default character set or as requested by the program). However it uses Modified UTF-8 for object serialization[81] among other applications of DataInput and DataOutput, for the Java Native Interface,[82] and for embedding constant strings in class files.[83]
The dex format defined by Dalvik also uses the same modified UTF-8 to represent string values.[84] Tcl also uses the same modified UTF-8[85] as Java for internal representation of Unicode data, but uses strict CESU-8 for external data.

WTF-8[edit]
This section contains a list of miscellaneous information. Please relocate any relevant information into other sections or articles.  (August 2020)
In WTF-8 (Wobbly Transformation Format, 8-bit) unpaired surrogate halves (U+D800 through U+DFFF) are allowed.[86] This is necessary to store possibly-invalid UTF-16, such as Windows filenames. Many systems that deal with UTF-8 work this way without considering it a different encoding, as it is simpler.[87]
(The term "WTF-8" has also been used humorously to refer to erroneously doubly-encoded UTF-8[88][89] sometimes with the implication that CP1252 bytes are the only ones encoded.)[90]

PEP 383[edit]
Version 3 of the Python programming language treats each byte of an invalid UTF-8 bytestream as an error (see also changes with new UTF-8 mode in Python 3.7[91]); this gives 128 different possible errors. Extensions have been created to allow any byte sequence that is assumed to be UTF-8 to be losslessly transformed to UTF-16 or UTF-32, by translating the 128 possible error bytes to reserved code points, and transforming those code points back to error bytes to output UTF-8. The most common approach is to translate the codes to U+DC80...U+DCFF which are low (trailing) surrogate values and thus "invalid" UTF-16, as used by Python's PEP 383 (or "surrogateescape") approach.[92] Another encoding called MirBSD OPTU-8/16 converts them to U+EF80...U+EFFF in a Private Use Area.[93] In either approach, the byte value is encoded in the low eight bits of the output code point.
These encodings are very useful because they avoid the need to deal with "invalid" byte strings until much later, if at all, and allow "text" and "data" byte arrays to be the same object. If a program wants to use UTF-16 internally these are required to preserve and use filenames that can use invalid UTF-8;[94] as the Windows filesystem API uses UTF-16, the need to support invalid UTF-8 is less there.[92]
For the encoding to be reversible, the standard UTF-8 encodings of the code points used for erroneous bytes must be considered invalid. This makes the encoding incompatible with WTF-8 or CESU-8 (though only for 128 code points). When re-encoding it is necessary to be careful of sequences of error code points which convert back to valid UTF-8, which may be used by malicious software to get unexpected characters in the output, though this cannot produce ASCII characters so it is considered comparatively safe, since malicious sequences (such as cross-site scripting) usually rely on ASCII characters.[94]

See also[edit]
Alt code
Comparison of email clients Â§Â Features
Comparison of Unicode encodings
GB 18030
UTF-EBCDIC
Iconv
Percent-encoding Â§Â Current standard
Specials (Unicode block)
Unicode and email
Unicode and HTML
Character encodings in HTML
Notes[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ 17 planes times 216 code points per plane, minus 211 technically-invalid surrogates.

^ The earlier RFC2279 allowed UTF-8 encoding through code point U+7FFFFFF.  But the current RFC3629 Â§3 limits UTF-8 encoding through code point U+10FFFF, to match the limits of UTF-16.

^ Some complex emoji characters can take even more than this; the transgender flag emoji (ð³ï¸ââ§ï¸), which consists of the five-codepoint sequence U+1F3F3 U+FE0F U+200D U+26A7 U+FE0F, requires sixteen bytes to encode, while that for the flag of Scotland (ð´ó §ó ¢ó ³ó £ó ´ó ¿) requires a total of twenty-eight bytes for the seven-codepoint sequence U+1F3F4 U+E0067 U+E0062 U+E0073 U+E0063 U+E0074 U+E007F.

^ For example, cell 9D says +1D.  The hexadecimal number 9D in binary is 10011101, and since the 2 highest bits (10) are reserved for marking this as a continuation byte, the remaining 6 bits (011101) have a hexadecimal value of 1D.


References[edit]


^ "Chapter 2. General Structure". The Unicode Standard (6.0Â ed.). Mountain View, California, US: The Unicode Consortium. ISBNÂ 978-1-936213-01-6.

^ a b Pike, Rob (30 April 2003). "UTF-8 history".

^ Pike, Rob; Thompson, Ken (1993). "Hello World or ÎÎ±Î»Î·Î¼Î­ÏÎ± ÎºÏÏÎ¼Îµ or ããã«ã¡ã¯ ä¸ç" (PDF). Proceedings of the Winter 1993 USENIX Conference.

^ a b "Usage Survey of Character Encodings broken down by Ranking". w3techs.com. Retrieved 2022-01-24.

^ a b "Character Sets". Internet Assigned Numbers Authority. 2013-01-23. Retrieved 2013-02-08.

^ DÃ¼rst, Martin. "Setting the HTTP charset parameter". W3C. Retrieved 2013-02-08.

^ a b Yergeau, F. (2003). UTF-8, a transformation format of ISO 10646. Internet Engineering Task Force. doi:10.17487/RFC3629. RFC 3629. Retrieved 2015-02-03.

^ "Encoding Standard Â§ 4.2. Names and labels". WHATWG. Retrieved 2018-04-29.

^ "BOM". suikawiki (in Japanese). Retrieved 2013-04-26.

^ Davis, Mark. "Forms of Unicode". IBM. Archived from the original on 2005-05-06. Retrieved 2013-09-18.

^ Liviu (2014-02-07). "UTF-8 codepage 65001 in Windows 7 - part I". Retrieved 2018-01-30. Previously under XP (and, unverified, but probably Vista, too) for loops simply did not work while codepage 65001 was active

^ Srinivasan, Ramesh (23 May 2021). "How to Change the Default Character Encoding in Notepad". Winhelponline Blog. Retrieved 2021-10-20.

^ Doan, Kim (2 December 2020). "How to Set Default UTF-8 encoding for New Notepad Documents When Saving File". KimConnect.com. Retrieved 2021-10-20.

^ "HP PCL Symbol Sets | Printer Control Language (PCL & PXL) Support Blog". 2015-02-19. Archived from the original on 2015-02-19. Retrieved 2018-01-30.

^ Allen, Julie D.; Anderson, Deborah; Becker, Joe; Cook, Richard, eds. (2012). "The Unicode Standard, Version 6.1". Mountain View, California: Unicode Consortium. {{cite journal}}: Cite journal requires |journal= (help)

^ "Apple Developer Documentation". developer.apple.com. Retrieved 2021-03-15.

^ "BinaryString (flink 1.9-SNAPSHOT API)". ci.apache.org. Retrieved 2021-03-24.

^ "Chapter 3" (PDF), The Unicode Standard, p.Â 54

^ "Chapter 3" (PDF), The Unicode Standard, p.Â 55

^ "Chapter 3" (PDF), The Unicode Standard, p.Â 55

^ Yergeau, F. (November 2003). UTF-8, a transformation format of ISO 10646. IETF. doi:10.17487/RFC3629. STD 63. RFC 3629. Retrieved August 20, 2020.

^ "Chapter 3" (PDF), The Unicode Standard, p.Â 54

^ Yergeau, F. (November 2003). UTF-8, a transformation format of ISO 10646. IETF. doi:10.17487/RFC3629. STD 63. RFC 3629. Retrieved August 20, 2020.

^ "Chapter 3" (PDF), The Unicode Standard, p.Â 55

^ Marin, Marvin (2000-10-17). "Web Server Folder Traversal MS00-078".

^ "Summary for CVE-2008-2938". National Vulnerability Database.

^ "PEP 529 -- Change Windows filesystem encoding to UTF-8". Python.org. Retrieved 2021-08-27. This PEP proposes changing the default filesystem encoding on Windows to utf-8, and changing all filesystem functions to use the Unicode APIs for filesystem paths. [..] can correctly round-trip all characters used in paths (on POSIX with surrogateescape handling; on Windows because str maps to the native representation). On Windows bytes cannot round-trip all characters used in paths

^ "DataInput (Java Platform SE 8)". docs.oracle.com. Retrieved 2021-03-24.

^ "Non-decodable Bytes in System Character Interfaces". python.org. 2009-04-22. Retrieved 2014-08-13.

^ "Unicode 6.0.0".

^ 128 1-byte, (16+5)Ã64 2-byte, and 5Ã64Ã64 3-byte. There may be somewhat fewer if more precise tests are done for each continuation byte.

^ "Chapter 2" (PDF), The Unicode Standard, p.Â 30

^ Davis, Mark (2012-02-03). "Unicode over 60 percent of the web". Official Google Blog. Archived from the original on 2018-08-09. Retrieved 2020-07-24.

^ Bray, Tim (December 2017). "The JavaScript Object Notation (JSON) Data Interchange Format". IETF. Retrieved 16 February 2018. {{cite journal}}: Cite journal requires |journal= (help)

^ "Encoding Standard". encoding.spec.whatwg.org. Retrieved 2020-04-15.

^ "Usage of Internet Mail in The World Characters". washingtonindependent.com. 1998-08-01. Retrieved 2007-11-08.

^ "Encoding Standard". encoding.spec.whatwg.org. Retrieved 2018-11-15.

^ "Specifying the document's character encoding". HTML5.2. World Wide Web Consortium. 14 December 2017. Retrieved 2018-06-03.

^ "Choose text encoding when you open and save files". support.microsoft.com. Retrieved 2021-11-01.

^ "utf 8 - Character encoding of Microsoft Word DOC and DOCX files?". Stack Overflow. Retrieved 2021-11-01.

^ "Exporting a UTF-8 .txt file from Word".{{cite web}}:  CS1 maint: url-status (link)

^ "excel - Are XLSX files UTF-8 encoded by definition?". Stack Overflow. Retrieved 2021-11-01.

^ "How to open UTF-8 CSV file in Excel without mis-conversion of characters in Japanese and Chinese language for both Mac and Windows?". answers.microsoft.com. Retrieved 2021-11-01.

^ "Introducing UTF-8 support for SQL Server". techcommunity.microsoft.com. 2019-07-02. Retrieved 2021-08-24. For example, changing an existing column data type from NCHAR(10) to CHAR(10) using an UTF-8 enabled collation, translates into nearly 50% reduction in storage requirements. [..] In the ASCII range, when doing intensive read/write I/O on UTF-8, we measured an average 35% performance improvement over UTF-16 using clustered tables with a non-clustered index on the string column, and an average 11% performance improvement over UTF-16 using a heap.

^ Davis, Mark (2008-05-05). "Moving to Unicode 5.1". Retrieved 2021-02-19.

^ "Usage Statistics and Market Share of US-ASCII for Websites, October 2021". w3techs.com. Retrieved 2020-11-01.

^ "How can I make Notepad to save text in UTF-8 without the BOM?". Stack Overflow. Retrieved 2021-03-24.

^ Galloway, Matt. "Character encoding for iOS developers. Or UTF-8 what now?". www.galloway.me.uk. Retrieved 2021-01-02. in reality, you usually just assume UTF-8 since that is by far the most common encoding.

^ "Windows 10 Notepad is Getting Better UTF-8 Encoding Support". BleepingComputer. Retrieved 2021-03-24. Microsoft is now defaulting to saving new text files as UTF-8 without BOM as shown below.

^ "Customize the Windows 11 Start menu". docs.microsoft.com. Retrieved 2021-06-29. Make sure your LayoutModification.json uses UTF-8 encoding.

^ "JEP 400: UTF-8 by Default". openjdk.java.net. Retrieved 2021-08-24.

^ "PEP 597 -- Add optional EncodingWarning". Python.org. Retrieved 2021-08-24.

^ Python 2 and early 3 versions on Windows, on Unix it used UTF-32. Newer Python 3 implementations use all three of ISO-8859-1, UCS-2, and UTF-32, depending on the maximum code point needed.

^ "The Go Programming Language Specification". Retrieved 2021-02-10.

^ Tsai, Michael J. "Michael Tsai - Blog - UTF-8 String in Swift 5". Retrieved 2021-03-15. Switching to UTF-8 fulfills one of Stringâs long-term goals to enable high-performance processing, [..] also lays the groundwork for providing even more performant APIs in the future

^ Mattip (2019-03-24). "PyPy Status Blog: PyPy v7.1 released; now uses utf-8 internally for unicode strings". PyPy Status Blog. Retrieved 2020-11-21.

^ "PEP 623 -- Remove wstr from Unicode". Python.org. Retrieved 2020-11-21. Until we drop legacy Unicode object, it is very hard to try other Unicode implementation like UTF-8 based implementation in PyPy

^ "/validate-charset (Validate for compatible characters)". docs.microsoft.com. Retrieved 2021-07-19. Visual Studio uses UTF-8 as the internal character encoding during conversion between the source character set and the execution character set.

^ "/utf-8 (Set Source and Executable character sets to UTF-8)". docs.microsoft.com. Retrieved 2021-07-18.

^ "absent std::u8string in C++11". NewbeDEV. Retrieved 2021-11-01.

^ "Use the Windows UTF-8 code page - UWP applications". docs.microsoft.com. Retrieved 2020-06-06. As of Windows Version 1903 (May 2019 Update), you can use the ActiveCodePage property in the appxmanifest for packaged apps, or the fusion manifest for unpackaged apps, to force a process to use UTF-8 as the process code page. [..] CP_ACP equates to CP_UTF8 only if running on Windows Version 1903 (May 2019 Update) or above and the ActiveCodePage property described above is set to UTF-8. Otherwise, it honors the legacy system code page. We recommend using CP_UTF8 explicitly.

^ "Appendix F. FSS-UTF / File System Safe UCS Transformation format" (PDF). The Unicode Standard 1.1. Archived (PDF) from the original on 2016-06-07. Retrieved 2016-06-07.

^ Whistler, Kenneth (2001-06-12). "FSS-UTF, UTF-2, UTF-8, and UTF-16". Archived from the original on 2016-06-07. Retrieved 2006-06-07.

^ a b Pike, Rob (2003-04-30). "UTF-8 history". Retrieved 2012-09-07.

^ Pike, Rob (2012-09-06). "UTF-8 turned 20 years old yesterday". Retrieved 2012-09-07.

^ Alvestrand, Harald (January 1998). IETF Policy on Character Sets and Languages. doi:10.17487/RFC2277. BCP 18.

^ ISO/IEC 10646:2014 Â§9.1, 2014.

^ The Unicode Standard, Version 11.0 Â§3.9 D92, Â§3.10 D95, 2018.

^ Unicode Standard Annex #27: Unicode 3.1, 2001.

^ The Unicode Standard, Version 5.0 Â§3.9âÂ§3.10 ch. 3, 2006.

^ The Unicode Standard, Version 6.0 Â§3.9 D92, Â§3.10 D95, 2010.

^ McGowan, Rick (2011-12-19). "Compatibility Encoding Scheme for UTF-16: 8-Bit (CESU-8)". Unicode Consortium. Unicode Technical Report #26.

^ "Character Set Support". Oracle Database 19c Documentation, SQL Language Reference. Oracle Corporation.

^ "Supporting Multilingual Databases with Unicode Â§ Support for the Unicode Standard in Oracle Database". Database Globalization Support Guide. Oracle Corporation.

^ "8.2.2.3. Character encodings". HTML 5.1 Standard. W3C.

^ "8.2.2.3. Character encodings". HTML 5 Standard. W3C.

^ "12.2.3.3 Character encodings". HTML Living Standard. WHATWG.

^ "The utf8mb3 Character Set (3-Byte UTF-8 Unicode Encoding)". MySQL 8.0 Reference Manual. Oracle Corporation.

^ "Java SE documentation for Interface java.io.DataInput, subsection on Modified UTF-8". Oracle Corporation. 2015. Retrieved 2015-10-16.

^ "The Java Virtual Machine Specification, section 4.4.7: "The CONSTANT_Utf8_info Structure"". Oracle Corporation. 2015. Retrieved 2015-10-16.

^ "Java Object Serialization Specification, chapter 6: Object Serialization Stream Protocol, section 2: Stream Elements". Oracle Corporation. 2010. Retrieved 2015-10-16.

^ "Java Native Interface Specification, chapter 3: JNI Types and Data Structures, section: Modified UTF-8 Strings". Oracle Corporation. 2015. Retrieved 2015-10-16.

^ "The Java Virtual Machine Specification, section 4.4.7: "The CONSTANT_Utf8_info Structure"". Oracle Corporation. 2015. Retrieved 2015-10-16.

^ "ART and Dalvik". Android Open Source Project. Archived from the original on 2013-04-26. Retrieved 2013-04-09.

^ "Tcler's Wiki: UTF-8 bit by bit (Revision 6)". 2009-04-25. Retrieved 2009-05-22.

^ Sapin, Simon (2016-03-11) [2014-09-25]. "The WTF-8 encoding". Archived from the original on 2016-05-24. Retrieved 2016-05-24.

^ Sapin, Simon (2015-03-25) [2014-09-25]. "The WTF-8 encoding Â§ Motivation". Archived from the original on 2016-05-24. Retrieved 2020-08-26.

^ "WTF-8.com". 2006-05-18. Retrieved 2016-06-21.

^ Speer, Robyn (2015-05-21). "ftfy (fixes text for you) 4.0: changing less and fixing more". Archived from the original on 2015-05-30. Retrieved 2016-06-21.

^ "WTF-8, a transformation format of code page 1252". Archived from the original on 2016-10-13. Retrieved 2016-10-12.

^ "PEP 540 -- Add a new UTF-8 Mode". Python.org. Retrieved 2021-03-24.

^ a b von LÃ¶wis, Martin (2009-04-22). "Non-decodable Bytes in System Character Interfaces". Python Software Foundation. PEP 383.

^ "RTFM optu8to16(3), optu8to16vis(3)". www.mirbsd.org.

^ a b Davis, Mark; Suignard, Michel (2014). "3.7 Enabling Lossless Conversion". Unicode Security Considerations. Unicode Technical Report #36.


External links[edit]
Original UTF-8 paper (or pdf) for Plan 9 from Bell Labs
UTF-8 test pages:
Andreas Prilop Archived 2017-11-30 at the Wayback Machine
Jost Gippert
World Wide Web Consortium
Unix/Linux: UTF-8/Unicode FAQ, Linux Unicode HOWTO, UTF-8 and Gentoo
Characters, Symbols and the Unicode Miracle on YouTube
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}vteUnicodeUnicode
Unicode Consortium
ISO/IEC 10646 (Universal Character Set)
Versions
Code points
Block
List
Universal Character Set
Character charts
Character property
Plane
Private Use Area
CharactersSpecial purpose
BOM
Combining grapheme joiner
Left-to-right markÂ / Right-to-left mark
Soft hyphen
Variant form
Word joiner
Zero-width joiner
Zero-width non-joiner
Zero-width space
Lists
Characters
CJK Unified Ideographs
Combining character
Duplicate characters
Numerals
Scripts
Spaces
Symbols
Halfwidth and fullwidth
Alias names and abbreviations
ProcessingAlgorithms
Bidirectional text
Collation
ISO/IEC 14651
Equivalence
Variation sequences
International Ideographs Core
Comparison
BOCU-1
CESU-8
Punycode
SCSU
UTF-1
UTF-7
UTF-8
UTF-16/UCS-2
UTF-32/UCS-4
UTF-EBCDIC
On pairs ofcode points
Combining character
Compatibility characters
Duplicate characters
Equivalence
Homoglyph
Precomposed character
list
Z-variant
Variation sequences
Regional indicator symbol
Emoji skin color
Usage
Domain names (IDN)
Email
Fonts
HTML
entity references
numeric references
Input
International Ideographs Core
Related standards
Common Locale Data Repository (CLDR)
GB 18030
ISO/IEC 8859
ISO 15924
Related topics
Anomalies
ConScript Unicode Registry
Ideographic Research Group
International Components for Unicode
People involved with Unicode
Han unification
Scripts and symbols in UnicodeCommon and inherited scripts
Combining marks
Diacritics
Punctuation
Space
Numbers
Modern scripts
Adlam
Arabic
Armenian
Balinese
Bamum
Batak
Bengali
Bopomofo
Braille
Buhid
Burmese
Canadian Aboriginal
Chakma
Cham
Cherokee
CJK Unified Ideographs (Han)
Cyrillic
Deseret
Devanagari
GeÊ½ez
Georgian
Greek
Gujarati
Gunjala Gondi
Gurmukhi
Hangul
Hanifi Rohingya
Hanja
Hanunuoo
Hebrew
Hiragana
Javanese
Kanji
Kannada
Katakana
Kayah Li
Khmer
Lao
Latin
Lepcha
Limbu
Lisu (Fraser)
Lontara
Malayalam
Masaram Gondi
Mende Kikakui
Medefaidrin
Miao (Pollard)
Mongolian
Mru
N'Ko
New Tai Lue
NÃ¼shu
Nyiakeng Puachue Hmong
Odia
Ol Chiki
Osage
Osmanya
Pahawh Hmong
Pau Cin Hau
Pracalit (Newa)
Ranjana
Rejang
Samaritan
Saurashtra
Shavian
Sinhala
Sorang Sompeng
Sundanese
Syriac
Tagbanwa
Tai Le
Tai Tham
Tai Viet
Tamil
Tangsa
Telugu
Thaana
Thai
Tibetan
Tifinagh
Tirhuta
Toto
Vai
Wancho
Warang Citi
Yi
Ancient andhistoric scripts
Ahom
Anatolian hieroglyphs
Ancient North Arabian
Avestan
Bassa Vah
Bhaiksuki
BrÄhmÄ«
Carian
Caucasian Albanian
Coptic
Cuneiform
Cypriot
Cypro-Minoan
Dives Akuru
Dogra
Egyptian hieroglyphs
Elbasan
Elymaic
Glagolitic
Gothic
Grantha
Hatran
Imperial Aramaic
Inscriptional Pahlavi
Inscriptional Parthian
Kaithi
Kharosthi
Khitan small script
Khojki
Khudawadi
Khwarezmian (Chorasmian)
Linear A
Linear B
Lycian
Lydian
Mahajani
Makasar
Mandaic
Manichaean
Marchen
Meetei Mayek
Meroitic
Modi
Multani
Nabataean
Nandinagari
Ogham
Old Hungarian
Old Italic
Old Permic
Old Persian cuneiform
Old Sogdian
Old Turkic
Old Uyghur
Palmyrene
Ê¼Phags-pa
Phoenician
Psalter Pahlavi
Runic
Sharada
Siddham
Sogdian
South Arabian
Soyombo
Sylheti Nagri
Tagalog (Baybayin)
Takri
Tangut
Ugaritic
Vithkuqi
Yezidi
Zanabazar Square
Notational scripts
Duployan
SignWriting
Symbols, emojis
Cultural, political, and religious symbols
Currency
Mathematical operators and symbols
Phonetic symbols (including IPA)
Emoji

Â Category: Unicode
Â Category: Unicode blocks

vteCharacter encodingsEarly telecommunications
Telegraph code
Needle
Morse
Non-Latin
Wabun/Kana
Chinese
Cyrillic
Korean
Baudot and Murray
Fieldata
ASCII
ISO/IEC 646
BCDIC
Teletex and Videotex/Teletext
T.51/ISO/IEC 6937
ITU T.61
ITU T.101
World System Teletext
background
sets
ISO/IEC 8859
Approved parts
-1 (Western Europe)
-2 (Central Europe)
-3 (Maltese/Esperanto)
-4 (North Europe)
-5 (Cyrillic)
-6 (Arabic)
-7 (Greek)
-8 (Hebrew)
-9 (Turkish)
-10 (Nordic)
-11 (Thai)
-13 (Baltic)
-14 (Celtic)
-15 (New Western Europe)
-16 (Romanian)
Abandoned parts
-12 (Devanagari)
Proposed but notÂ approved
KOI-8 Cyrillic
SÃ¡mi
Adaptations
Welsh
Barents Cyrillic
Estonian
Ukrainian Cyrillic
Bibliographic use
MARC-8
ANSEL
CCCII/EACC
ISO 5426
5426-2
5427
5428
6438
6862
National standards
ArmSCII
BraSCII
CNS 11643
DIN 66003
ELOT 927
GOST 10859
GB 2312
GB 12052
GB 18030
HKSCS
ISCII
JIS X 0201
JIS X 0208
JIS X 0212
JIS X 0213
KOI-7
KPS 9566
KS X 1001
KS X 1002
LST 1564
LST 1590-4
PASCII
Shift JIS
SI 960
TIS-620
TSCII
VISCII
VSCII
YUSCII
ISO/IEC 2022
ISO/IEC 8859
ISO/IEC 10367
Extended Unix Code / EUC
Mac OS Code pages("scripts")
Armenian
Arabic
Barents Cyrillic
Celtic
Central European
Croatian
Cyrillic
Devanagari
Farsi (Persian)
Font X (Kermit)
Gaelic
Georgian
Greek
Gujarati
Gurmukhi
Hebrew
Iceland
Inuit
Keyboard
Latin (Kermit)
Maltese/Esperanto
Ogham
Roman
Romanian
SÃ¡mi
Turkish
Turkic Cyrillic
Ukrainian
VT100
DOS code pages
437
668
708
720
737
770
773
775
776
777
778
850
851
852
853
855
856
857
858
859
860
861
862
863
864
865
866
867
868
869
897
899
903
904
932
936
942
949
950
951
1040
1042
1043
1046
1098
1115
1116
1117
1118
1127
3846
ABICOMP
CS Indic
CSX Indic
CSX+ Indic
CWI-2
Iran System
KamenickÃ½
Mazovia
MIK
IBM AIX code pages
895
896
912
915
921
922
1006
1008
1009
1010
1012
1013
1014
1015
1016
1017
1018
1019
1124
1133
Windows code pages
CER-GS
932
936 (GBK)
950
1169
Extended Latin-8
1250
1251
1252
1253
1254
1255
1256
1257
1258
1270
Cyrillic + Finnish
Cyrillic + French
Cyrillic + German
Polytonic Greek
EBCDIC code pages
37
Japanese language in EBCDIC
DKOI
DEC terminals (VTx)
Multinational (MCS)
National Replacement (NRCS)
French Canadian
Swiss
Spanish
United Kingdom
Dutch
Finnish
French
Norwegian and Danish
Swedish
Norwegian and Danish (alternative)
8-bit Greek
8-bit Turkish
SI 960
Hebrew
Special Graphics
Technical (TCS)
Platform specific
1057
Acorn
Adobe Standard
Adobe Latin 1
Amstrad CPC
Apple II
ATASCII
Atari ST
BICS
Casio calculators
CDC
Compucolor II
CP/M+
DEC RADIX 50
DEC MCS/NRCS
DG International
Fieldata
GEM
GSM 03.38
HP Roman
HP FOCAL
HP RPL
SQUOZE
LICS
LMBCS
MSX
NEC APC
NeXT
PETSCII
Sega SC-3000
Sharp calculators
Sharp MZ
Sinclair QL
Symbol
Teletext
TI calculators
TRS-80
Ventura International
WISCII
XCCS
ZX80
ZX81
ZX Spectrum
UnicodeÂ / ISO/IEC 10646
UTF-1
UTF-7
UTF-8
UTF-16
UTF-32
UTF-EBCDIC
GB 18030
BOCU-1
CESU-8
SCSU
TACE16
Comparison of Unicode encodings
TeX typesetting system
Cork
LY1
OML
OMS
OT1
Miscellaneous code pages
ABICOMP
ASMO 449
Big5
Digital encoding of APL symbols
ISO-IR-68
ARIB STD-B24
HZ
IEC-P27-1
INIS
7-bit
8-bit
ISO-IR-169
ISO 2033
KOI
KOI8-R
KOI8-RU
KOI8-U
MojikyÅ
SEASCII
Stanford/ITS
TRON
Unified Hangul Code
Control character
Morse prosigns
C0 and C1 control codes
ISO/IEC 6429
JIS X 0211
Unicode control, format and separator characters
Whitespace characters
Related topics
CCSID
Character encodings in HTML
Charset detection
Han unification
Hardware code page
MICR code
Mojibake
Variable-width encoding
 Character sets
vteRob PikeOperating systems
Plan 9 from Bell Labs
Inferno
Programming languages
Newsqueak
Limbo
Sawzall
Go
Software
acme
Blit
sam
rio
8Â½
Publications
The Practice of Programming
The Unix Programming Environment
Other
RenÃ©e French
Mark V. Shaney
UTF-8

vteKen ThompsonOperating systems
Unix
Plan 9 from Bell Labs
Inferno
Programming languages
B
Go
Software
Belle
ed
grep
sam
Space Travel
Thompson shell
Other
UTF-8





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=UTF-8&oldid=1067685939"
		Categories: Character encodingComputer-related introductions in 1993EncodingsUnicode Transformation FormatsHidden categories: CS1 Japanese-language sources (ja)CS1 errors: missing periodicalCS1 maint: url-statusArticles with short descriptionShort description matches WikidataAll articles with unsourced statementsArticles with unsourced statements from March 2016Articles with unsourced statements from August 2020Articles containing potentially dated statements from January 2022All articles containing potentially dated statementsArticles with unsourced statements from June 2021All articles that may contain original researchArticles that may contain original research from August 2020Articles with unsourced statements from September 2020Articles with trivia sections from August 2020All articles with trivia sectionsWebarchive template wayback links
	
