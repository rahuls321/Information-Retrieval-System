
Title:
Database design
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Designing how data is held in a database
It has been suggested that this article be merged into Data modeling. (Discuss) Proposed since June 2021.
Database design is the organization of data according to a database model. The designer determines what data must be stored and how the data elements interrelate. With this information, they can begin to fit the data to the database model.[1]
Database management system manages the data accordingly.
Database design involves classifying data and identifying interrelationships. This theoretical representation of the data is called an ontology. The ontology is the theory behind the database's design.

Contents

1 Determining data to be stored
2 Determining data relationships
3 Logically structuring data
4 ER diagram (entity-relationship model)
5 A design process suggestion for Microsoft Access
6 Normalization
7 Conceptual schema
8 Physical design
9 See also
10 References
11 Further reading
12 External links



Determining data to be stored[edit]
In a majority of cases, a person who is doing the design of a database is a person with expertise in the area of database design, rather than expertise in the domain from which the data to be stored is drawn e.g. financial information, biological information etc. Therefore, the data to be stored in the database must be determined in cooperation with a person who does have expertise in that domain, and who is aware of what data must be stored within the system.
This process is one which is generally considered part of requirements analysis, and requires skill on the part of the database designer to elicit the needed information from those with the domain knowledge. This is because those with the necessary domain knowledge frequently cannot express clearly what their system requirements for the database are as they are unaccustomed to thinking in terms of the discrete data elements which must be stored. Data to be stored can be determined by Requirement Specification.[2]

Determining data relationships[edit]
Once a database designer is aware of the data which is to be stored within the database, they must then determine where dependency is within the data. Sometimes when data is changed you can be changing other data that is not visible. For example, in a list of names and addresses, assuming a situation where multiple people can have the same address, but one person cannot have more than one address, the address is dependent upon the name. When provided a name and the list the address can be uniquely determined; however, the inverse does not hold - when given an address and the list, a name cannot be uniquely determined because multiple people can reside at an address.  Because an address is determined by a name, an address is considered dependent on a name.
(NOTE: A common misconception is that the relational model is so called because of the stating of relationships between data elements therein. This is not true. The relational model is so named because it is based upon the mathematical structures known as relations.)

Logically structuring data[edit]
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}Main article: Logical schema
Once the relationships and dependencies amongst the various pieces of information have been determined, it is possible to arrange the data into a logical structure which can then be mapped into the storage objects supported by the database management system. In the case of relational databases the storage objects are tables which store data in rows and columns. In an Object database the storage objects correspond directly to the objects used by the Object-oriented programming language used to write the applications that will manage and access the data. The relationships may be defined as attributes of the object classes involved or as methods that operate on the object classes.
The way this mapping is generally performed is such that each set of related data which depends upon a single object, whether real or abstract, is placed in a table. Relationships between these dependent objects is then stored as links between the various objects.
Each table may represent an implementation of either a logical object or a relationship joining one or more instances of one or more logical objects. Relationships between tables may then be stored as links connecting child tables with parents. Since complex logical relationships are themselves tables they will probably have links to more than one parent.

ER diagram (entity-relationship model)[edit]
  A sample Entity-relationship diagram
Database designs also include ER (entity-relationship model) diagrams. An ER diagram is a diagram that helps to design databases in an efficient way.
Attributes in ER diagrams are usually modeled as an oval with the name of the attribute, linked to the entity or relationship that contains the attribute.
ER models are commonly used in information system design; for example, they are used to describe information requirements and / or the types of information to be stored in the database during the conceptual structure design phase.[3]

A design process suggestion for Microsoft Access[edit]
Determine the purpose of the database - This helps prepare for the remaining steps.
Find and organize the information required - Gather all of the types of information to record in the database, such as product name and order number.
Divide the information into tables - Divide information items into major entities or subjects, such as Products or Orders. Each subject then becomes a table.
Turn information items into columns - Decide what information needs to be stored in each table. Each item becomes a field, and is displayed as a column in the table. For example, an Employees table might include fields such as Last Name and Hire Date.
Specify primary keys - Choose each table's primary key. The primary key is a column, or a set of columns, that is used to uniquely identify each row. An example might be Product ID or Order ID.
Set up the table relationships - Look at each table and decide how the data in one table is related to the data in other tables. Add fields to tables or create new tables to clarify the relationships, as necessary.
Refine the design - Analyze the design for errors. Create tables and add a few records of sample data. Check if results come from the tables as expected. Make adjustments to the design, as needed.
Apply the normalization rules - Apply the data normalization rules to see if tables are structured correctly. Make adjustments to the tables, as needed.
[4]

Normalization[edit]
Main article: Database normalization
In the field of relational database design, normalization is a systematic way of ensuring that a database structure is suitable for general-purpose querying and free of certain undesirable characteristicsâinsertion, update, and deletion anomalies that could lead to  loss of data integrity.
A standard piece of database design guidance is that the designer should create a fully normalized design; selective denormalization can subsequently be performed, but only for performance reasons. The trade-off is storage space vs performance. The more normalized the design is, the less data redundancy there is (and therefore, it takes up less space to store), however, common data retrieval patterns may now need complex joins, merges, and sorts to occur - which takes up more data read, and compute cycles. Some modeling disciplines, such as the dimensional modeling approach to data warehouse design, explicitly recommend non-normalized designs, i.e. designs that in large part do not adhere to 3NF.
Normalization consists of normal forms that are 1NF,2NF,3NF,BOYCE-CODD NF (3.5NF),4NF and 5NF
Document databases take a different approach. A document that is stored in such a database, typically would contain more than one normalized data unit and often the relationships between the units as well. If all the data units and the relationships in question are often retrieved together, then this approach optimizes the number of retrieves. It also simplifies how data gets replicated, because now there is a clearly identifiable unit of data whose consistency is self-contained. Another consideration is that reading and writing a single document in such databases will require a single transaction - which can be an important consideration in a Microservices architecture. In such situations, often, portions of the document are retrieved from other services via an API and stored locally for efficiency reasons. If the data units were to be split out across the services, then a read (or write) to support a service consumer might require more than one service calls, and this could result in management of multiple transactions, which may not be preferred.

Conceptual schema[edit]
Main article: Conceptual schema
Physical design[edit]
Main article: Physical schema
The physical design of the database specifies the physical configuration of the database on the storage media. This includes detailed specification of data elements, data types, indexing options and other parameters residing in the DBMS data dictionary. It is the detailed design of a system that includes modules & the database's hardware & software specifications of the system. Some aspects that are addressed at the physical layer:

Security - end-user, as well as administrative security.
Replication - what pieces of data get copied over into another database, and how often. Are there multiple-masters, or a single one?
High-availability - whether the configuration is active-passive, or active-active, the topology, coordination scheme, reliability targets, etc all have to be defined.
Partitioning - if the database is distributed, then for a single entity, how is the data distributed amongst all the partitions of the database, and how is partition failure taken into account.
Backup and restore schemes.
At the application level, other aspects of the physical design can include the need to define stored procedures, or materialized query views, OLAP cubes, etc.

See also[edit]
.mw-parser-output .div-col{margin-top:0.3em;column-width:30em}.mw-parser-output .div-col-small{font-size:90%}.mw-parser-output .div-col-rules{column-rule:1px solid #aaa}.mw-parser-output .div-col dl,.mw-parser-output .div-col ol,.mw-parser-output .div-col ul{margin-top:0}.mw-parser-output .div-col li,.mw-parser-output .div-col dd{page-break-inside:avoid;break-inside:avoid-column}
Database normalization
Relational database
Relational model
POOD (Principle of orthogonal design)
The Third Manifesto
Concept mapping
Data modeling
Entity-relationship model
Entity-attribute-value model
Object-relationship modeling
Object-role modeling
Knowledge representation
Logical data model
Mindmap
Physical data model
Semantic Web
Three schema approach
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ Teorey, T.J., Lightstone, S.S., et al., (2009). Database Design: Know it all.1st ed. Burlington, MA.: Morgan Kaufmann Publishers

^ Teorey, T.; Lightstone, S. and Nadeau, T.(2005) Database Modeling & Design: Logical Design, 4th edition, Morgan Kaufmann Press. .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}ISBNÂ 0-12-685352-5

^ Javed, Muhammad; Lin, Yuqing (2018). "Iterative Process for Generating ER Diagram from Unrestricted Requirements". Proceedings of the 13th International Conference on Evaluation of Novel Approaches to Software Engineering. SCITEPRESS - Science and Technology Publications: 192â204. doi:10.5220/0006778701920204. ISBNÂ 978-989-758-300-1.

^ Database design basics. (n.d.). Database design basics. Retrieved May 1, 2010, from https://support.office.com/en-US/article/Database-design-basics-EB2159CF-1E30-401A-8084-BD4F9C9CA1F5


Further reading[edit]
S. Lightstone, T. Teorey, T. Nadeau, âPhysical Database Design: the database professional's guide to exploiting indexes, views, storage, and moreâ, Morgan Kaufmann Press, 2007. ISBNÂ 0-12-369389-6
M. Hernandez, "Database Design for Mere Mortals: A Hands-On Guide to Relational Database Design", 3rd Edition, Addison-Wesley Professional, 2013. ISBNÂ 0-321-88449-3
External links[edit]
[1]
[2]
Database Normalization Basics by Mike Chapple (About.com)
Database Normalization Intro, Part 2
"An Introduction to Database Normalization". Archived from the original on 2011-06-06. Retrieved 2012-02-25.
"Normalization". Archived from the original on 2010-01-06. Retrieved 2012-02-25.
Database design at Curlie
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}show.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteDatabaseMain
Requirements
Theory
Models
Database management system
Machine
Server
Application
Connection
datasource
DSN
Administrator
Lock
Types
Tools
Languages
Data definition
Data manipulation
Query
information retrieval
Security
Activity monitoring
Audit
Forensics
Negative database
Design
Entities and relationships (and Enhanced notation)
Normalization
Schema
Refactoring
Cardinality
Programming
Abstraction layer
Objectârelational mapping
Management
Virtualization
Tuning
caching
Migration
Preservation
Integrity
See also
Database-centric architecture
Intelligent database
Two-phase locking
Locks with ordered sharing
Load file
Publishing
Halloween Problem
Log shipping

 Category
 WikiProject

showvteDatabase management systemsTypes
Object-oriented
comparison
Relational
list
comparison
Keyâvalue
Column-oriented
list
Document-oriented
Wide-column store
Graph
NoSQL
NewSQL
In-memory
list
Multi-model
comparison
Cloud
Concepts
Database
ACID
Armstrong's axioms
Codd's 12 rules
CAP theorem
CRUD
Null
Candidate key
Foreign key
Superkey
Surrogate key
Unique key
Objects
Relation
table
column
row
View
Transaction
Transaction log
Trigger
Index
Stored procedure
Cursor
Partition
Components
Concurrency control
Data dictionary
JDBC
XQJ
ODBC
Query language
Query optimizer
Query rewriting system
Query plan
Functions
Administration
Query optimization
Replication
Sharding
Related topics
Database models
Database normalization
Database storage
Distributed database
Federated database system
Referential integrity
Relational algebra
Relational calculus
Relational database
Relational model
Objectârelational database
Transaction processing

 Category
 Outline
 WikiProject

showvteDesign
Outline
Designer
showDisciplinesCommunicationdesign
Advertising
Book design
Brand design
Exhibit design
Film title design
Graphic design
Motion
Postage stamp design
Print design
Illustration
Information design
Instructional design
News design
Photography
Retail design
SignageÂ / Traffic sign design
TypographyÂ / Type design
Video design
Visual merchandising
Environmentaldesign
Architecture
Architectural lighting design
Building design
Passive solar
Ecological design
Environmental impact design
Garden design
Computer-aided
Healthy community design
Hotel design
Interior architecture
Interior design
EID
Keyline design
Landscape architecture
Sustainable
Landscape design
Spatial design
Urban design
Industrialdesign
Automotive design
Automotive suspension design
CMF design
Corrugated box design
Electric guitar design
Furniture design
Sustainable
Hardware interface design
Motorcycle design
Packaging and labeling
Photographic lens design
Product design
Production design
Sensory design
Service design
Interactiondesign
Experience design
EED
Game design
Level design
Video game design
Hardware interface design
Icon design
Immersive design
Information design
Sonic interaction design
User experience design
User interface design
Web design
Otherapplied arts
Public art design
CeramicÂ / glass design
Fashion design
Costume design
Jewellery design
Floral design
Game art design
Property design
Scenic design
Sound design
Stage/set lighting design
Textile design
Otherdesign& engineering
Algorithm design
Behavioural design
Boiler design
Database design
Drug design
Electrical system design
Experimental design
Filter design
Geometric design
Work design
Integrated circuit design
Circuit design
Physical design
Power network design
Mechanism design
Nuclear weapon design
Nucleic acid design
Organization design
Process design
Processor design
Protein design
Research design
Social design
Software design
Spacecraft design
Strategic design
Systems design
showApproaches
Activity-centered
Adaptive web
Affective
Brainstorming
By committee
By contract
C-K theory
Closure
Co-design
Concept-oriented
Configuration
Contextual
Continuous
Cradle-to-cradle
Creative problem-solving
Creativity techniques
Critical
Design fiction
Defensive
Designâbidâbuild
Designâbuild
architect-led
Diffuse
Domain-driven
Ecological design
Energy neutral
Engineering design process
Probabilistic design
Error-tolerant
Fault-tolerant
Framework-oriented
For assembly
For behaviour change
For manufacturability
For Six Sigma
For testing
For X
Functional
Generative
Geodesign
HCD
High-level
Inclusive
Integrated
Integrated topside
Intelligence-based
Iterative
KISS principle
Low-level
Metadesign
Mind mapping
Modular
New Wave
Object-oriented
Open
Parametric
Participatory
Platform-based
Policy-based
Process-centered
Public interest
Rational
Regenerative
Reliability engineering
Research-based
Responsibility-driven
RWD
Safe-life
Sustainable
Systemic
SOD
Tableless web
Theory of constraints
Top-down and bottom-up
Transformation
Transgenerational
TRIZ
Universal
Design for All
Usage-centered
Use-centered
User-centered
Empathic
User innovation
Value-driven
Value sensitive
Privacy by
Design choice
computing
controls
culture
flow
leadership
management
marker
methods
pattern
research
science
sprint
strategy
theory
thinking
showToolsIntellectual propertyOrganizationsAwardsTools
AAD
Architectural model
Blueprint
Comprehensive layout
CAD
CAID
Virtual home design software
CAutoD
Design quality indicator
Electronic design automation
Flowchart
Mockup
Design specification
Prototype
Sketch
Storyboard
Technical drawing
HTML editor
Website wireframe
Intellectualproperty
Community design
Design around
Design infringement
Design patent
Fashion design copyright
Geschmacksmuster
Industrial design rights
European Union
Organizations
American Institute of Graphic Arts
Chartered Society of Designers
Design and Industries Association
Design Council
International Forum Design
The Design Society
Design Research Society
Awards
European Design Award
German Design Award
Good Design Award (Museum of Modern Art)
Good Design Award (Chicago Athenaeum)
Graphex
IF Product Design Award
James Dyson Award
Prince Philip Designers Prize
showRelated topics
Aesthetics
Agile
Concept art
Conceptual design
Creative industries
Cultural icon
.design
Enterprise architecture
Form factor
Futures studies
Indie design
Innovation management
Intelligent design
Lean startup
New product development
OODA loop
Philosophy of design
Process simulation
Slow design
STEAM fields
Unintelligent design
Visualization
Wicked problem
Design brief
change
classic
competition
architectural
student
director
education
elements and principles
engineer
firm
history
knowledge
language
life
load
museum
paradigm
rationale
review
specification
studies
studio
technology

 Commons    
 Wikibooks  
 Wikinews   
 Wikiquote  
 Wikisource 
 Wiktionary 





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Database_design&oldid=1068582602"
		Categories: Database management systemsDatabasesDatabase theoryHidden categories: Articles with short descriptionShort description is different from WikidataArticles to be merged from June 2021All articles to be mergedArticles with Curlie links
	
