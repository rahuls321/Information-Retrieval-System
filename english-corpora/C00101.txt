
Title:
Computer program
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Instructions to be executed by a computer
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}For the TV program, see The Computer Programme..mw-parser-output .sidebar{width:22em;float:right;clear:right;margin:0.5em 0 1em 1em;background:#f8f9fa;border:1px solid #aaa;padding:0.2em;text-align:center;line-height:1.4em;font-size:88%;border-collapse:collapse;display:table}body.skin-minerva .mw-parser-output .sidebar{display:table!important;float:right!important;margin:0.5em 0 1em 1em!important}.mw-parser-output .sidebar-subgroup{width:100%;margin:0;border-spacing:0}.mw-parser-output .sidebar-left{float:left;clear:left;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-none{float:none;clear:both;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-outer-title{padding:0 0.4em 0.2em;font-size:125%;line-height:1.2em;font-weight:bold}.mw-parser-output .sidebar-top-image{padding:0.4em}.mw-parser-output .sidebar-top-caption,.mw-parser-output .sidebar-pretitle-with-top-image,.mw-parser-output .sidebar-caption{padding:0.2em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-pretitle{padding:0.4em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-title,.mw-parser-output .sidebar-title-with-pretitle{padding:0.2em 0.8em;font-size:145%;line-height:1.2em}.mw-parser-output .sidebar-title-with-pretitle{padding:0.1em 0.4em}.mw-parser-output .sidebar-image{padding:0.2em 0.4em 0.4em}.mw-parser-output .sidebar-heading{padding:0.1em 0.4em}.mw-parser-output .sidebar-content{padding:0 0.5em 0.4em}.mw-parser-output .sidebar-content-with-subgroup{padding:0.1em 0.4em 0.2em}.mw-parser-output .sidebar-above,.mw-parser-output .sidebar-below{padding:0.3em 0.8em;font-weight:bold}.mw-parser-output .sidebar-collapse .sidebar-above,.mw-parser-output .sidebar-collapse .sidebar-below{border-top:1px solid #aaa;border-bottom:1px solid #aaa}.mw-parser-output .sidebar-navbar{text-align:right;font-size:115%;padding:0 0.4em 0.4em}.mw-parser-output .sidebar-list-title{padding:0 0.4em;text-align:left;font-weight:bold;line-height:1.6em;font-size:105%}.mw-parser-output .sidebar-list-title-c{padding:0 0.4em;text-align:center;margin:0 3.3em}@media(max-width:720px){body.mediawiki .mw-parser-output .sidebar{width:100%!important;clear:both;float:none!important;margin-left:0!important;margin-right:0!important}}Program execution
General concepts
Code
Translation
Compiler
Compile-time
Optimizing compiler
Intermediate representation (IR)
Execution
Runtime system
Runtime
Executable
Interpreter
Virtual machine

Types of code
Source code
Object code
Bytecode
Machine code
Microcode

Compilation strategies
Just-in-time (JIT)
Tracing just-in-time
Ahead-of-time (AOT)
Transcompilation
Recompilation

Notable runtimes
Android Runtime (ART)
Common Language Runtime (CLR) andÂ Mono
crt0
Java virtual machine (JVM)
Objective-C andÂ Swift
V8 andÂ Node.js
CPython andÂ PyPy
Zend Engine (PHP)

Notable compilers & toolchains
GNU Compiler Collection (GCC)
LLVM andÂ Clang
.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vte
In imperative programming, a computer program is a sequence of instructions in a programming language that a computer can execute or interpret.[1] In declarative programming, a computer program is a set of instructions.
A computer program in its human-readable form is called source code. Source code needs another computer program to execute because computers can only execute their native machine instructions. Therefore, source code may be translated to machine instructions using the language's compiler. (Machine language programs are translated using an assembler.) The resulting file is called an executable. Alternatively, source code may execute within the language's interpreter. The programming language Java compiles into an a intermediate form which is then executed by a Java interpreter.[2]
If the executable is requested for execution, then the operating system loads it into memory and starts a process.[3] The central processing unit will soon switch to this process so it can fetch, decode, and then execute each machine instruction.[4]
If the source code is requested for execution, then the operating system loads the corresponding interpreter into memory and starts a process. The interpreter then loads the source code into memory to translate and execute each statement.[2] Running the source code is slower than running an executable. Moreover, the interpreter must be installed on the computer.

Contents

1 History

1.1 Analytical Engine
1.2 Universal Turing machine
1.3 Relay-based computers
1.4 ENIAC
1.5 Stored-program computers
1.6 Very Large Scale Integration
1.7 Sac State 8008
1.8 x86 series


2 Programming languages

2.1 Hello world program
2.2 Generation of programming languages
2.3 Imperative languages

2.3.1 Fortran
2.3.2 COBOL
2.3.3 Algol
2.3.4 Basic
2.3.5 C
2.3.6 C++


2.4 Declarative languages

2.4.1 Lisp
2.4.2 ML
2.4.3 Prolog




3 Program modules

3.1 Cohesion
3.2 Coupling
3.3 Data flow analysis
3.4 Object-oriented programming


4 Functional categories

4.1 Application software
4.2 Operating system

4.2.1 Kernel Program
4.2.2 Interrupts


4.3 Utility program
4.4 Boot program
4.5 Embedded program
4.6 Microcode program


5 See also
6 References



History[edit]
See also: Computer programming Â§Â History, Programmer Â§Â History, History of computing, History of programming languages, and History of software
Analytical Engine[edit]
  Lovelace's diagram from Note G, the first published computer algorithm
In 1837, Charles Babbage was inspired by Jacquard's loom to attempt to build the Analytical Engine.[5]
The names of the components of the calculating device were borrowed from the textile industry. In the textile industry, yarn was brought from the store to be milled. The device had a "store" which was memory to hold 1,000 numbers of 50 decimal digits each.[6] Numbers from the "store" were transferred to the "mill" for processing. It was programmed using two sets of perforated cards. One set to direct the operation and the other for the input variables.[5]
[7] However, after more than 17,000 pounds of the British government's money, the thousands of cogged wheels and gears never fully worked together.[8]
Ada Lovelace worked for Charles Babbage to create a description of the Analytical Engine (1843).[9] The description contained Note G which completely detailed a method for calculating Bernoulli numbers using the Analytical Engine. This note is recognized by some historians as the world's first published computer program.

Universal Turing machine[edit]

In 1936, Alan Turing introduced the Universal Turing machineâa theoretical device that can model every computation that can be performed on a Turing complete computing machine.[10]
It is a finite-state machine that has an infinitely long read/write tape. The machine can move the tape back and forth, changing its contents as it performs an algorithm. The machine starts in the initial state, goes through a sequence of steps, and halts when it encounters the halt state.[11]

Relay-based computers[edit]
The Z3 computer, invented by Konrad Zuse (1941), was a digital and programmable computer.[12] Zuse became aware of the "Babbage Engine" in 1939 while attempting to file a German patent.[12] The Analytical Engine was base-10 â which was easy to comprehend. Zuse recognized that a binary machine was easy to construct. Telephone relays are two-position switches â open or closed. The Z3 had approximately 2,600 relays: 1,800 for the memory, 600 for the arithmetic, and 200 for the punch tape reader, keyboard, and display.[12] The circuits provided a floating-point, nine-instruction computer. Programming the Z3 was through a specially designed keyboard and punch tape. Manual input was through a calculator-style keyboard that accepted decimal numbers. The machine converted the input to binary and passed them through a series of calculating modules.[8] The result was converted back to decimal and displayed on an output panel.[12]
Simultaneously developed was its successor â the Z4 computer. (An air-raid on April 6, 1945 destroyed the Z3.) In 1950, the Z4 was placed into production at the Federal Technical Institute in Zurich.
The Harvard Mark I, invented by IBM (1944), also was a digital and programmable computer.[13] The computer supported 23 signed integer digits and had seven major units:[14]

One unit had 60 sets of dial switches that were used to set application constants.
One unit was used to direct the machine's operations.
One unit performed addition and subtraction and had 72 registers used to store the intermediate results.
One unit was used to perform multiplication and division.
One unit was used to calculate trigonometric  functions using interpolation.
One unit was used to calculate logarithmic functions using interpolation.
One unit was used to direct the machine's output medium â either typewriter printer or punched card printer.
The Harvard Mark I had 3,304 relays and 530 miles of wire.[15] Two punched tape readers provided input.[13] One reader inputted the instructions. A code book was written by Howard H. Aiken that indexed the available algorithms. From this book, a programmer punched the coded instructions onto a tape. The other reader inputted the data to be processed.
The Harvard Mark I was succeeded by IBM's two other relay-based computers:

the Harvard Mark II.
the Selective Sequence Electronic Calculator (SSEC). The SSEC operated until August 1952.
ENIAC[edit]
  Glenn A. Beck is changing a tube in ENIAC.
The Electronic Numerical Integrator And Computer (ENIAC) was built between July 1943 and Fall 1945. It was a Turing complete, general-purpose computer that used 17,468 vacuum tubes to create the circuits. At its core, it was a series of Pascalines wired together.[16] Its 40 units weighed 30 tons, occupied 1,800 square feet (167Â m2), and consumed $650 per hour (in 1940s currency) in electricity when idle.[16] It had 20 base-10 accumulators. Programming the ENIAC took up to two months.[16] Three function tables were on wheels and needed to be rolled to fixed function panels. Function tables were connected to function panels using heavy black cables. Each function table had 728 rotating knobs. Programming the ENIAC also involved setting some of the 3,000 switches. Debugging a program took a week.[17] It ran from 1947 until 1955 at Aberdeen Proving Ground, calculating hydrogen bomb parameters, predicting weather patterns, and producing firing tables to aim artillery guns.[18]

Stored-program computers[edit]
Instead of plugging in cords and turning switches, a stored-program computer loads its instructions into memory just like it loads its data into memory.[19] As a result, the computer could be programmed quickly and perform calculations at very fast speeds.[20] Presper Eckert and John Mauchly built the ENIAC. The two engineers introduced the stored-program concept in a three-page memo dated February 1944.[21] Later, in September 1944, Dr. John von Neumann began working on the ENIAC project. On June 30, 1945, von Neumann published the First Draft of a Report on the EDVAC which equated the structures of the computer with the structures of the human brain.[20] The design became known as the von Neumann architecture. The architecture was simultaneously deployed in the constructions of the EDVAC and EDSAC computers in 1949.[22]
In 1961, the Burroughs B5000 was built specifically to be programmed in the Algol 60 language. The hardware featured circuits to ease the compile phase.[23]
In 1964, the IBM System/360 was a line of six computers each having the same instruction set architecture. The Model 30 was the smallest and least expensive. Customers could upgrade and retain the same application software.[24] The Model 75 was the most premium.  Each System/360 model featured multiprogramming[24] â having multiple processes in memory at once. When one process was waiting for input/output, another could compute.
IBM planned for each model to be programmed using PL/1.[25] A committee was formed that included COBOL, Fortran and ALGOL programmers. The purpose was to develop a language that was comprehensive, easy to use, extendible, and would replace Cobol and Fortran.[25] The result was a large and complex language that took a long time to compile.[26]

  Switches for manual input on a Data General Nova 3, manufactured in the mid-1970s
Computers manufactured until the 1970s had front-panel switches for manual programming.[27] The computer program was written on paper for reference. An instruction was represented by a configuration of on/off settings. After setting the configuration, an execute button was pressed. This process was then repeated. Computer programs also were automatically inputted via paper tape or punched cards. After the medium was loaded, the starting address was set via switches, and the execute button was pressed.[27]

Very Large Scale Integration[edit]
A major milestone in software development was the invention of the Very Large Scale Integration (VLSI) circuit (1964).[28] Following World War II, tube based technology was replaced with transistors on a circuit board.[28] During the 1960s, the aerospace industry replaced the circuit board with a single integrated circuit chip.[28]
Originally, integrated circuit chips had their function set during manufacturing. During the 1960s, controlling the electrical flow migrated to programming a matrix of read-only memory (ROM). The matrix resembled a two dimensional array of fuses.[28] The process to embed instructions onto the matrix was to burn out the unneeded connections.[28] There were so many connections, firmware programmers wrote a microcode computer program on another chip to oversee the burning. The technology became known as Programmable ROM. In 1971, an entire micro-programmable computer (microprocessor) was fitted onto a single Intel 4004 chip.[29]

Sac State 8008[edit]
The Intel 4004 was a 4-bit microprocessor and functioned to run the Busicom calculator. Five months after its release, Intel released the Intel 8008 â an 8-bit microprocessor. Bill Pentz led a team at Sacramento State to build the first computer using the Intel 8008 â the Sac State 8008 (1972).[30] Its purpose was to store patient medical records. The computer supported a disk operating system to run a Memorex 3-megabyte hard disk drive.[28] It had a color display and keyboard that was packaged in a single console. The disk operating system was programmed using IBM's Basic Assembly Language (BAL). The medical records application was programmed using a BASIC interpreter.[28] However, the computer was an evolutionary dead-end because it was extremely expensive. Also, it was built at a public university lab for a specific purpose.[30] Nonetheless, the project contributed to the development of the Intel 8080 (1974) instruction set.[28]

x86 series[edit]
  The IBM Personal Computer
In 1978, the modern software development environment began when Intel upgraded the Intel 8080 to the Intel 8086. Intel simplified the Intel 8086 to manufacture the cheaper Intel 8088.[31] IBM embraced the Intel 8088 when they entered the personal computer market (1981). As consumer demand for personal computers increased, so did Intel's microprocessor development. The succession of development is known as the x86 series. The x86 assembly language is a family of backward-compatible machine instructions. Machine instructions created in earlier microprocessors were retained throughout microprocessor upgrades. This enabled consumers to purchase new computers without having to purchase new application software.  The major categories of instructions are:

Memory instructions to set and access integers and strings in random-access memory.
Integer arithmetic logic unit (ALU) instructions to perform the primary arithmetic operations on integers.
Floating point ALU instructions to perform the primary arithmetic operations on real numbers.
Call stack instructions to push and pop words needed to allocate memory and interface with functions.
Single instruction, multiple data (SIMD) instructions to increase speed when multiple processors are available to perform the same algorithm on an array of data.
Programming languages[edit]
Main article: Programming language
Computer programming (also known as software development and software engineering) is the process of writing or editing source code. In a formal  environment, a systems analyst will gather information from managers about all the organization's processes to automate. This professional then prepares a detailed plan for the new or modified system.[32] The plan is analogous to an architect's blueprint.[32] A computer programmer is a specialist responsible for writing or modifying the source code to implement the detailed plan.[32]

Hello world program[edit]
  "Hello, World!" computer program by Brian Kernighan (1978)
The "Hello, World!" program is a few instructions used to illustrate the basic output rules of a programming language.
A programming language is a set of keywords, symbols, identifiers, and rules by which programmers can communicate instructions to the computer.[33] They follow a set of rules called a syntax.[33]

Keywords are reserved words to form declarations and statements.
Symbols are characters to form operations, assignments, control flow, and delimiters.
Identifiers are words created by programmers to form constants, variable names, structure names, and function names.
Syntax Rules are defined in the BackusâNaur form.
Programming languages get their basis from formal languages.[34] The purpose of defining a solution in terms of its formal language is to generate an algorithm to solve the underlining problem.[34] An algorithm is a sequence of simple instructions that solve a problem.[35]

Generation of programming languages[edit]
The evolution of programming languages began when the EDSAC (1949) used the first stored computer program in its von Neumann architecture.[36] Programming the EDSAC was in the first generation of programming languages.

The first generation of programming languages is machine language.[37] Machine language requires the programmer to enter instructions using instruction numbers called machine code. For example, the ADD operation on the PDP-11 has instruction number 24576.[38]
The second generation of programming languages is assembly language.[37] Assembly language allows the programmer to use mnemonic instructions instead of remembering instruction numbers. An assembler translates each assembly language mnemonic into its machine language number. For example, on the PDP-11, the operation 24576 can be referenced as ADD in the source code.[38] The four basic arithmetic operations have assembly instructions like ADD, SUB, MUL, and DIV.[38] Computers also have instructions like DW (Define Word) to reserve memory cells. Then the MOV instruction can copy integers between registers and memory.
The basic structure of an assembly language statement is label, operation, operand, and comment.[39]
Labels allow the programmer to work with variable names. The assembler will later translate labels into physical memory addresses.
Operations allow the programmer to work with mnemonics. The assembler will later translate mnemonics into instruction numbers.
Operands tell the assembler which data the operation will process.
Comments allow the programmer to articulate a narrative because the instructions alone are vague.
The key characteristic of an assembly language program is it forms a one-to-one mapping to its corresponding machine language target.[40]
The third generation of programming languages use compilers and interpreters to execute computer programs. Unlike assembly language, these languages generate many machine language instructions for each symbolic statement.[37] The distinguishing feature of third generation languages is their independence from a particular hardware.[41] They began with the languages of Fortran (1958), COBOL (1959), ALGOL (1960), and BASIC (1964).[37] In 1973, C emerged as a high-level language that produced efficient machine language instructions.[42] Today, an entire paradigm of languages fill the imperative third generation spectrum.
The fourth generation of programming languages emphasize what output results are desired, rather than how programming statements should be constructed.[37] Declarative languages attempt to limit side effects and allow programmers to write code with relatively few errors.[37] One popular fourth generation language is called Structured Query Language (SQL).[37] Database developers no longer need to process each database record one at a time. Also, a simple instruction can generate output records without having to understand how it's retrieved.
The fifth generation of programming languages use visual tools to generate source code.[43] An integrated development environment allows the programmer to draw the graphical user interface (GUI) on the screen using a mouse. The programmer writes event handling functions that will be executed when fields are hovered over, entered into, or exited from. The development system couples the functions to the GUI and outputs a computer program.[44]
Imperative languages[edit]
  A computer program written in an imperative language
Imperative languages specify a sequential algorithm using declarations, expressions, and statements:[45]

A declaration introduces a variable name to the computer program and assigns it to a datatype[46] â for example: var x: integer;
An expression yields a value â for example: 2 + 2 yields 4
A statement might assign an expression to a variable or use the value of a variable to alter the program's control flow â for example: xÂ := 2 + 2; if x = 4 then do_something();
Fortran[edit]
FORTRAN (1958) was unveiled as "The IBM Mathematical FORmula TRANslating system." It first compiled correctly in 1958.[47] It was designed for scientific calculations, without string handling facilities. Along with declarations, expressions and statements, it supported:

arrays.
subroutines.
"do" loops.
It succeeded because:

programming and debugging costs were below computer running costs.
it was supported by IBM.
applications at the time were scientific.[47]
However, non IBM vendors also wrote Fortran compilers, but with a syntax that would likely fail IBM's compiler.[47] The American National Standards Institute (ANSI) developed the first Fortran standard in 1966. In 1978, Fortran 77 became the standard until 1991. Fortran 90 supports:

records.
pointers to arrays.
COBOL[edit]
COBOL (1959) stands for "COmmon Business Oriented Language." Fortran manipulated symbols. It was soon realized that symbols didn't need to be numbers, so strings were introduced.[48] The US Department of Defense influenced COBOL's development, with Grace Hopper being a major contributor. The statements were English-like and verbose. The goal was to design a language so managers could read the programs. However, the lack of structured statements hindered this goal.[49]
COBOL's development was tightly controlled, so dialects didn't emerge to require ANSI standards. As a consequence, it wasn't changed for 25 years until 1974. The 1990s version did make consequential changes like object-oriented programming.[49]

Algol[edit]
ALGOL (1960) stands for "ALGOrithmic Language." It had a profound influence on programming language design.[50] Emerging from a committee of European and American programming language experts, it used standard mathematical notation and had a readable structured design. Algol was first to define its syntax using the BackusâNaur form.[50] This led to syntax-directed compilers. It added features like:

block structure, where variables were local to their block.
arrays with variable bounds.
"for" loops.
functions.
recursion.[50]
Algol's direct descendants include Pascal, Modula-2, Ada, Delphi and Oberon on one branch. On another branch there's C, C++ and Java.[50]

Basic[edit]
BASIC (1964) stands for "Beginner's All Purpose Symbolic Instruction Code." It was developed at Dartmouth College for all of their students to learn.[51] If a student didn't go on to a more powerful language, the student would still remember Basic.[51] A Basic interpreter was installed in the microcomputers manufactured in the late 1970s. As the microcomputer industry grew, so did the language.[51]  
Basic pioneered the interactive session.[51] It offered operating system commands within its environment:

The 'new' command created an empty slate.
Statements evaluated immediately.
Statements could be programmed by preceding them with a line number.
The 'list' command displayed the program.
The 'run' command executed the program.
However, the Basic syntax was too simple for large programs.[51] Recent dialects have added structure and object-oriented extensions. Microsoft's Visual Basic is still widely used and produces a graphical user interface.[52]

C[edit]
 C programming language (1973) got its name because the language BCPL was replaced with B, and AT&T Bell Labs called the next version "C." Its purpose was to write the UNIX operating system.[42] C is a relatively small language -- making it easy to write compilers. Its growth mirrored the hardware growth in the 1980s.[42] Its growth also was because it has the facilities of assembly language, but uses a high-level syntax. It added advanced features like:

inline assembler.
arithmetic on pointers.
pointers to functions.
bit operations.
freely combining complex operators.[42]
  Computer memory map
C allows the programmer to control which region of memory data is to be stored. Global variables and static variables require the fewest clock cycles to store. The stack is automatically used for the standard variable declarations. Heap memory is returned to a pointer variable from the malloc() function.

The global and static data region is located just above the program region. (The program region is technically called the text region. It's where machine instructions are stored.)
The global and static data region is technically two regions.[53] One region is called the initialized data segment where variables declared with default values are stored. The other region is called the block started by segment where variables declared without default values are stored.
Variables stored in the global and static data region have their addresses set at compile-time. They retain their values throughout the life of the process.
The global and static region stores the global variables that are declared on top of (outside) the main() function.[54] Global variables are visible to main() and every other function in the source code.
On the other hand, variable declarations inside of main(), other functions, or within { } block delimiters are local variables. Local variables also include formal parameter variables. Parameter variables are enclosed within the parenthesis of function definitions.[55] They provide an interface to the function.
Local variables declared using the static prefix are also stored in the global and static data region.[53] Unlike global variables, static variables are only visible within the function or block. Static variables always retain their value. An example usage would be the function int increment_counter(){ static int counter = 0; counter++; return counter;}
The stack region is a contiguous block of memory located near the top memory address.[56] Variables placed in the stack, ironically, are populated from top to bottom.[56] A stack pointer is a special-purpose register that keeps track of the last memory address populated.[56] Variables are placed into the stack via the assembly language PUSH instruction. Therefore, the addresses of these variables are set during runtime. The method for stack variables to lose their scope is via the POP instruction.
Local variables declared without the static prefix, including formal parameter variables,[57] are called automatic variables[54] and are stored in the stack.[53] They are visible inside the function or block and lose their scope upon exiting the function or block.
The heap region is located below the stack.[53] It is populated from the bottom to the top. The operating system manages the heap using a heap pointer and a list of allocated memory blocks.[58] Like the stack, the addresses of heap variables are set during runtime. Out of memory errors occur when the heap pointer and the stack pointer meet.
C provides the malloc() library function to allocate heap memory.[59] Populating the heap with data is an additional copy function. Variables stored in the heap are economically passed to functions using pointers. Without pointers, the entire block of data would need to be passed to the function via the stack.
C++[edit]
In the 1970s, software engineers needed language support to break large projects down into modules.[60] One obvious feature was to decompose large projects physically into separate files. A less obvious feature was to decompose large projects logically into abstract datatypes.[60] At the time, languages supported concrete (scalar) datatypes like integer numbers, floating-point numbers, and strings of characters. Concrete datatypes have their representation as part of their name.[61] Abstract datatypes are structures of concrete datatypes â with a new name assigned. For example, a list of integers could be called integer_list.
In object-oriented jargon, abstract datatypes are called classes. However, a class is only a definition; no memory is allocated. When memory is allocated to a class, it's called an object.[62]
Object-oriented imperative languages developed by combining the need for classes and the need for safe functional programming.[63] A function, in an object-oriented language, is assigned to a class. An assigned function is then referred to as a method, member function, or operation. Object-oriented programming is executing operations on objects.[64]
Object-oriented languages support a syntax to model subset/superset relationships. In set theory, an element of a subset inherits all the attributes contained in the superset. For example, a student is a person. Therefore, the set of students is a subset of the set of persons. As a result, students inherit all the attributes common to all persons. Additionally, students have unique attributes that other persons don't have. Object-oriented languages model subset/superset relationships using inheritance.[65] Object-oriented programming became the dominant language paradigm by the late 1990s.[60]
C++ (1985) was originally called "C with Classes."[66] It was designed to expand C's capabilities by adding the object-oriented facilities of the language Simula.[67]
An object-oriented module is composed of two files. The definitions file is called the header file. Here is a C++ header file for the GRADE class in a simple school application:

// grade.h
// -------

// Used to allow multiple source files to include
// this header file without duplication errors.
// ----------------------------------------------
#ifndef GRADE_H
#define GRADE_H

class GRADE {
public:
    // This is the constructor operation.
    // ----------------------------------
    GRADE ( const char letter );

    // This is a class variable.
    // -------------------------
    char letter;

    // This is a member operation.
    // ---------------------------
    int grade_numeric( const char letter );

    // This is a class variable.
    // -------------------------
    int numeric;
};
#endif

A constructor operation is a function with the same name as the class name.[68] It is executed when the calling operation executes the new statement.
A module's other file is the source file. Here is a C++ source file for the GRADE class in a simple school application:

// grade.cpp
// ---------
#include "grade.h"

GRADE::GRADE( const char letter )
{
    // Reference the object using the keyword 'this'.
    // ----------------------------------------------
    this->letter = letter;

    // This is Temporal Cohesion
    // -------------------------
    this->numeric = grade_numeric( letter );
}

int GRADE::grade_numeric( const char letter )
{
    if ( ( letter == 'A' || letter == 'a' ) )
        return 4;
    else
    if ( ( letter == 'B' || letter == 'b' ) )
        return 3;
    else
    if ( ( letter == 'C' || letter == 'c' ) )
        return 2;
    else
    if ( ( letter == 'D' || letter == 'd' ) )
        return 1;
    else
    if ( ( letter == 'F' || letter == 'f' ) )
        return 0;
    else
        return -1;
}

Here is a C++ header file for the PERSON class in a simple school application:

// person.h
// --------
#ifndef PERSON_H
#define PERSON_H

class PERSON {
public:
    PERSON ( const char *name );
    const char *name;
};
#endif

Here is a C++ source code for the PERSON class in a simple school application:

// person.cpp
// ----------
#include "person.h"

PERSON::PERSON ( const char *name )
{
    this->name = name;
}

Here is a C++ header file for the STUDENT class in a simple school application:

// student.h
// ---------
#ifndef STUDENT_H
#define STUDENT_H

#include "person.h"
#include "grade.h"

// A STUDENT is a subset of PERSON.
// --------------------------------
class STUDENT : public PERSON{
public:
    STUDENT ( const char *name );
    GRADE *grade;
};
#endif

Here is a C++ source code for the STUDENT class in a simple school application:

// student.cpp
// -----------
#include "student.h"
#include "person.h"

STUDENT::STUDENT ( const char *name ):
    // Execute the constructor of the PERSON superclass.
    // -------------------------------------------------
    PERSON( name )
{
    // Nothing else to do.
    // -------------------
}

Here is a driver program for demonstration:

// student_dvr.cpp
// ---------------
#include <iostream>
#include "student.h"

int main( void )
{
    STUDENT *student = new STUDENT( "The Student" );
    student->grade = new GRADE( 'a' );

    std::cout 
        // Notice student inherits PERSON's name
        << student->name
        << ": Numeric grade = "
        << student->grade->numeric
        << "\n";
	return 0;
}

Here is a makefile to compile everything:

# makefile
# --------
all: student_dvr

clean:
    rm student_dvr *.o

student_dvr: student_dvr.cpp grade.o student.o person.o
    c++ student_dvr.cpp grade.o student.o person.o -o student_dvr

grade.o: grade.cpp grade.h
    c++ -c grade.cpp

student.o: student.cpp student.h
    c++ -c student.cpp

person.o: person.cpp person.h
    c++ -c person.cpp

Declarative languages[edit]
Imperative languages have one major criticism: assigning an expression to a non-local variable may produce an unintended side effect.[69] Declarative languages generally omit the assignment statement and the control flow. They describe what computation should be performed and not how to compute it. Two broad categories of declarative languages are functional languages and logical languages.
The principle behind a functional language is to use lambda calculus as a guide for a well defined semantic.[70] In mathematics, a function is a rule that maps elements from an expression to a range of values. Consider the function:
times_10(x) = 10 * x
The expression 10 * x is mapped by the function times_10() to a range of values. One value happens to be 20. This occurs when x is 2. So, the application of the function is mathematically written as:
times_10(2) = 20
A functional language compiler will not store this value in a variable. Instead, it will push the value onto the computer's stack before setting the program counter back to the calling function. The calling function will then pop the value from the stack.[71]
Imperative languages do support functions. Therefore, functional programming can be achieved in an imperative language, if the programmer uses discipline. However, functional languages force this discipline onto the programmer through its syntax. Functional languages have a syntax tailored to emphasize the what.[72]
A functional program is developed with a set of primitive functions followed by a single driver function.[69] Consider the snippet:
function max(a,b){ /* code omitted */}
function min(a,b){ /* code omitted */}
function difference_between_largest_and_smallest(a,b,c) {

return max(a,max(b,c)) - min(a, min(b,c));
}
The primitives are max() and min(). The driver function is difference_between_largest_and_smallest(). Executing:
put(difference_between_largest_and_smallest(10,4,7)); will output 6.
Functional languages are used in computer science research to explore new language features.[73] Moreover, their lack of side-effects have made them popular in parallel programming and concurrent programming.[74] However, application developers prefer the object-oriented features of imperative languages.[74]

Lisp[edit]
Lisp (1958) stands for "LISt Processor."[75] It is tailored to process lists. A full structure of the data is formed by building lists of lists. In memory, a tree data structure is built. Internally, the tree structure lends nicely for recursive functions.[76] The syntax to build a tree is to enclose the space-separated elements within parenthesis. The following is a list of three elements. The first two elements are themselves lists of two elements:
((A B) (HELLO WORLD) 94)
Lisp has functions to extract and reconstruct elements.[77] The function head() returns a list containing the first element in the list. The function tail() returns a list containing everything but the first element. The function cons() returns a list that is the concatenation of other lists. Therefore, the following expression will return the list x:
cons(head(x), tail(x))
One drawback of Lisp is when many functions are nested, the parentheses may look confusing.[72] Modern Lisp environments help ensure parenthesis match. As an aside, Lisp does support the imperative language operations of the assignment statement and goto loops.[78] Also, Lisp is not concerned with the datatype of the elements at compile time. Instead, it assigns the datatypes at runtime. This may lead to programming errors not being detected early in the development process.
Writing large, reliable, and readable Lisp programs requires forethought. If properly planned, the program may be much shorter than an equivalent imperative language program.[72] Lisp is widely used in artificial intelligence. However, its usage has been accepted only because it has imperative language operations, making unintended side-effects possible.[74]

ML[edit]
ML (1973)[79] stands for "Meta Language." ML checks to make sure only data of the same type are compared with one another.[80] For example, this function has one input parameter (an integer) and returns an integer:
fun times_10(nÂ : int)Â : int = 10 * n;
ML is not parenthesis-eccentric like Lisp. The following is an application of times_10():
times_10 2
It returns "20Â : int". (Both the results and the datatype are returned.)
Like Lisp, ML is tailored to process lists. Unlike Lisp, each element is the same datatype.[81]

Prolog[edit]
Prolog (1972) stands for "PROgramming in LOgic." It was designed to process natural languages.[82] The building blocks of a Prolog program are objects and their relationships to other objects. Objects are built by stating true facts about them.[83]
Set theory facts are formed by assigning objects to sets. The syntax is setName(object).

Cat is an animal.
animal(cat).
Mouse is an animal.
animal(mouse).
Tom is a cat.
cat(tom).
Jerry is a mouse.
mouse(jerry).
Adjective facts are formed using adjective(object).

Cat is big.
big(cat).
Mouse is small.
small(mouse).
Relationships are formed using multiple items inside the parentheses. In our example we have verb(object,object) and verb(adjective,adjective).

Mouse eats cheese.
eat(mouse,cheese).
Big animals eat small animals.
eat(big,small).
After all the facts and relationships are entered, then a question can be asked:

Will Tom eat Jerry?
?- eat(tom,jerry).
Prolog's usage has expanded to become a goal-oriented language.[84] In a goal-oriented application, the goal is defined by providing a list of subgoals. Then each subgoal is defined by further providing a list of its subgoals, etc. If a path of subgoals fails to find a solution, then that subgoal is backtracked and another path is systematically attempted.[83] Practical applications include solving the shortest path problem[82] and producing family trees.[85]

Program modules[edit]
Modular programming is a technique to refine imperative language programs to mitigate software aging. A program module is a sequence of statements that are bounded within a block and together identified by a name.[86] Modules have a function, context, and logic:[87]

The function of a module is what it does.
The context of a module are the elements being performed upon.
The logic of a module is how it performs the function.
The module's name should be derived first by its function, then by its context. Its logic should not be part of the name.[87] For example, function compute_square_root( x ) or function compute_square_root_integer( iÂ : integer ) are appropriate module names. However, function compute_square_root_by_division( x ) is not.
The degree of interaction within a module is its level of cohesion.[87] Cohesion is a judgement of the relationship between a module's name and its function. The degree of interaction between modules is the level of coupling.[88] Coupling is a judgement of the relationship between a module's context and the elements being performed upon.

Cohesion[edit]
The levels of cohesion from worst to best are:[89]

Coincidental Cohesion: A module has coincidental cohesion if it performs multiple functions, and the functions are completely unrelated. For example, function read_sales_record_print_next_line_convert_to_float(). Coincidental cohesion occurs in practice if management enforces silly rules. For example, "Every module will have between 35 and 50 executable statements."[89]
Logical Cohesion: A module has logical cohesion if it has available a series of functions, but only one of them is executed. For example, function perform_arithmetic( perform_addition ).
Temporal Cohesion: A module has temporal cohesion if it performs functions related to time. One example, function initialize_variables_and_open_files(). Another example, stage_one(), stage_two(), ...
Procedural Cohesion: A module has procedural cohesion if it performs multiple functions, but only loosely related. For example, function read_part_number_update_employee_record().
Communicational Cohesion: A module has communicational cohesion if it performs multiple functions, but closely related. For example, function read_part_number_update_sales_record().
Informational Cohesion: A module has informational cohesion if it performs multiple functions, but each function has its own entry and exit points. Moreover, the functions share the same data structure. Object-oriented classes work at this level.
Functional Cohesion: a module has functional cohesion if it achieves a single goal working only on local variables. Moreover, it may be reusable in other contexts.
Coupling[edit]
The levels of coupling from worst to best are:[88]

Content Coupling: A module has content coupling if it modifies a local variable of another function. COBOL used to do this with the alter verb.
Common Coupling: A module has common coupling if it modifies a global variable.
Control Coupling: A module has control coupling if another module can modify its control flow. For example, perform_arithmetic( perform_addition ). Instead, control should be on the makeup of the returned object.
Stamp Coupling: A module has stamp coupling if an element of a data structure passed as a parameter is modified. Object-oriented classes work at this level.
 Data Coupling: A module has data coupling if all of its input parameters are needed and none of them are modified. Moreover, the result of the function is returned as a single object.
Data flow analysis[edit]
  A sample function-level data-flow diagram.
Data flow analysis is a design method used to achieve modules of functional cohesion and data coupling.[90] The input to the method is a data-flow diagram. A data-flow diagram is a set of ovals representing modules. Each module's name is displayed inside its oval. Modules may be at the executable level or the function level.
The diagram also has arrows connecting modules to each other. Arrows pointing into modules represent a set of inputs. Each module should have only one arrow pointing out from it to represent its single output object. (Optionally, an additional exception arrow points out.) A daisy chain of ovals will convey an entire algorithm. The input modules should start the diagram. The input modules should connect to the transform modules. The transform modules should connect to the output modules.[91]

Object-oriented programming[edit]
Object-oriented programming need not be confined to an object-oriented language.[92] Object-oriented programming is executing operations on objects.[64] In object-oriented languages, classes are objects. In non-object-oriented languages, data structures (which are also known as records) may also be objects. To turn a data structure into an object, operations need to be written specifically for the structure. The resulting structure is called an abstract datatype.[93] However, inheritance will be missing. Nonetheless, this shortcoming can be overcome.
Here is a C programming language header file for the GRADE abstract datatype in a simple school application:

/* grade.h */
/* ------- */

/* Used to allow multiple source files to include */
/* this header file without duplication errors.   */
/* ---------------------------------------------- */
#ifndef GRADE_H
#define GRADE_H

typedef struct
{
    char letter;
} GRADE;

/* Constructor */
/* ----------- */
GRADE *grade_new( char letter );

int grade_numeric( char letter );
#endif

The grade_new() function performs the same algorithm as the C++ constructor operation.
Here is a C programming language source file for the GRADE abstract datatype in a simple school application:

/* grade.c */
/* ------- */
#include "grade.h"

GRADE *grade_new( char letter )
{
    GRADE *grade;

    /* Allocate heap memory */
    /* -------------------- */
    if ( ! ( grade = calloc( 1, sizeof( GRADE ) ) ) )
    {
        fprintf(stderr,
                "ERROR in %s/%s/%d: calloc() returned empty.\n",
                __FILE__,
                __FUNCTION__,
                __LINE__ );
        exit( 1 );
    }

    grade->letter = letter;
    return grade;
}

int grade_numeric( char letter )
{
    if ( ( letter == 'A' || letter == 'a' ) )
        return 4;
    else
    if ( ( letter == 'B' || letter == 'b' ) )
        return 3;
    else
    if ( ( letter == 'C' || letter == 'c' ) )
        return 2;
    else
    if ( ( letter == 'D' || letter == 'd' ) )
        return 1;
    else
    if ( ( letter == 'F' || letter == 'f' ) )
        return 0;
    else
        return -1;
}

In the constructor, the function calloc() is used instead of malloc() because each memory cell will be set to zero.
Here is a C programming language header file for the PERSON abstract datatype in a simple school application:

/* person.h */
/* -------- */
#ifndef PERSON_H
#define PERSON_H

typedef struct
{
    char *name;
} PERSON;

/* Constructor */
/* ----------- */
PERSON *person_new( char *name );
#endif

Here is a C programming language source code for the PERSON abstract datatype in a simple school application:

/* person.c */
/* -------- */
#include "person.h"

PERSON *person_new( char *name )
{
    PERSON *person;

    if ( ! ( person = calloc( 1, sizeof( PERSON ) ) ) )
    {
        fprintf(stderr,
                "ERROR in %s/%s/%d: calloc() returned empty.\n",
                __FILE__,
                __FUNCTION__,
                __LINE__ );
        exit( 1 );
    }

    person->name = name;
    return person;
}

Here is a C programming language header file for the STUDENT abstract datatype in a simple school application:

/* student.h */
/* --------- */
#ifndef STUDENT_H
#define STUDENT_H

#include "person.h"
#include "grade.h"

typedef struct
{
    /* A STUDENT is a subset of PERSON. */
    /* -------------------------------- */
    PERSON *person;

    GRADE *grade;
} STUDENT;

/* Constructor */
/* ----------- */
STUDENT *student_new( char *name );
#endif

Here is a C programming language source code for the STUDENT abstract datatype in a simple school application:

/* student.c */
/* --------- */
#include "student.h"
#include "person.h"

STUDENT *student_new( char *name )
{
    STUDENT *student;

    if ( ! ( student = calloc( 1, sizeof( STUDENT ) ) ) )
    {
        fprintf(stderr,
                "ERROR in %s/%s/%d: calloc() returned empty.\n",
                __FILE__,
                __FUNCTION__,
                __LINE__ );
        exit( 1 );
    }

    /* Execute the constructor of the PERSON superclass. */
    /* ------------------------------------------------- */
    student->person = person_new( name );
    return student;
}

Here is a driver program for demonstration:

/* student_dvr.c */
/* ------------- */
#include <stdio.h>
#include "student.h"

int main( void )
{
    STUDENT *student = student_new( "The Student" );
    student->grade = grade_new( 'a' );

    printf( "%s: Numeric grade = %d\n",
            /* Whereas a subset exists, inheritance does not. */
            student->person->name,
            /* Functional programming is executing functions just-in-time (JIT) */
            grade_numeric( student->grade->letter ) );

	return 0;
}

Here is a makefile to compile everything:

# makefile
# --------
all: student_dvr

clean:
    rm student_dvr *.o

student_dvr: student_dvr.c grade.o student.o person.o
    gcc student_dvr.c grade.o student.o person.o -o student_dvr

grade.o: grade.c grade.h
    gcc -c grade.c

student.o: student.c student.h
    gcc -c student.c

person.o: person.c person.h
    gcc -c person.c

The formal strategy to build object-oriented objects is to:[94]

Identify the objects. Most likely these will be nouns.
Identify each object's attributes. What helps to describe the object?
Identify each object's actions. Most likely these will be verbs.
Identify the relationships from object to object. Most likely these will be verbs.
For example:

A person is a human identified by a name.
A grade is an achievement identified by a letter.
A student is a person who earns a grade.
Functional categories[edit]
  A diagram showing that the user interacts with the application software. The application software interacts with the operating system, which interacts with the hardware.
Computer programs may be categorized along functional lines. The main functional categories are application software and system software. System software includes the operating system which couples computer hardware with application software.[95] The purpose of the operating system is to provide an environment where application software executes in a convenient and efficient manner.[95] In addition to the operating system, system software includes embedded programs, boot programs, and micro programs. Application software designed for end users have a user interface. Application software not designed for end users includes middleware, which couples one application with another. Both system software and application software execute utility programs.

Application software[edit]
Main article: Application software
Application software is the key to unlocking the potential of the computer system.[96] Enterprise application software bundles accounting, personnel, customer, and vendor applications. Examples include enterprise resource planning, customer relationship management, and supply chain management software. 
Enterprise applications may be developed in-house as a one-of-a-kind proprietary software.[96] Alternatively, they may be purchased as off-the-shelf software. Purchased software may be modified to provide custom software. If the application is customized, then either the company's resources are used or the resources are outsourced. Outsourced software development may be from the original software vendor or a third-party developer.[96]
The advantages of proprietary software are features and reports may be exact to specification.[97] Management may also be involved in the development process and offer a level of control. Management may decide to counteract a competitor's new initiative or implement a customer or vendor requirement. A merger or acquisition will necessitate enterprise software changes.[97] The disadvantages of proprietary software are the time and resource costs may be extensive.[97] Furthermore, risks concerning features and performance may be looming.
The advantages of off-the-shelf software are its identifiable upfront costs, the basic needs should be fulfilled, and its performance and reliability have a track record.[97] The disadvantages of off-the-shelf software are it may have unnecessary features that  confuse end users, it may lack features the enterprise needs, and the data flow may not match the enterprise's work processes.[97]
One approach to economically obtaining a customized enterprise application is through an application service provider.[98] Specialty companies provide the hardware, custom software, and end-user support. They may speed development of new applications because they possess skilled information system staff. The biggest advantage is it frees in-house resources from staffing and managing complex computer projects.[98] Many application service providers target small, fast-growing companies with limited information system resources.[98] On the other hand, larger companies with major systems will likely have their technical infrastructure in place. One risk is having to trust an external organization with sensitive information. Another risk is having to trust the provider's infrastructure reliability.[98]

Operating system[edit]
See also: Operating system
An operating system is the low-level software that supports a computer's basic functions, such as scheduling tasks and controlling peripherals.[95]
In the 1950s, the programmer, who was also the operator, would write a program and run it. After the program finished executing, the output may have been printed, or it may have been punched onto paper tape or cards for later processing.[27] More often than not the program did not work. The programmer then looked at the console lights and fiddled with the console switches. If less fortunate, a memory printout was made for further study. In the 1960s, programmers reduced the amount of wasted time by automating the operator's job. A program called an operating system was kept in the computer at all times.[99]
The term operating system may refer to two levels of software.[100] The operating system may refer to the kernel program that manages the processes, memory, and devices. More broadly, the operating system may refer to the entire package of the central software. The package includes a kernel program, command-line interpreter, graphical user interface, utility programs, and editor.[100]

Kernel Program[edit]
  A kernel connects the application software to the hardware of a computer.
The kernel's main purpose is to manage the limited resources of a computer:

The kernel program should perform process scheduling.[101] The kernel creates a process control block when a program is selected for execution. However, an executing program gets exclusive access to the central processing unit only for a time slice. To provide each user with the illusion of exclusive access, the kernel preempts the process control block to execute another one. The goal for system developers is to minimize dispatch latency.
  Physical memory is scattered around RAM and the hard disk. Virtual memory is one continuous block.
The kernel program should perform memory management.
When the kernel initially loads an executable into memory, it divides the address space logically into regions.[102] The kernel maintains a master-region table and many per-process-region (pregion) tables â one for each running process.[102] These tables constitute the virtual address space. The master-region table is used to determine where its contents are located in physical memory. The pregion tables allow each process to have its own program (text) pregion, data pregion, and stack pregion. The program pregion stores machine instructions. Since the machine instructions won't change, the program pregion may be shared by many processes (instances) of the same executable.[102] The kernel is responsible for translating virtual addresses into physical addresses. The kernel may request data from the memory controller and, instead, receive a page fault.[103] If so, the kernel accesses the memory management unit to populate the physical data region and translate the address.[104]
To save time and memory, the kernel may load only blocks of execution instructions from the disk drive, not the entire execution file completely.[101]
The kernel allocates memory from the heap upon request by a process.[105] When the process is finished with the memory, the process may request for it to be freed. If the process exits without requesting all allocated memory to be freed, then the kernel performs garbage collection to free the memory.
The kernel also insures that a process only accesses its own memory, and not that of the kernel or other processes.[101]
The kernel program should perform file system management.[101] The kernel has instructions to create, retrieve, update, and delete files.
The kernel program should perform device management.[101] The kernel provides programs to standardize and simplify the interface to the mouse, keyboard, disk drives, printers, and other devices. Moreover, the kernel should arbitrate access to a device if two processes requests it at the same time.
The kernel program should perform network management.[106] The kernel transmits and receives packets on behalf of processes. One key service is to find an efficient route to the target system.
The kernel program should provide system level functions for programmers to use.[107]
Programmers access files through a relatively simple interface that in turn executes a relatively complicated low-level I/O interface. The low-level interface includes file creation, file descriptors, file seeking, physical reading, and physical writing.
Programmers create processes through a relatively simple interface that in turn executes a relatively complicated low-level interface.
Programmers perform date/time arithmetic through a relatively simple interface that in turn executes a relatively complicated low-level time interface.[108]
The kernel program should provide a communication channel between executing processes.[109] For a large software system, it may be desirable to engineer the system into smaller processes. Processes may communicate with one another by sending and receiving signals.
Originally, operating systems were programmed in assembly; however, modern operating systems are typically written in higher level languages like C, C++, Objective-C, and Swift.

Interrupts[edit]
Interrupts cause the central processing unit (CPU) to have a control flow change away from the currently running process.[110] Input/Output (I/O) devices are slower than the CPU's clock signal. Therefore, it would slow down the computer if the CPU had to wait for each I/O to finish. Instead, a computer may implement direct memory access (DMA) I/O.[111]
If a  computer program in a computer with a direct memory access chip[112] executes a system call to perform a DMA I/O write operation, then the system call will execute the following instructions:

Create an entry in the device-status table.[113] The operating system maintains this table to keep track of which processes are waiting for which devices. One field in the table is the address of the process control block.
Place all the characters to be sent to the device into a memory buffer.[110]
Set the memory address of the memory buffer to a predetermined device register.[114]
Set the buffer size (an integer) to another predetermined register.[114]
Execute the machine instruction to begin the writing.
Perform a context switch to the next process in the ready queue.
While the writing takes place, the operating system will context switch to other processes as normal. When the device finishes writing, the device will interrupt the currently running process by asserting an interrupt request. The device will also place an integer onto the device's data bus.[115] Upon accepting the interrupt request, the CPU will:

Push the contents of its program counter and program status word onto the call stack.[116]
Read the integer from the data bus. The integer is an offset to the interrupt vector table. The vector table's instructions will return control to the operating system.
The operating system will then:

Access the device-status table.
Extract the process control block.
Perform a context switch back to the writing process.
When the writing process has its time slice expired, the CPU will:

Pop from the call stack the program status word and set it back to its register.
Pop from the call stack the address of the interrupted process' next instruction and set it back into the program counter.
The interrupted process will then resume its time slice.[116]

Utility program[edit]
A utility program is designed to aid system administration and software execution. Operating systems execute hardware utility programs to check the status of disk drives, memory, speakers, and printers.[117] A utility program may optimize the placement of a file on a crowded disk. System utility programs monitor hardware and network performance. When a metric is outside an acceptable range, a trigger alert is generated.[118]
Utility programs include compression programs so data files are stored on less disk space.[117] Compressed programs also save time when data files are transmitted over the network.[117] Utility programs can sort and merge data sets.[118] Utility programs detect computer viruses.

Boot program[edit]
This section needs expansion. You can help by adding to it.  (October 2021)
A stored-program computer requires an initial boot program stored in its read-only memory to boot. It should identify and initialize all aspects of the system, from processor registers to device controllers to memory contents.[119] Following the initialization process, the boot program loads the operating system and sets the program counter to begin normal operations.

Embedded program[edit]
Main article: Embedded software
This section needs expansion. You can help by adding to it.  (October 2021)
  The microcontroller on the right of this USB flash drive is controlled with embedded firmware.
Independent of the host computer, a hardware device might have embedded firmware to control its operation. Firmware is used when the computer program is rarely or never expected to change, or when it must not be lost when the power is off.[99]
On a larger scale, an embedded microcontroller is used to control part of a larger system.[63] Examples include aircraft components and life support systems. Applications running on these systems are large and complex. Moreover, they run in real-time and must be robust.[63] The United States Department of Defense contracted with CII Honeywell Bull to develop Ada (1983) as a real-time programming language.[120]
Central to real-time systems is a task facility to permit parallel processing. Also important are interrupt controls.[120]

Microcode program[edit]
Main article: Microcode
  NOT gate.
  NAND gate.
  NOR gate.
  AND gate.
  OR gate.
A microcode program is the bottom-level interpreter that controls the data path of software driven computers.[121]
(Advances in hardware have migrated these operations to hardware execution circuits.)[121] Microcode instructions allow the programmer to more easily implement the digital logic level[122]âthe computer's real hardware. The digital logic level is the boundary between computer science and computer engineering.[123]
A logic gate is a tiny transistor that can return one of two signals: on or off.[124]

Having one transistor forms the NOT gate.
Connecting two transistors in series forms the NAND gate.
Connecting two transistors in parallel forms the NOR gate.
Connecting a NOT gate to a NAND gate forms the AND gate.
Connecting a NOT gate to a NOR gate forms the OR gate.
These five gates form the building blocks of binary algebraâthe digital logic functions of the computer.
Microcode instructions are mnemonics programmers may use to execute digital logic functions instead of forming them in binary algebra. They are stored in a central processing unit's (CPU) control store.[125]
These hardware-level instructions move data throughout the data path.
Microcode instructions move data between a CPU's registers and throughout the motherboard. The micro-instruction cycle begins when the microsequencer uses its microprogram counter to fetch the next machine instruction from random access memory.[126] The next step is to decode the machine instruction by selecting the proper output line to the hardware module.[127]
The final step is to execute the instruction using the hardware module's set of gates.

  A symbolic representation of an ALU.
Instructions to perform arithmetic are passed through an arithmetic logic unit (ALU).[128] The ALU has circuits to perform elementary operations to add, shift, and compare integers. By combining and looping the elementary operations through the ALU, the CPU performs its complex arithmetic.
Microcode instructions move data between the CPU and the memory controller. Memory controller microcode instructions manipulate two registers. The memory address register is used to access each memory cell's address. The memory data register is used to set and read each cell's contents.[129]
Microcode instructions move data between the CPU and the many computer buses. The disk controller bus writes to and reads from hard disk drives. Data is also moved between the CPU and other functional units via the peripheral component interconnect express bus.[130]

See also[edit]
A-0 SystemÂ â Programming language
abstraction (computer science)Â â Technique for arranging complexity of computer systems
ACCU (organisation)
ActionScriptÂ â Object-oriented programming language
Adobe FlashÂ â Deprecated multimedia platform used to add animation and interactivity to websites
agile software developmentÂ â Group of iterative and incremental development methods
Algorithmic efficiencyÂ â Property of anÂ algorithm
Al-Jazari
Al-KindiÂ â Muslim Arab philosopher
analog computerÂ â Computer that uses continuously variable technology
application programming interface
argument (computer science)
array data typeÂ â Data type that represents a collection of elements (values or variables)
The Art of Computer ProgrammingÂ â Books about algorithms by Donald Knuth
Artifact (software development)
Artificial intelligenceÂ â Intelligence demonstrated by machines
Aspect-Oriented Programming
ASP.NETÂ â Open-source web application framework
Association for Computing MachineryÂ â International learned society for computing
Automatic programming
automatonÂ â Self-operating machine
B-treeÂ â A self-balancing, tree-based data structure, that allows read/write access in logarithmic time
Banu Musa
Bernoulli numbers
Big O notationÂ â Notation describing limiting behavior
Bill GatesÂ â American businessman and philanthropist
Binary numberÂ â Number expressed as a sum of powers of 2
binary numeral system
binary treeÂ â Limited form of tree data structure
Blender (software)Â â 3D computer graphics software
Book of Ingenious DevicesÂ â 9th-century Islamic scientific text by the BanÅ« MÅ«sÄ brothers
boot loader
branch instruction
breakpointÂ â Debugging method used in software development
buffer overflowÂ â Anomaly in computer security and programming
Build automationÂ â Process of automating the building and testing of computer software
BytecodeÂ â Form of instruction set designed to be run by a software interpreter
Code duplication
Code refactoringÂ â Restructuring existing computer code without changing its external behavior
command line
Comment (computer programming)
commercial softwareÂ â Type of software
Comparison of instruction set architectures
compiled
computationÂ â Any type of calculation
computer configuration
Computer networkÂ â Network that allows computers to share resources and communicate with each other
Computer programming in the punched card era
computer storage
computer system
computer terminalÂ â Computer input/output device for users
ComputerWorld
cryptanalysisÂ â Study of analyzing information systems in order to discover their hidden aspects
cryptographic
data storage device
David GriesÂ â American computer scientist
debuggerÂ â Computer program used to test and debug other programs
DebuggingÂ â Process of finding and resolving defects or problems within a computer program
decomposition (computer science)
Deep Blue (chess computer)Â â Chess-playing computer made by IBM
Desktop applications
desktop computerÂ â Computer designed to be used on a fixed location
DocumentationÂ â Set of documents providing knowledge to explain a system
Domain (software engineering)Â â target subject of a computer program
Eclipse (software)Â â Software development environment
Edsger W. DijkstraÂ â Dutch computer scientist
electronic computer
EmacsÂ â Family of text editors
embedded operating system
embedded systemÂ â Computer system with a dedicated function
End-user development
Entity-Relationship Model
freemiumÂ â Business model and software licensing scheme in which the basic form of a product is free of charge but additional features requires payment
free softwareÂ â Software licensed to preserve user freedoms
Free Software FoundationÂ â Non-profit organization for support for the free software movement
free software license
freewareÂ â Software distributed and used at no cost, with other rights still reserved
frequency analysisÂ â Study of the frequency of letters or groups of letters in a ciphertext
Gerald WeinbergÂ â American computer scientist and teacher of systems science (1933-2018)
GitHubÂ â Hosting service for software projects using Git
GNU DebuggerÂ â Source-level debugger
GNU ProjectÂ â Free software project
GoogleÂ â American multinational technology company
graphics processing unitÂ â Specialized electronic circuit; graphics accelerator
GTK+
hash tableÂ â Associative array for storing key-value pairs
Herman HollerithÂ â American statistician and inventor
HTMLÂ â Hypertext Markup Language
Hypertext Transfer ProtocolÂ â Application protocol for distributed, collaborative, hypermedia information systems
IBM 402 Accounting Machine
IBM 602
IBM 604Â â Control panel programmable electronic calculating card punch
indent style
Independent software vendor
infix notation
InformationWeek
Institution of Analysts and Programmers
Instruction (computer science)
IntelliJ IDEAÂ â Integrated development environment
Internet Engineering Task ForceÂ â Open Internet standards organization
JavaScriptÂ â High-level programming language
John Wilder Tukey
JSTORÂ â Distributor of eBooks and other digital media
Killer applicationÂ â Marketing term
Library (computing)Â â Collection of non-volatile resources used by computer programs, often for software development.
linker (computing)Â â Computer program which combines multiple object files into a single file
Lisp (programming language)Â â Programming language family
list of software
low level language
mainframe computerÂ â Computers used primarily by large organizations for business-critical applications
MaintainabilityÂ â Ease of maintaining a functioning product
Malicious software
Mathematical Association of AmericaÂ â American organization that focuses on undergraduate-level mathematics
Mathematical proofÂ â Rigorous demonstration that a mathematical statement follows from its premises
Mathematics in medieval IslamÂ â Overview of the role of mathematics in medieval Islam
Maurice V. Wilkes
memory leakÂ â Computer science term
MicroprocessorÂ â Computer processor contained on an integrated-circuit chip
Microsoft Notepad
Microsoft OfficeÂ â Suite of office software
Microsoft Visual StudioÂ â Code editor and IDE
Microsoft WindowsÂ â Family of computer operating systems developed by Microsoft
Microsoft WordÂ â Word processor developed by Microsoft
mobile appÂ â Software application designed to run on mobile devices
Model-Driven Architecture
Mozilla FoundationÂ â American non-profit organization
Multi-core processorÂ â Microprocessor with more than one processing unit
MultiprocessingÂ â Use of two or more central processing units (CPUs) within a single computer system
music sequencerÂ â Device or application software that can record, edit, or play back music
Naming conventions (programming)
National Coding Week
.NET FrameworkÂ â Software platform developed by Microsoft
Node.jsÂ â JavaScript runtime environment
Noel Sharkey
NortonLifeLockÂ â American software company
NovellÂ â 1980â2014 American multinational software and services company
Object codeÂ â Sequence of statements or instructions in a computer language
Object fileÂ â File containing relocatable format machine code
Object hierarchy
Object-oriented analysis and design
off-by-one errorÂ â Logical error that can often be found in programming
Open-source softwareÂ â Software licensed to ensure source code usage rights
Oracle CorporationÂ â American multinational computer technology corporation
Organised Sound
Outline of softwareÂ â 1=Overview of and topical guide to software
parsingÂ â Analysing a string of symbols, according to the rules of a formal grammar
performance engineering
personal computerÂ â Computer intended for use by an individual person
Personal computer hardware
PHPÂ â Scripting language created in 1994
Platform (computing)
plugboardÂ â Control panel using electrical patch cords
Plug-in (computing)Â â Software component that adds a specific feature to an existing software application
procedural programmingÂ â Programming paradigm
Profiling (computer programming)Â â Measuring the time or resources used by a section of a computer program
Program lifecycle phase
programming style
Python (programming language)Â â General-purpose programming language
quicksortÂ â Divide and conquer sorting algorithm
race conditionÂ â Problem in electronics and software
Rand Corporation
readabilityÂ â Level of ease with which a reader can understand written text
regression testingÂ â Checking whether changes to software have broken functionality that used to work
Reliability engineering#Software reliabilityÂ â Sub-discipline of systems engineering that emphasizes dependability
requirements analysisÂ â Engineering process
Reverse engineeringÂ â Process of extracting design information from anything artificial
SAP AG
scripting languageÂ â Programming language for run-time events
Security hackerÂ â Computer security term; someone who hacks computer systems
separation of presentation and content
Server (computing)Â â Computer to access a central resource or service on a network
Server software
shared library
sharewareÂ â Proprietary software whose full use is limited in time
shell (computing)Â â Computer program which exposes an operating system's services to a human user or other programs
smartphoneÂ â Handheld mobile telephone / computer
SoftwareÂ â Non-tangible executable component of a computer
Software architectureÂ â High level structures of a software system
Software asset management
Software bugÂ â Error, flaw, failure, or fault in a computer program or system
software developer
Software maintenanceÂ â Modification of a software product after delivery
Software portability
Software release life cycleÂ â Sum of the phases of development and maturity for computer software
software testingÂ â Examination of how efficient and reliable software is at performing its intended function
Software utility
Specification
Spring FrameworkÂ â Application framework for Java platform
static code analysis
supercomputerÂ â Extremely powerful computer for its era
Supervisory program
Swing (Java)Â â Java-based GUI toolkit
System integrationÂ â Bringing together component sub-systems into one system
System programming
Tablet computerÂ â Mobile computer with integrated display, circuitry and battery
Technical supportÂ â Maintenance service of electronic consumers
temporary file
Timeline of women in computing
Trojan horse (computing)Â â Type of malware
Unified Extensible Firmware InterfaceÂ â Operating system software specification
Unified Modeling LanguageÂ â Software system design modeling tool
unit record equipmentÂ â Electromechanical machines which processed data using punch cards
unit testingÂ â Software testing method by which individual units of source code are validated
UsabilityÂ â Capacity of a system for its users to perform tasks
Use Case
User (computing)Â â Person who uses a computer or network service
UTF-8Â â ASCII-compatible variable-width encoding of Unicode, using one to four bytes
viÂ â Keyboard-oriented text editor
visual programming languageÂ â Programming language written graphically by a user
Vulnerability (computing)Â â Exploitable weakness in a computer system
Waterfall modelÂ â Software development philosophy
Web applicationÂ â Application that uses a web browser as a client
web browserÂ â Software for using the World Wide Web
web pageÂ â Content provided by a website
web serverÂ â Computer software that distributes web pages
web serviceÂ â Service offered between electronic devices via the internet
Windows Communication Foundation
Windows FormsÂ â Graphical user interface software library
window system
Women in computing
word processorÂ â Device or computer program used for writing and editing documents
World ScientificÂ â Academic publisher of scientific, technical, and medical books
World Wide WebÂ â System of interlinked hypertext documents accessed over the Internet
World Wide Web ConsortiumÂ â Main international standards organization for the World Wide Web
XMLÂ â Markup language  by the W3C for encoding of data
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}"The Free Dictionary: computer program". Farlex. Retrieved 14 November 2021.

^ a b Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 7. ISBNÂ 0-201-71012-9.

^ Silberschatz, Abraham (1994). Operating System Concepts, Fourth Edition. Addison-Wesley. p.Â 98. ISBNÂ 978-0-201-50480-4.

^ Tanenbaum, Andrew S. (1990). Structured Computer Organization, Third Edition. Prentice Hall. p.Â 32. ISBNÂ 978-0-13-854662-5.

^ a b McCartney, Scott (1999). ENIAC â The Triumphs and Tragedies of the World's First Computer. Walker and Company. p.Â 16. ISBNÂ 978-0-8027-1348-3.

^ Tanenbaum, Andrew S. (1990). Structured Computer Organization, Third Edition. Prentice Hall. p.Â 14. ISBNÂ 978-0-13-854662-5.

^ Bromley, Allan G. (1998). "Charles Babbage's Analytical Engine, 1838" (PDF). IEEE Annals of the History of Computing. 20 (4): 29â45. doi:10.1109/85.728228. S2CIDÂ 2285332.

^ a b Tanenbaum, Andrew S. (1990). Structured Computer Organization, Third Edition. Prentice Hall. p.Â 15. ISBNÂ 978-0-13-854662-5.

^ J. Fuegi; J. Francis (OctoberâDecember 2003), "Lovelace & Babbage and the creation of the 1843 'notes'", Annals of the History of Computing, 25 (4): 16, 19, 25, doi:10.1109/MAHC.2003.1253887

^ Rosen, Kenneth H. (1991). Discrete Mathematics and Its Applications. McGraw-Hill, Inc. p.Â 654. ISBNÂ 978-0-07-053744-6.

^ Linz, Peter (1990). An Introduction to Formal Languages and Automata. D. C. Heath and Company. p.Â 234. ISBNÂ 978-0-669-17342-0.

^ a b c d "Computers in Germany". American Federation of Information Processing Societies. Retrieved 26 November 2021.

^ a b "IBM Archives - Mark I Description". International Business Machines. 23 January 2003. Retrieved 1 January 2022.

^ "IBM Archives -- Mark I Specification". International Business Machines. 23 January 2003. Retrieved 1 January 2022.

^ "IBM Archives -- Mark I Specification". International Business Machines. 23 January 2003. Retrieved 1 January 2022.

^ a b c McCartney, Scott (1999). ENIAC â The Triumphs and Tragedies of the World's First Computer. Walker and Company. p.Â 102. ISBNÂ 978-0-8027-1348-3.

^ McCartney, Scott (1999). ENIAC â The Triumphs and Tragedies of the World's First Computer. Walker and Company. p.Â 94. ISBNÂ 978-0-8027-1348-3.

^ McCartney, Scott (1999). ENIAC â The Triumphs and Tragedies of the World's First Computer. Walker and Company. p.Â 107. ISBNÂ 978-0-8027-1348-3.

^ McCartney, Scott (1999). ENIAC â The Triumphs and Tragedies of the World's First Computer. Walker and Company. p.Â 120. ISBNÂ 978-0-8027-1348-3.

^ a b McCartney, Scott (1999). ENIAC â The Triumphs and Tragedies of the World's First Computer. Walker and Company. p.Â 118. ISBNÂ 978-0-8027-1348-3.

^ McCartney, Scott (1999). ENIAC â The Triumphs and Tragedies of the World's First Computer. Walker and Company. p.Â 119. ISBNÂ 978-0-8027-1348-3.

^ McCartney, Scott (1999). ENIAC â The Triumphs and Tragedies of the World's First Computer. Walker and Company. p.Â 123. ISBNÂ 978-0-8027-1348-3.

^ Tanenbaum, Andrew S. (1990). Structured Computer Organization, Third Edition. Prentice Hall. p.Â 20. ISBNÂ 978-0-13-854662-5.

^ a b Tanenbaum, Andrew S. (1990). Structured Computer Organization, Third Edition. Prentice Hall. p.Â 21. ISBNÂ 978-0-13-854662-5.

^ a b Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 27. ISBNÂ 0-201-71012-9.

^ Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 29. ISBNÂ 0-201-71012-9.

^ a b c Silberschatz, Abraham (1994). Operating System Concepts, Fourth Edition. Addison-Wesley. p.Â 6. ISBNÂ 978-0-201-50480-4.

^ a b c d e f g h "Bill Pentz â A bit of Background: the Post-War March to VLSI". Digibarn Computer Museum. August 2008. Retrieved January 31, 2022.

^ "Chip Hall of Fame: Intel 4004 Microprocessor". Institute of Electrical and Electronics Engineers. July 2, 2018. Retrieved January 31, 2022.

^ a b "Inside the world's long-lost first microcomputer". c/net. January 8, 2010. Retrieved January 31, 2022.

^ "Bill Gates, Microsoft and the IBM Personal Computer". InfoWorld. August 23, 1982. Retrieved 1 February 2022.

^ a b c Stair, Ralph M. (2003). Principles of Information Systems, Sixth Edition. Thomson. p.Â 507. ISBNÂ 0-619-06489-7.

^ a b Stair, Ralph M. (2003). Principles of Information Systems, Sixth Edition. Thomson. p.Â 159. ISBNÂ 0-619-06489-7.

^ a b Linz, Peter (1990). An Introduction to Formal Languages and Automata. D. C. Heath and Company. p.Â 2. ISBNÂ 978-0-669-17342-0.

^ Weiss, Mark Allen (1994). Data Structures and Algorithm Analysis in C++. Benjamin/Cummings Publishing Company, Inc. p.Â 29. ISBNÂ 0-8053-5443-3.

^ Tanenbaum, Andrew S. (1990). Structured Computer Organization, Third Edition. Prentice Hall. p.Â 17. ISBNÂ 978-0-13-854662-5.

^ a b c d e f g Stair, Ralph M. (2003). Principles of Information Systems, Sixth Edition. Thomson. p.Â 160. ISBNÂ 0-619-06489-7.

^ a b c Tanenbaum, Andrew S. (1990). Structured Computer Organization, Third Edition. Prentice Hall. p.Â 399. ISBNÂ 978-0-13-854662-5.

^ Tanenbaum, Andrew S. (1990). Structured Computer Organization, Third Edition. Prentice Hall. p.Â 400. ISBNÂ 978-0-13-854662-5.

^ Tanenbaum, Andrew S. (1990). Structured Computer Organization, Third Edition. Prentice Hall. p.Â 398. ISBNÂ 978-0-13-854662-5.

^ Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 26. ISBNÂ 0-201-71012-9.

^ a b c d Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 37. ISBNÂ 0-201-71012-9.

^ Stair, Ralph M. (2003). Principles of Information Systems, Sixth Edition. Thomson. p.Â 161. ISBNÂ 0-619-06489-7.

^ Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 321. ISBNÂ 0-201-71012-9.

^ Wilson, Leslie B. (1993). Comparative Programming Languages, Second Edition. Addison-Wesley. p.Â 75. ISBNÂ 978-0-201-56885-1.

^ Stroustrup, Bjarne (2013). The C++ Programming Language, Fourth Edition. Addison-Wesley. p.Â 40. ISBNÂ 978-0-321-56384-2.

^ a b c Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 16. ISBNÂ 0-201-71012-9.

^ Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 24. ISBNÂ 0-201-71012-9.

^ a b Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 25. ISBNÂ 0-201-71012-9.

^ a b c d Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 19. ISBNÂ 0-201-71012-9.

^ a b c d e Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 30. ISBNÂ 0-201-71012-9.

^ Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 31. ISBNÂ 0-201-71012-9.

^ a b c d "Memory Layout of C Programs". 12 September 2011.

^ a b Kernighan, Brian W.; Ritchie, Dennis M. (1988). The C Programming Language Second Edition. Prentice Hall. p.Â 31. ISBNÂ 0-13-110362-8.

^ Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 128. ISBNÂ 0-201-71012-9.

^ a b c Kerrisk, Michael (2010). The Linux Programming Interface. No Starch Press. p.Â 121. ISBNÂ 978-1-59327-220-3.

^ Kerrisk, Michael (2010). The Linux Programming Interface. No Starch Press. p.Â 122. ISBNÂ 978-1-59327-220-3.

^ Kernighan, Brian W.; Ritchie, Dennis M. (1988). The C Programming Language Second Edition. Prentice Hall. p.Â 185. ISBNÂ 0-13-110362-8.

^ Kernighan, Brian W.; Ritchie, Dennis M. (1988). The C Programming Language Second Edition. Prentice Hall. p.Â 187. ISBNÂ 0-13-110362-8.

^ a b c Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 38. ISBNÂ 0-201-71012-9.

^ Stroustrup, Bjarne (2013). The C++ Programming Language, Fourth Edition. Addison-Wesley. p.Â 65. ISBNÂ 978-0-321-56384-2.

^ Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 193. ISBNÂ 0-201-71012-9.

^ a b c Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 39. ISBNÂ 0-201-71012-9.

^ a b Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 35. ISBNÂ 0-201-71012-9.

^ Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 192. ISBNÂ 0-201-71012-9.

^ Stroustrup, Bjarne (2013). The C++ Programming Language, Fourth Edition. Addison-Wesley. p.Â 22. ISBNÂ 978-0-321-56384-2.

^ Stroustrup, Bjarne (2013). The C++ Programming Language, Fourth Edition. Addison-Wesley. p.Â 21. ISBNÂ 978-0-321-56384-2.

^ Stroustrup, Bjarne (2013). The C++ Programming Language, Fourth Edition. Addison-Wesley. p.Â 49. ISBNÂ 978-0-321-56384-2.

^ a b Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 218. ISBNÂ 0-201-71012-9.

^ Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 217. ISBNÂ 0-201-71012-9.

^ Weiss, Mark Allen (1994). Data Structures and Algorithm Analysis in C++. Benjamin/Cummings Publishing Company, Inc. p.Â 103. ISBNÂ 0-8053-5443-3.

^ a b c Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 230. ISBNÂ 0-201-71012-9.

^ Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 240. ISBNÂ 0-201-71012-9.

^ a b c Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 241. ISBNÂ 0-201-71012-9.

^ Jones, Robin; Maynard, Clive; Stewart, Ian (December 6, 2012). The Art of Lisp Programming. Springer Science & Business Media. p.Â 2. ISBNÂ 9781447117193.

^ Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 220. ISBNÂ 0-201-71012-9.

^ Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 221. ISBNÂ 0-201-71012-9.

^ Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 229. ISBNÂ 0-201-71012-9.

^ Gordon, Michael J. C. (1996). "From LCF to HOL: a short history". Retrieved 2021-10-30.

^ Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 233. ISBNÂ 0-201-71012-9.

^ Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 235. ISBNÂ 0-201-71012-9.

^ a b "Birth of Prolog" (PDF). November 1992.

^ a b Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 246. ISBNÂ 0-201-71012-9.

^ Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 245. ISBNÂ 0-201-71012-9.

^ Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 247. ISBNÂ 0-201-71012-9.

^ Schach, Stephen R. (1990). Software Engineering. Aksen Associates Incorporated Publishers. p.Â 216. ISBNÂ 0-256-08515-3.

^ a b c Schach, Stephen R. (1990). Software Engineering. Aksen Associates Incorporated Publishers. p.Â 219. ISBNÂ 0-256-08515-3.

^ a b Schach, Stephen R. (1990). Software Engineering. Aksen Associates Incorporated Publishers. p.Â 226. ISBNÂ 0-256-08515-3.

^ a b Schach, Stephen R. (1990). Software Engineering. Aksen Associates Incorporated Publishers. p.Â 220. ISBNÂ 0-256-08515-3.

^ Schach, Stephen R. (1990). Software Engineering. Aksen Associates Incorporated Publishers. p.Â 258. ISBNÂ 0-256-08515-3.

^ Schach, Stephen R. (1990). Software Engineering. Aksen Associates Incorporated Publishers. p.Â 259. ISBNÂ 0-256-08515-3.

^ Schach, Stephen R. (1990). Software Engineering. Aksen Associates Incorporated Publishers. p.Â 284. ISBNÂ 0-256-08515-3.

^ Weiss, Mark Allen (1994). Data Structures and Algorithm Analysis in C++. Benjamin/Cummings Publishing Company, Inc. p.Â 57. ISBNÂ 0-8053-5443-3.

^ Schach, Stephen R. (1990). Software Engineering. Aksen Associates Incorporated Publishers. p.Â 285. ISBNÂ 0-256-08515-3.

^ a b c Silberschatz, Abraham (1994). Operating System Concepts, Fourth Edition. Addison-Wesley. p.Â 1. ISBNÂ 978-0-201-50480-4.

^ a b c Stair, Ralph M. (2003). Principles of Information Systems, Sixth Edition. Thomson. p.Â 147. ISBNÂ 0-619-06489-7.

^ a b c d e Stair, Ralph M. (2003). Principles of Information Systems, Sixth Edition. Thomson. p.Â 148. ISBNÂ 0-619-06489-7.

^ a b c d Stair, Ralph M. (2003). Principles of Information Systems, Sixth Edition. Thomson. p.Â 149. ISBNÂ 0-619-06489-7.

^ a b Tanenbaum, Andrew S. (1990). Structured Computer Organization, Third Edition. Prentice Hall. p.Â 11. ISBNÂ 978-0-13-854662-5.

^ a b Kerrisk, Michael (2010). The Linux Programming Interface. No Starch Press. p.Â 21. ISBNÂ 978-1-59327-220-3.

^ a b c d e Kerrisk, Michael (2010). The Linux Programming Interface. No Starch Press. p.Â 22. ISBNÂ 978-1-59327-220-3.

^ a b c Bach, Maurice J. (1986). The Design of the UNIX Operating System. Prentice-Hall, Inc. p.Â 152. ISBNÂ 0-13-201799-7.

^ Tanenbaum, Andrew S. (2013). Structured Computer Organization, Sixth Edition. Pearson. p.Â 443. ISBNÂ 978-0-13-291652-3.

^ Lacamera, Daniele (2018). Embedded Systems Architecture. Packt. p.Â 8. ISBNÂ 978-1-78883-250-2.

^ Kernighan, Brian W.; Ritchie, Dennis M. (1988). The C Programming Language Second Edition. Prentice Hall. p.Â 187. ISBNÂ 0-13-110362-8.

^ Kerrisk, Michael (2010). The Linux Programming Interface. No Starch Press. p.Â 23. ISBNÂ 978-1-59327-220-3.

^ Kernighan, Brian W. (1984). The Unix Programming Environment. Prentice Hall. p.Â 201. ISBNÂ 0-13-937699-2.

^ Kerrisk, Michael (2010). The Linux Programming Interface. No Starch Press. p.Â 187. ISBNÂ 978-1-59327-220-3.

^ Haviland, Keith (1987). Unix System Programming. Addison-Wesley Publishing Company. p.Â 121. ISBNÂ 0-201-12919-1.

^ a b Tanenbaum, Andrew S. (1990). Structured Computer Organization, Third Edition. Prentice Hall. p.Â 308. ISBNÂ 978-0-13-854662-5.

^ Tanenbaum, Andrew S. (1990). Structured Computer Organization, Third Edition. Prentice Hall. p.Â 292. ISBNÂ 978-0-13-854662-5.

^ Tanenbaum, Andrew S. (1990). Structured Computer Organization, Third Edition. Prentice Hall. p.Â 294. ISBNÂ 978-0-13-854662-5.

^ Silberschatz, Abraham (1994). Operating System Concepts, Fourth Edition. Addison-Wesley. p.Â 34. ISBNÂ 978-0-201-50480-4.

^ a b Tanenbaum, Andrew S. (1990). Structured Computer Organization, Third Edition. Prentice Hall. p.Â 295. ISBNÂ 978-0-13-854662-5.

^ Tanenbaum, Andrew S. (1990). Structured Computer Organization, Third Edition. Prentice Hall. p.Â 309. ISBNÂ 978-0-13-854662-5.

^ a b Silberschatz, Abraham (1994). Operating System Concepts, Fourth Edition. Addison-Wesley. p.Â 31. ISBNÂ 978-0-201-50480-4.

^ a b c Stair, Ralph M. (2003). Principles of Information Systems, Sixth Edition. Thomson. p.Â 145. ISBNÂ 0-619-06489-7.

^ a b Stair, Ralph M. (2003). Principles of Information Systems, Sixth Edition. Thomson. p.Â 146. ISBNÂ 0-619-06489-7.

^ Silberschatz, Abraham (1994). Operating System Concepts, Fourth Edition. Addison-Wesley. p.Â 30. ISBNÂ 978-0-201-50480-4.

^ a b Wilson, Leslie B. (2001). Comparative Programming Languages, Third Edition. Addison-Wesley. p.Â 40. ISBNÂ 0-201-71012-9.

^ a b Tanenbaum, Andrew S. (2013). Structured Computer Organization, Sixth Edition. Pearson. p.Â 6. ISBNÂ 978-0-13-291652-3.

^ Tanenbaum, Andrew S. (2013). Structured Computer Organization, Sixth Edition. Pearson. p.Â 243. ISBNÂ 978-0-13-291652-3.

^ Tanenbaum, Andrew S. (2013). Structured Computer Organization, Sixth Edition. Pearson. p.Â 147. ISBNÂ 978-0-13-291652-3.

^ Tanenbaum, Andrew S. (2013). Structured Computer Organization, Sixth Edition. Pearson. p.Â 148. ISBNÂ 978-0-13-291652-3.

^ Tanenbaum, Andrew S. (2013). Structured Computer Organization, Sixth Edition. Pearson. p.Â 253. ISBNÂ 978-0-13-291652-3.

^ Tanenbaum, Andrew S. (2013). Structured Computer Organization, Sixth Edition. Pearson. p.Â 255. ISBNÂ 978-0-13-291652-3.

^ Tanenbaum, Andrew S. (2013). Structured Computer Organization, Sixth Edition. Pearson. p.Â 161. ISBNÂ 978-0-13-291652-3.

^ Tanenbaum, Andrew S. (2013). Structured Computer Organization, Sixth Edition. Pearson. p.Â 166. ISBNÂ 978-0-13-291652-3.

^ Tanenbaum, Andrew S. (2013). Structured Computer Organization, Sixth Edition. Pearson. p.Â 249. ISBNÂ 978-0-13-291652-3.

^ Tanenbaum, Andrew S. (2013). Structured Computer Organization, Sixth Edition. Pearson. p.Â 111. ISBNÂ 978-0-13-291652-3.






<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Computer_program&oldid=1069490706"
		Categories: Computer programmingSoftwareHidden categories: Articles with short descriptionShort description is different from WikidataArticles to be expanded from October 2021All articles to be expandedArticles using small message boxes
	
