
Title:
Hungarian notation
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Identifier naming notation (computer science)
Hungarian notation is an identifier naming convention in computer programming, in which the name of a variable or function indicates its intention or kind, and in some dialects its type. The original Hungarian notation uses intention or kind in its naming convention and is sometimes called Apps Hungarian as it became popular in the Microsoft Apps division in the development of Word, Excel and other apps. As the Microsoft Windows division adopted the naming convention, they used the actual data type for naming, and this convention became widely spread through the Windows API; this is sometimes called Systems Hungarian notation.

.mw-parser-output .quotebox{background-color:#F9F9F9;border:1px solid #aaa;box-sizing:border-box;padding:10px;font-size:88%;max-width:100%}.mw-parser-output .quotebox.floatleft{margin:.5em 1.4em .8em 0}.mw-parser-output .quotebox.floatright{margin:.5em 0 .8em 1.4em}.mw-parser-output .quotebox.centered{overflow:hidden;position:relative;margin:.5em auto .8em auto}.mw-parser-output .quotebox.floatleft span,.mw-parser-output .quotebox.floatright span{font-style:inherit}.mw-parser-output .quotebox>blockquote{margin:0;padding:0;border-left:0;font-family:inherit;font-size:inherit}.mw-parser-output .quotebox-title{background-color:#F9F9F9;text-align:center;font-size:110%;font-weight:bold}.mw-parser-output .quotebox-quote>:first-child{margin-top:0}.mw-parser-output .quotebox-quote:last-child>:last-child{margin-bottom:0}.mw-parser-output .quotebox-quote.quoted:before{font-family:"Times New Roman",serif;font-weight:bold;font-size:large;color:gray;content:" â ";vertical-align:-45%;line-height:0}.mw-parser-output .quotebox-quote.quoted:after{font-family:"Times New Roman",serif;font-weight:bold;font-size:large;color:gray;content:" â ";line-height:0}.mw-parser-output .quotebox .left-aligned{text-align:left}.mw-parser-output .quotebox .right-aligned{text-align:right}.mw-parser-output .quotebox .center-aligned{text-align:center}.mw-parser-output .quotebox .quote-title,.mw-parser-output .quotebox .quotebox-quote{display:block}.mw-parser-output .quotebox cite{display:block;font-style:normal}@media screen and (max-width:640px){.mw-parser-output .quotebox{width:100%!important;margin:0 0 .8em!important;float:none!important}}

Simonyi: ...BCPL [had] a single type which was a 16-bit word... not that it matters.
Booch: Unless you continue the Hungarian notation.
Simonyi: Absolutely... we went over to the typed languages too later ... But ... we would look at one name and I would tell you exactly a lot about that...[1]



Hungarian notation was designed to be language-independent, and found its first major use with the BCPL programming language. Because BCPL has no data types other than the machine word, nothing in the language itself helps a programmer remember variables' types. Hungarian notation aims to remedy this by providing the programmer with explicit knowledge of each variable's data type.
In Hungarian notation, a variable name starts with a group of lower-case letters which are mnemonics for the type or purpose of that variable, followed by whatever name the programmer has chosen; this last part is sometimes distinguished as the given name. The first character of the given name can be capitalized to separate it from the type indicators (see also CamelCase). Otherwise the case of this character denotes scope.

Contents

1 History
2 Systems Hungarian vs. Apps Hungarian
3 Relation to sigils
4 Examples
5 Advantages
6 Disadvantages
7 Notable opinions
8 See also
9 References
10 External links



History[edit]
This section does not cite any sources. Please help improve this section by adding citations to reliable sources. Unsourced material may be challenged and removed.  (December 2016) (Learn how and when to remove this template message)
The original Hungarian notation, which would now be called Apps Hungarian, was invented by Charles Simonyi, a programmer who worked at Xerox PARC circa 1972â1981, and who later became Chief Architect at Microsoft.
The name of the notation is a reference to Simonyi's nation of origin; Hungarian people's names are "reversed" compared to most other European names; the family name precedes the given name. For example, the anglicized name "Charles Simonyi" in Hungarian was originally "Simonyi KÃ¡roly". In the same way, the type name precedes the "given name" in Hungarian notation, rather than the Smalltalk "type last" naming style (e.g. aPoint and lastPoint). This latter naming style was most common at Xerox PARC during Simonyi's tenure there.
The name Apps Hungarian was invented since the convention was used in the applications division of Microsoft. Systems Hungarian developed later in the Microsoft Windows development team. Simonyi's paper referred to prefixes used to indicate the "type" of information being stored. His proposal was largely concerned with decorating identifier names based upon the semantic information of what they store (in other words, the variable's purpose), consistent with Apps Hungarian. However, his suggestions were not entirely distinct from what became known as Systems Hungarian, as some of his suggested prefixes contain little or no semantic information (see below for examples).

Systems Hungarian vs. Apps Hungarian[edit]
Where Systems notation and Apps notation differ is in the purpose of the prefixes.
In Systems Hungarian notation, the prefix encodes the actual data type of the variable. For example:

lAccountNumÂ : variable is a long integer ("l");
arru8NumberListÂ : variable is an array of unsigned 8-bit integers ("arru8");
bReadLine(bPort,&arru8NumberList)Â : function with a byte-value return code.
strNameÂ : Variable represents a string ("str") containing the name, but does not specify how that string is implemented.
Apps Hungarian notation strives to encode the logical data type rather than the physical data type; in this way, it gives a hint as to what the variable's purpose is, or what it represents.

rwPositionÂ : variable represents a row ("rw");
usNameÂ : variable represents an unsafe string ("us"), which needs to be "sanitized" before it is used (e.g. see code injection and cross-site scripting for examples of attacks that can be caused by using raw user input)
szNameÂ : variable is a zero-terminated string ("sz"); this was one of Simonyi's original suggested prefixes.
Most, but not all, of the prefixes Simonyi suggested are semantic in nature. To modern eyes, some prefixes seem to represent physical data types, such as sz for strings. However, such prefixes were still semantic, as Simonyi intended Hungarian notation for languages whose type systems could not distinguish some data types that modern languages take for granted.
The following are examples from the original paper:[2]

pX is a pointer to another type X; this contains very little semantic information.
d is a prefix meaning difference between two values; for instance, dY might represent a distance along the Y-axis of a graph, while a variable just called y might be an absolute position. This is entirely semantic in nature.
sz is a null- or zero-terminated string. In C, this contains some semantic information because it is not clear whether a variable of type char* is a pointer to a single character, an array of characters or a zero-terminated string.
w marks a variable that is a word. This contains essentially no semantic information at all, and would probably be considered Systems Hungarian.
b marks a byte, which in contrast to w might have semantic information, because in C the only byte-sized data type is the char, so these are sometimes used to hold numeric values. This prefix might clear ambiguity between whether the variable is holding a value that should be treated as a character or a number.
While the notation always uses initial lower-case letters as mnemonics, it does not prescribe the mnemonics themselves. There are several widely used conventions (see examples below), but any set of letters can be used, as long as they are consistent within a given body of code.
It is possible for code using Apps Hungarian notation to sometimes contain Systems Hungarian when describing variables that are defined solely in terms of their type.

Relation to sigils[edit]
In some programming languages, a similar notation now called sigils is built into the language and enforced by the compiler. For example, in some forms of BASIC, name$ names a string and count% names an integer. The major difference between Hungarian notation and sigils is that sigils declare the type of the variable in the language, whereas Hungarian notation is purely a naming scheme with no effect on the machine interpretation of the program text.

Examples[edit]
bBusyÂ : boolean
chInitialÂ : char
cApplesÂ : count of items
dwLightYearsÂ : double word (Systems)
fBusyÂ : flag (or float)
nSizeÂ : integer (Systems) or count (Apps)
iSizeÂ : integer (Systems) or index (Apps)
fpPriceÂ : floating-point
dbPiÂ : double (Systems)
pFooÂ : pointer
rgStudentsÂ : array, or range
szLastNameÂ : zero-terminated string
u16IdentifierÂ : unsigned 16-bit integer (Systems)
u32IdentifierÂ : unsigned 32-bit integer (Systems)
stTimeÂ : clock time structure
fnFunctionÂ : function name
The mnemonics for pointers and arrays, which are not actual data types, are usually followed by the type of the data element itself:

pszOwnerÂ : pointer to zero-terminated string
rgfpBalancesÂ : array of floating-point values
aulColorsÂ : array of unsigned long (Systems)
While Hungarian notation can be applied to any programming language and environment, it was widely adopted by Microsoft for use with the C language, in particular for Microsoft Windows, and its use remains largely confined to that area. In particular, use of Hungarian notation was widely evangelized by Charles Petzold's "Programming Windows", the original (and for many readers, the definitive) book on Windows API programming.  Thus, many commonly seen constructs of Hungarian notation are specific to Windows:

For programmers who learned Windows programming in C, probably the most memorable examples are the wParam (word-size parameter) and lParam (long-integer parameter) for the WindowProc() function.
hwndFooÂ : handle to a window
lpszBarÂ : long pointer to a zero-terminated string
The notation is sometimes extended in C++ to include the scope of a variable, optionally separated by an underscore.[3][4] This extension is often also used without the Hungarian type-specification:

g_nWheelsÂ : member of a global namespace, integer
m_nWheelsÂ : member of a structure/class, integer
m_wheels, _wheelsÂ : member of a structure/class
s_wheelsÂ : static member of a class
c_wheelsÂ : static member of a function
In JavaScript code using jQuery, a $ prefix is often used to indicate that a variable holds a jQuery object (versus a plain DOM object or some other value).[5]

Advantages[edit]
(Some of these apply to Systems Hungarian only.)
Supporters argue that the benefits of Hungarian Notation include:[2]

The symbol type can be seen from its name.  This is useful when looking at the code outside an integrated development environment â like on a code review or printout â or when the symbol declaration is in another file from the point of use, such as a function.
In a language that uses dynamic typing or that is untyped, the decorations that refer to types cease to be redundant. In such languages variables are typically not declared as holding a particular type of data, so the only clue as to what operations can be done on it are hints given by the programmer, such as a variable naming scheme, documentation and comments. As mentioned above, Hungarian Notation expanded in such a language (BCPL).
The formatting of variable names may simplify some aspects of code refactoring (while making other aspects more error-prone).
Multiple variables with similar semantics can be used in a block of code: dwWidth, iWidth, fWidth, dWidth.
Variable names can be easy to remember from knowing just their types.
It leads to more consistent variable names.
Inappropriate type casting and operations using incompatible types can be detected easily while reading code.
In complex programs with many global objects (VB/Delphi Forms), having a basic prefix notation can ease the work of finding the component inside of the editor. For example, searching for the string btn might find all the Button objects.
Applying Hungarian notation in a narrower way, such as applying only for member variables, helps avoid naming collision.
Printed code is more clear to the reader in case of datatypes, type conversions, assignments, truncations, etc.
Disadvantages[edit]
Most arguments against Hungarian notation are against Systems Hungarian notation, not Apps Hungarian notation. Some potential issues are:

The Hungarian notation is redundant when type-checking is done by the compiler. Compilers for languages providing strict type-checking, such as Pascal, ensure the usage of a variable is consistent with its type automatically; checks by eye are redundant and subject to human error.
Most modern integrated development environments display variable types on demand, and automatically flag operations which use incompatible types, making the notation largely obsolete.
Hungarian Notation becomes confusing when it is used to represent several properties, as in  a_crszkvc30LastNameCol: a constant reference argument, holding the contents of a database column LastName of type varchar(30) which is part of the table's primary key.
It may lead to inconsistency when code is modified or ported. If a variable's type is changed, either the decoration on the name of the variable will be inconsistent with the new type, or the variable's name must be changed. A particularly well known example is the standard WPARAM type, and the accompanying wParam formal parameter in many Windows system function declarations. The 'w' stands for 'word', where 'word' is the native word size of the platform's hardware architecture. It was originally a 16 bit type on 16-bit word architectures, but was changed to a 32-bit on 32-bit word architectures, or 64-bit type on 64-bit word architectures in later versions of the operating system while retaining its original name (its true underlying type is UINT_PTR, that is, an unsigned integer large enough to hold a pointer). The semantic impedance, and hence programmer confusion and inconsistency from platform-to-platform, is on the assumption that 'w' stands for a two byte, 16-bit word in those different environments.
Most of the time, knowing the use of a variable implies knowing its type. Furthermore, if the usage of a variable is not known, it cannot be deduced from its type.
Hungarian notation reduces the benefits of using code editors that support completion on variable names, for the programmer has to input the type specifier first, which is more likely to collide with other variables than when using other naming schemes.
It makes code less readable, by obfuscating the purpose of the variable with type and scoping prefixes.[6]
The additional type information can insufficiently replace more descriptive names. E.g. sDatabase does not tell the reader what it is. databaseName might be a more descriptive name.
When names are sufficiently descriptive, the additional type information can be redundant. E.g. firstName is most likely a string. So naming it sFirstName only adds clutter to the code.
It's harder to remember the names.
Multiple variables with different semantics can be used in a block of code with similar names: dwTmp, iTmp, fTmp, dTmp.
Placing data type or intent character identifiers as a prefix to the field or variable's Given name subverts the ability, in some programming environments, to jump to a field or variable name, alphabetically, when the user begins typing the name. FileMaker, [7] for example, is one such programming environment. It may be preferable when using one of these programming environments to instead suffix Given names with such identifying characters.
Notable opinions[edit]
Robert Cecil Martin (against Hungarian notation and all other forms of encoding): ... nowadays HN and other forms of type encoding are simply impediments.  They make it harder to change the name or type of a variable, function, member or class.  They make it harder to read the code. And they create the possibility that the encoding system will mislead the reader.[8]
Linus Torvalds (against Systems Hungarian): Encoding the type of a function into the name (so-called Hungarian notation) is brain damagedâthe compiler knows the types anyway and can check those, and it only confuses the programmer.[9]
Steve McConnell (for Apps Hungarian): Although the Hungarian naming convention is no longer in widespread use, the basic idea of standardizing on terse, precise abbreviations continues to have value. Standardized prefixes allow you to check types accurately when you're using abstract data types that your compiler can't necessarily check.[10]
Bjarne Stroustrup (against Systems Hungarian for C++):No I don't recommend 'Hungarian'. I regard 'Hungarian' (embedding an abbreviated version of a type in a variable name) as a technique that can be useful in untyped languages, but is completely unsuitable for a language that supports generic programming and object-oriented programming â both of which emphasize selection of operations based on the type and arguments (known to the language or to the run-time support). In this case, 'building the type of an object into names' simply complicates and minimizes abstraction.[11]
Joel Spolsky (for Apps Hungarian): If you read Simonyi's paper closely, what he was getting at was the same kind of naming convention as I used in my example above where we decided that us meant unsafe string and s meant safe string. They're both of type string. The compiler won't help you if you assign one to the other and Intellisense [an Intelligent code completion system] won't tell you bupkis. But they are semantically different. They need to be interpreted differently and treated differently and some kind of conversion function will need to be called if you assign one to the other or you will have a runtime bug. If you're lucky. There's still a tremendous amount of value to Apps Hungarian, in that it increases collocation in code, which makes the code easier to read, write, debug and maintain, and, most importantly, it makes wrong code look wrong.... (Systems Hungarian) was a subtle but complete misunderstanding of Simonyiâs intention and practice.[12]
Microsoft's Design Guidelines[13] discourage developers from using Systems Hungarian notation when they choose names for the elements in .NET class libraries, although it was common on prior Microsoft development platforms like Visual Basic 6 and earlier.  These Design Guidelines are silent on the naming conventions for local variables inside functions.
See also[edit]
Leszynski naming convention, Hungarian notation for database development
Polish notation
PascalCase
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}"Oral History of Charles Simonyi" (PDF). Archive.computerhistory.org\accessdate=5 August 2018.

^ Jump up to: a b Charles Simonyi (November 1999). "Hungarian Notation". MSDN Library. Microsoft Corp.

^ "Mozilla Coding Style". Developer.mozilla.org. Retrieved 17 March 2015.

^ "Webkit Coding Style Guidelines". Webkit.org. Retrieved 17 March 2015.

^ "Why would a JavaScript variable start with a dollar sign?". Stack Overflow. Retrieved 12 February 2016.

^ Jones, Derek M. (2009). The New C Standard: A Cultural and Economic Commentary (PDF). Addison-Wesley. p.Â 727. ISBNÂ 978-0-201-70917-9.

^ "Make an app for any task - FileMaker â An Apple Subsidiary". Filemaker.com. Retrieved 5 August 2018.

^ Martin, Robert Cecil (2008). Clean Code: A Handbook of Agile Software Craftsmanship. Redmond, WA: Prentice Hall PTR. ISBNÂ 978-0-13-235088-4.

^ "Linux kernel coding style". Linux kernel documentation. Retrieved 9 March 2018.

^ McConnell, Steve (2004). Code Complete (2ndÂ ed.). Redmond, WA: Microsoft Press. ISBNÂ 0-7356-1967-0.

^ Stroustrup, Bjarne (2007). "Bjarne Stroustrup's C++ Style and Technique FAQ". Retrieved 15 February 2015.

^ Spolsky, Joel (2005-05-11). "Making Wrong Code Look Wrong". Joel on Software. Retrieved 2005-12-13.

^ "Design Guidelines for Developing Class Libraries: General Naming Conventions". Retrieved 2008-01-03.


External links[edit]
Meta-Programming: A Software Production Method Charles Simonyi, December 1976 (PhD Thesis)
Hugarian notation - it's my turn nowÂ :)  â Larry Osterman's WebLog
Hungarian Notation (MSDN)
HTML version of Doug Klunder's paper
RVBA Naming Conventions
Coding Style Conventions (MSDN)




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Hungarian_notation&oldid=1063707800"
		Categories: Source codeNaming conventionsHidden categories: Articles with short descriptionShort description matches WikidataArticles needing additional references from December 2016All articles needing additional references
	
