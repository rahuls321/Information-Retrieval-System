
Title:
CookâLevin theorem
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Boolean satisfiability is NP-complete and therefore that NP-complete problems exist
In computational complexity theory, the CookâLevin theorem, also known as Cook's theorem, states that the Boolean satisfiability problem is NP-complete.  That is, it is in NP, and any problem in NP can be reduced in polynomial time by a deterministic Turing machine to the Boolean satisfiability problem.
The theorem is named after Stephen Cook and Leonid Levin.
An important consequence of this theorem is that if there exists a deterministic polynomial-time algorithm for solving Boolean satisfiability, then every NP problem can be solved by a deterministic polynomial-time algorithm.  The question of whether such an algorithm for Boolean satisfiability exists is thus equivalent to the P versus NP problem, which is widely considered the most important unsolved problem in theoretical computer science.

Contents

1 Contributions
2 Definitions
3 Idea
4 Proof
5 Complexity
6 Consequences
7 References



Contributions[edit]
The concept of NP-completeness was developed in the late 1960s and early 1970s in parallel by researchers in North America and the USSR.
In 1971, Stephen Cook published his paper "The complexity of theorem proving procedures"[1] in conference proceedings of the newly founded ACM Symposium on Theory of Computing. Richard Karp's subsequent paper, "Reducibility among
combinatorial problems",[2] generated renewed interest in Cook's paper by providing a list of 21 NP-complete problems. Cook and Karp received a Turing Award for this work.
The theoretical interest in NP-completeness was also enhanced by the work of Theodore P. Baker, John Gill, and Robert Solovay who showed, in 1975, that solving NP-problems in Oracle machine models requires exponential time. That is, there exists an oracle A such that, for all subexponential deterministic time complexity classes T, the relativized complexity class NPA is not a subset of TA. In particular, for this oracle, PAÂ â Â NPA.[3]
In the USSR, a result equivalent to Baker, Gill, and Solovay's was published in 1969 by M. Dekhtiar.[4] Later Leonid Levin's paper, "Universal search problems",[5] was published in 1973, although it was mentioned in talks and submitted for publication a few years earlier.
Levin's approach was slightly different from Cook's and Karp's in that he considered search problems, which require finding solutions rather than simply determining existence. He provided 6 such NP-complete search problems, or universal problems.
Additionally he found for each of these problems an algorithm that solves it in optimal time (in particular, these algorithms run in polynomial time if and only if P = NP).

Definitions[edit]
A decision problem is in NP if it can be solved by a non-deterministic algorithm in polynomial time.
An instance of the Boolean satisfiability problem is a Boolean expression that combines Boolean variables using Boolean operators.
An expression is satisfiable if there is some assignment of truth values to the variables that makes the entire expression true.

Idea[edit]
Given any decision problem in NP, construct a non-deterministic machine that solves it in polynomial time. Then for each input to that machine, build a Boolean expression which computes whether that specific input is passed to the machine, the machine runs correctly, and the machine halts and answers "yes". Then the expression can be satisfied if and only if there is a way for the machine to run correctly and answer "yes", so the satisfiability of the constructed expression is equivalent to asking whether or not the machine will answer "yes".

Proof[edit]
  Schematized accepting computation by the machine M.
This proof is based on the one given by Garey and Johnson.[6]
There are two parts to proving that the Boolean satisfiability problem (SAT) is NP-complete. One is to show that SAT is an NP problem. The other is to show that every NP problem can be reduced to an instance of a SAT problem by a polynomial-time many-one reduction.
SAT is in NP because any assignment of Boolean values to Boolean variables that is claimed to satisfy the given expression can be verified in polynomial time by a deterministic Turing machine. (The statements verifiable in polynomial time by a deterministic Turing machine and solvable in polynomial time by a non-deterministic Turing machine are totally equivalent, and the proof can be found in many textbooks, for example Sipser's Introduction to the Theory of Computation, section 7.3., as well as in the Wikipedia article on NP).
Now suppose that a given problem in NP can be solved by the nondeterministic Turing machine M = (Q, Î£, s, F, Î´), where Q is the set of states, Î£ is the alphabet of tape symbols, s â Q is the initial state, F â Q is the set of accepting states, and Î´ â ((Q \ F) Ã Î£) Ã (Q Ã Î£ Ã {â1, +1}) is the transition relation. Suppose further that M accepts or rejects an instance of the problem in time p(n) where n is the size of the instance and p is a polynomial function.
For each input, I, we specify a Boolean expression which is satisfiable if and only if the machine M accepts I.
The Boolean expression uses the variables set out in the following table. Here, q â Q, âp(n) â¤ i â¤ p(n), j â Î£, and 0 â¤ k â¤ p(n).



Variables

Intended interpretation

How many?


Ti,j,k

True if tape cell i contains symbol j at step k of the computation.

O(p(n)2)


Hi,k

True if the M's read/write head is at tape cell i at step k of the computation.

O(p(n)2)


Qq,k

True if M is in state q at step k of the computation.

O(p(n))

Define the Boolean expression B to be the conjunction of the sub-expressions in the following table, for all âp(n) â¤ i â¤ p(n) and 0 â¤ k â¤ p(n):



Expression

Conditions

Interpretation

How many?



  
    
      
        
          T
          
            i
            ,
            j
            ,
            0
          
        
      
    
    {\displaystyle T_{i,j,0}}
  


Tape cell i initially contains symbol j

Initial contents of the tape.  For i > n-1 and i < 0, outside of the actual input 
  
    
      
        I
      
    
    {\displaystyle I}
  
, the initial symbol is the special default/blank symbol.

O(p(n))



  
    
      
        
          Q
          
            s
            ,
            0
          
        
      
    
    {\displaystyle Q_{s,0}}
  




Initial state of M.

1



  
    
      
        
          H
          
            0
            ,
            0
          
        
      
    
    {\displaystyle H_{0,0}}
  




Initial position of read/write head.

1



  
    
      
        Â¬
        
          T
          
            i
            ,
            j
            ,
            k
          
        
        â¨
        Â¬
        
          T
          
            i
            ,
            
              j
              â²
            
            ,
            k
          
        
      
    
    {\displaystyle \neg T_{i,j,k}\lor \neg T_{i,j',k}}
  


j â  jâ²

At most one symbol per tape cell.

O(p(n)2)



  
    
      
        
          â
          
            j
            â
            Î£
          
        
        
          T
          
            i
            ,
            j
            ,
            k
          
        
      
    
    {\displaystyle \bigvee _{j\in \Sigma }T_{i,j,k}}
  




At least one symbol per tape cell.

O(p(n)2)



  
    
      
        
          T
          
            i
            ,
            j
            ,
            k
          
        
        â§
        
          T
          
            i
            ,
            
              j
              â²
            
            ,
            k
            +
            1
          
        
        â
        
          H
          
            i
            ,
            k
          
        
      
    
    {\displaystyle T_{i,j,k}\land T_{i,j',k+1}\rightarrow H_{i,k}}
  


j â  jâ²

Tape remains unchanged unless written.

O(p(n)2)


Â¬Qq,k â¨ Â¬Qqâ²,k

q â  qâ²

Only one state at a time.

O(p(n))


Â¬Hi,k â¨ Â¬Hiâ²,k

i â  iâ²

Only one head position at a time.

O(p(n)3)



  
    
      
        
          
            
              
                (
                
                  H
                  
                    i
                    ,
                    k
                  
                
                â§
                
                  Q
                  
                    q
                    ,
                    k
                  
                
                â§
                
                  T
                  
                    i
                    ,
                    Ï
                    ,
                    k
                  
                
                )
                â
              
            
            
              
                
                  â
                  
                    (
                    (
                    q
                    ,
                    Ï
                    )
                    ,
                    (
                    
                      q
                      â²
                    
                    ,
                    
                      Ï
                      â²
                    
                    ,
                    d
                    )
                    )
                    â
                    Î´
                  
                
                (
                
                  H
                  
                    i
                    +
                    d
                    ,
                    Â 
                    k
                    +
                    1
                  
                
                â§
                
                  Q
                  
                    
                      q
                      â²
                    
                    ,
                    Â 
                    k
                    +
                    1
                  
                
                â§
                
                  T
                  
                    i
                    ,
                    Â 
                    
                      Ï
                      â²
                    
                    ,
                    Â 
                    k
                    +
                    1
                  
                
                )
              
            
          
        
      
    
    {\displaystyle {\begin{array}{l}(H_{i,k}\land Q_{q,k}\land T_{i,\sigma ,k})\to \\\bigvee _{((q,\sigma ),(q',\sigma ',d))\in \delta }(H_{i+d,\ k+1}\land Q_{q',\ k+1}\land T_{i,\ \sigma ',\ k+1})\end{array}}}
  


k<p(n)

Possible transitions at computation step k when head is at position i.

O(p(n)2)



  
    
      
        
          â
          
            0
            â¤
            k
            â¤
            p
            (
            n
            )
          
        
        
          â
          
            f
            â
            F
          
        
        
          Q
          
            f
            ,
            k
          
        
      
    
    {\displaystyle \bigvee _{0\leq k\leq p(n)}\bigvee _{f\in F}Q_{f,k}}
  




Must finish in an accepting state, not later than in step p(n).

1

If there is an accepting computation for M on input I, then B is satisfiable by assigning Ti,j,k, Hi,k and Qi,k their intended interpretations. On the other hand, if B is satisfiable, then there is an accepting computation for M on input I that follows the steps indicated by the assignments to the variables.
There are O(p(n)2) Boolean variables, each encodeable in space O(log p(n)). The number of clauses is O(p(n)3) so the size of B is O(log(p(n))p(n)3). Thus the transformation is certainly a polynomial-time many-one reduction, as required.

Complexity[edit]
While the above method encodes a non-deterministic Turing machine in complexity 
  
    
      
        O
        (
        log
        â¡
        (
        p
        (
        n
        )
        )
        p
        (
        n
        
          )
          
            3
          
        
        )
      
    
    {\displaystyle O(\log(p(n))p(n)^{3})}
  
, the literature describes more sophisticated approaches in complexity 
  
    
      
        O
        (
        p
        (
        n
        )
        log
        â¡
        (
        p
        (
        n
        )
        )
        )
      
    
    {\displaystyle O(p(n)\log(p(n)))}
  
.[7][8][9][10][11] The quasilinear result first appeared seven years after Cook's original publication.
Generalized versions of boolean satisfiability have encodings with stronger bounds still: quantified boolean formulas (QBF's) encode non-deterministic Turing machines in polynomial complexity to the machine's space bound (as opposed to time bound), and dependency quantified boolean formulas (DQBF's) encode non-deterministic Turing machines in an ideal logarithmic complexity to the machine's space bound.[12][13]

Consequences[edit]
The proof shows that any problem in NP can be reduced in polynomial time (in fact, logarithmic space suffices) to an instance of the Boolean satisfiability problem. This means that if the Boolean satisfiability problem could be solved in polynomial time by a deterministic Turing machine, then all problems in NP could be solved in polynomial time, and so the complexity class NP would be equal to the complexity class P.
The significance of NP-completeness was made clear by the publication in 1972 of Richard Karp's landmark paper, "Reducibility among combinatorial problems", in which he showed that 21 diverse combinatorial and graph theoretical problems, each infamous for its intractability, are NP-complete.[2]
Karp showed each of his problems to be NP-complete by reducing another problem (already shown to be NP-complete) to that problem.  For example, he showed the problem 3SAT (the Boolean satisfiability problem for expressions in conjunctive normal form with exactly three variables or negations of variables per clause) to be NP-complete by showing how to reduce (in polynomial time) any instance of SAT to an equivalent instance of 3SAT.  (First you modify the proof of the CookâLevin theorem, so that the resulting formula is in conjunctive normal form, then you introduce new variables to split clauses with more than 3 atoms.  For example, the clause (A â¨ B â¨ C â¨ D) can be replaced by the conjunction of clauses (A â¨ B â¨ Z) â§ (Â¬Z â¨ C â¨ D), where Z is a new variable which will not be used anywhere else in the expression.  Clauses with fewer than 3 atoms can be padded; for example, A can be replaced by (A â¨ A â¨ A), and  (A â¨ B) can be replaced by (A â¨ B â¨ B) ).
Garey and Johnson presented more than 300 NP-complete problems in their book Computers and Intractability: A Guide to the Theory of NP-Completeness,[6] and new problems are still being discovered to be within that complexity class.
Although many practical instances of SAT can be solved by heuristic methods, the question of whether there is a deterministic polynomial-time algorithm for SAT (and consequently all other NP-complete problems) is still a famous unsolved problem, despite decades of intense effort by complexity theorists, mathematical logicians, and others.  For more details, see the article P versus NP problem.

References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Cook, Stephen (1971). "The complexity of theorem proving procedures". Proceedings of the Third Annual ACM Symposium on Theory of Computing. pp.Â 151â158. doi:10.1145/800157.805047.

^ Jump up to: a b Karp, Richard M. (1972). "Reducibility Among Combinatorial Problems" (PDF).  In Raymond E. Miller; James W. Thatcher (eds.). Complexity of Computer Computations. New York: Plenum. pp.Â 85â103. ISBNÂ 0-306-30707-3.

^ T. P. Baker; J. Gill; R. Solovay (1975). "Relativizations of the P = NP question". SIAM Journal on Computing. 4 (4): 431â442. doi:10.1137/0204037.

^ Dekhtiar, M. (1969). "On the impossibility of eliminating exhaustive search in computing a function relative to its graph". Proceedings of the USSR Academy of Sciences (in Russian). 14: 1146â1148.

^ Levin, Leonid (1973). "Ð£Ð½Ð¸Ð²ÐµÑÑÐ°Ð»ÑÐ½ÑÐµ Ð·Ð°Ð´Ð°ÑÐ¸ Ð¿ÐµÑÐµÐ±Ð¾ÑÐ°" [Universal search problems]. Problems of Information Transmission (in Russian). 9 (3): 115â116. Translated into English by Trakhtenbrot, B. A. (1984). "A survey of Russian approaches to perebor (brute-force searches) algorithms". Annals of the History of Computing. 6 (4): 384â400. doi:10.1109/MAHC.1984.10036.

^ Jump up to: a b Garey, Michael R.; David S. Johnson (1979). Computers and Intractability: A Guide to the Theory of NP-Completeness. W. H. Freeman. ISBNÂ 0-7167-1045-5.

^ Claus-Peter Schnorr (Jan 1978). "Satisfiability is quasilinear complete in NQL" (PDF). Journal of the ACM. 25 (1): 136â145.

^ Nicholas Pippenger and Michael J. Fischer (Apr 1979). "Relations among complexity measures" (PDF). Journal of the ACM. 26 (2): 361â381.

^ John Michael Robson (1979). A new proof of the NP completeness of satisfiability. Proceedings of the 2nd Australian Computer Science Conference.

^ John Michael Robson (May 1991). "An $O(T \log T)$ reduction from RAM computations to satisfiability". Theoretical Computer Science. 82 (1): 141â149.

^ Stephen A. Cook (Jan 1988). "Short propositional formulas represent nondeterministic computations" (PDF). Information Processing Letters. 26 (5): 269â270.

^ Peterson, Gary L., and John H. Reif. "Multiple-person alternation." 20th Annual Symposium on Foundations of Computer Science (sfcs 1979). IEEE, 1979.

^ Peterson, Gary, John Reif, and Salman Azhar. "Lower bounds for multiplayer noncooperative games of incomplete information." Computers & Mathematics with Applications 41.7-8 (2001): 957-992.






<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=CookâLevin_theorem&oldid=1066882554"
		Categories: Theorems in computational complexity theoryHidden categories: CS1 Russian-language sources (ru)Articles with short descriptionShort description is different from WikidataArticles containing proofs
	
