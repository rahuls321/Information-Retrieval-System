
Title:
Semantics (computer science)
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}Not to be confused with Computational semantics.
Field concerned with the rigorous mathematical study of the meaning of programming languages
This article includes a list of general references, but it remains largely unverified because it lacks sufficient corresponding inline citations. Please help to improve this article by introducing more precise citations.  (August 2020) (Learn how and when to remove this template message)
In programming language theory, semantics is the field concerned with the rigorous mathematical study of the meaning of programming languages.[1] It does so by evaluating the meaning of syntactically valid strings defined by a specific programming language, showing the computation involved. In such a case that the evaluation would be of syntactically invalid strings, the result would be non-computation. Semantics describes the processes a computer follows when executing a program in that specific language. This can be shown by describing the relationship between the input and output of a program, or an explanation of how the program will be executed on a certain platform, hence creating a model of computation.

Contents

1 Overview
2 Approaches
3 Variations
4 Describing relationships
5 History
6 See also
7 References
8 Further reading
9 External links



Overview[edit]
The field of formal semantics encompasses all of the following:

The definition of semantic models
The relations between different semantic models
The relations between different approaches to meaning
The relation between computation and the underlying mathematical structures from fields such as logic, set theory, model theory, category theory, etc.
It has close links with other areas of computer science such as programming language design, type theory, compilers and interpreters, program verification and model checking.

Approaches[edit]
There are many approaches to formal semantics; these belong to three major classes:

Denotational semantics,[2] whereby each phrase in the language is interpreted as a denotation, i.e. a conceptual meaning that can be thought of abstractly.  Such denotations are often mathematical objects inhabiting a mathematical space, but it is not a requirement that they should be so.  As a practical necessity, denotations are described using some form of mathematical notation, which can in turn be formalized as a denotational metalanguage.  For example, denotational semantics of functional languages often translate the language into domain theory. Denotational semantic descriptions can also serve as compositional translations from a programming language into the denotational metalanguage and used as a basis for designing compilers.
Operational semantics,[3] whereby the execution of the language is described directly (rather than by translation).  Operational semantics loosely corresponds to interpretation, although again the "implementation language" of the interpreter is generally a mathematical formalism.  Operational semantics may define an abstract machine (such as the SECD machine), and give meaning to phrases by describing the transitions they induce on states of the machine.  Alternatively, as with the pure lambda calculus, operational semantics can be defined via syntactic transformations on phrases of the language itself;
Axiomatic semantics,[4] whereby one gives meaning to phrases by describing the axioms that apply to them.  Axiomatic semantics makes no distinction between a phrase's meaning and the logical formulas that describe it; its meaning is exactly what can be proven about it in some logic.  The canonical example of axiomatic semantics is Hoare logic.
Apart from the choice between denotational, operational, or axiomatic approaches, most variations in formal semantic systems arise from the choice of supporting mathematical formalism.

Variations[edit]
Some variations of formal semantics include the following:

Action semantics[5] is an approach that tries to modularize denotational semantics, splitting the formalization process in two layers (macro and microsemantics) and predefining three semantic entities (actions, data and yielders) to simplify the specification;
Algebraic semantics[4] is a form of axiomatic semantics based on algebraic laws for describing and reasoning about program semantics in a formal manner. It also supports denotational semantics and operational semantics;
Attribute grammars[6] define systems that systematically compute "metadata" (called attributes) for the various cases of the language's syntax.  Attribute grammars can be understood as a denotational semantics where the target language is simply the original language enriched with attribute annotations.  Aside from formal semantics, attribute grammars have also been used for code generation in compilers, and to augment regular or context-free grammars with context-sensitive conditions;
Categorical (or "functorial") semantics[7] uses category theory as the core mathematical formalism. A categorical semantics is usually proven to correspond to some axiomatic semantics that gives a syntactic presentation of the categorical structures. Also, denotational semantics are often instances of a general categorical semantics;[8]
Concurrency semantics[9] is a catch-all term for any formal semantics that describes concurrent computations.  Historically important concurrent formalisms have included the actor model and process calculi;
Game semantics[10] uses a metaphor inspired by game theory;
Predicate transformer semantics,[11] developed by Edsger W. Dijkstra, describes the meaning of a program fragment as the function transforming a postcondition to the precondition needed to establish it.
Describing relationships[edit]
For a variety of reasons, one might wish to describe the relationships between different formal semantics.  For example:

To prove that a particular operational semantics for a language satisfies the logical formulas of an axiomatic semantics for that language.  Such a proof demonstrates that it is "sound" to reason about a particular (operational) interpretation strategy using a particular (axiomatic) proof system.
To prove that operational semantics over a high-level machine is related by a simulation with the semantics over a low-level machine, whereby the low-level abstract machine contains more primitive operations than the high-level abstract machine definition of a given language. Such a proof demonstrates that the low-level machine "faithfully implements" the high-level machine.
It is also possible to relate multiple semantics through abstractions via the theory of abstract interpretation.

History[edit]
This section needs expansion. You can help by adding to it.  (August 2013)
Robert W. Floyd is credited with founding the field of programming language semantics in Floyd (1967).[12]

See also[edit]
Computational semantics
Formal semantics (logic)
Formal semantics (linguistics)
Ontology
Ontology (information science)
Semantic equivalence
Semantic technology
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Joseph A. Goguen (1975). "Semantics of computation". Category Theory Applied to Computation and Control. Lecture Notes in Computer Science. Vol.Â 25. Springer. pp.Â 151â163. doi:10.1007/3-540-07142-3_75. ISBNÂ 978-3-540-07142-6.

^ David A. Schmidt (1986). Denotational Semantics: A Methodology for Language Development. William C. Brown Publishers. ISBNÂ 9780205104505.

^ Gordon D. Plotkin (1981). "A structural approach to operational semantics". Technical Report DAIMI FN-19. Computer Science Department, Aarhus University. {{cite journal}}: Cite journal requires |journal= (help)

^ Jump up to: a b Joseph A. Goguen; James W. Thatcher; Eric G. Wagner; Jesse B. Wright (1977). "Initial algebra semantics and continuous algebras". Journal of the ACM. 24 (1): 68â95. doi:10.1145/321992.321997. S2CIDÂ 11060837.

^ Peter D. Mosses (1996). "Theory and practice of action semantics". BRICS Report RS9653. Aarhus University. {{cite journal}}: Cite journal requires |journal= (help)

^ Pierre Deransart; Martin Jourdan; Bernard Lorho (1988). "Attribute Grammars: Definitions, Systems and Bibliography. Lecture Notes in Computer Science 323. Springer-Verlag. ISBNÂ 9780387500560.

^ F. William Lawvere (1963). "Functorial semantics of algebraic theories". Proceedings of the National Academy of Sciences of the United States of America. 50 (5): 869â872. doi:10.1073/pnas.50.5.869. PMCÂ 221940. PMIDÂ 16591125.

^ Andrzej Tarlecki; Rod M. Burstall; Joseph A. Goguen (1991). "Some fundamental algebraic tools for the semantics of computation: Part 3. Indexed categories". Theoretical Computer Science. 91 (2): 239â264. doi:10.1016/0304-3975(91)90085-G.

^ Mark Batty; Kayvan Memarian; Kyndylan Nienhuis; Jean Pichon-Pharabod; Peter Sewell (2015). "The problem of programming language concurrency semantics". Proceedings of the European Symposium on Programming Languages and Systems. Springer. pp.Â 283â307. doi:10.1007/978-3-662-46669-8_12.

^ Samson Abramsky (2009). "Semantics of interaction: An introduction to game semantics".  In Andrew M. Pitts; P. Dybjer (eds.). Semantics and Logics of Computation. Cambridge University Press. pp.Â 1â32. doi:10.1017/CBO9780511526619.002. ISBNÂ 9780521580571.

^ Edsger W. Dijkstra (1975). "Guarded commands, nondeterminacy and formal derivation of programs". Communications of the ACM. 18 (8): 453â457. doi:10.1145/360933.360975. S2CIDÂ 1679242.

^ Donald E. Knuth. "Memorial Resolution: Robert W. Floyd (1936â2001)" (PDF). Stanford University Faculty Memorials. Stanford Historical Society.


Further reading[edit]
Textbooks
.mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li{margin-left:0;padding-left:3.2em;text-indent:-3.2em}.mw-parser-output .refbegin-hanging-indents ul,.mw-parser-output .refbegin-hanging-indents ul li{list-style:none}@media(max-width:720px){.mw-parser-output .refbegin-hanging-indents>ul>li{padding-left:1.6em;text-indent:-1.6em}}.mw-parser-output .refbegin-columns{margin-top:0.3em}.mw-parser-output .refbegin-columns ul{margin-top:0}.mw-parser-output .refbegin-columns li{page-break-inside:avoid;break-inside:avoid-column}
Floyd, Robert W. (1967). "Assigning Meanings to Programs" (PDF).  In Schwartz, J.T. (ed.). Mathematical Aspects of Computer Science. Proceedings of Symposium on Applied Mathematics. Vol.Â 19. American Mathematical Society. pp.Â 19â32. ISBNÂ 0821867288.
Hennessy, M. (1990). The semantics of programming languages: an elementary introduction using structural operational semantics. Wiley. ISBNÂ 978-0-471-92772-3.
Tennent, Robert D. (1991). Semantics of Programming Languages. Prentice Hall. ISBNÂ 978-0-13-805599-8.
Gunter, Carl (1992). Semantics of Programming Languages. MIT Press. ISBNÂ 0-262-07143-6.
Nielson, H. R.; Nielson, Flemming (1992). Semantics With Applications: A Formal Introduction (PDF). Wiley. ISBNÂ 978-0-471-92980-2.
Winskel, Glynn (1993). The Formal Semantics of Programming Languages: An Introduction. MIT Press. ISBNÂ 0-262-73103-7.
Mitchell, John C. (1995). Foundations for Programming Languages (Postscript).
Slonneger, Kenneth; Kurtz, Barry L. (1995). Formal Syntax and Semantics of Programming Languages. Addison-Wesley. ISBNÂ 0-201-65697-3.
Reynolds, John C. (1998). Theories of Programming Languages. Cambridge University Press. ISBNÂ 0-521-59414-6.
Harper, Robert (2006). Practical Foundations for Programming Languages (PDF). Archived from the original (PDF) on 2007-06-27. (Working draft)
Nielson, H. R.; Nielson, Flemming (2007). Semantics with Applications: An Appetizer. Springer. ISBNÂ 978-1-84628-692-6.
Stump, Aaron (2014). Programming Language Foundations. Wiley. ISBNÂ 978-1-118-00747-1.
Krishnamurthi, Shriram (2012). "Programming Languages: Application and Interpretation" (2ndÂ ed.).
Lecture notes
Winskel, Glynn. "Denotational Semantics" (PDF). University of Cambridge.
External links[edit]
Aaby, Anthony (2004). Introduction to Programming Languages. Archived from the original on 2015-06-19.{{cite book}}:  CS1 maint: bot: original URL status unknown (link) Semantics.




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Semantics_(computer_science)&oldid=1064793898"
		Categories: Formal methodsLogic in computer scienceFormal specification languagesProgramming language semanticsHidden categories: CS1 errors: missing periodicalArticles with short descriptionShort description is different from WikidataArticles lacking in-text citations from August 2020All articles lacking in-text citationsArticles to be expanded from August 2013All articles to be expandedArticles using small message boxesCS1 maint: bot: original URL status unknown
	
