
Title:
Longest common substring problem
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		


Wikibooks has a book on the topic of: Algorithm Implementation/Strings/Longest common substring

.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}Not to be confused with longest common subsequence problem.
In computer science, the longest common substring problem is to find the longest string that is a substring of two or more strings. The problem may have multiple solutions.
Applications include data deduplication and plagiarism detection.

Contents

1 Example
2 Problem definition
3 Algorithms

3.1 Suffix tree
3.2 Dynamic programming


4 See also
5 References
6 External links



Example[edit]
The longest common substring of the strings "ABABC", "BABCA" and "ABCBA" is string "ABC" of length 3. Other common substrings are "A", "AB", "B", "BA", "BC" and "C".

  ABABC
    |||
   BABCA
    |||
    ABCBA

Problem definition[edit]
Given two strings, 
  
    
      
        S
      
    
    {\displaystyle S}
  
 of length 
  
    
      
        m
      
    
    {\displaystyle m}
  
 and 
  
    
      
        T
      
    
    {\displaystyle T}
  
 of length 
  
    
      
        n
      
    
    {\displaystyle n}
  
, find the longest string which is substring of both 
  
    
      
        S
      
    
    {\displaystyle S}
  
 and 
  
    
      
        T
      
    
    {\displaystyle T}
  
.
A generalization is the k-common substring problem. Given the set of strings 
  
    
      
        S
        =
        {
        
          S
          
            1
          
        
        ,
        .
        .
        .
        ,
        
          S
          
            K
          
        
        }
      
    
    {\displaystyle S=\{S_{1},...,S_{K}\}}
  
, where 
  
    
      
        
          |
        
        
          S
          
            i
          
        
        
          |
        
        =
        
          n
          
            i
          
        
      
    
    {\displaystyle |S_{i}|=n_{i}}
  
 and 
  
    
      
        Î£
        
          n
          
            i
          
        
        =
        N
      
    
    {\displaystyle \Sigma n_{i}=N}
  
. Find for each 
  
    
      
        2
        â¤
        k
        â¤
        K
      
    
    {\displaystyle 2\leq k\leq K}
  
, the longest strings which occur as substrings of at least 
  
    
      
        k
      
    
    {\displaystyle k}
  
 strings.

Algorithms[edit]
One can find the lengths and starting positions of the longest common substrings of 
  
    
      
        S
      
    
    {\displaystyle S}
  
 and 
  
    
      
        T
      
    
    {\displaystyle T}
  
 in 
  
    
      
        Î
      
    
    {\displaystyle \Theta }
  

  
    
      
        (
        n
        +
        m
        )
      
    
    {\displaystyle (n+m)}
  
 time with the help of a generalized suffix tree. A faster algorithm can be achieved in the word RAM model of computation if the size 
  
    
      
        Ï
      
    
    {\displaystyle \sigma }
  
 of the input alphabet is in 
  
    
      
        
          2
          
            o
            (
            
              
                log
                â¡
                (
                n
                +
                m
                )
              
            
            )
          
        
      
    
    {\displaystyle 2^{o({\sqrt {\log(n+m)}})}}
  
. In particular, this algorithm runs in 
  
    
      
        O
        (
        (
        n
        +
        m
        )
        log
        â¡
        Ï
        
          /
        
        
          
            log
            â¡
            (
            n
            +
            m
            )
          
        
        )
      
    
    {\displaystyle O((n+m)\log \sigma /{\sqrt {\log(n+m)}})}
  
 time using 
  
    
      
        O
        (
        (
        n
        +
        m
        )
        log
        â¡
        Ï
        
          /
        
        log
        â¡
        (
        n
        +
        m
        )
        )
      
    
    {\displaystyle O((n+m)\log \sigma /\log(n+m))}
  
 space.[1] Solving the problem by dynamic programming costs 
  
    
      
        Î
        (
        n
        m
        )
      
    
    {\displaystyle \Theta (nm)}
  
. The solutions to the generalized problem take 
  
    
      
        Î
        (
        
          n
          
            1
          
        
        +
        .
        .
        .
        +
        
          n
          
            K
          
        
        )
      
    
    {\displaystyle \Theta (n_{1}+...+n_{K})}
  
 space and 
  
    
      
        Î
        (
        
          n
          
            1
          
        
      
    
    {\displaystyle \Theta (n_{1}}
  
Â·...Â·
  
    
      
        
          n
          
            K
          
        
        )
      
    
    {\displaystyle n_{K})}
  
 time with dynamic programming and take 
  
    
      
        Î
        (
        N
        â
        K
        )
      
    
    {\displaystyle \Theta (N*K)}
  
 time with generalized suffix tree.

Suffix tree[edit]
  Generalized suffix tree for the strings "ABAB", "BABA" and "ABBA", numbered 0, 1 and 2.
The longest common substrings of a set of strings can be found by building a generalized suffix tree for the strings, and then finding the deepest internal nodes which have leaf nodes from all the strings in the subtree below it. The figure on the right is the suffix tree for the strings "ABAB", "BABA" and "ABBA", padded with unique string terminators, to become "ABAB$0", "BABA$1" and "ABBA$2". The nodes representing "A", "B", "AB" and "BA" all have descendant leaves from all of the strings, numbered 0, 1 and 2.
Building the suffix tree takes 
  
    
      
        Î
        (
        N
        )
      
    
    {\displaystyle \Theta (N)}
  
 time (if the size of the alphabet is constant). If the tree is traversed from the bottom up with a bit vector telling which strings are seen below each node, the k-common substring problem can be solved in 
  
    
      
        Î
        (
        N
        K
        )
      
    
    {\displaystyle \Theta (NK)}
  
 time. If the suffix tree is prepared for constant time lowest common ancestor retrieval, it can be solved in 
  
    
      
        Î
        (
        N
        )
      
    
    {\displaystyle \Theta (N)}
  
 time.[2]

Dynamic programming[edit]
The following pseudocode finds the set of longest common substrings between two strings with dynamic programming:

function LCSubstr(S[1..r], T[1..n])
    LÂ := array(1..r, 1..n)
    zÂ := 0
    retÂ := {}

    for iÂ := 1..r
        for jÂ := 1..n
            if S[i] = T[j]
                if i = 1 or j = 1
                    L[i, j]Â := 1
                else
                    L[i, j]Â := L[i â 1, j â 1] + 1
                if L[i, j] > z
                    zÂ := L[i, j]
                    retÂ := {S[i â z + 1..i]}
                else if L[i, j] = z
                    retÂ := ret âª {S[i â z + 1..i]}
            else
                L[i, j]Â := 0
    return ret

This algorithm runs in 
  
    
      
        O
        (
        n
        r
        )
      
    
    {\displaystyle O(nr)}
  
 time. The array L stores the longest common subsequence of the prefixes S[1..i] and T[1..j] which end at position S[i], T[j], resp. The variable z is used to hold the length of the longest common substring found so far. The set ret is used to hold the set of strings which are of length z. The set ret can be saved efficiently by just storing the index i, which is the last character of the longest common substring (of size z) instead of S[i-z+1..i]. Thus all the longest common substrings would be, for each i in ret, S[(ret[i]-z)..(ret[i])].
The following tricks can be used to reduce the memory usage of an implementation:

Keep only the last and current row of the DP table to save memory (
  
    
      
        O
        (
        min
        (
        r
        ,
        n
        )
        )
      
    
    {\displaystyle O(\min(r,n))}
  
 instead of 
  
    
      
        O
        (
        n
        r
        )
      
    
    {\displaystyle O(nr)}
  
)
Store only non-zero values in the rows. This can be done using hash-tables instead of arrays. This is useful for large alphabets.
See also[edit]
Longest palindromic substring
n-gram, all the possible substrings of length n that are contained in a string
References[edit]

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Charalampopoulos, Panagiotis; Kociumaka, Tomasz; Pissis, Solon P.; Radoszewski, Jakub (Aug 2021).  Mutzel, Petra; Pagh, Rasmus; Herman, Grzegorz (eds.). Faster Algorithms for Longest Common Substring. European Symposium on Algorithms. Leibniz International Proceedings in Informatics (LIPIcs). Vol.Â 204. Schloss Dagstuhl. doi:10.4230/LIPIcs.ESA.2021.30. Here: Theorem 1, p.30:2.

^ Gusfield, Dan (1999) [1997]. Algorithms on Strings, Trees and Sequences: Computer Science and Computational Biology. USA: Cambridge University Press. ISBNÂ 0-521-58519-8.


External links[edit]



The Wikibook Algorithm implementation has a page on the topic of: Longest common substring

Dictionary of Algorithms and Data Structures: longest common substring
Perl/XS implementation of the dynamic programming algorithm
Perl/XS implementation of the suffix tree algorithm
Dynamic programming implementations in various languages on wikibooks
working AS3 implementation of the dynamic programming algorithm
Suffix Tree based C implementation of Longest common substring for two strings
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}show.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteStringsString metric
Approximate string matching
Bitap algorithm
DamerauâLevenshtein distance
Edit distance
Gestalt Pattern Matching
Hamming distance
JaroâWinkler distance
Lee distance
Levenshtein automaton
Levenshtein distance
WagnerâFischer algorithm 
String-searching algorithm
ApostolicoâGiancarlo algorithm
BoyerâMoore string-search algorithm
BoyerâMooreâHorspool algorithm
KnuthâMorrisâPratt algorithm
RabinâKarp algorithm
Multiple string searching
AhoâCorasick
Commentz-Walter algorithm
Regular expression
Comparison of regular-expression engines
Regular grammar
Thompson's construction
Nondeterministic finite automaton
Sequence alignment
Hirschberg's algorithm
NeedlemanâWunsch algorithm
SmithâWaterman algorithm
Data structure
DAFSA
Suffix array
Suffix automaton
Suffix tree
Generalized suffix tree
Rope
Ternary search tree
Trie
Other
Parsing
Pattern matching
Compressed pattern matching
Longest common subsequence
Longest common substring
Sequential pattern mining
Sorting





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Longest_common_substring_problem&oldid=1058125630"
		Categories: Problems on stringsDynamic programmingHidden categories: Articles with example pseudocode
	
