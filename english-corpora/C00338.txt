
Title:
Naming convention (programming)
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		
In computer programming, a naming convention is a set of rules for choosing the character sequence to be used for identifiers which denote variables, types, functions, and other entities in source code and documentation.
Reasons for using a naming convention (as opposed to allowing programmers to choose any character sequence) include the following:

To reduce the effort needed to read and understand source code;[1]
To enable code reviews to focus on issues more important than syntax and naming standards.
To enable code quality review tools to focus their reporting mainly on significant issues other than syntax and style preferences.
The choice of naming conventions can be an enormously controversial issue, with partisans of each holding theirs to be the best and others to be inferior. Colloquially, this is said to be a matter of dogma.[2] Many companies have also established their own set of conventions.

Contents

1 Potential benefits
2 Challenges
3 Readability
4 Common elements

4.1 Length of identifiers
4.2 Letter case and numerals
4.3 Multiple-word identifiers

4.3.1 Delimiter-separated words
4.3.2 Letter case-separated words
4.3.3 Examples of multiple-word identifier formats




5 Metadata and hybrid conventions

5.1 Hungarian notation
5.2 Positional notation
5.3 Composite word scheme (OF Language)


6 Language-specific conventions

6.1 ActionScript
6.2 Ada
6.3 APL
6.4 C and C++
6.5 C#
6.6 Go
6.7 Java
6.8 JavaScript
6.9 Lisp
6.10 .NET
6.11 Objective-C
6.12 Pascal, Modula-2 and Oberon
6.13 Perl
6.14 PHP
6.15 Python and Ruby
6.16 R
6.17 Raku
6.18 Rust
6.19 Swift


7 See also
8 References
9 External links



Potential benefits[edit]
Some of the potential benefits that can be obtained by adopting a naming convention include the following:

to provide additional information (i.e., metadata) about the use to which an identifier is put;
to help formalize expectations and promote consistency within a development team;
to enable the use of automated refactoring or search and replace tools with minimal potential for error;
to enhance clarity in cases of potential ambiguity;
to enhance the aesthetic and professional appearance of work product (for example, by disallowing overly long names, comical or "cute" names, or abbreviations);
to help avoid "naming collisions" that might occur when the work product of different organizations is combined (see also: namespaces);
to provide meaningful data to be used in project handovers which require submission of program source code and all relevant documentation;
to provide better understanding in case of code reuse after a long interval of time.
Challenges[edit]
The choice of naming conventions (and the extent to which they are enforced) is often a contentious issue, with partisans holding their viewpoint to be the best and others to be inferior.  Moreover, even with known and well-defined naming conventions in place, some organizations may fail to consistently adhere to them, causing inconsistency and confusion.  These challenges may be exacerbated if the naming convention rules are internally inconsistent, arbitrary, difficult to remember, or otherwise perceived as more burdensome than beneficial.

Readability[edit]
Well-chosen identifiers make it significantly easier for developers and analysts to understand what the system is doing and how to fix or extend the source code to apply for new needs.
For example, although 

 a = b * c;

is syntactically correct, its purpose is not evident. Contrast this with:

 weekly_pay = hours_worked * hourly_pay_rate;

which implies the intent and meaning of the source code, at least to those familiar with the context of the statement.
Experiments suggest that identifier style affects recall and precision and that familiarity with a style speeds recall.[3]

Common elements[edit]
This section does not cite any sources. Please help improve this section by adding citations to reliable sources. Unsourced material may be challenged and removed.  (September 2010) (Learn how and when to remove this template message)
The exact rules of a naming convention depend on the context in which they are employed. Nevertheless, there are several common elements that influence most if not all naming conventions in common use today.

Length of identifiers[edit]
Fundamental elements of all naming conventions are the rules related to identifier length (i.e., the finite number of individual characters allowed in an identifier). Some rules dictate a fixed numerical bound, while others specify less precise heuristics or guidelines.
Identifier length rules are routinely contested in practice, and subject to much debate academically.
Some considerations:

shorter identifiers may be preferred as more expedient, because they are easier to type (although many IDEs and text-editors provide text-completion, which mitigates this)
extremely short identifiers (such as 'i' or 'j') are very difficult to uniquely distinguish using automated search and replace tools (although this is not an issue for regex-based tools)
longer identifiers may be preferred because short identifiers cannot encode enough information or appear too cryptic
longer identifiers may be disfavored because of visual clutter
It is an open research issue whether some programmers prefer shorter identifiers because they are easier to type, or think up, than longer identifiers, or because in many situations a longer identifier simply clutters the visible code and provides no perceived additional benefit.
Brevity in programming could be in part attributed to:

early linkers which required variable names to be restricted to 6 characters to save memory. A later "advance" allowed longer variable names to be used for human comprehensibility, but where only the first few characters were significant. In some versions of BASIC such as TRS-80 Level 2 Basic, long names were allowed, but only the first two letters were significant. This feature permitted erroneous behaviour that could be difficult to debug, for example when names such as "VALUE" and "VAT" were used and intended to be distinct.
early source code editors lacking autocomplete
early low-resolution monitors with limited line length (e.g. only 80 characters)
much of computer science originating from mathematics, where variable names are traditionally only a single letter
Letter case and numerals[edit]
Some naming conventions limit whether letters may appear in uppercase or lowercase. Other
conventions do not restrict letter case, but attach a well-defined interpretation based
on letter case. Some naming conventions specify whether alphabetic, numeric, or alphanumeric
characters may be used, and if so, in what sequence.

Multiple-word identifiers[edit]
A common recommendation is "Use meaningful identifiers."  A single word may not be as meaningful, or specific, as multiple words. Consequently, some naming conventions specify rules for the treatment of "compound" identifiers containing more than one word.
As most programming languages do not allow whitespace in identifiers, a method of delimiting each word is needed (to make it easier for subsequent readers to interpret which characters belong to which word). Historically some early languages, notably FORTRAN (1955) and ALGOL (1958), allowed spaces within identifiers, determining the end of identifiers by context. This was abandoned in later languages due to the difficulty of tokenization. It is possible to write names by simply concatenating words, and this is sometimes used, as in mypackage for Java package names,[4] though legibility suffers for longer terms, so usually some form of separation is used.

Delimiter-separated words[edit]
One approach is to delimit separate words with a nonalphanumeric character.  The two characters commonly used for this purpose are the hyphen ("-") and the underscore ("_"); e.g., the two-word name "two words" would be represented as "two-words" or "two_words".  The hyphen is used by nearly all programmers writing COBOL (1959), Forth (1970), and Lisp (1958); it is also common in Unix for commands and packages, and is used in CSS.[5] This convention has no standard name, though it may be referred to as lisp-case or COBOL-CASE (compare Pascal case), kebab-case, brochette-case, or other variants.[6][7][8][9] Of these, kebab-case, dating at least to 2012,[10] has achieved some currency since.[11][12]
By contrast, languages in the FORTRAN/ALGOL tradition, notably languages in the C and Pascal families, used the hyphen for the subtraction infix operator, and did not wish to require spaces around it (as free-form languages), preventing its use in identifiers. An alternative is to use underscores; this is common in the C family (including Python), with lowercase words, being found for example in The C Programming Language (1978), and has come to be known as snake case. Underscores with uppercase, as in UPPER_CASE, are commonly used for C preprocessor macros, hence known as MACRO_CASE, and for environment variables in Unix, such as BASH_VERSION in bash. Sometimes this is humorously referred to as SCREAMING_SNAKE_CASE.

Letter case-separated words[edit]
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}See also: Letter case Â§Â Special case styles
Another approach is to indicate word boundaries using medial capitalization, called "camelCase", "Pascal case", and many other names, thus respectively rendering "two words" as  "twoWords" or "TwoWords". This convention is commonly used in Pascal, Java, C#, and Visual Basic. Treatment of initialisms in identifiers (e.g. the "XML" and "HTTP" in XMLHttpRequest) varies. Some dictate that they be lowercased (e.g. XmlHttpRequest) to ease typing, readability and ease of segmentation, whereas others leave them uppercased (e.g. XMLHTTPRequest) for accuracy.

Examples of multiple-word identifier formats[edit]

Multiple-word identifier formats


Formatting

Name(s)


twowords

flatcase[13][14]


TWOWORDS

UPPERFLATCASE[13]


twoWords

(lower) camelCase, dromedaryCase


TwoWords

PascalCase, UpperCamelCase, StudlyCase[15]


two_words

snake_case, pothole_case


TWO_WORDS

SCREAMING_SNAKE_CASE, MACRO_CASE, CONSTANT_CASE


two_Words

camel_Snake_Case


Two_Words

Pascal_Snake_Case


two-words

kebab-case, dash-case, lisp-case, spinal-case


TWO-WORDS

TRAIN-CASE, COBOL-CASE, SCREAMING-KEBAB-CASE


Two-Words

Train-Case,[13] HTTP-Header-Case[16]

Metadata and hybrid conventions[edit]
Some naming conventions represent rules or requirements that go beyond the requirements
of a specific project or problem domain, and instead reflect a greater
overarching set of principles defined by the software architecture, underlying programming language or other kind of cross-project methodology.

Hungarian notation[edit]
Perhaps the most well-known is Hungarian notation, which encodes either the purpose ("Apps Hungarian") or the type ("Systems Hungarian") of a variable in its name.[17] For example, the prefix "sz" for the variable szName indicates that the variable is a null-terminated string.

Positional notation[edit]
A style used for very short (eight characters and less) could be: LCCIIL01, where LC would be the application (Letters of Credit), C for COBOL, IIL for the particular process subset, and the 01 a sequence number.
This sort of convention is still in active use in mainframes dependent upon JCL and is also seen in the 8.3 (maximum eight characters with period separator followed by three character file type) MS-DOS style.

Composite word scheme (OF Language)[edit]
IBM's "OF Language" was documented in an IMS (Information Management System) manual.
It detailed the PRIME-MODIFIER-CLASS word scheme, which consisted of names like "CUST-ACT-NO" to indicate "customer account number".
PRIME words were meant to indicate major "entities" of interest to a system.
MODIFIER words were used for additional refinement, qualification and readability.
CLASS words ideally would be a very short list of data types relevant to a particular application.  Common CLASS words might be: NO (number), ID (identifier), TXT (text), AMT (amount), QTY (quantity), FL (flag), CD (code), W (work) and so forth.  In practice, the available CLASS words would be a list of less than two dozen terms.
CLASS words, typically positioned on the right (suffix), served much the same purpose as Hungarian notation prefixes.
The purpose of CLASS words, in addition to consistency, was to specify to the programmer the data type of a particular data field. Prior to the acceptance of BOOLEAN (two values only) fields, FL (flag) would indicate a field with only two possible values.

Language-specific conventions[edit]
ActionScript[edit]
Adobe's Coding Conventions and Best Practices suggests naming standards for ActionScript that are mostly consistent with those of ECMAScript.[citation needed] The style of identifiers is similar to that of Java.

Ada[edit]
In Ada, the only recommended style of identifiers is Mixed_Case_With_Underscores.[18]

APL[edit]
In APL dialects, the delta (Î) is used between words, e.g. PERFÎSQUARE (no lowercase traditionally existed in older APL versions). If the name used underscored letters, then the delta underbar (â) would be used instead.

C and C++[edit]
In C and C++, keywords and standard library identifiers are mostly lowercase. In the C standard library, abbreviated names are the most common (e.g. isalnum for a function testing whether a character is a numeral), while the C++ standard library often uses an underscore as a word separator (e.g. out_of_range). Identifiers representing macros are, by convention, written using only uppercase letters and underscores (this is related to the convention in many programming languages of using all-upper-case identifiers for constants). Names containing double underscore or beginning with an underscore and a capital letter are reserved for implementation (compiler, standard library) and should not be used (e.g. __reserved or  _Reserved).[19][20] This is superficially similar to stropping, but the semantics differ: the underscores are part of the value of the identifier, rather than being quoting characters (as is stropping): the value of __foo is __foo (which is reserved), not foo (but in a different namespace).

C#[edit]
C# naming conventions generally follow the guidelines published by Microsoft for all .NET languages[21] (see the .NET section, below), but no conventions are enforced by the C# compiler.
The Microsoft guidelines recommend the exclusive use of only PascalCase and camelCase, with the latter used only for method parameter names and method-local variable names (including method-local const values).  A special exception to PascalCase is made for two-letter acronyms that begin an identifier; in these cases, both letters are capitalized (for example, IOStream); this is not the case for longer acronyms (for example, XmlStream).  The guidelines further recommend that the name given to an interface be PascalCase preceded by the capital letter I, as in IEnumerable.
The Microsoft guidelines for naming fields are specific to static, public, and protected fields; fields that are not static and that have other accessibility levels (such as internal and private) are explicitly not covered by the guidelines.[22] The most common practice is to use PascalCase for the names of all fields, except for those which are private (and neither const nor static), which are given names that use camelCase preceded by a single underscore; for example, _totalCount.
Any identifier name may be prefixed by the commercial-at symbol (@), without any change in meaning.  That is, both factor and @factor refer to the same object.  By convention, this prefix is only used in cases when the identifier would otherwise be either a reserved keyword (such as for and while), which may not be used as an identifier without the prefix, or a contextual keyword (such as from and where), in which cases the prefix is not strictly required (at least not at its declaration; for example, although the declaration dynamicÂ dynamic; is valid, this would typically be seen as dynamicÂ @dynamic; to indicate to the reader immediately that the latter is a variable name).

Go[edit]
In Go, the convention is to use MixedCaps or mixedCaps rather than underscores to write multiword names. When referring to structs or functions, the first letter specifies the visibility for external packages. Making the first letter uppercase exports that piece of code, while lowercase makes it only usable within the current scope.[23]

Java[edit]
In Java, naming conventions for identifiers have been established and suggested by various Java communities such as Sun Microsystems,[24] Netscape,[25] AmbySoft,[26] etc. A sample of naming conventions set by Sun Microsystems are listed below,
where a name in "CamelCase" is one composed of a number of words joined without spaces, with each word's -- excluding the first word's -- initial letter in capitals â for example "camelCase".




Identifier type

Rules for naming

Examples


Classes

Class names should be nouns in UpperCamelCase, with the first letter of every word capitalised. Use whole words â avoid acronyms and abbreviations (unless the abbreviation is much more widely used than the long form, such as URL or HTML).


class Raster {}
class ImageSprite {}


Methods

Methods should be verbs in lowerCamelCase or a multi-word name that begins with a verb in lowercase; that is, with the first letter lowercase and the first letters of subsequent words in uppercase.


run();
runFast();
getBackground();


Variables

Local variables, instance variables, and class variables are also written in lowerCamelCase. Variable names should not start with underscore (_) or dollar sign ($) characters, even though both are allowed. This is in contrast to other coding conventions that state that underscores should be used to prefix all instance variables.
Variable names should be short yet meaningful. The choice of a variable name should be mnemonic â  that is, designed to indicate to the casual observer the intent of its use. One-character variable names should be avoided except for temporary "throwaway" variables. Common names for temporary variables are i, j, k, m, and n for integers; c, d, and e for characters.



int             i;
char            c;
float           myWidth;


Constants

Constants should be written in uppercase characters separated by underscores. Constant names may also contain digits if appropriate, but not as the first character.


static final int MAX_PARTICIPANTS = 10;

Java compilers do not enforce these rules, but failing to follow them may result in confusion and erroneous code. For example, widget.expand() and Widget.expand() imply significantly different behaviours: widget.expand() implies an invocation to method expand() in an instance named widget, whereas Widget.expand() implies an invocation to static method expand() in class Widget.
One widely used Java coding style dictates that UpperCamelCase be used for classes and lowerCamelCase be used for instances and methods.[24]
Recognising this usage, some IDEs, such as Eclipse, implement shortcuts based on CamelCase. For instance, in Eclipse's content assist feature, typing just the upper-case letters of a CamelCase word will suggest any matching class or method name (for example, typing "NPE" and activating content assist could suggest NullPointerException).
Initialisms of three or more letters are CamelCase instead of uppercase (e.g., parseDbmXmlFromIPAddress instead of parseDBMXMLFromIPAddress). One may also set the boundary at two or more letters (e.g. parseDbmXmlFromIpAddress).

JavaScript[edit]
The built-in JavaScript libraries use the same naming conventions as Java. Data types and constructor functions use upper camel case (RegExp, TypeError, XMLHttpRequest, DOMObject) and methods use lower camel case (getElementById, getElementsByTagNameNS, createCDATASection). In order to be consistent most JavaScript developers follow these conventions.[27]
See also: Douglas Crockford's conventions

Lisp[edit]
Common practice in most Lisp dialects is to use dashes to separate words in identifiers, as in with-open-file and make-hash-table. Dynamic variable names conventionally start and end with asterisks: *map-walls*. Constants names are marked by plus signs: +map-size+.[28][29]

.NET[edit]
Microsoft .NET recommends UpperCamelCase, also known as PascalCase, for most identifiers. (lowerCamelCase is recommended for parameters and variables) and is a shared convention for the .NET languages.[30] Microsoft further recommends that no type prefix hints (also known as Hungarian notation) are used.[31] Instead of using Hungarian notation it is recommended to end the name with the base class' name; LoginButton instead of BtnLogin.[32]

Objective-C[edit]
Objective-C has a common coding style that has its roots in Smalltalk .
Top-level entities, including classes, protocols, categories, as well as C constructs that are used in Objective-C programs like global variables and functions, are in UpperCamelCase with a short all-uppercase prefix denoting namespace, like NSString, UIAppDelegate, NSApp or CGRectMake. Constants may optionally be prefixed with a lowercase letter "k" like kCFBooleanTrue.
Instance variables of an object use lowerCamelCase prefixed with an underscore, like _delegate and _tableView.
Method names use multiple lowerCamelCase parts separated by colons that delimit arguments, like: application:didFinishLaunchingWithOptions:, stringWithFormat: and isRunning.

Pascal, Modula-2 and Oberon[edit]
Wirthian languages Pascal, Modula-2 and Oberon generally use Capitalized or UpperCamelCase identifiers for programs, modules, constants, types and procedures, and lowercase or lowerCamelCase identifiers for math constants, variables, formal parameters and functions.[33] While some dialects support underscore and dollar signs in identifiers, snake case and macro case is more likely confined to use within foreign API interfaces.[34]

Perl[edit]
Perl takes some cues from its C heritage for conventions. Locally scoped variables and subroutine names are lowercase with infix underscores. Subroutines and variables meant to be treated as private are prefixed with an underscore. Package variables are title cased. Declared constants are all caps. Package names are camel case excepting pragmataâe.g., strict and mroâwhich are lowercase.
[35]
[36]

PHP[edit]
PHP recommendations are contained in PSR-1 (PHP Standard Recommendation 1) and PSR-12.[37] According to PSR-1, class names should be in PascalCase, class constants should be in MACRO_CASE, and function and method names should be in camelCase.[38]

Python and Ruby[edit]
Python and Ruby both recommend UpperCamelCase for class names, CAPITALIZED_WITH_UNDERSCORES for constants, and lowercase_separated_by_underscores for other names.
In Python, if a name is intended to be "private", it is prefixed by one or two underscores (in Python it's more or less a hack). Private variables are enforced in Python only by convention. Names can also be suffixed with an underscore to prevent conflict with Python keywords. Prefixing with double underscores changes behaviour in classes with regard to name mangling. Prefixing and suffixing with double underscores are reserved for "magic names" which fulfill special behaviour in Python objects.[39]

R[edit]
While there is no official style guide for R, the tidyverse style guide from R-guru Hadley Wickham sets the standard for most users.[40]  This guide recommends avoiding special characters in file names and using only numbers, letters and underscores for variable and function names e.g. fit_models.R.

Raku[edit]
Raku follows more or less the same conventions as Perl, except that it allows an infix hyphen - or an apostrophe ' (or single quote) within an identifier (but not two in a row), provided that it is followed by an alphabetic character. Raku programmers thus often use kebab case in their identifiers; for example, 
fish-food and don't-do-that are valid identifiers.
[41]

Rust[edit]
Rust recommends UpperCamelCase for type aliases and struct, trait, enum, and enum variant names, SCREAMING_SNAKE_CASE for constants or statics and snake_case for variable, function and struct member names.[42]

Swift[edit]
Swift has shifted its naming conventions with each individual release. However a major update with Swift 3.0 stabilised the naming conventions for lowerCamelCase across variables and function declarations. Constants are usually defined by enum types or constant parameters that are also written this way. Class and other object type declarations are UpperCamelCase.
As of Swift 3.0 there have been made clear naming guidelines for the language in an effort to standardise the API naming and declaration conventions across all third party APIs. 
[43]

See also[edit]
Category:Naming conventions
Checkstyle
Coding conventions
List of tools for static code analysis
Namespace
Naming convention
Sigil (computer programming)
Syntax (programming languages)
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ Derek M. Jones "Operand names influence operator precedence decisions" An experiment investigating the effect of variable names on operator precedence selection

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Raymond, Eric S. (1 October 2004). "religious issues". The Jargon File (version 4.4.8Â ed.). Retrieved 7 November 2011.

^ Binkley, Dave; Davis, Marcia (2009). "To CamelCase or Under_score" (PDF). 2009 IEEE 17th International Conference on Program Comprehension (17): 158â167. doi:10.1109/ICPC.2009.5090039. ISBNÂ 978-1-4244-3998-0. S2CIDÂ 1450798.

^ Naming a Package

^ "CSS reference". Mozilla Developer Network. Retrieved 18 June 2016.

^ "StackOverflow â What's the name for snake_case with dashes?".

^ "Programmers â If this is camelCase what-is-this?".

^ "Camel_SNAKE-kebab". GitHub. September 2019.

^ UnderscoreVersusCapitalAndLowerCaseVariableNaming

^ jwfearn (5 September 2012). "Revisions to jwfearn's answer to What's the name for dash-separated case?".

^ Living Clojure (2015), by Carin Meier, p. 91

^ lodash: kebabCase

^ Jump up to: a b c "naming - What are the different kinds of cases?". Stack Overflow. Retrieved 16 August 2020.

^ "A brief list of programming naming conventions". deanpugh.com. 20 March 2018. Retrieved 16 August 2020.

^ "PSR-1: Basic Coding Standard - PHP-FIG". www.php-fig.org. Retrieved 4 September 2020.

^ "camel-snake-kebab". camel-snake-kebab. Retrieved 16 August 2020.

^ "Making Wrong Code Look Wrong". Joel on Software. 11 May 2005.

^ "3.2.1 Names - Chapter 3 - Ada 95 QUALITY AND STYLE Guide".

^ "ISO/IEC 9899:1999 Programming languages â C". ISO.

^ "ISO/IEC 14882:2011 Information technology â Programming languages â C++". ISO.

^ "Naming Guidelines". Microsoft.

^ "Names of Type Members". Microsoft.

^ "Effective Go - the Go Programming Language".

^ Jump up to: a b "Code Conventions for the Java Programming Language", Section 9: "Naming Conventions"

^ "NETSCAPE'S SOFTWARE CODING STANDARDS GUIDE FOR JAVA",Collab Software Coding Standards Guide for Java Archived 3 March 2009 at the Wayback Machine

^ "AmbySoft Inc. Coding Standards for Java v17.01d"

^ Morelli, Brandon (17 November 2017). "5 JavaScript Style Guides â Including AirBnB, GitHub, & Google". codeburst.io. Retrieved 17 August 2018.

^ "Variables".

^ Naming conventions on CLiki

^ Microsoft .NET Framework Capitalization Styles

^ .NET Framework Developer's Guide â General Naming Conventions

^ [Framework Design Guidelines, Krzysztof Cwalina, Brad Abrams Page 62]

^ Modula-2 Name Convention

^ Foreign API Identifiers in Modula-2 Name Convention

^ "Perl style guide".

^ "perlmodlib â constructing new Perl modules and finding existing ones".

^ "PHP standards recommendations".

^ "PSR-1: Basic Coding Standard - PHP-FIG".

^ Style Guide for Python Code PEP8

^ Style Guide for RCode 

^ "General rules of Perl 6 syntax".

^ "Naming conventions". doc.rust-lang.org. Retrieved 4 February 2018.

^ "swift.org API Design Guidelines".


External links[edit]
coding-guidelines.com has a pdf that uses linguistics and psychology to attempt a cost/benefit analysis of identifier naming issues




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Naming_convention_(programming)&oldid=1064278542"
		Categories: Source codeNaming conventionsHidden categories: Webarchive template wayback linksUse dmy dates from October 2020Articles needing additional references from September 2010All articles needing additional referencesAll articles with unsourced statementsArticles with unsourced statements from November 2011
	
