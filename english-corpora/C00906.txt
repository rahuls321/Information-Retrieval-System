
Title:
DNA computing
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Computing using molecular biology hardware
  The biocompatible computing device: Deoxyribonucleic acid (DNA)
DNA computing is an emerging branch of computing which uses DNA, biochemistry, and molecular biology hardware, instead of the traditional electronic computing.  Research and development in this area concerns theory, experiments, and applications of DNA computing. Although the field originally started with the demonstration of a computing application by Len Adleman in 1994, it has now been expanded to several other avenues such as the development of storage technologies,[1][2][3] nanoscale imaging modalities,[4][5][6] synthetic controllers and reaction networks,[7][8][9][10] etc.

Contents

1 A brief history of DNA computing and molecular programming
2 Applications, examples, and recent developments

2.1 Combinatorial problems
2.2 Tic-tac-toe game
2.3 Neural network based computing
2.4 Improved speed with Localized (cache-like) Computing
2.5 Renewable (or reversible) DNA computing


3 Methods

3.1 Strand displacement mechanisms
3.2 Toehold exchange
3.3 Chemical reaction networks (CRNs)
3.4 DNAzymes
3.5 Enzymes
3.6 Algorithmic self-assembly


4 Capabilities
5 Alternative technologies
6 Pros and cons
7 See also
8 References
9 Further reading
10 External links



A brief history of DNA computing and molecular programming[edit]
Leonard Adleman of the University of Southern California initially developed this field in 1994.[11] Adleman demonstrated a proof-of-concept use of DNA as a form of computation which solved the seven-point Hamiltonian path problem. Since the initial Adleman experiments, advances have occurred and various Turing machines have been proven to be constructible.[12][13]
Since then the field has expanded into several avenues. In 1995, the idea for DNA-based memory was proposed by Eric Baum[14] who conjectured that a vast of amount data can be stored in a tiny amount of DNA due to its ultra-high density. This expanded the horizon of DNA computing into the realm of memory technology although the in vitro demonstrations were made almost after a decade.
The field of DNA computing can be categorized as a sub-field of the broader DNA nanoscience field started by Ned Seeman about a decade before Len Adleman's demonstration.[15] Ned's original idea in the 1980s was to build arbitrary structures using bottom-up DNA self-assembly for applications in crystallography. However, it morphed into the field of structural DNA self-assembly[16][17][18] which as of 2020 is extremely sophisticated. Self-assembled structure from a few nanometers tall all the way up to several tens of micrometers in size have been demonstrated in 2018.
In 1994, Prof. Seeman's group demonstrated early DNA lattice structures using a small set of DNA components. While the demonstration by Adleman showed the possibility of DNA-based computers, the DNA design was trivial because as the number of nodes in a graph grows, the number of DNA components required in Adleman's implementation would grow exponentially. Therefore, computer scientist and biochemists started exploring tile-assembly where the goal was to use a small set of DNA strands as tiles to perform arbitrary computations upon growth. Other avenues that were theoretically explored in the late 90's include DNA-based security and cryptography,[19] computational capacity of DNA systems,[20] DNA memories and disks,[21] and DNA-based robotics.[22]
In 2003, John Reif's group first demonstrated the idea of a DNA-based walker that traversed along a track similar to a line follower robot. They used molecular biology as a source of energy for the walker. Since this first demonstration, a wide variety of DNA-based walkers have been demonstrated.

Applications, examples, and recent developments[edit]
In 1994 Leonard Adleman presented the first prototype of a DNA computer. The TT-100 was a test tube filled with 100 microliters of a DNA solution. He managed to solve an instance of the directed Hamiltonian path problem.[23] In Adleman's experiment, the Hamiltonian Path Problem was implemented notationally as âtravelling salesman problemâ. For this purpose, different DNA fragments were created, each one of them representing a city that had to be visited. Every one of these fragments is capable of a linkage with the other fragments created. These DNA fragments were produced and mixed in a test tube. Within seconds, the small fragments form bigger ones, representing the different travel routes. Through a chemical reaction, the DNA fragments representing the longer routes were eliminated. The remains are the solution to the problem, but overall, the experiment lasted a week.[24] However, current technical limitations prevent the evaluation of the results. Therefore, the experiment isn't suitable for the application, but it is nevertheless a proof of concept.

Combinatorial problems[edit]
First results to these problems were obtained by Leonard Adleman.

In 1994: Solving a Hamiltonian path in a graph with 7 summits.
In 2002: Solving a NP-complete problem as well as a 3-SAT problem with 20 variables.
Tic-tac-toe game[edit]
In 2002, J. Macdonald, D. Stefanovic and M. Stojanovic created a DNA computer able to play tic-tac-toe against a human player.[25] The calculator consists of nine bins corresponding to the nine squares of the game. Each bin contains a substrate and various combinations of DNA enzymes. The substrate itself is composed of a DNA strand onto which was grafted a fluorescent chemical group at one end, and the other end, a repressor group. Fluorescence is only active if the molecules of the substrate are cut in half. The DNA enzymes simulate logical functions. For example, such a DNA will unfold if two specific types of DNA strand are introduced to reproduce the logic function AND.
By default, the computer is considered to have played first in the central square. The human player starts with eight different types of DNA strands corresponding to the eight remaining boxes that may be played. To play box number i, the human player pours into all bins the strands corresponding to input #i. These strands bind to certain DNA enzymes present in the bins, resulting, in one of these bins, in the deformation of the DNA enzymes which binds to the substrate and cuts it. The corresponding bin becomes fluorescent, indicating which box is being played by the DNA computer. The DNA enzymes are divided among the bins in such a way as to ensure that the best the human player can achieve is a draw, as in real tic-tac-toe.

Neural network based computing[edit]
Kevin Cherry and Lulu Qian at Caltech developed a DNA-based artificial neural network that can recognize 100-bit hand-written digits. They achieve this by programming on computer in advance with appropriate set of weights represented by varying concentrations weight molecules which will later be added to the test tube that holds the input DNA strands.[26][27]

Improved speed with Localized (cache-like) Computing[edit]
One of the challenges of DNA computing is its speed. While DNA as a substrate is biologically compatible i.e. it can be used at places where silicon technology cannot, its computation speed is still very slow. For example, the square-root circuit used as a benchmark in field took over 100 hours to complete.[28] While newer ways with external enzyme sources are reporting faster and more compact circuits,[29] Chatterjee et al. demonstrated an interesting idea in the field to speedup computation through localized DNA circuits.[30] This concept is being further explored by other groups.[31] This idea, while originally proposed in the field computer architecture, has been adopted in this field as well. In computer architecture, it is very well-known that if the instructions are executed in sequence, having them loaded in the cache will inevitably lead to fast performance, also called as the principle of localization. This is because with instructions in fast cache memory, there is no need swap them in and out of main memory which can be slow. Similarly, in localized DNA computing, the DNA strands responsible for computation are fixed on a breadboard like substrate ensuring physical proximity of the computing gates. Such localized DNA computing techniques have shown to potentially reduce the computation time by orders of magnitude.

Renewable (or reversible) DNA computing[edit]
Subsequent research on DNA computing has produced reversible DNA computing, bringing the technology one step closer to the silicon-based computing used in (for example) PCs. In particular, John Reif and his group at Duke University have proposed two different techniques to reuse the computing DNA complexes. The first design uses dsDNA gates,[32] while the second design uses DNA hairpin complexes.[33]
While both the designs face some issues (such as reaction leaks), this appears to represent a significant breakthrough in the field of DNA computing. Some other groups have also attempted to address the gate reusability problem.[34][35]
Using strand displacement reactions (SRDs), reversible proposals are presented in "Synthesis Strategy of Reversible Circuits on DNA Computers" paper [36] for implementing reversible gates and circuits on DNA computers by combining DNA computing and reversible computing techniques. This paper also proposes a universal reversible gate library (URGL) for synthesizing n-bit reversible circuits on DNA computers with an average length and cost of the constructed circuits better than the previous methods.

Methods[edit]
There are multiple methods for building a computing device based on DNA, each with its own advantages and disadvantages. Most of these build the basic logic gates (AND, OR, NOT) associated with digital logic from a DNA basis. Some of the different bases include DNAzymes, deoxyoligonucleotides, enzymes, and toehold exchange.

Strand displacement mechanisms[edit]
The most fundamental operation in DNA computing and molecular programming is the strand displacement mechanism. Currently, there are two ways to perform strand displacement:

Toehold mediated strand displacement (TMSD)[28]
Polymerase-based strand displacement (PSD)[7]
Toehold exchange[edit]
Beside simple strand displacement schemes, DNA computers have also been constructed using the concept of toehold exchange.[27] In this system, an input DNA strand binds to a sticky end, or toehold, on another DNA molecule, which allows it to displace another strand segment from the molecule. This allows the creation of modular logic components such as AND, OR, and NOT gates and signal amplifiers, which can be linked into arbitrarily large computers. This class of DNA computers does not require enzymes or any chemical capability of the DNA.[37]

Chemical reaction networks (CRNs)[edit]
The full stack for DNA computing looks very similar to a traditional computer architecture. At the highest level, a C-like general purpose programming language is expressed using a set of chemical reaction networks (CRNs). This intermediate representation gets translated to domain-level DNA design and then implemented using a set of DNA strands. In 2010, Erik Winfree's group showed that DNA can be used a substrate to implement arbitrary chemical reactions. This opened gates to design and synthesis of biochemical controllers since the expressive power of CRNs is equivalent to a Turing machine.[7][8][9][10] Such controllers can potentially be used in vivo for applications such as preventing hormonal imbalance.

DNAzymes[edit]
Catalytic DNA (deoxyribozyme or DNAzyme) catalyze a reaction when interacting with the appropriate input, such as a matching oligonucleotide. These DNAzymes are used to build logic gates analogous to digital logic in silicon; however, DNAzymes are limited to 1-, 2-, and 3-input gates with no current implementation for evaluating statements in series.
The DNAzyme logic gate changes its structure when it binds to a matching oligonucleotide and the fluorogenic substrate it is bonded to is cleaved free. While other materials can be used, most models use a fluorescence-based substrate because it is very easy to detect, even at the single molecule limit.[38] The amount of fluorescence can then be measured to tell whether or not a reaction took place. The DNAzyme that changes is then âused,â and cannot initiate any more reactions. Because of this, these reactions take place in a device such as a continuous stirred-tank reactor, where old product is removed and new molecules added.
Two commonly used DNAzymes are named E6 and 8-17. These are popular because they allow cleaving of a substrate in any arbitrary location.[39] Stojanovic and MacDonald have used the E6 DNAzymes to build the MAYA I[40] and MAYA II[41] machines, respectively; Stojanovic has also demonstrated logic gates using the 8-17 DNAzyme.[42] While these DNAzymes have been demonstrated to be useful for constructing logic gates, they are limited by the need for a metal cofactor to function, such as Zn2+ or Mn2+, and thus are not useful in vivo.[38][43]
A design called a stem loop, consisting of a single strand of DNA which has a loop at an end, are a dynamic structure that opens and closes when a piece of DNA bonds to the loop part. This effect has been exploited to create several logic gates. These logic gates have been used to create the computers MAYA I and MAYA II which can play tic-tac-toe to some extent.[44]

Enzymes[edit]
Enzyme based DNA computers are usually of the form of a simple Turing machine; there is analogous hardware, in the form of an enzyme, and software, in the form of DNA.[45]
Benenson, Shapiro and colleagues have demonstrated a DNA computer using the FokI enzyme[46] and expanded on their work by going on to show automata that diagnose and react to prostate cancer: under expression of the genes PPAP2B and GSTP1 and an over expression of PIM1 and HPN.[47] Their automata evaluated the expression of each gene, one gene at a time, and on positive diagnosis then released a single strand DNA molecule (ssDNA) that is an antisense for MDM2. MDM2 is a repressor of protein 53, which itself is a tumor suppressor.[48] On negative diagnosis it was decided to release a suppressor of the positive diagnosis drug instead of doing nothing. A limitation of this implementation is that two separate automata are required, one to administer each drug. The entire process of evaluation until drug release took around an hour to complete. This method also requires transition molecules as well as the FokI enzyme to be present. The requirement for the FokI enzyme limits application in vivo, at least for use in "cells of higher organisms".[49] It should also be pointed out that the 'software' molecules can be reused in this case.

Algorithmic self-assembly[edit]
  DNA arrays that display a representation of the Sierpinski gasket on their surfaces. Click the image for further details. Image from Rothemund et al., 2004.[50]
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}Main article: DNA nanotechnology: Algorithmic self-assembly
DNA nanotechnology has been applied to the related field of DNA computing. DNA tiles can be designed to contain multiple sticky ends with sequences chosen so that they act as Wang tiles. A DX array has been demonstrated whose assembly encodes an XOR operation; this allows the DNA array to implement a cellular automaton which generates a fractal called the Sierpinski gasket. This shows that computation can be incorporated into the assembly of DNA arrays, increasing its scope beyond simple periodic arrays.[50]

Capabilities[edit]
DNA computing is a form of parallel computing in that it takes advantage of the many different molecules of DNA to try many different possibilities at once.[51] For certain specialized problems, DNA computers are faster and smaller than any other computer built so far. Furthermore, particular mathematical computations have been demonstrated to work on a DNA computer.
DNA computing does not provide any new capabilities from the standpoint of computability theory, the study of which problems are computationally solvable using different models of computation.
For example,
if the space required for the solution of a problem grows exponentially with the size of the problem (EXPSPACE problems) on von Neumann machines, it still grows exponentially with the size of the problem on DNA machines.
For very large EXPSPACE problems, the amount of DNA required is too large to be practical.

Alternative technologies[edit]
A partnership between IBM and Caltech was established in 2009 aiming at "DNA chips" production.[52] A Caltech group is working on the manufacturing of these nucleic-acid-based integrated circuits. One of these chips can compute whole square roots.[53] A compiler has been written[54] in Perl.

Pros and cons[edit]
The slow processing speed of a DNA computer (the response time is measured in minutes, hours or days, rather than milliseconds) is compensated by its potential to make a high amount of multiple parallel computations. This allows the system to take a similar amount of time for a complex calculation as for a simple one. This is achieved by the fact that millions or billions of molecules interact with each other simultaneously. However, it is much harder to analyze the answers given by a DNA computer than by a digital one.

See also[edit]
.mw-parser-output .div-col{margin-top:0.3em;column-width:30em}.mw-parser-output .div-col-small{font-size:90%}.mw-parser-output .div-col-rules{column-rule:1px solid #aaa}.mw-parser-output .div-col dl,.mw-parser-output .div-col ol,.mw-parser-output .div-col ul{margin-top:0}.mw-parser-output .div-col li,.mw-parser-output .div-col dd{page-break-inside:avoid;break-inside:avoid-column}  
Biocomputer
Chemical computer
Computational gene
DNA code construction
DNA digital data storage
DNA sequencing
Membrane computing
Molecular electronics
Peptide computing
Parallel computing
Quantum computing
Transcriptor
Wetware computer

References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Church, G. M.; Gao, Y.; Kosuri, S. (2012-08-16). "Next-Generation Digital Information Storage in DNA". Science. 337 (6102): 1628. Bibcode:2012Sci...337.1628C. doi:10.1126/science.1226355. ISSNÂ 0036-8075. PMIDÂ 22903519. S2CIDÂ 934617.

^ Erlich, Yaniv; Zielinski, Dina (2017-03-02). "DNA Fountain enables a robust and efficient storage architecture". Science. 355 (6328): 950â954. Bibcode:2017Sci...355..950E. doi:10.1126/science.aaj2038. ISSNÂ 0036-8075. PMIDÂ 28254941. S2CIDÂ 13470340.

^ Organick, Lee; Ang, Siena Dumas; Chen, Yuan-Jyue; Lopez, Randolph; Yekhanin, Sergey; Makarychev, Konstantin; Racz, Miklos Z.; Kamath, Govinda; Gopalan, Parikshit; Nguyen, Bichlien; Takahashi, Christopher N. (March 2018). "Random access in large-scale DNA data storage". Nature Biotechnology. 36 (3): 242â248. doi:10.1038/nbt.4079. ISSNÂ 1546-1696. PMIDÂ 29457795. S2CIDÂ 205285821.

^ Shah, Shalin; Dubey, Abhishek K.; Reif, John (2019-04-10). "Programming Temporal DNA Barcodes for Single-Molecule Fingerprinting". Nano Letters. 19 (4): 2668â2673. Bibcode:2019NanoL..19.2668S. doi:10.1021/acs.nanolett.9b00590. ISSNÂ 1530-6984. PMIDÂ 30896178.

^ Sharonov, Alexey; Hochstrasser, Robin M. (2006-12-12). "Wide-field subdiffraction imaging by accumulated binding of diffusing probes". Proceedings of the National Academy of Sciences. 103 (50): 18911â18916. Bibcode:2006PNAS..10318911S. doi:10.1073/pnas.0609643104. ISSNÂ 0027-8424. PMCÂ 1748151. PMIDÂ 17142314.

^ Jungmann, Ralf; AvendaÃ±o, Maier S.; Dai, Mingjie; Woehrstein, Johannes B.; Agasti, Sarit S.; Feiger, Zachary; Rodal, Avital; Yin, Peng (May 2016). "Quantitative super-resolution imaging with qPAINT". Nature Methods. 13 (5): 439â442. doi:10.1038/nmeth.3804. ISSNÂ 1548-7105. PMCÂ 4941813. PMIDÂ 27018580.

^ Jump up to: a b c Shah, Shalin; Wee, Jasmine; Song, Tianqi; Ceze, Luis; Strauss, Karin; Chen, Yuan-Jyue; Reif, John (2020-05-04). "Using Strand Displacing Polymerase To Program Chemical Reaction Networks". Journal of the American Chemical Society. 142 (21): 9587â9593. doi:10.1021/jacs.0c02240. ISSNÂ 0002-7863. PMIDÂ 32364723.

^ Jump up to: a b Chen, Yuan-Jyue; Dalchau, Neil; Srinivas, Niranjan; Phillips, Andrew; Cardelli, Luca; Soloveichik, David; Seelig, Georg (October 2013). "Programmable chemical controllers made from DNA". Nature Nanotechnology. 8 (10): 755â762. Bibcode:2013NatNa...8..755C. doi:10.1038/nnano.2013.189. ISSNÂ 1748-3395. PMCÂ 4150546. PMIDÂ 24077029.

^ Jump up to: a b Srinivas, Niranjan; Parkin, James; Seelig, Georg; Winfree, Erik; Soloveichik, David (2017-12-15). "Enzyme-free nucleic acid dynamical systems". Science. 358 (6369): eaal2052. doi:10.1126/science.aal2052. ISSNÂ 0036-8075. PMIDÂ 29242317.

^ Jump up to: a b Soloveichik, David; Seelig, Georg; Winfree, Erik (2010-03-23). "DNA as a universal substrate for chemical kinetics". Proceedings of the National Academy of Sciences. 107 (12): 5393â5398. Bibcode:2010PNAS..107.5393S. doi:10.1073/pnas.0909380107. ISSNÂ 0027-8424. PMCÂ 2851759. PMIDÂ 20203007.

^ Adleman, L. M. (1994). "Molecular computation of solutions to combinatorial problems". Science. 266 (5187): 1021â1024. Bibcode:1994Sci...266.1021A. CiteSeerXÂ 10.1.1.54.2565. doi:10.1126/science.7973651. PMIDÂ 7973651. â The first DNA computing paper. Describes a solution for the directed Hamiltonian path problem. Also available here: "Archived copy" (PDF). Archived from the original (PDF) on 2005-02-06. Retrieved 2005-11-21.{{cite web}}:  CS1 maint: archived copy as title (link)

^ Boneh, D.; Dunworth, C.; Lipton, R. J.; Sgall, J. Ã. (1996). "On the computational power of DNA". Discrete Applied Mathematics. 71 (1â3): 79â94. doi:10.1016/S0166-218X(96)00058-3. â Describes a solution for the boolean satisfiability problem. Also available here: "Archived copy" (PDF). Archived from the original (PDF) on 2012-04-06. Retrieved 2011-10-14.{{cite web}}:  CS1 maint: archived copy as title (link)

^ Lila Kari; Greg Gloor; Sheng Yu (January 2000). "Using DNA to solve the Bounded Post Correspondence Problem". Theoretical Computer Science. 231 (2): 192â203. doi:10.1016/s0304-3975(99)00100-0. â Describes a solution for the bounded Post correspondence problem, a hard-on-average NP-complete problem. Also available here: [1]

^ Baum, E. B. (1995-04-28). "Building an associative memory vastly larger than the brain". Science. 268 (5210): 583â585. Bibcode:1995Sci...268..583B. doi:10.1126/science.7725109. ISSNÂ 0036-8075. PMIDÂ 7725109.

^ Seeman, Nadrian C. (1982-11-21). "Nucleic acid junctions and lattices". Journal of Theoretical Biology. 99 (2): 237â247. doi:10.1016/0022-5193(82)90002-9. ISSNÂ 0022-5193. PMIDÂ 6188926.

^ Tikhomirov, Grigory; Petersen, Philip; Qian, Lulu (December 2017). "Fractal assembly of micrometre-scale DNA origami arrays with arbitrary patterns". Nature. 552 (7683): 67â71. Bibcode:2017Natur.552...67T. doi:10.1038/nature24655. ISSNÂ 1476-4687. PMIDÂ 29219965. S2CIDÂ 4455780.

^ Wagenbauer, Klaus F.; Sigl, Christian; Dietz, Hendrik (December 2017). "Gigadalton-scale shape-programmable DNA assemblies". Nature. 552 (7683): 78â83. Bibcode:2017Natur.552...78W. doi:10.1038/nature24651. ISSNÂ 1476-4687. PMIDÂ 29219966. S2CIDÂ 205262182.

^ Ong, Luvena L.; Hanikel, Nikita; Yaghi, Omar K.; Grun, Casey; Strauss, Maximilian T.; Bron, Patrick; Lai-Kee-Him, Josephine; Schueder, Florian; Wang, Bei; Wang, Pengfei; Kishi, Jocelyn Y. (December 2017). "Programmable self-assembly of three-dimensional nanostructures from 10,000 unique components". Nature. 552 (7683): 72â77. Bibcode:2017Natur.552...72O. doi:10.1038/nature24648. ISSNÂ 1476-4687. PMCÂ 5786436. PMIDÂ 29219968.

^ Leier, AndrÃ©; Richter, Christoph; Banzhaf, Wolfgang; Rauhe, Hilmar (2000-06-01). "Cryptography with DNA binary strands". Biosystems. 57 (1): 13â22. doi:10.1016/S0303-2647(00)00083-6. ISSNÂ 0303-2647. PMIDÂ 10963862.

^ Guarnieri, Frank; Fliss, Makiko; Bancroft, Carter (1996-07-12). "Making DNA Add". Science. 273 (5272): 220â223. Bibcode:1996Sci...273..220G. doi:10.1126/science.273.5272.220. ISSNÂ 0036-8075. PMIDÂ 8662501. S2CIDÂ 6051207.

^ Bancroft, Carter; Bowler, Timothy; Bloom, Brian; Clelland, Catherine Taylor (2001-09-07). "Long-Term Storage of Information in DNA". Science. 293 (5536): 1763â1765. doi:10.1126/science.293.5536.1763c. ISSNÂ 0036-8075. PMIDÂ 11556362. S2CIDÂ 34699434.

^ Yin, Peng; Yan, Hao; Daniell, Xiaoju G.; Turberfield, Andrew J.; Reif, John H. (2004). "A Unidirectional DNA Walker That Moves Autonomously along a Track". Angewandte Chemie International Edition. 43 (37): 4906â4911. doi:10.1002/anie.200460522. ISSNÂ 1521-3773. PMIDÂ 15372637.

^ Braich, Ravinderjit S., et al. "Solution of a satisfiability problem on a gel-based DNA computer." DNA Computing. Springer Berlin Heidelberg, 2001. 27-42.

^ Adleman, Leonard M (1998). "Computing with DNA". Scientific American. 279 (2): 54â61. Bibcode:1998SciAm.279b..54A. doi:10.1038/scientificamerican0898-54.

^ [FR] - J. Macdonald, D. Stefanovic et M. Stojanovic, Des assemblages d'ADN rompus au jeu et au travail, Pour la Science, No.Â 375, January 2009, p.Â 68-75

^ Qian, Lulu; Winfree, Erik; Bruck, Jehoshua (July 2011). "Neural network computation with DNA strand displacement cascades". Nature. 475 (7356): 368â372. doi:10.1038/nature10262. ISSNÂ 0028-0836. PMIDÂ 21776082. S2CIDÂ 1735584.

^ Jump up to: a b Cherry, Kevin M.; Qian, Lulu (2018-07-04). "Scaling up molecular pattern recognition with DNA-based winner-take-all neural networks". Nature. 559 (7714): 370â376. Bibcode:2018Natur.559..370C. doi:10.1038/s41586-018-0289-6. ISSNÂ 0028-0836. PMIDÂ 29973727. S2CIDÂ 49566504.

^ Jump up to: a b Qian, L.; Winfree, E. (2011-06-02). "Scaling Up Digital Circuit Computation with DNA Strand Displacement Cascades". Science. 332 (6034): 1196â1201. Bibcode:2011Sci...332.1196Q. doi:10.1126/science.1200520. ISSNÂ 0036-8075. PMIDÂ 21636773. S2CIDÂ 10053541.

^ Song, Tianqi; Eshra, Abeer; Shah, Shalin; Bui, Hieu; Fu, Daniel; Yang, Ming; Mokhtar, Reem; Reif, John (2019-09-23). "Fast and compact DNA logic circuits based on single-stranded gates using strand-displacing polymerase". Nature Nanotechnology. 14 (11): 1075â1081. Bibcode:2019NatNa..14.1075S. doi:10.1038/s41565-019-0544-5. ISSNÂ 1748-3387. PMIDÂ 31548688. S2CIDÂ 202729100.

^ Chatterjee, Gourab; Dalchau, Neil; Muscat, Richard A.; Phillips, Andrew; Seelig, Georg (2017-07-24). "A spatially localized architecture for fast and modular DNA computing". Nature Nanotechnology. 12 (9): 920â927. Bibcode:2017NatNa..12..920C. doi:10.1038/nnano.2017.127. ISSNÂ 1748-3387. PMIDÂ 28737747.

^ Bui, Hieu; Shah, Shalin; Mokhtar, Reem; Song, Tianqi; Garg, Sudhanshu; Reif, John (2018-01-25). "Localized DNA Hybridization Chain Reactions on DNA Origami". ACS Nano. 12 (2): 1146â1155. doi:10.1021/acsnano.7b06699. ISSNÂ 1936-0851. PMIDÂ 29357217.

^ Garg, Sudhanshu; Shah, Shalin; Bui, Hieu; Song, Tianqi; Mokhtar, Reem; Reif, John (2018). "Renewable Time-Responsive DNA Circuits". Small. 14 (33): 1801470. doi:10.1002/smll.201801470. ISSNÂ 1613-6829. PMIDÂ 30022600.

^ 
Eshra, A.; Shah, S.; Song, T.; Reif, J. (2019). "Renewable DNA hairpin-based logic circuits". IEEE Transactions on Nanotechnology. 18: 252â259. arXiv:1704.06371. Bibcode:2019ITNan..18..252E. doi:10.1109/TNANO.2019.2896189. ISSNÂ 1536-125X. S2CIDÂ 5616325.

^ Song, Xin; Eshra, Abeer; Dwyer, Chris; Reif, John (2017-05-25). "Renewable DNA seesaw logic circuits enabled by photoregulation of toehold-mediated strand displacement". RSC Advances. 7 (45): 28130â28144. Bibcode:2017RSCAd...728130S. doi:10.1039/C7RA02607B. ISSNÂ 2046-2069.

^ Goel, Ashish; Ibrahimi, Morteza (2009).  Deaton, Russell; Suyama, Akira (eds.). "Renewable, Time-Responsive DNA Logic Gates for Scalable Digital Circuits". DNA Computing and Molecular Programming. Lecture Notes in Computer Science. Berlin, Heidelberg: Springer. 5877: 67â77. doi:10.1007/978-3-642-10604-0_7. ISBNÂ 978-3-642-10604-0.

^ Rofail, Mirna; Younes, Ahmed (July 2021). "Synthesis Strategy of Reversible Circuits on DNA Computers". Symmetry. 13 (7): 1242. doi:10.3390/sym13071242.

^ Seelig, G.; Soloveichik, D.; Zhang, D. Y.; Winfree, E. (8 December 2006). "Enzyme-free nucleic acid logic circuits" (PDF). Science. 314 (5805): 1585â1588. Bibcode:2006Sci...314.1585S. doi:10.1126/science.1132493. PMIDÂ 17158324. S2CIDÂ 10966324.

^ Jump up to: a b 
Weiss, S. (1999). "Fluorescence Spectroscopy of Single Biomolecules". Science. 283 (5408): 1676â1683. Bibcode:1999Sci...283.1676W. doi:10.1126/science.283.5408.1676. PMIDÂ 10073925. S2CIDÂ 9697423.. Also available here: http://www.lps.ens.fr/~vincent/smb/PDF/weiss-1.pdf

^ 
Santoro, S. W.; Joyce, G. F. (1997). "A general purpose RNA-cleaving DNA enzyme". Proceedings of the National Academy of Sciences. 94 (9): 4262â4266. Bibcode:1997PNAS...94.4262S. doi:10.1073/pnas.94.9.4262. PMCÂ 20710. PMIDÂ 9113977.. Also available here: [2]

^ 
Stojanovic, M. N.; Stefanovic, D. (2003). "A deoxyribozyme-based molecular automaton". Nature Biotechnology. 21 (9): 1069â1074. doi:10.1038/nbt862. PMIDÂ 12923549. S2CIDÂ 184520.. Also available here: [3]

^ 
MacDonald, J.; Li, Y.; Sutovic, M.; Lederman, H.; Pendri, K.; Lu, W.; Andrews, B. L.; Stefanovic, D.; Stojanovic, M. N. (2006). "Medium Scale Integration of Molecular Logic Gates in an Automaton". Nano Letters. 6 (11): 2598â2603. Bibcode:2006NanoL...6.2598M. doi:10.1021/nl0620684. PMIDÂ 17090098.. Also available here: [4]

^ 
Stojanovic, M. N.; Mitchell, T. E.; Stefanovic, D. (2002). "Deoxyribozyme-Based Logic Gates". Journal of the American Chemical Society. 124 (14): 3555â3561. doi:10.1021/ja016756v. PMIDÂ 11929243.. Also available at [5]

^ 
Cruz, R. P. G.; Withers, J. B.; Li, Y. (2004). "Dinucleotide Junction Cleavage Versatility of 8-17 Deoxyribozyme". Chemistry & Biology. 11 (1): 57â67. doi:10.1016/j.chembiol.2003.12.012. PMIDÂ 15112995.

^ Darko Stefanovic's Group, Molecular Logic Gates Archived 2010-06-18 at the Wayback Machine and MAYA II, a second-generation tic-tac-toe playing automaton Archived 2010-06-18 at the Wayback Machine.

^ Shapiro, Ehud (1999-12-07). "A Mechanical Turing Machine: Blueprint for a Biomolecular Computer". Interface Focus. Weizmann Institute of Science. 2 (4): 497â503. doi:10.1098/rsfs.2011.0118. PMCÂ 3363030. PMIDÂ 22649583. Archived from the original on 2009-01-03. Retrieved 2009-08-13.

^ Benenson, Y.; Paz-Elizur, T.; Adar, R.; Keinan, E.; Livneh, Z.; Shapiro, E. (2001). "Programmable and autonomous computing machine made of biomolecules". Nature. 414 (6862): 430â434. Bibcode:2001Natur.414..430B. doi:10.1038/35106533. PMCÂ 3838952. PMIDÂ 11719800.. Also available here: [6] Archived 2012-05-10 at the Wayback Machine

^ Benenson, Y.; Gil, B.; Ben-Dor, U.; Adar, R.; Shapiro, E. (2004). "An autonomous molecular computer for logical control of gene expression". Nature. 429 (6990): 423â429. Bibcode:2004Natur.429..423B. doi:10.1038/nature02551. PMCÂ 3838955. PMIDÂ 15116117.. Also available here: An autonomous molecular computer for logical control of gene expression

^ 
Bond, G. L.; Hu, W.; Levine, A. J. (2005). "MDM2 is a Central Node in the p53 Pathway: 12 Years and Counting". Current Cancer Drug Targets. 5 (1): 3â8. doi:10.2174/1568009053332627. PMIDÂ 15720184.

^ 
Kahan, M.; Gil, B.; Adar, R.; Shapiro, E. (2008). "Towards molecular computers that operate in a biological environment". Physica D: Nonlinear Phenomena. 237 (9): 1165â1172. Bibcode:2008PhyD..237.1165K. doi:10.1016/j.physd.2008.01.027.. Also available here: [7]

^ Jump up to: a b Rothemund, P. W. K.; Papadakis, N.; Winfree, E. (2004). "Algorithmic Self-Assembly of DNA Sierpinski Triangles". PLOS Biology. 2 (12): e424. doi:10.1371/journal.pbio.0020424. PMCÂ 534809. PMIDÂ 15583715.

^ 
Lewin, D. I. (2002). "DNA computing". Computing in Science & Engineering. 4 (3): 5â8. Bibcode:2002CSE.....4c...5L. doi:10.1109/5992.998634.

^ [8](Caltech's own article) Archived October 14, 2011, at the Wayback Machine

^ Scaling Up Digital Circuit Computation with DNA Strand Displacement Cascades

^ [9] Online


Further reading[edit]
.mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li{margin-left:0;padding-left:3.2em;text-indent:-3.2em}.mw-parser-output .refbegin-hanging-indents ul,.mw-parser-output .refbegin-hanging-indents ul li{list-style:none}@media(max-width:720px){.mw-parser-output .refbegin-hanging-indents>ul>li{padding-left:1.6em;text-indent:-1.6em}}.mw-parser-output .refbegin-columns{margin-top:0.3em}.mw-parser-output .refbegin-columns ul{margin-top:0}.mw-parser-output .refbegin-columns li{page-break-inside:avoid;break-inside:avoid-column}
Martyn Amos (June 2005). Theoretical and Experimental DNA Computation. Natural Computing Series. Springer. ISBNÂ 978-3-540-65773-6. â The first general text to cover the whole field.
Gheorge Paun, Grzegorz Rozenberg, Arto Salomaa (October 1998). DNA Computing - New Computing Paradigms. Springer-Verlag. ISBNÂ 978-3-540-64196-4.{{cite book}}:  CS1 maint: multiple names: authors list (link) â The book starts with an introduction to DNA-related matters, the basics of biochemistry and language and computation theory, and progresses to the advanced mathematical theory of DNA computing.
Zoja Ignatova; Israel Martinez-Perez; Karl-Heinz Zimmermann (January 2008). DNA Computing Models. Springer. p.Â 288. ISBNÂ 978-0-387-73635-8. â A new general text to cover the whole field.

External links[edit]
DNA modeled computing
How Stuff Works explanation
Dirk de Pol: DNS â Ein neuer Supercomputer?. In: Die Neue Gesellschaft / Frankfurter Hefte  ISSNÂ 0177-6738, Heft 2/96, Februar 1996, S. 170â172
âDNA computerâ cracks code, Physics Web
Ars Technica
- The New York Times DNA Computer for detecting Cancer
Bringing DNA computers to life, in Scientific American
Japanese Researchers store information in bacteria DNA
International Meeting on DNA Computing and Molecular Programming
LiveScience.com-How DNA Could Power Computers
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}Authority control: National libraries  
United States





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=DNA_computing&oldid=1045440550"
		Categories: Classes of computersModels of computationMolecular biologyDNADNA nanotechnologyAmerican inventionsHidden categories: CS1 maint: archived copy as titleWebarchive template wayback linksArticles with short descriptionShort description is different from WikidataCS1 maint: multiple names: authors listArticles with LCCN identifiers
	
