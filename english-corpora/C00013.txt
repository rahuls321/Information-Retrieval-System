
Title:
Go (programming language)
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Programming language
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}"Google Go" redirects here. For for low-end Lollipop+ devices, see Android Go. For the computer program by Google to play the board game Go, see AlphaGo.
For the 2003 agent-based programming language, see Go! (programming language).


.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}GoParadigmMulti-paradigm: concurrent imperative, object-oriented[1][2]DesignedÂ byRobert GriesemerRob PikeKen ThompsonDeveloperThe Go Authors[3]FirstÂ appearedNovemberÂ 10, 2009; 12 years agoÂ (2009-11-10)Stable release1.17.6[4]Â 
   / 6 January 2022; 27 days agoÂ (6 January 2022)
Typing disciplineInferred, static, strong, structural,[5][6] nominalImplementation languageGo, Assembly language (gc); C++ (gofrontend)OSDragonFly BSD, FreeBSD, Linux, macOS, NetBSD, OpenBSD,[7] Plan 9,[8] Solaris, WindowsLicense3-clause BSD[3] + patent grant[9]Filename extensions.goWebsitego.devMajor implementationsgc, gofrontendInfluenced byC, Oberon-2, Limbo, Active Oberon, communicating sequential processes, Pascal, Oberon, Smalltalk, Newsqueak, Modula-2, Alef, APL, BCPL, Modula, occamInfluencedOdin, Crystal, Zig
Go is a statically typed, compiled programming language designed at Google[10] by Robert Griesemer, Rob Pike, and Ken Thompson.[11] Go is syntactically similar to C, but with memory safety, garbage collection, structural typing,[5] and CSP-style concurrency.[12] The language is often referred to as Golang because of its former domain name, golang.org, but the proper name is Go.[13]
There are two major implementations:

Google's self-hosting[14] "gc" compiler toolchain targeting multiple operating systems, and WebAssembly.[15]
gofrontend, a frontend to other compilers, with the libgo library. With GCC the combination is gccgo;[16] with LLVM the combination is gollvm.[17][a]
A third-party source-to-source compiler, GopherJS,[19] compiles Go to JavaScript for front-end web development.

Contents

1 History

1.1 Versioning


2 Design

2.1 Syntax
2.2 Types

2.2.1 Interface system


2.3 Package system
2.4 Concurrency: goroutines and channels

2.4.1 Suitability for parallel programming
2.4.2 Lack of race condition safety


2.5 Binaries
2.6 Omissions


3 Style
4 Tools
5 Examples

5.1 Hello world
5.2 Concurrency
5.3 Testing
5.4 Web App


6 Applications
7 Reception

7.1 Naming dispute
7.2 Criticism


8 See also
9 Notes
10 References
11 Further reading
12 External links



History[edit]
Go was designed at Google in 2007 to improve programming productivity in an era of multicore, networked machines and large codebases.[20] The designers wanted to address criticism of other languages in use at Google, but keep their useful characteristics:[21]

static typing and run-time efficiency (like C),
readability and usability (like Python or JavaScript),[22]
high-performance networking and multiprocessing.
The designers were primarily motivated by their shared dislike of C++.[23][24][25]
Go was publicly announced in November 2009,[26] and version 1.0 was released in March 2012.[27][28] Go is widely used in production at Google[29] and in many other organizations and open-source projects.

  Mascot of Go programming language is a Gopher shown above.
In November 2016, the Go and Go Mono fonts were released by type designers Charles Bigelow and Kris Holmes specifically for use by the Go project. Go is a humanist sans-serif which resembles Lucida Grande and Go Mono is monospaced. Each of the fonts adhere to the WGL4 character set and were designed to be legible with a large x-height and distinct letterforms. Both Go and Go Mono adhere to the DIN 1450 standard by having a slashed zero, lowercase l with a tail, and an uppercase I with serifs.[30][31]
In April 2018, the original logo was replaced with a stylized GO slanting right with trailing streamlines. However, the Gopher mascot remained the same.[32]
In August 2018, the Go principal contributors published two "draft designs" for new and incompatible "Go 2" language features, generics and error handling, and asked Go users to submit feedback on them.[33][34]
Lack of support for generic programming and the verbosity of error handling in Go 1.x had drawn considerable criticism.

Versioning[edit]
Go 1 guarantees compatibility[35] for the language specification and major parts of the standard library. All versions up to the current Go 1.17 release[36] have maintained this promise.
Each major Go release is supported until there are two newer major releases.[37]

Design[edit]
Go is influenced by C (especially the Plan 9 dialect [38]), but with an emphasis on greater simplicity and safety. The language consists of:

A syntax and environment adopting patterns more common in dynamic languages:[39]
Optional concise variable declaration and initialization through type inference (xÂ := 0 instead of int x = 0; or var x = 0;).
Fast compilation.[40]
Remote package management (go get)[41] and online package documentation.[42]
Distinctive approaches to particular problems:
Built-in concurrency primitives: light-weight processes (goroutines), channels, and the select statement.
An interface system in place of virtual inheritance, and type embedding instead of non-virtual inheritance.
A toolchain that, by default, produces statically linked native binaries without external dependencies.
A desire to keep the language specification simple enough to hold in a programmer's head,[43] in part by omitting features that are common in similar languages.
Syntax[edit]
Go's syntax includes changes from C aimed at keeping code concise and readable. A combined declaration/initialization operator was introduced that allows the programmer to write iÂ := 3 or sÂ := "Hello, world!", without specifying the types of variables used. This contrasts with C's int i = 3; and const char *s = "Hello, world!";. Semicolons still terminate statements;[b] but are implicit when the end of a line occurs.[c] Methods may return multiple values, and returning a result, err pair is the conventional way a method indicates an error to its caller in Go.[d] Go adds literal syntaxes for initializing struct parameters by name and for initializing maps and slices. As an alternative to C's three-statement for loop, Go's range expressions allow concise iteration over arrays, slices, strings, maps, and channels.[46]

Types[edit]
Go has a number of built-in types, including numeric ones (.mw-parser-output .monospaced{font-family:monospace,monospace}byte, int64, float32, etc.), booleans, and character strings (string). Strings are immutable; built-in operators and keywords (rather than functions) provide concatenation, comparison, and UTF-8 encoding/decoding.[47] Record types can be defined with the struct keyword.[48]
For each type T and each non-negative integer constant n, there is an array type denoted [n]T; arrays of differing lengths are thus of different types. Dynamic arrays are available as "slices", denoted []T for some type T. These have a length and a capacity specifying when new memory needs to be allocated to expand the array. Several slices may share their underlying memory.[49][50][51]
Pointers are available for all types, and the pointer-to-T type is denoted *T. Address-taking and indirection use the & and * operators, as in C, or happen implicitly through the method call or attribute access syntax.[52][53] There is no pointer arithmetic,[e] except via the special unsafe.Pointer type in the standard library.[54]
For a pair of types K, V, the type map[K]V is the type of hash tables mapping type-K keys to type-V values. Hash tables are built into the language, with special syntax and built-in functions. chan  T is a channel that allows sending values of type T between concurrent Go processes.[55]
Aside from its support for interfaces, Go's type system is nominal: the type keyword can be used to define a new named type, which is distinct from other named types that have the same layout (in the case of a struct, the same members in the same order). Some conversions between types (e.g., between the various integer types) are pre-defined and adding a new type may define additional conversions, but conversions between named types must always be invoked explicitly.[56] For example, the type keyword can be used to define a type for IPv4 addresses, based on 32-bit unsigned integers:

type ipv4addr uint32

With this type definition, ipv4addr(x) interprets the uint32 value x as an IP address. Simply assigning x to a variable of type ipv4addr is a type error.[citation needed]
Constant expressions may be either typed or "untyped"; they are given a type when assigned to a typed variable if the value they represent passes a compile-time check.[57]
Function types are indicated by the func keyword; they take zero or more parameters and return zero or more values, all of which are typed. The parameter and return values determine a function type; thus, func(string, int32) (int, error) is the type of functions that take a string and a 32-bit signed integer, and return a signed integer (of default width) and a value of the built-in interface type error.[58]
Any named type has a method set associated with it. The IP address example above can be extended with a method for checking whether its value is a known standard:

// ZeroBroadcast reports whether addr is 255.255.255.255.
func (addr ipv4addr) ZeroBroadcast() bool {
    return addr == 0xFFFFFFFF
}

Due to nominal typing, this method definition adds a method to ipv4addr, but not on uint32. While methods have special definition and call syntax, there is no distinct method type.[59]

 Interface system[edit]
Go provides two features that replace class inheritance.[citation needed]
The first is embedding, which can be viewed as an automated form of composition.[60]
The second are its interfaces, which provides runtime polymorphism.[61]:â266â Interfaces are a class of types and provide a limited form of structural typing in the otherwise nominal type system of Go. An object which is of an interface type is also of another type, much like C++ objects being simultaneously of a base and derived class. Go interfaces were designed after protocols from the Smalltalk programming language.[62] Multiple sources use the term duck typing when describing Go interfaces.[63][64] Although the term duck typing is not precisely defined and therefore not wrong, it usually implies that type conformance is not statically checked. Since conformance to a Go interface is checked statically by the Go compiler (except when performing a type assertion), the Go authors prefer the term structural typing.[65]
The definition of an interface type lists required methods by name and type. Any object of type T for which functions exist matching all the required methods of interface type I is an object of type I as well. The definition of type T need not (and cannot) identify type I. For example, if Shape, Square and Circle are defined as

import "math"

type Shape interface {
    Area() float64
}

type Square struct { // Note: no "implements" declaration
    side float64
}

func (sq Square) Area() float64 { return sq.side * sq.side }

type Circle struct { // No "implements" declaration here either
    radius float64
}

func (c Circle) Area() float64 { return math.Pi * math.Pow(c.radius, 2) }

then both a Square and a Circle are implicitly a Shape and can be assigned to a Shape-typed variable.[61]:â263â268â In formal language, Go's interface system provides structural rather than nominal typing. Interfaces can embed other interfaces with the effect of creating a combined interface that is satisfied by exactly the types that implement the embedded interface and any methods that the newly defined interface adds.[61]:â270â
The Go standard library uses interfaces to provide genericity in several places, including the input/output system that is based on the concepts of Reader and Writer.[61]:â282â283â
Besides calling methods via interfaces, Go allows converting interface values to other types with a run-time type check. The language constructs to do so are the type assertion,[66] which checks against a single potential type, and the type switch,[67] which checks against multiple types.[citation needed]
The empty interface interface{} is an important base case because it can refer to an item of any concrete type. It is similar to the Object class in Java or C# and is satisfied by any type, including built-in types like int.[61]:â284â Code using the empty interface cannot simply call methods (or built-in operators) on the referred-to object, but it can store the interface{} value, try to convert it to a more useful type via a type assertion or type switch, or inspect it with Go's reflect package.[68] Because interface{} can refer to any value, it is a limited way to escape the restrictions of static typing, like void* in C but with additional run-time type checks.[citation needed]
The interface{} type can be used to model structured data of any arbitrary schema in Go, such as JSON or YAML data, by representing it as a map[string]interface{} (map of string to empty interface). This recursively describes data in the form of a dictionary with string keys and values of any type.[69]
Interface values are implemented using pointer to data and a second pointer to run-time type information.[70] Like some other types implemented using pointers in Go, interface values are nil if uninitialized.[71]

Package system[edit]
In Go's package system, each package has a path (e.g., "compress/bzip2" or "golang.org/x/net/html") and a name (e.g., bzip2 or html). References to other packages' definitions must always be prefixed with the other package's name, and only the capitalized names from other packages are accessible: io.Reader is public but bzip2.reader is not.[72] The go get command can retrieve packages stored in a remote repository[73] and developers are encouraged to develop packages inside a base path corresponding to a source repository (such as example.com/user_name/package_name) to reduce the likelihood of name collision with future additions to the standard library or other external libraries.[74]
Proposals exist to introduce a proper package management solution for Go similar to CPAN for Perl or Rust's cargo system or Node's npm system.[75]

 Concurrency: goroutines and channels[edit]
The Go language has built-in facilities, as well as library support, for writing concurrent programs. Concurrency refers not only to CPU parallelism, but also to asynchrony: letting slow operations like a database or network read run while the program does other work, as is common in event-based servers.[76]
The primary concurrency construct is the goroutine, a type of light-weight process. A function call prefixed with the go keyword starts a function in a new goroutine. The language specification does not specify how goroutines should be implemented, but current implementations multiplex a Go process's goroutines onto a smaller set of operating-system threads, similar to the scheduling performed in Erlang.[77]:â10â
While a standard library package featuring most of the classical concurrency control structures (mutex locks, etc.) is available,[77]:â151â152â idiomatic concurrent programs instead prefer channels, which send messages between goroutines.[78] Optional buffers store messages in FIFO order[79]:â43â and allow sending goroutines to proceed before their messages are received.[citation needed]
Channels are typed, so that a channel of type chan T can only be used to transfer messages of type T. Special syntax is used to operate on them; <-ch is an expression that causes the executing goroutine to block until a value comes in over the channel ch, while ch <- x sends the value x (possibly blocking until another goroutine receives the value). The built-in switch-like select statement can be used to implement non-blocking communication on multiple channels; see below for an example. Go has a memory model describing how goroutines must use channels or other operations to safely share data.[80]
The existence of channels sets Go apart from actor model-style concurrent languages like Erlang, where messages are addressed directly to actors (corresponding to goroutines). The actor style can be simulated in Go by maintaining a one-to-one correspondence between goroutines and channels, but the language allows multiple goroutines to share a channel or a single goroutine to send and receive on multiple channels.[77]:â147â
From these tools one can build concurrent constructs like worker pools, pipelines (in which, say, a file is decompressed and parsed as it downloads), background calls with timeout, "fan-out" parallel calls to a set of services, and others.[81] Channels have also found uses further from the usual notion of interprocess communication, like serving as a concurrency-safe list of recycled buffers,[82] implementing coroutines (which helped inspire the name goroutine),[83] and implementing iterators.[84]
Concurrency-related structural conventions of Go (channels and alternative channel inputs) are derived from Tony Hoare's communicating sequential processes model. Unlike previous concurrent programming languages such as Occam or Limbo (a language on which Go co-designer Rob Pike worked),[85] Go does not provide any built-in notion of safe or verifiable concurrency.[86] While the communicating-processes model is favored in Go, it is not the only one: all goroutines in a program share a single address space. This means that mutable objects and pointers can be shared between goroutines; see Â§Â Lack of race condition safety, below.

Suitability for parallel programming[edit]
Although Go's concurrency features are not aimed primarily at parallel processing,[76] they can be used to program shared-memory multi-processor machines. Various studies have been done into the effectiveness of this approach.[87] One of these studies compared the size (in lines of code) and speed of programs written by a seasoned programmer not familiar with the language and corrections to these programs by a Go expert (from Google's development team), doing the same for Chapel, Cilk and Intel TBB. The study found that the non-expert tended to write divide-and-conquer algorithms with one go statement per recursion, while the expert wrote distribute-work-synchronize programs using one goroutine per processor. The expert's programs were usually faster, but also longer.[88]

Lack of race condition safety[edit]
Go's approach to concurrency can be summarized as "don't communicate by sharing memory; share memory by communicating".[89] There are no restrictions on how goroutines access shared data, making race conditions possible. Specifically, unless a program explicitly synchronizes via channels or other means, writes from one goroutine might be partly, entirely, or not at all visible to another, often with no guarantees about ordering of writes.[86] Furthermore, Go's internal data structures like interface values, slice headers, hash tables, and string headers are not immune to race conditions, so type and memory safety can be violated in multithreaded programs that modify shared instances of those types without synchronization.[90][91] Instead of language support, safe concurrent programming thus relies on conventions; for example, Chisnall recommends an idiom called "aliases xor mutable", meaning that passing a mutable value (or pointer) over a channel signals a transfer of ownership over the value to its receiver.[77]:â155â

Binaries[edit]
The linker in the gc toolchain creates statically linked binaries by default; therefore all Go binaries include the Go runtime.[92][93]

Omissions[edit]
Go deliberately omits certain features common in other languages, including (implementation)Â inheritance, generic programming, assertions,[f] pointer arithmetic,[e] implicit type conversions, untagged unions,[g] and tagged unions.[h] The designers added only those facilities that all three agreed on.[96]
Of the omitted language features, the designers explicitly argue against assertions and pointer arithmetic, while defending the choice to omit type inheritance as giving a more useful language, encouraging instead the use of interfaces to achieve dynamic dispatch[i] and composition to reuse code. Composition and delegation are in fact largely automated by struct embedding; according to researchers Schmager et al., this feature "has many of the drawbacks of inheritance: it affects the public interface of objects, it is not fine-grained (i.e, no method-level control over embedding), methods of embedded objects cannot be hidden, and it is static", making it "not obvious" whether programmers will overuse it to the extent that programmers in other languages are reputed to overuse inheritance.[60]
The designers express an openness to generic programming and note that built-in functions are in fact type-generic, but these are treated as special cases; Pike calls this a weakness that may at some point be changed.[49] The Google team built at least one compiler for an experimental Go dialect with generics, but did not release it.[97] They are also open to standardizing ways to apply code generation.[98] In June 2020, a new draft design document[99] was published, which would add the necessary syntax to Go for declaring generic functions and types. A code translation tool go2go was provided to allow users to try out the new syntax, along with a generics-enabled version of the online Go Playground.[100]
Initially omitted, the exception-like panic/recover mechanism was eventually added, which the Go authors advise using for unrecoverable errors such as those that should halt an entire program or server request, or as a shortcut to propagate errors up the stack within a package (but not across package boundaries; there, error returns are the standard API).[101][102][103][104]

Style[edit]
The Go authors put substantial effort into influencing the style of Go programs:

Indentation, spacing, and other surface-level details of code are automatically standardized by the gofmt tool.[105] golint does additional style checks automatically, but has been deprecated and archived by the Go maintainers. [106]
Tools and libraries distributed with Go suggest standard approaches to things like API documentation (godoc),[107] testing (go test), building (go build), package management (go get), and so on.
Go enforces rules that are recommendations in other languages, for example banning cyclic dependencies, unused variables[108] or imports,[109] and implicit type conversions.
The omission of certain features (for example, functional-programming shortcuts like map and Java-style try/finally blocks) tends to encourage a particular explicit, concrete, and imperative programming style.
On day one the Go team published a collection of Go idioms,[107] and later also collected code review comments,[110] talks,[111] and official blog posts[112] to teach Go style and coding philosophy.
Tools[edit]
The main Go distribution includes tools for building, testing, and analyzing code:

go build, which builds Go binaries using only information in the source files themselves, no separate makefiles
go test, for unit testing and microbenchmarks
go fmt, for formatting code
go install, for retrieving and installing remote packages
go vet, a static analyzer looking for potential errors in code
go run, a shortcut for building and executing code
godoc, for displaying documentation or serving it via HTTP
gorename, for renaming variables, functions, and so on in a type-safe way
go generate, a standard way to invoke code generators
It also includes profiling and debugging support, runtime instrumentation (for example, to track garbage collection pauses), and a race condition tester.
An ecosystem of third-party tools adds to the standard distribution, such as gocode, which enables code autocompletion in many text editors, goimports, which automatically adds/removes package imports as needed, and errcheck, which detects code that might unintentionally ignore errors.

Examples[edit]
Hello world[edit]
package main

import "fmt"

func main() {
    fmt.Println("Hello, world!")
}

where "fmt" is the package for formatted I/O, similar to C's C file input/output.[113]

Concurrency[edit]
The following simple program demonstrates Go's concurrency features to implement an asynchronous program. It launches two lightweight threads ("goroutines"): one waits for the user to type some text, while the other implements a timeout. The select statement waits for either of these goroutines to send a message to the main routine, and acts on the first message to arrive (example adapted from David Chisnall's book).[77]:â152â

package main

import (
    "fmt"
    "time"
)

func readword(ch chan string) {
    fmt.Println("Type a word, then hit Enter.")
    var word string
    fmt.Scanf("%s", &word)
    ch <- word
}

func timeout(t chan bool) {
    time.Sleep(5 * time.Second)
    t <- false
}

func main() {
    t := make(chan bool)
    go timeout(t)

    ch := make(chan string)
    go readword(ch)

    select {
    case word := <-ch:
        fmt.Println("Received", word)
    case <-t:
        fmt.Println("Timeout.")
    }
}

Testing[edit]
The testing package provides support for automated testing of go packages.[114] Target function example:

func ExtractUsername(email string) string {
	at := strings.Index(email, "@")
	return email[:at]
}

Test code (note that assert keyword is missing in Go; tests live in <filename>_test.go at the same package):

import (
    "testing"    
)

func TestExtractUsername(t *testing.T) {
	t.Run("withoutDot", func(t *testing.T) {
		username := ExtractUsername("r@google.com")
		if username != "r" {
			t.Fatalf("Got: %v\n", username)
		}
	})

	t.Run("withDot", func(t *testing.T) {
		username := ExtractUsername("jonh.smith@example.com")
		if username != "jonh.smith" {
			t.Fatalf("Got: %v\n", username)
		}
	})
}

It is possible to run tests in parallel.

Web App[edit]
The net/http package provides support for creating web applications.
This example would show "Hello world!" when localhost:8080 is visited.

package main

import (
    "fmt"
    "log"
    "net/http"    
)

func helloFunc(w http.ResponseWriter, r *http.Request) {
    fmt.Fprintf(w, "Hello world!")
}

func main() {
    http.HandleFunc("/", helloFunc)
    log.Fatal(http.ListenAndServe(":8080", nil))
}

Applications[edit]
Some notable open-source applications written in Go include:[115]

Caddy, an open source HTTP/2 web server with automatic HTTPS capability
CockroachDB, an open source, survivable, strongly consistent, scale-out SQL database
Consul, a software for DNS-based service discovery and providing distributed Key-value storage, segmentation and configuration.
Docker, a set of tools for deploying Linux containers
EdgeX, a vendor-neutral open-source platform hosted by the Linux Foundation, providing a common framework for industrial IoT edge computing[116]
Hugo, a static site generator
InfluxDB, an open source database specifically to handle time series data with high availability and high performance requirements
InterPlanetary File System, a content-addressable, peer-to-peer hypermedia protocol[117]
Juju, a service orchestration tool by Canonical, packagers of Ubuntu Linux
Kubernetes container management system
lnd, an implementation of the Bitcoin Lightning Network[118]
Mattermost, a teamchat system
NATS Messaging, an open-source messaging system featuring the core design principles of performance, scalability, and ease of use[119]
OpenShift, a cloud computing platform as a service by Red Hat
Rclone, a command line program to manage files on cloud storage and other high latency services
Snappy, a package manager for Ubuntu Touch developed by Canonical
Syncthing, an open-source file synchronization client/server application
Terraform, an open-source, multiple cloud infrastructure provisioning tool from HashiCorp
TiDB, an open-source, distributed HTAP database compatible with the MySQL protocol from PingCAP
Other notable companies and sites using Go (generally together with other languages, not exclusively) include:

Cacoo, for their rendering of the user dashboard page and microservice using Go and gRPC[120]
Chango, a programmatic advertising company uses Go in its real-time bidding systems[121]
Cloud Foundry, a platform as a service[122]
Cloudflare, for their delta-coding proxy Railgun, their distributed DNS service, as well as tools for cryptography, logging, stream processing, and accessing SPDY sites[123][124]
Container Linux (formerly CoreOS), a Linux-based operating system that uses Docker containers[125] and rkt containers
Couchbase, Query and Indexing services within the Couchbase Server[126]
Dropbox, who migrated some of their critical components from Python to Go[127]
Ethereum, The go-ethereum implementation of the Ethereum Virtual Machine blockchain for the Ether cryptocurrency[128]
Gitlab, a web-based DevOps lifecycle tool that provides a Git-repository, wiki, issue-tracking, continuous integration, deployment pipeline features[129]
Google, for many projects, notably including download server dl.google.com[130][131][132]
Heroku, for Doozer, a lock service[12]
Hyperledger Fabric, an open source, enterprise-focused distributed ledger project
MongoDB, tools for administering MongoDB instances[133]
Netflix, for two portions of their server architecture[134]
Nutanix, for a variety of micro-services in its Enterprise Cloud OS[135]
Plug.dj, an interactive online social music streaming website[136]
SendGrid, a Boulder, Colorado-based transactional email delivery and management service.[137]
SoundCloud, for "dozens of systems"[138]
Splice, for the entire backend (API and parsers) of their online music collaboration platform[139]
ThoughtWorks, some tools and applications for continuous delivery and instant messages (CoyIM)[140]
Twitch, for their IRC-based chat system (migrated from Python)[141]
Uber, for handling high volumes of geofence-based queries[142]

See also related query to Wikidata.

Reception[edit]
The interface system, and the deliberate omission of inheritance, were praised by Michele Simionato, who likened these characteristics to those of Standard ML, calling it "a shame that no popular language has followed [this] particular route".[143]
Dave Astels at Engine Yard wrote:[144]

.mw-parser-output .templatequote{overflow:hidden;margin:1em 0;padding:0 40px}.mw-parser-output .templatequote .templatequotecite{line-height:1.5em;text-align:left;padding-left:1.6em;margin-top:0}Go is extremely easy to dive into. There are a minimal number of fundamental language concepts and the syntax is clean and designed to be clear and unambiguous.
Go is still experimental and still a little rough around the edges.
Go was named Programming Language of the Year by the TIOBE Programming Community Index in its first year, 2009, for having a larger 12-month increase in popularity (in only 2 months, after its introduction in November) than any other language that year, and reached 13th place by January 2010,[145] surpassing established languages like Pascal. By June 2015, its ranking had dropped to below 50th in the index, placing it lower than COBOL and Fortran.[146] But as of January 2017, its ranking had surged to 13th, indicating significant growth in popularity and adoption. Go was awarded TIOBE programming language of the year 2016.
Bruce Eckel has stated:[147]

The complexity of C++ (even more complexity has been added in the new C++), and the resulting impact on productivity, is no longer justified. All the hoops that the C++ programmer had to jump through in order to use a C-compatible language make no sense anymore -- they're just a waste of time and effort. Go makes much more sense for the class of problems that C++ was originally intended to solve.
A 2011 evaluation of the language and its gc implementation in comparison to C++ (GCC), Java and Scala by a Google engineer found:

Go offers interesting language features, which also allow for a concise and standardized notation. The compilers for this language are still immature, which reflects in both performance and binary sizes.ââR. Hundt[148]
The evaluation got a rebuttal from the Go development team. Ian Lance Taylor, who had improved the Go code for Hundt's paper, had not been aware of the intention to publish his code, and says that his version was "never intended to be an example of idiomatic or efficient Go"; Russ Cox then optimized the Go code, as well as the C++ code, and got the Go code to run slightly faster than C++ and more than an order of magnitude faster than the code in the paper.[149]

Naming dispute[edit]
On November 10, 2009, the day of the general release of the language, Francis McCabe, developer of the Go! programming language (note the exclamation point), requested a name change of Google's language to prevent confusion with his language, which he had spent 10 years developing.[150] McCabe raised concerns that "the 'big guy' will end up steam-rollering over" him, and this concern resonated with the more than 120 developers who commented on Google's official issues thread saying they should change the name, with some[151] even saying the issue contradicts Google's motto of: Don't be evil.[152]

On October 12, 2010, the issue was closed by Google developer Russ Cox (@rsc) with the custom status "Unfortunate" accompanied by the following comment: "There are many computing products and services named Go. In the 11 months since our release, there has been minimal confusion of the two languages."[152]
Criticism[edit]
Go critics say that:

Go's nil combined with the lack of algebraic types leads to difficulty handling failures and base cases.[153][154]
Go does not allow an opening brace to appear on its own line, which forces all Go programmers to use the same brace style.[155]
File semantics in Go standard library are heavily based on POSIX semantics, and they do not map well to the Windows platform.[156][157] Note that this problem is not particular to Go, but other programming languages have solved it through well defined standard libraries.
Study shows that it is as easy to make concurrency bugs with message passing as with shared memory, sometimes even more.[158]

See also[edit]
.mw-parser-output .portalbox{float:right;border:solid #aaa 1px;padding:0}.mw-parser-output .portalbox.tleft{margin:0.5em 1em 0.5em 0}.mw-parser-output .portalbox.tright{margin:0.5em 0 0.5em 1em}.mw-parser-output .portalbox>ul{display:table;box-sizing:border-box;padding:0.1em;max-width:175px;background:#f9f9f9;font-size:85%;line-height:110%;font-style:italic;font-weight:bold}.mw-parser-output .portalbox>ul>li{display:table-row}.mw-parser-output .portalbox>ul>li>span:first-child{display:table-cell;padding:0.2em;vertical-align:middle;text-align:center}.mw-parser-output .portalbox>ul>li>span:last-child{display:table-cell;padding:0.2em 0.2em 0.2em 0.3em;vertical-align:middle}

Free and open-source software portal
Comparison of programming languages
Notes[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ Using alternative backends reduces compilation speed and Go's control over garbage collection but provides better machine-code optimization.[18]

^ But "To allow complex statements to occupy a single line, a semicolon may be omitted before a closing ) or }".[44]

^ "if the newline comes after a token that could end a statement, [the lexer will] insert a semicolon".[45]

^ Usually, exactly one of the result and error values has a value other than the type's zero value; sometimes both do, as when a read or write can only be partially completed, and sometimes neither, as when a read returns 0 bytes. See Semipredicate problem: Multivalued return.

^ Jump up to: a b Language FAQ "Why is there no pointer arithmetic? Safety ... never derive an illegal address that succeeds incorrectly ... using array indices can be as efficient as ... pointer arithmetic ... simplify the implementation of the garbage collector...."[11]

^ Language FAQ "Why does Go not have assertions? ...our experience has been that programmers use them as a crutch to avoid thinking about proper error handling and reporting...."[11]

^ Language FAQ "Why are there no untagged unions...? [they] would violate Go's memory safety guarantees."[11]

^ Language FAQ "Why does Go not have variant types? ... We considered [them but] they overlap in confusing ways with interfaces.... [S]ome of what variant types address is already covered, ... although not as elegantly."[11] (The tag of an interface type[94] is accessed with a type assertion[95]).

^ Questions "How do I get dynamic dispatch of methods?" and "Why is there no type inheritance?" in the language FAQ.[11]


References[edit]
funkyprogrammer.uk/concurrency-in-go-programming-language/

This article incorporates material from the official Go tutorial, which is licensed under the Creative Commons Attribution 3.0 license.


^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}"Is Go an object-oriented language?". Retrieved April 13, 2019. Although Go has types and methods and allows an object-oriented style of programming, there is no type hierarchy.

^ "Go: code that grows with grace". Retrieved June 24, 2018. Go is Object Oriented, but not in the usual way.

^ Jump up to: a b "Text file LICENSE". The Go Programming Language. Retrieved October 5, 2012.

^ "Go 1.17". Retrieved January 22, 2022.

^ Jump up to: a b "Why doesn't Go have "implements" declarations?". golang.org. Retrieved October 1, 2015.

^ Pike, Rob (December 22, 2014). "Rob Pike on Twitter". Retrieved March 13, 2016. Go has structural typing, not duck typing. Full interface satisfaction is checked and required.

^ "lang/go: go-1.4 â Go programming language". OpenBSD ports. December 23, 2014. Retrieved January 19, 2015.

^ "Go Porting Efforts". Go Language Resources. cat-v. January 12, 2010. Retrieved January 18, 2010.

^ "Additional IP Rights Grant". The Go Programming Language. Retrieved October 5, 2012.

^ Kincaid, Jason (November 10, 2009). "Google's Go: A New Programming Language That's Python Meets C++". TechCrunch. Retrieved January 18, 2010.

^ Jump up to: a b c d e f "Language Design FAQ". golang.org. January 16, 2010. Retrieved February 27, 2010.

^ Jump up to: a b Metz, Cade (May 5, 2011). "Google Go boldly goes where no code has gone before". The Register.

^ "Is the language called Go or Golang?". Retrieved March 26, 2020. The language is called Go.

^ "Go 1.5 Release Notes". Retrieved January 28, 2016. The compiler and runtime are now implemented in Go and assembler, without C.

^ "Go 1.11 is Released - The Go Blog". August 24, 2018. Retrieved January 1, 2019.

^ "Installing GCC: Configuration". Retrieved December 3, 2011. Ada, Go and Objective-C++ are not default languages

^ "FAQ: Implementation". golang.org. August 2, 2021. Retrieved August 2, 2021.

^ "gollvm Â§ Is gollvm a replacement for the main Go compiler? (gc)". Git at Google.

^ "A compiler from Go to JavaScript for running Go code in a browser: Gopherjs/Gopherjs". GitHub. April 18, 2020.

^ "Go at Google: Language Design in the Service of Software Engineering". Retrieved October 8, 2018.

^ Pike, Rob (April 28, 2010). "Another Go at Language Design". Stanford EE Computer Systems Colloquium. Stanford University. Video available.

^ "Frequently Asked Questions (FAQ) - The Go Programming Language". golang.org. Retrieved February 26, 2016.

^ Binstock, Andrew (May 18, 2011). "Dr. Dobb's: Interview with Ken Thompson". Archived from the original on January 5, 2013. Retrieved February 7, 2014.

^ Pike, Rob (2012). "Less is exponentially more".

^ Griesemer, Robert (2015). "The Evolution of Go".

^ Griesemer, Robert; Pike, Rob; Thompson, Ken; Taylor, Ian; Cox, Russ; Kim, Jini; Langley, Adam. "Hey! Ho! Let's Go!". Google Open Source. Retrieved May 17, 2018.

^ Shankland, Stephen (March 30, 2012). "Google's Go language turns one, wins a spot at YouTube: The lower-level programming language has matured enough to sport the 1.0 version number. And it's being used for real work at Google". News. CNet. CBS Interactive Inc. Retrieved August 6, 2017. Google has released version 1 of its Go programming language, an ambitious attempt to improve upon giants of the lower-level programming world such as C and C++.

^ "Release History - The Go Programming Language". golang.org.

^ "Go FAQ: Is Google using Go internally?". Retrieved March 9, 2013.

^ "Go fonts â The Go Blog". Go. November 16, 2016. Retrieved March 12, 2019.

^ "Go Font TTFs". GitHub. Retrieved April 2, 2019.

^ "Go's New Brand". The Go Blog. Retrieved November 9, 2018.

^ "Go 2 Draft Designs". Retrieved September 12, 2018.

^ "The Go Blog: Go 2 Draft Designs". August 28, 2018.

^ "Go 1 and the Future of Go Programs - The Go Programming Language". golang.org.

^ "Go 1.17 Release Notes - The Go Programming Language". golang.org.{{cite web}}:  CS1 maint: url-status (link)

^ "Release History - The Go Programming Language". golang.org.

^ "A Quick Guide to Go's Assembler - The Go Programming Language". go.dev. Retrieved December 31, 2021.

^ Pike, Rob. "The Go Programming Language". YouTube. Retrieved July 1, 2011.

^ Pike, Rob (November 10, 2009). The Go Programming Language (flv) (Tech talk). Google.  Event occurs at 8:53.

^ "Download and install packages and dependencies - go - The Go Programming Language". See godoc.org for addresses and documentation of some packages.

^ "GoDoc". godoc.org.

^ Pike, Rob. "The Changelog" (Podcast).

^ "Go Programming Language Specification, Â§Semicolons". golang.org.

^ "Effective Go, Â§Semicolons". golang.org.

^ "The Go Programming Language Specification - The Go Programming Language". golang.org.

^ Pike, Rob (October 23, 2013). "Strings, bytes, runes and characters in Go".

^ Doxsey, Caleb. "Structs and Interfaces â An Introduction to Programming in Go". www.golang-book.com. Retrieved October 15, 2018.

^ Jump up to: a b Pike, Rob (September 26, 2013). "Arrays, slices (and strings): The mechanics of 'append'". The Go Blog. Retrieved March 7, 2015.

^ Gerrand, Andrew. "Go Slices: usage and internals".

^ The Go Authors. "Effective Go: Slices".

^ The Go authors. "Selectors - The Go Programming Language Specification".

^ The Go authors. "Calls - The Go Programming Language Specification".

^ "Go Programming Language Specification, Â§Package unsafe". golang.org.

^ "The Go Programming Language Specification - The Go Programming Language". go.dev. Retrieved December 31, 2021.

^ "The Go Programming Language Specification". golang.org.

^ "The Go Programming Language Specification". golang.org.

^ "The Go Programming Language Specification - The Go Programming Language". go.dev. Retrieved December 31, 2021.

^ "The Go Programming Language Specification". golang.org.

^ Jump up to: a b Schmager, Frank; Cameron, Nicholas; Noble, James (2010). GoHotDraw: evaluating the Go programming language with design patterns. Evaluation and Usability of Programming Languages and Tools. ACM.

^ Jump up to: a b c d e Balbaert, Ivo (2012). The Way to Go: A Thorough Introduction to the Go Programming Language. iUniverse.

^ "The Evolution of Go". talks.golang.org. Retrieved March 13, 2016.

^ Diggins, Christopher (November 24, 2009). "Duck Typing and the Go Programming Language". Dr. Dobb's, The world of software development. Retrieved March 10, 2016.{{cite web}}:  CS1 maint: url-status (link)

^ Ryer, Mat (December 1, 2015). "Duck typing in Go". Retrieved March 10, 2016.

^ "Frequently Asked Questions (FAQ) - The Go Programming Language". golang.org.

^ "The Go Programming Language Specification". golang.org.

^ "The Go Programming Language Specification". golang.org.

^ "reflect.ValueOf(i interface{}) converts an interface{} to a reflect.Value that can be further inspected".

^ "map[string]interface{} in Go". bitfieldconsulting.com.

^ "Go Data Structures: Interfaces". Retrieved November 15, 2012.

^ "The Go Programming Language Specification". golang.org.

^ "A Tutorial for the Go Programming Language". The Go Programming Language. Retrieved March 10, 2013. In Go the rule about visibility of information is simple: if a name (of a top-level type, function, method, constant or variable, or of a structure field or method) is capitalized, users of the package may see it. Otherwise, the name and hence the thing being named is visible only inside the package in which it is declared.

^ "go - The Go Programming Language". golang.org.

^ "How to Write Go Code". golang.org. The packages from the standard library are given short import paths such as "fmt" and "net/http". For your own packages, you must choose a base path that is unlikely to collide with future additions to the standard library or other external libraries. If you keep your code in a source repository somewhere, then you should use the root of that source repository as your base path. For instance, if you have an Example account at example.com/user, that should be your base path

^ "Go Packaging Proposal Process". Google Docs.

^ Jump up to: a b Pike, Rob (September 18, 2012). "Concurrency is not Parallelism".

^ Jump up to: a b c d e Chisnall, David (2012). The Go Programming Language Phrasebook. Addison-Wesley. ISBNÂ 9780132919005.

^ "Effective Go". golang.org.

^ Summerfield, Mark (2012). Programming in Go: Creating Applications for the 21st Century. Addison-Wesley.

^ "The Go Memory Model". Retrieved April 10, 2017.

^ "Go Concurrency Patterns". golang.org.

^ Graham-Cumming, John (August 24, 2013). "Recycling Memory Buffers in Go".

^ "tree.go".

^ Cheslack-Postava, Ewen. "Iterators in Go".

^ Kernighan, Brian W. "A Descent Into Limbo".

^ Jump up to: a b "The Go Memory Model". Retrieved January 5, 2011.

^ Tang, Peiyi (2010). Multi-core parallel programming in Go (PDF). Proc. First International Conference on Advanced Computing and Communications.

^ Nanz, Sebastian; West, Scott; Soares Da Silveira, Kaue. Examining the expert gap in parallel programming (PDF). Euro-Par 2013. CiteSeerXÂ 10.1.1.368.6137.

^ Go Authors. "Share Memory By Communicating".

^ Cox, Russ. "Off to the Races".

^ Pike, Rob (October 25, 2012). "Go at Google: Language Design in the Service of Software Engineering". Google, Inc. "There is one important caveat: Go is not purely memory safe in the presence of concurrency."

^ "Frequently Asked Questions (FAQ) - the Go Programming Language".

^ "A Story of a Fat Go Binary". September 21, 2018.

^ "Go Programming Language Specification, Â§Interface types". golang.org.

^ "Go Programming Language Specification, Â§Type assertions". golang.org.

^ All Systems Are Go. informIT. August 17, 2010. Retrieved June 21, 2018.

^ "E2E: Erik Meijer and Robert Griesemer â Going Go". Channel 9. Microsoft. May 7, 2012.

^ Pike, Rob. "Generating code".

^ "Type Parameters - Draft Design". go.googlesource.com.

^ "Generics in Go". bitfieldconsulting.com.

^ "Panic And Recover". Go wiki.

^ "Weekly Snapshot History". golang.org.

^ "Proposal for an exception-like mechanism". golang-nuts. March 25, 2010. Retrieved March 25, 2010.

^ "Effective Go". golang.org.

^ "gofmt - The Go Programming Language". golang.org. Retrieved February 5, 2021.

^ "golang/lint public archive". github.com.

^ Jump up to: a b "Effective Go". golang.org.

^ "Unused local variables". yourbasic.org. Retrieved February 11, 2021.

^ "Unused package imports". yourbasic.org. Retrieved February 11, 2021.

^ "Code Review Comments". GitHub. Retrieved July 3, 2018.

^ "Talks". Retrieved July 3, 2018.

^ "Errors Are Values". Retrieved July 3, 2018.

^ "fmt - The Go Programming Language". golang.org. Retrieved April 8, 2019.

^ "testing - The Go Programming Language". golang.org. Retrieved December 27, 2020.

^ avelino/awesome-go: A curated list of awesome Go frameworks, libraries and software, retrieved January 10, 2018

^ "EdgeX Foundry Project". GitHub. Retrieved February 6, 2021.

^ "ipfs/go-ipfs". GitHub. Retrieved June 1, 2018.

^ "lightningnetwork/lnd", GitHub, retrieved April 29, 2020

^ "NATS - Open Source Messaging System | Secure, Native Cloud Application Development".

^ "Test driven development in Go | Cacoo". Cacoo. July 29, 2016. Retrieved June 1, 2018.

^ "Chango". GitHub.

^ Heller, Martin (July 17, 2014). "Review: Cloud Foundry brings power and polish to PaaS". JavaWorld. Retrieved January 22, 2019.

^ Graham-Cumming, John (July 3, 2012). "Go at CloudFlare".

^ Graham-Cumming, John (November 11, 2013). "What we've been doing with Go".

^ "Go at CoreOS". November 25, 2014.

^ "Couchbase". GitHub.

^ Lee, Patrick (July 7, 2014). "Open Sourcing Our Go Libraries".

^ "Official Go implementation of the Ethereum protocol". GitHub. ethereum. April 18, 2020.

^ "Why we use Ruby on Rails to build GitLab". GitLab. Retrieved February 6, 2021. Ruby was optimized for the developer, not for running it in production," says Sid. "For the things that get hit a lot and have to be very performant or that, for example, have to wait very long on a system IO, we rewrite those in Go ... We are still trying to make GitLab use less memory. So, we'll need to enable multithreading. When we developed GitLab that was not common in the Ruby on Rails ecosystem. Now it's more common, but because we now have so much code and so many dependencies, it's going to be a longer path for us to get there. That should help; it won't make it blazingly fast, but at least it will use less memory{{cite web}}:  CS1 maint: url-status (link)

^ "dl.google.com: Powered by Go". golang.org.

^ Welsh, Matt (August 18, 2013). "Rewriting a Large Production System in Go".

^ Symonds, David. "High Performance Apps on Google App Engine".

^ "Mongo DB". GitHub. April 18, 2020.

^ "The Netflix Tech Blog: Application data caching using SSDs". May 25, 2016.

^ "golang/go". GitHub. April 18, 2020.

^ Sacks, Steven. "Search & Advances". plug.dj tech blog. Archived from the original on June 11, 2015. Retrieved June 10, 2015.

^ Jenkins, Tim (March 6, 2014). "How to Convince Your Company to Go With Golang". SendGrid's Email Deliverability Blog.

^ Bourgon, Peter. "Go at SoundCloud". Archived from the original on November 11, 2013.

^ "Go at Google I/O and Gopher SummerFest - The Go Blog". golang.org.

^ TWSTRIKE (April 17, 2020). "CoyIM". ThoughtWorks STRIKE team.

^ Hiltner, Rhys (July 5, 2016). "Go's march to low-latency GC".

^ "How We Built Uber Engineering's Highest Query per Second Service Using Go". Uber Engineering Blog. February 24, 2016. Retrieved March 2, 2016.

^ Simionato, Michele (November 15, 2009). "Interfaces vs Inheritance (or, watch out for Go!)". artima. Retrieved November 15, 2009.

^ Astels, Dave (November 9, 2009). "Ready, Set, Go!". engineyard. Retrieved November 9, 2009.

^ jt (January 11, 2010). "Google's Go Wins Programming Language Of The Year Award". jaxenter. Retrieved December 5, 2012.

^ "TIOBE Programming Community Index for June 2015". TIOBE Software. June 2015. Retrieved July 5, 2015.

^ Eckel, Bruce (August 27, 2011). "Calling Go from Python via JSON-RPC". Retrieved August 29, 2011.

^ Hundt, Robert (2011). Loop recognition in C++/Java/Go/Scala (PDF). Scala Days.

^ Metz, Cade (July 1, 2011). "Google Go strikes back with C++ bake-off". The Register.

^ Brownlee, John (November 13, 2009). "Google didn't google "Go" before naming their programming language'". Archived from the original on December 8, 2015. Retrieved May 26, 2016.

^ Claburn, Thomas (November 11, 2009). "Google 'Go' Name Brings Accusations Of Evil'". InformationWeek. Retrieved January 18, 2010.

^ Jump up to: a b "Issue 9 - goÂ â I have already used the name for *MY* programming language". Github. Google Inc. Retrieved October 12, 2010.

^ Yager, Will. "Why Go is not Good". Retrieved November 4, 2018.

^ Dobronszki, Janos. "Everyday Hassles in Go". Retrieved November 4, 2018.

^ "Why are there braces but no semicolons? And why can't I put the opening brace on the next line?". Retrieved March 26, 2020. The advantages of a single, programmatically mandated format for all Go programs greatly outweigh any perceived disadvantages of the particular style.

^ "I want off Mr. Golang's Wild Ride". February 28, 2020. Retrieved November 17, 2020.

^ "proposal: os: Create/Open/OpenFile() set FILE_SHARE_DELETE on windows #32088". GitHub. May 16, 2019. Retrieved November 17, 2020.

^ Tu, Tengfei (2019). "Understanding Real-World Concurrency Bugs in Go" (PDF). For example, around 58% of blocking bugs are caused by message passing. In addition to the violation of Go's channel usage rules (e.g., waiting on a channel that no one sends data to or close), many concurrency bugs are caused by the mixed usage of message passing and other new semantics and new libraries in Go, which can easily be overlooked but hard to detect{{cite web}}:  CS1 maint: url-status (link)


Further reading[edit]
.mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li{margin-left:0;padding-left:3.2em;text-indent:-3.2em}.mw-parser-output .refbegin-hanging-indents ul,.mw-parser-output .refbegin-hanging-indents ul li{list-style:none}@media(max-width:720px){.mw-parser-output .refbegin-hanging-indents>ul>li{padding-left:1.6em;text-indent:-1.6em}}.mw-parser-output .refbegin-columns{margin-top:0.3em}.mw-parser-output .refbegin-columns ul{margin-top:0}.mw-parser-output .refbegin-columns li{page-break-inside:avoid;break-inside:avoid-column}
Donovan, Alan; Kernighan, Brian (October 2015). The Go Programming Language (1stÂ ed.). Addison-Wesley Professional. p.Â 400. ISBNÂ 978-0-13-419044-0.
Bodner, Jon (March 2021). Learning Go (1stÂ ed.). O'Reilly. p.Â 352. ISBNÂ 9781492077213.

External links[edit]



Wikimedia Commons has media related to Go (programming language).

Official website 
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteProgramming languages
Comparison
Timeline
History

Ada
ALGOL
APL
Assembly
BASIC
C
C++
C#
COBOL
Erlang
Forth
Fortran
Go
Haskell
Java
JavaScript
Kotlin
Lisp
Lua
ML
Pascal
Perl
PHP
Prolog
Python
R
Ruby
Rust
SQL
Shell
Simula
Smalltalk
Swift
more...

 Category
 Lists: Alphabetical
Categorical
Generational
Non-English-based

vteGoogle free and open-source softwareSoftwareApplications
Chromium
OpenRefine
Tesseract
Programming languages
Dart
Go
Sawzall
Frameworks anddevelopment tools
AMP
Angular
AngularJS
Beam
Bazel
Blockly
Closure Tools
Cpplint
FlatBuffers
Flutter
Gears
Gerrit
Guava
gRPC
Gson
Guetzli
Guice
gVisor
Kubernetes
LevelDB
libvpx
NaCl
OR-Tools
Polymer
TensorFlow
Operating systems
AOSP
Chromium OS
Fuchsia
gLinux
Goobuntu
Related
Code-in
Google LLC v. Oracle America, Inc.
Open Source Security Foundation
Summer of Code

vteRob PikeOperating systems
Plan 9 from Bell Labs
Inferno
Programming languages
Newsqueak
Limbo
Sawzall
Go
Software
acme
Blit
sam
rio
8Â½
Publications
The Practice of Programming
The Unix Programming Environment
Other
RenÃ©e French
Mark V. Shaney
UTF-8

vteKen ThompsonOperating systems
Unix
Plan 9 from Bell Labs
Inferno
Programming languages
B
Go
Software
Belle
ed
grep
sam
Space Travel
Thompson shell
Other
UTF-8

Authority control General
Integrated Authority File (Germany)
National libraries
United States
Other
Faceted Application of Subject Terminology





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Go_(programming_language)&oldid=1069463967"
		Categories: Go (programming language)2009 softwareAmerican inventionsC programming language familyConcurrent programming languagesCross-platform free softwareCross-platform softwareFree compilers and interpretersGoogle softwareHigh-level programming languagesProcedural programming languagesProgramming languagesProgramming languages created in 2009Software using the BSD licenseStatically typed programming languagesSystems programming languagesHidden categories: CS1 maint: url-statusArticles with short descriptionShort description matches WikidataArticles with redirect hatnotes impacted by RfDUse mdy dates from October 2018All articles with unsourced statementsArticles with unsourced statements from December 2016Commons category link is on WikidataArticles prone to spam from June 2013Articles with GND identifiersArticles with LCCN identifiersArticles with FAST identifiers
	
