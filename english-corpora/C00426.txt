
Title:
Coupling (computer programming)
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Degree of interdependence between software modules
In software engineering, coupling is the degree of interdependence between software modules; a measure of how closely connected two routines or modules are;[1] the strength of the relationships between modules.[2]

  Coupling and cohesion
Coupling is usually contrasted with cohesion. Low coupling often correlates with high cohesion, and vice versa. Low coupling is often thought to be a sign of a well-structured computer system and a good design, and when combined with high cohesion, supports the general goals of high readability and maintainability.[citation needed]

Contents

1 History
2 Types of coupling

2.1 Procedural programming
2.2 Object-oriented programming

2.2.1 Dynamic coupling
2.2.2 Semantic coupling
2.2.3 Logical coupling




3 Disadvantages of tight coupling
4 Performance issues
5 Solutions
6 Coupling versus cohesion
7 Module coupling
8 See also
9 References
10 Further reading



History[edit]
The software quality metrics of coupling and cohesion were invented by Larry Constantine in the late 1960s as part of a structured design, based on characteristics of âgoodâ programming practices that reduced maintenance and modification costs. Structured design, including cohesion and coupling, were published in the article Stevens, Myers & Constantine (1974)[3] and the book Yourdon & Constantine (1979),[4] and the latter subsequently became standard terms.

Types of coupling[edit]


  Conceptual model of coupling
Coupling can be "low" (also "loose" and "weak") or "high" (also "tight" and "strong"). Some types of coupling, in order of highest to lowest coupling, are as follows:

Procedural programming[edit]
A module here refers to a subroutine of any kind, i.e. a set of one or more statements having a name and preferably its own set of variable names.

Content coupling (high)
Content coupling is said to occur when one module uses the code of another module, for instance a branch. This violates information hiding â a basic software design concept.
Common coupling
Common coupling is said to occur when several modules have access to the same global data. But it can lead to uncontrolled error propagation and unforeseen side-effects when changes are made.
External coupling
External coupling occurs when two modules share an externally imposed data format, communication protocol, or device interface. This is basically related to the communication to external tools and devices.
Control coupling
Control coupling is one module controlling the flow of another, by passing it information on what to do (e.g., passing a what-to-do flag).
Stamp coupling (data-structured coupling)
Stamp coupling occurs when modules share a composite data structure and use only parts of it, possibly different parts (e.g., passing a whole record to a function that needs only one field of it).
In this situation, a modification in a field that a module does not need may lead to changing the way the module reads the record.
Data coupling
Data coupling occurs when modules share data through, for example, parameters. Each datum is an elementary piece, and these are the only data shared (e.g., passing an integer to a function that computes a square root).
Object-oriented programming[edit]
Subclass coupling
Describes the relationship between a child and its parent. The child is connected to its parent, but the parent is not connected to the child.
Temporal coupling
It is when two actions are bundled together into one module just because they happen to occur at the same time.
In recent work various other coupling concepts have been investigated and used as indicators for different modularization principles used in practice.[5]

Dynamic coupling[edit]
The goal of this type of coupling is to provide a run-time evaluation of a software system. It has been argued that static coupling metrics lose precision when dealing with an intensive use of dynamic binding or inheritance.[6] In the attempt to solve this issue, dynamic coupling measures have been taken into account.

Semantic coupling[edit]
This kind of coupling considers the conceptual similarities between software entities using, for example, comments and identifiers and relying on techniques such as latent semantic indexing (LSI).

Logical coupling[edit]
Logical coupling (or evolutionary coupling or change coupling) exploits the release history of a software system to find change patterns among modules or classes: e.g., entities that are likely to be changed together or sequences of changes (a change in a class A is always followed by a change in a class B).

Disadvantages of tight coupling[edit]
Tightly coupled systems tend to exhibit the following developmental characteristics, which are often seen as disadvantages:

A change in one module usually forces a ripple effect of changes in other modules.
Assembly of modules might require more effort and/or time due to the increased inter-module dependency.
A particular module might be harder to reuse and/or test because dependent modules must be included.
Performance issues[edit]
Whether loosely or tightly coupled, a system's performance is often reduced by message and parameter creation, transmission, translation (e.g. marshaling) and message interpretation (which might be a reference to a string, array or data structure), which require less overhead than creating a complicated message such as a SOAP message. Longer messages require more CPU and memory to produce. To optimize runtime performance, message length must be minimized and message meaning must be maximized.

Message Transmission Overhead and Performance
Since a message must be transmitted in full to retain its complete meaning, message transmission must be optimized. Longer messages require more CPU and memory to transmit and receive. Also, when necessary, receivers must reassemble a message into its original state to completely receive it. Hence, to optimize runtime performance, message length must be minimized and message meaning must be maximized.
Message Translation Overhead and Performance
Message protocols and messages themselves often contain extra information (i.e., packet, structure, definition and language information). Hence, the receiver often needs to translate a message into a more refined form by removing extra characters and structure information and/or by converting values from one type to another. Any sort of translation increases CPU and/or memory overhead. To optimize runtime performance, message form and content must be reduced and refined to maximize its meaning and reduce translation.
Message Interpretation Overhead and Performance
All messages must be interpreted by the receiver. Simple messages such as integers might not require additional processing to be interpreted. However, complex messages such as SOAP messages require a parser and a string transformer for them to exhibit intended meanings. To optimize runtime performance, messages must be refined and reduced to minimize interpretation overhead.
Solutions[edit]
One approach to decreasing coupling is functional design, which seeks to limit the responsibilities of modules along functionality. Coupling increases between two classes A and B if:

A has an attribute that refers to (is of type) B.
A calls on services of an object B.
A has a method that references B (via return type or parameter).
A is a subclass of (or implements) class B.
Low coupling refers to a relationship in which one module interacts with another module through a simple and stable interface and does not need to be concerned with the other module's internal implementation (see Information Hiding).
Systems such as CORBA or COM allow objects to communicate with each other without having to know anything about the other object's implementation. Both of these systems even allow for objects to communicate with objects written in other languages.

Coupling versus cohesion[edit]
Coupling and cohesion are terms which occur together very frequently. Coupling refers to the interdependencies between modules, while cohesion describes how related the functions within a single module are. Low cohesion implies that a given module performs tasks which are not very related to each other and hence can create problems as the module becomes large.

Module coupling[edit]
Coupling in Software Engineering[7] describes a version of metrics associated with this concept.
For data and control flow coupling:

di: number of input data parameters
ci: number of input control parameters
do: number of output data parameters
co: number of output control parameters
For global coupling:

gd: number of global variables used as data
gc: number of global variables used as control
For environmental coupling:

w: number of modules called (fan-out)
r: number of modules calling the module under consideration (fan-in)

  
    
      
        
          C
          o
          u
          p
          l
          i
          n
          g
        
        (
        C
        )
        =
        1
        â
        
          
            1
            
              
                d
                
                  i
                
              
              +
              2
              Ã
              
                c
                
                  i
                
              
              +
              
                d
                
                  o
                
              
              +
              2
              Ã
              
                c
                
                  o
                
              
              +
              
                g
                
                  d
                
              
              +
              2
              Ã
              
                g
                
                  c
                
              
              +
              w
              +
              r
            
          
        
      
    
    {\displaystyle \mathrm {Coupling} (C)=1-{\frac {1}{d_{i}+2\times c_{i}+d_{o}+2\times c_{o}+g_{d}+2\times g_{c}+w+r}}}
  

Coupling(C) makes the value larger the more coupled the module is. This number ranges from approximately 0.67 (low coupling) to 1.0 (highly coupled)
For example, if a module has only a single input and output data parameter

  
    
      
        C
        =
        1
        â
        
          
            1
            
              1
              +
              0
              +
              1
              +
              0
              +
              0
              +
              0
              +
              1
              +
              0
            
          
        
        =
        1
        â
        
          
            1
            3
          
        
        =
        0.67
      
    
    {\displaystyle C=1-{\frac {1}{1+0+1+0+0+0+1+0}}=1-{\frac {1}{3}}=0.67}
  

If a module has 5 input and output data parameters, an equal number of control parameters, and accesses 10 items of global data, with a fan-in of 3 and a fan-out of 4,

  
    
      
        C
        =
        1
        â
        
          
            1
            
              5
              +
              2
              Ã
              5
              +
              5
              +
              2
              Ã
              5
              +
              10
              +
              0
              +
              3
              +
              4
            
          
        
        =
        0.98
      
    
    {\displaystyle C=1-{\frac {1}{5+2\times 5+5+2\times 5+10+0+3+4}}=0.98}
  


See also[edit]
Cohesion (computer science)
Connascence (computer science)
Coupling (physics)
Dead code elimination
Dependency hell
Efferent coupling
Inversion of control
List of object-oriented programming terms
Loose coupling
Make (software)
Static code analysis
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ ISO/IEC/IEEE 24765:2010 Systems and software engineering â Vocabulary

^ ISO/IEC TR 19759:2005, Software Engineering â Guide to the Software Engineering Body of Knowledge (SWEBOK)

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Stevens, Wayne P.; Myers, Glenford J.; Constantine, Larry LeRoy (June 1974). "Structured design". IBM Systems Journal. 13 (2): 115â139. doi:10.1147/sj.132.0115.

^ Yourdon, Edward; Constantine, Larry LeRoy (1979) [1975]. Structured Design: Fundamentals of a Discipline of Computer Program and Systems Design. Yourdon Press. Bibcode:1979sdfd.book.....Y. ISBNÂ 978-0-13-854471-3.

^ Beck, Fabian; Diehl, Stephan (September 2011). "On the Congruence of Modularity and Code Coupling". In Proceedings of the 19th ACM SIGSOFT Symposium and the 13th European Conference on Foundations of Software Engineering (SIGSOFT/FSE '11). Szeged, Hungary. p.Â 354. doi:10.1145/2025113.2025162. ISBNÂ 9781450304436. S2CIDÂ 2413103.

^ Arisholm, Erik; Briand, Lionel C.; FÃ¸yen, Audun (August 2004). "Dynamic coupling measurement for object-oriented software". IEEE Transactions on Software Engineering. IEEE. 30 (8): 491â506. doi:10.1109/TSE.2004.41. hdl:10852/9090. S2CIDÂ 3074827.

^ Pressman, Roger S. (1982). Software Engineering - A Practitioner's Approach (4Â ed.). ISBNÂ 0-07-052182-4.


Further reading[edit]
Myers, Glenford J. (1974). Reliable Software through Composite Design. New York: Mason and Lipscomb Publishers.
Offutt, A. Jefferson; Harrold, Mary Jean; Kolte, Priyadarshan (March 1993). "A Software Metric System for Module Coupling". Journal of Systems and Software. 20 (3): 295â308. doi:10.1016/0164-1212(93)90072-6.
Page-Jones, Meilir (1980). The Practical Guide to Structured Systems Design. New York: Yourdon Press. ISBNÂ 978-8-12031482-5.
Standard Glossary of Software Engineering Terminology. New York: IEEE. 1990. ISBNÂ 0-7381-0391-8. 610.12_1990.
"Curriculum for Certified Professional for Software Architecture (CPSA) - Foundation Level" (PDF). 3.01. International Software Architecture Qualification Board e.V. (ISAQB). 2015-05-15 [2009]. Retrieved 2019-06-23. [1]




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Coupling_(computer_programming)&oldid=1058752205"
		Categories: Programming principlesObject-oriented programmingSoftware architectureSoftware metricsHidden categories: Articles with short descriptionShort description is different from WikidataAll articles with unsourced statementsArticles with unsourced statements from October 2013
	
