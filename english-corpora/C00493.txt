
Title:
Ones' complement
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		This article includes a list of references, related reading or external links, but its sources remain unclear because it lacks inline citations. Please help to improve this article by introducing more precise citations.  (January 2014) (Learn how and when to remove this template message)

8-bit ones'-complement integers


Bits

Unsignedvalue

Ones'complementvalue


0111 1111

127â

127â


0111 1110

126â

126â


0000 0010

2â

2â


0000 0001

1â

1â


0000Â 0000

0â

0â


1111 1111

255â

â0â


1111 1110

254â

â1â


1111 1101

253â

â2â


1000 0001

129â

â126â


1000 0000

128â

â127â


The ones' complement of a binary number is the value obtained by inverting all the bits in the binary representation of the number (swapping 0s and 1s). This mathematical operation is primarily of interest in computer science, where it has varying effects depending on how a specific computer represents numbers.
A ones' complement system or ones' complement arithmetic is a system in which negative numbers are represented by the inverse of the binary representations of their corresponding positive numbers. In such a system, a number is negated (converted from positive to negative or vice versa) by computing its ones' complement. An N-bit ones' complement numeral system can only represent integers in the range â(2Nâ1â1) to 2Nâ1â1 while two's complement can express â2Nâ1 to 2Nâ1â1. It is one of three common representations for negative integers in microprocessors, along with two's complement and sign-magnitude. 
The ones' complement binary numeral system is characterized by the bit complement of any integer value being the arithmetic negative of the value.  That is, inverting all of the bits of a number (the logical complement) produces the same result as subtracting the value from 0.
Many early computers, including the UNIVAC 1101, CDC 160, CDC 6600, the LINC, the PDP-1, and the UNIVAC 1107, used ones' complement arithmetic.  Successors of the CDC 6600 continued to use ones' complement arithmetic until the late 1980s, and the descendants of the UNIVAC 1107 (the UNIVAC 1100/2200 series) still do, but the majority of modern computers use two's complement.

Contents

1 Number representation
2 Basics
3 Negative zero
4 Avoiding negative zero
5 See also
6 References



Number representation[edit]
Positive numbers are the same simple, binary system used by two's complement and sign-magnitude.  Negative values are the bit complement of the corresponding positive value. The largest positive value is characterized by the sign (high-order) bit being off (0) and all other bits being on (1).  The lowest negative value is characterized by the sign bit being 1, and all other bits being 0.  The table below shows all possible values in a 4-bit system, from â7 to +7.

     +      â
 0   0000   1111   â Note that both +0 and â0 return TRUE when tested for zero
 1   0001   1110   â and FALSE when tested for non-zero. 
 2   0010   1101
 3   0011   1100
 4   0100   1011
 5   0101   1010
 6   0110   1001
 7   0111   1000

Basics[edit]
Adding two values is straightforward.  Simply align the values on the least significant bit and add, propagating any carry to the bit one position left. If the carry extends past the end of the word it is said to have "wrapped around", a condition called an "end-around carry". When this occurs, the bit must be added back in at the right-most bit.  This phenomenon does not occur in two's complement arithmetic.

  0001 0110     22
+ 0000 0011      3
===========   ====
  0001 1001     25

Subtraction is similar, except that borrows, rather than carries, are propagated to the left.  If the borrow extends past the end of the word it is said to have "wrapped around", a condition called an "end-around borrow".  When this occurs, the bit must be subtracted from the right-most bit.  This phenomenon does not occur in two's complement arithmetic.

  0000 0110      6
â 0001 0011     19
===========   ====
1 1111 0011    â12    âAn end-around borrow is produced, and the sign bit of the intermediate result is 1.
â 0000 0001      1    âSubtract the end-around borrow from the result.
===========   ====
  1111 0010    â13    âThe correct result (6 â 19 = -13)

It is easy to demonstrate that the bit complement of a positive value is the negative magnitude of the positive value.  The computation of 19Â +Â 3 produces the same result asÂ 19Â âÂ (â3).
Add 3 to 19.

  0001 0011     19
+ 0000 0011      3
===========   ====
  0001 0110     22

Subtract â3 from 19.

  0001 0011     19
â 1111 1100     â3
===========   ====
1 0001 0111     23    âAn end-around borrow is produced.
â 0000 0001      1    âSubtract the end-around borrow from the result.
===========   ====
  0001 0110     22    âThe correct result (19 â (â3) = 22).

Negative zero[edit]
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}Main article: Signed zero
Negative zero is the condition where all bits in a signed word are 1.  This follows the ones' complement rules that a value is negative when the left-most bit is 1, and that a negative number is the bit complement of the number's magnitude.  The value also behaves as zero when computing.  Adding or subtracting negative zero to/from another value produces the original value.
Adding negative zero:

  0001 0110     22
+ 1111 1111     â0
===========   ====
1 0001 0101     21    An end-around carry is produced.
+ 0000 0001      1
===========   ====
  0001 0110     22    The correct result (22 + (â0) = 22)

Subtracting negative zero:

  0001 0110     22
â 1111 1111     â0
===========   ====
1 0001 0111     23    An end-around borrow is produced.
â 0000 0001      1
===========   ====
  0001 0110     22    The correct result (22 â (â0) = 22)

Negative zero is easily produced in a 1's complement adder.  Simply add the positive and negative of the same magnitude.

  0001 0110     22
+ 1110 1001    â22
===========   ====
  1111 1111     â0    Negative zero.

Although the math always produces the correct results, a side effect of negative zero is that software must test for negative zero.

Avoiding negative zero[edit]
The generation of negative zero becomes a non-issue if addition is achieved with a complementing subtractor.  The first operand is passed to the subtract unmodified, the second operand is complemented, and the subtraction generates the correct result, avoiding negative zero. The previous example added 22 and â22 and produced â0.

  0001 0110     22         0001 0110     22                  1110 1001   â22         1110 1001   â22
+ 1110 1001    â22       â 0001 0110     22                + 0001 0110    22       â 1110 1001   â22
===========   ====  but  ===========   ====   likewise,    ===========   ===  but  ===========   ===
  1111 1111     â0         0000 0000      0                  1111 1111    â0         0000 0000     0

"Corner cases" arise when one or both operands are zero and/or negative zero.

  0001 0010     18         0001 0010     18
â 0000 0000      0       â 1111 1111     â0
===========   ====       ===========   ====
  0001 0010     18       1 0001 0011     19
                         â 0000 0001      1
                         ===========   ====
                           0001 0010     18

Subtracting +0 is trivial (as shown above).  If the second operand is negative zero it is inverted and the original value of the first operand is the result.  Subtracting â0 is also trivial.  The result can be only 1 of two cases.  In case 1, operand 1 is â0 so the result is produced simply by subtracting 1 from 1 at every bit position.  In case 2, the subtraction will generate a value that is 1 larger than operand 1 and an end-around borrow.  Completing the borrow generates the same value as operand 1.
The next example shows what happens when both operands are plus or minus zero:

  0000 0000      0         0000 0000      0         1111 1111     â0         1111 1111     â0
+ 0000 0000      0       + 1111 1111     â0       + 0000 0000      0       + 1111 1111     â0
===========   ====       ===========   ====       ===========   ====       ===========   ====
  0000 0000      0         1111 1111     â0         1111 1111     â0       1 1111 1110     â1
                                                                           + 0000 0001      1
                                                                           ==================
                                                                             1111 1111     â0

  0000 0000      0         0000 0000      0         1111 1111     â0         1111 1111     â0
â 1111 1111     â0       â 0000 0000      0       â 1111 1111     â0       â 0000 0000      0
===========   ====       ===========   ====       ===========   ====       ===========   ====
1 0000 0001      1         0000 0000      0         0000 0000      0         1111 1111     â0
â 0000 0001      1
===========   ====
  0000 0000      0

This example shows that of the 4 possible conditions when adding only Â±0, an adder will produce â0 in three of them.  A complementing subtractor will produce â0 only when both operands are â0.

See also[edit]
.mw-parser-output .portalbox{float:right;border:solid #aaa 1px;padding:0}.mw-parser-output .portalbox.tleft{margin:0.5em 1em 0.5em 0}.mw-parser-output .portalbox.tright{margin:0.5em 0 0.5em 1em}.mw-parser-output .portalbox>ul{display:table;box-sizing:border-box;padding:0.1em;max-width:175px;background:#f9f9f9;font-size:85%;line-height:110%;font-style:italic;font-weight:bold}.mw-parser-output .portalbox>ul>li{display:table-row}.mw-parser-output .portalbox>ul>li>span:first-child{display:table-cell;padding:0.2em;vertical-align:middle;text-align:center}.mw-parser-output .portalbox>ul>li>span:last-child{display:table-cell;padding:0.2em 0.2em 0.2em 0.3em;vertical-align:middle}

Computer programming portal
Signed number representations
Two's complement
IEEE floating point
References[edit]
Donald Knuth: The Art of Computer Programming, Volume 2: Seminumerical Algorithms, chapter 4.1




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Ones%27_complement&oldid=1069328691"
		Categories: Binary arithmeticNumeral systemsUnary operationsHidden categories: Articles lacking in-text citations from January 2014All articles lacking in-text citations
	
