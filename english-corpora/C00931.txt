
Title:
Minimum-cost flow problem
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Mathematical optimization problem
The minimum-cost flow problem (MCFP) is an optimization and decision problem to find the cheapest possible way of sending a certain amount of flow through a flow network. A typical application of this problem involves finding the best delivery route from a factory to a warehouse where the road network has some capacity and cost associated. The minimum cost flow problem is one of the most fundamental among all flow and circulation problems because most other such problems can be cast as a minimum cost flow problem and also that it can be solved efficiently using the network simplex algorithm.

Contents

1 Definition
2 Relation to other problems
3 Solutions
4 Application

4.1 Minimum weight bipartite matching


5 See also
6 References
7 External links



Definition[edit]
A flow network is a directed graph 
  
    
      
        G
        =
        (
        V
        ,
        E
        )
      
    
    {\displaystyle G=(V,E)}
  
 with a source vertex 
  
    
      
        s
        â
        V
      
    
    {\displaystyle s\in V}
  
 and a sink vertex 
  
    
      
        t
        â
        V
      
    
    {\displaystyle t\in V}
  
, where each edge 
  
    
      
        (
        u
        ,
        v
        )
        â
        E
      
    
    {\displaystyle (u,v)\in E}
  
 has capacity 
  
    
      
        c
        (
        u
        ,
        v
        )
        >
        0
      
    
    {\displaystyle c(u,v)>0}
  
, flow 
  
    
      
        f
        (
        u
        ,
        v
        )
        â¥
        0
      
    
    {\displaystyle f(u,v)\geq 0}
  
 and cost 
  
    
      
        a
        (
        u
        ,
        v
        )
      
    
    {\displaystyle a(u,v)}
  
, with most minimum-cost flow algorithms supporting edges with negative costs. The cost of sending this flow along an edge 
  
    
      
        (
        u
        ,
        v
        )
      
    
    {\displaystyle (u,v)}
  
 is 
  
    
      
        f
        (
        u
        ,
        v
        )
        â
        a
        (
        u
        ,
        v
        )
      
    
    {\displaystyle f(u,v)\cdot a(u,v)}
  
. The problem requires an amount of flow 
  
    
      
        d
      
    
    {\displaystyle d}
  
 to be sent from source 
  
    
      
        s
      
    
    {\displaystyle s}
  
 to sink 
  
    
      
        t
      
    
    {\displaystyle t}
  
.
The definition of the problem is to minimize the total cost of the flow over all edges:


  
    
      
        
          â
          
            (
            u
            ,
            v
            )
            â
            E
          
        
        a
        (
        u
        ,
        v
        )
        â
        f
        (
        u
        ,
        v
        )
      
    
    {\displaystyle \sum _{(u,v)\in E}a(u,v)\cdot f(u,v)}
  

with the constraints




Capacity constraints:

  
    
      
        
        f
        (
        u
        ,
        v
        )
        â¤
        c
        (
        u
        ,
        v
        )
      
    
    {\displaystyle \,f(u,v)\leq c(u,v)}
  



Skew symmetry:

  
    
      
        
        f
        (
        u
        ,
        v
        )
        =
        â
        f
        (
        v
        ,
        u
        )
      
    
    {\displaystyle \,f(u,v)=-f(v,u)}
  



Flow conservation:

  
    
      
        
        
          â
          
            w
            â
            V
          
        
        f
        (
        u
        ,
        w
        )
        =
        0
        
          Â for allÂ 
        
        u
        â 
        s
        ,
        t
      
    
    {\displaystyle \,\sum _{w\in V}f(u,w)=0{\text{ for all }}u\neq s,t}
  



Required flow:

  
    
      
        
        
          â
          
            w
            â
            V
          
        
        f
        (
        s
        ,
        w
        )
        =
        d
        
          Â andÂ 
        
        
          â
          
            w
            â
            V
          
        
        f
        (
        w
        ,
        t
        )
        =
        d
      
    
    {\displaystyle \,\sum _{w\in V}f(s,w)=d{\text{ and }}\sum _{w\in V}f(w,t)=d}
  


Relation to other problems[edit]
A variation of this problem is to find a flow which is maximum, but has the lowest cost among the maximum flow solutions. This could be called a minimum-cost maximum-flow problem and is useful for finding minimum cost maximum matchings.
With some solutions, finding the minimum cost maximum flow instead is straightforward. If not, one can find the maximum flow by performing a binary search on 
  
    
      
        d
      
    
    {\displaystyle d}
  
.
A related problem is the minimum cost circulation problem, which can be used for solving minimum cost flow. This is achieved by setting the lower bound on all edges to zero, and then making an extra edge from the sink 
  
    
      
        t
      
    
    {\displaystyle t}
  
 to the source 
  
    
      
        s
      
    
    {\displaystyle s}
  
, with capacity 
  
    
      
        c
        (
        t
        ,
        s
        )
        =
        d
      
    
    {\displaystyle c(t,s)=d}
  
 and lower bound 
  
    
      
        l
        (
        t
        ,
        s
        )
        =
        d
      
    
    {\displaystyle l(t,s)=d}
  
, forcing the total flow from 
  
    
      
        s
      
    
    {\displaystyle s}
  
 to 
  
    
      
        t
      
    
    {\displaystyle t}
  
 to also be 
  
    
      
        d
      
    
    {\displaystyle d}
  
.
The following problems are special cases of the minimum cost flow problem (we provide brief sketches of each applicable reduction, in turn):[1]

Shortest path problem (single-source). Require that a feasible solution to the minimum cost flow problem sends one unit of flow from a designated source 
  
    
      
        s
      
    
    {\displaystyle s}
  
 to a designated sink 
  
    
      
        t
      
    
    {\displaystyle t}
  
. Give all edges infinite capacity.
Maximum flow problem. Let all nodes have zero demand, and let the cost associated with traversing any edge be zero. Now, introduce a new edge 
  
    
      
        (
        t
        ,
        s
        )
      
    
    {\displaystyle (t,s)}
  
 from the current sink 
  
    
      
        t
      
    
    {\displaystyle t}
  
 to the current source 
  
    
      
        s
      
    
    {\displaystyle s}
  
. Stipulate that the per-unit cost of sending flow across edge 
  
    
      
        (
        t
        ,
        s
        )
      
    
    {\displaystyle (t,s)}
  
 equals 
  
    
      
        â
        1
      
    
    {\displaystyle -1}
  
, and permit 
  
    
      
        (
        t
        ,
        s
        )
      
    
    {\displaystyle (t,s)}
  
 infinite capacity. (This reduction is also mentioned in Circulation problem).
Assignment problem. Suppose that each partite set in the bipartition has 
  
    
      
        n
      
    
    {\displaystyle n}
  
 vertices, and denote the bipartition by 
  
    
      
        (
        X
        ,
        Y
        )
      
    
    {\displaystyle (X,Y)}
  
. Give each 
  
    
      
        x
        â
        X
      
    
    {\displaystyle x\in X}
  
 supply 
  
    
      
        1
        
          /
        
        n
      
    
    {\displaystyle 1/n}
  
 and give each 
  
    
      
        y
        â
        Y
      
    
    {\displaystyle y\in Y}
  
 demand 
  
    
      
        1
        
          /
        
        n
      
    
    {\displaystyle 1/n}
  
. Each edge is to have unit capacity.
Solutions[edit]
The minimum cost flow problem can be solved by linear programming, since we optimize a linear function, and all constraints are linear.
Apart from that, many combinatorial algorithms exist, for a comprehensive survey, see [1]. Some of them are generalizations of maximum flow algorithms, others use entirely different approaches.
Well-known fundamental algorithms (they have many variations):

Cycle canceling: a general primal method.[2]
Cut canceling: a general dual method.[3][4]
Minimum mean cycle canceling: a simple strongly polynomial algorithm.[5]
Successive shortest path and capacity scaling: dual methods, which can be viewed as the generalization of the FordâFulkerson algorithm.[6]
Cost scaling: a primal-dual approach, which can be viewed as the generalization of the push-relabel algorithm.[7]
Network simplex algorithm: a specialized version of the linear programming simplex method.[8]
Out-of-kilter algorithm by D. R. Fulkerson
Application[edit]
Minimum weight bipartite matching[edit]
  Reducing Minimum weight bipartite matching to minimum cost max flow problem
Given a bipartite graph G = (A âª B, E), the goal is to find the maximum cardinality matching in G that has minimum cost. Let w: E â R be a weight function on the edges of E. The minimum weight bipartite matching problem or assignment problem is to find a 
perfect matching M â E whose total weight is minimized. The idea is to reduce this problem to a network flow problem.
Let Gâ² = (Vâ² = A âª B, Eâ² = E). Assign the capacity of all the edges in Eâ² to 1. Add a source vertex s and connect it to all the vertices in Aâ² and add a sink 
vertex t and connect all vertices inside group Bâ² to this vertex. The capacity of all the new edges is 1 and their costs is 0. It is proved that there is minimum weight perfect bipartite matching in G if and only if there a minimum cost flow in Gâ². [9][dead link]

See also[edit]
LEMON (C++ library)
GNU Linear Programming Kit
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Ahuja, Ravindra K.; Magnanti, Thomas L.; Orlin, James B. (1993). Network Flows. Theory, Algorithms, and Applications. Prentice Hall.


.mw-parser-output .citation{word-wrap:break-word}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}^ Ravindra K. Ahuja; Thomas L. Magnanti & James B. Orlin (1993). Network Flows: Theory, Algorithms, and Applications. Prentice-Hall, Inc. ISBNÂ 978-0-13-617549-0.
^ Morton Klein (1967). "A primal method for minimal cost flows with applications to the assignment and transportation problems". Management Science. 14 (3): 205â220. CiteSeerXÂ 10.1.1.228.7696. doi:10.1287/mnsc.14.3.205.
^ Refael Hassin (1983). "The minimum cost flow problem: A unifying approach to existing algorithms and a new tree search algorithm". Mathematical Programming. 25: 228â239. doi:10.1007/bf02591772.
^ Thomas R. Ervolina & S. Thomas McCormick (1993). "Two strongly polynomial cut cancelling algorithms for minimum cost network flow". Discrete Applied Mathematics. 4: 133â165. doi:10.1016/0166-218x(93)90025-j.
^ Andrew V. Goldberg & Robert E. Tarjan (1989). "Finding minimum-cost circulations by canceling negative cycles". Journal of the ACM. 36 (4): 873â886. doi:10.1145/76359.76368.
^ Jack Edmonds & Richard M. Karp (1972). "Theoretical improvements in algorithmic efficiency for network flow problems". Journal of the ACM. 19 (2): 248â264. doi:10.1145/321694.321699.
^ Andrew V. Goldberg & Robert E. Tarjan (1990). "Finding minimum-cost circulations by successive approximation". Math. Oper. Res. 15 (3): 430â466. doi:10.1287/moor.15.3.430.
^ James B. Orlin (1997). "A polynomial time primal network simplex algorithm for minimum cost flows". Mathematical Programming. 78 (2): 109â129. doi:10.1007/bf02614365. hdl:1721.1/2584.
External links[edit]
LEMON C++ library with several maximum flow and minimum cost circulation algorithms
The MCFClass C++ project library with some minimum cost flow and shortest path algorithms




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Minimum-cost_flow_problem&oldid=1046734866"
		Categories: Network flow problemMathematical problemsHidden categories: Articles with short descriptionShort description matches WikidataAll articles with dead external linksArticles with dead external links from January 2018
	
