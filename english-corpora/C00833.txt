
Title:
Coq
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Proof assistant
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}For the coenzyme and dietary supplement, see Coenzyme Q10. For the abbreviated placename, see Coquihalla. For the cockerel, see Rooster..mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}Coq (software)Developer(s)The Coq development teamInitial release1Â May 1989; 32 years agoÂ (1989-05-01) (version 4.10)Stable release8.13.1[1]
   / 22Â February 2021; 11 months agoÂ (2021-02-22)Preview release8.13+beta1[2]
   / 7Â December 2020; 13 months agoÂ (2020-12-07)
Repositorygithub.com/coq/coqWritten inOCamlOperating systemCross-platformAvailable inEnglishTypeProof assistantLicenseLGPLv2.1Websitecoq.inria.fr
  An interactive proof session in CoqIDE, showing the proof script on the left and the proof state on the right.
Coq is an interactive theorem prover first released in 1989. It allows for expressing mathematical assertions, mechanically checks proofs of these assertions, helps find formal proofs, and extracts a certified program from the constructive proof of its formal specification. Coq works within the theory of the calculus of inductive constructions, a derivative of the calculus of constructions. Coq is not an automated theorem prover but includes automatic theorem proving tactics (procedures) and various decision procedures.
The Association for Computing Machinery awarded Thierry Coquand, GÃ©rard Huet, Christine Paulin-Mohring, Bruno Barras, Jean-Christophe FilliÃ¢tre, Hugo Herbelin, Chetan Murthy, Yves Bertot, and Pierre CastÃ©ran with the 2013 ACM Software System Award for Coq.
Coq is a wordplay on the name of Thierry Coquand, Calculus of Constructions or "CoC" and is following the French tradition to name tools after animals (coq in French meaning rooster).[3]

Contents

1 Overview
2 Four color theorem and SSReflect extension
3 Applications
4 See also
5 References
6 External links



Overview[edit]
When viewed as a programming language, Coq implements a dependently typed functional programming language;[4] when viewed as a logical system, it implements a higher-order type theory. The development of Coq has been supported since 1984 by INRIA, now in collaboration with Ãcole Polytechnique, University of Paris-Sud, Paris Diderot University, and CNRS. In the 1990s, ENS Lyon was also part of the project. The development of Coq was initiated by GÃ©rard Huet and Thierry Coquand, and more than 40 people, mainly researchers, have contributed features to the core system since its inception. The implementation team has successively been coordinated by GÃ©rard Huet, Christine Paulin-Mohring, Hugo Herbelin, and Matthieu Sozeau. Coq is mainly implemented in OCaml with a bit of C. The core system can be extended by way of a plug-in mechanism.[5]
The name coq means "rooster" in French and stems from a French tradition of naming research development tools after animals.[6] Up until 1991, Coquand was implementing a language called the Calculus of Constructions and it was simply called CoC at this time. In 1991, a new implementation based on the extended Calculus of Inductive Constructions was started and the name was changed from CoC to Coq in an indirect reference to Coquand, who developed the Calculus of Constructions along with GÃ©rard Huet and contributed to the Calculus of Inductive Constructions with Christine Paulin-Mohring.[7]
Coq provides a specification language called Gallina[8] ("hen" in Latin, Spanish, Italian and Catalan).
Programs written in Gallina have the weak normalization property, implying that they always terminate.
This is a distinctive property of the language, since infinite loops (non-terminating programs) are common in other programming languages,[9]
and is one way to avoid the halting problem.

.mw-parser-output .sidebar{width:22em;float:right;clear:right;margin:0.5em 0 1em 1em;background:#f8f9fa;border:1px solid #aaa;padding:0.2em;text-align:center;line-height:1.4em;font-size:88%;border-collapse:collapse;display:table}body.skin-minerva .mw-parser-output .sidebar{display:table!important;float:right!important;margin:0.5em 0 1em 1em!important}.mw-parser-output .sidebar-subgroup{width:100%;margin:0;border-spacing:0}.mw-parser-output .sidebar-left{float:left;clear:left;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-none{float:none;clear:both;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-outer-title{padding:0 0.4em 0.2em;font-size:125%;line-height:1.2em;font-weight:bold}.mw-parser-output .sidebar-top-image{padding:0.4em}.mw-parser-output .sidebar-top-caption,.mw-parser-output .sidebar-pretitle-with-top-image,.mw-parser-output .sidebar-caption{padding:0.2em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-pretitle{padding:0.4em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-title,.mw-parser-output .sidebar-title-with-pretitle{padding:0.2em 0.8em;font-size:145%;line-height:1.2em}.mw-parser-output .sidebar-title-with-pretitle{padding:0.1em 0.4em}.mw-parser-output .sidebar-image{padding:0.2em 0.4em 0.4em}.mw-parser-output .sidebar-heading{padding:0.1em 0.4em}.mw-parser-output .sidebar-content{padding:0 0.5em 0.4em}.mw-parser-output .sidebar-content-with-subgroup{padding:0.1em 0.4em 0.2em}.mw-parser-output .sidebar-above,.mw-parser-output .sidebar-below{padding:0.3em 0.8em;font-weight:bold}.mw-parser-output .sidebar-collapse .sidebar-above,.mw-parser-output .sidebar-collapse .sidebar-below{border-top:1px solid #aaa;border-bottom:1px solid #aaa}.mw-parser-output .sidebar-navbar{text-align:right;font-size:115%;padding:0 0.4em 0.4em}.mw-parser-output .sidebar-list-title{padding:0 0.4em;text-align:left;font-weight:bold;line-height:1.6em;font-size:105%}.mw-parser-output .sidebar-list-title-c{padding:0 0.4em;text-align:center;margin:0 3.3em}@media(max-width:720px){body.mediawiki .mw-parser-output .sidebar{width:100%!important;clear:both;float:none!important;margin-left:0!important;margin-right:0!important}}A proof of commutativity of addition on natural numbers in Coq.
plus_comm =
fun n m : nat =>
nat_ind (fun n0 : nat => n0 + m = m + n0)
  (plus_n_0 m)
  (fun (y : nat) (H : y + m = m + y) =>
   eq_ind (S (m + y))
     (fun n0 : nat => S (y + m) = n0)
     (f_equal S H)
     (m + S y)
     (plus_n_Sm m y)) n
     : forall n m : nat, n + m = m + n


nat_ind stands for mathematical induction, eq_ind for substitution of equals, and f_equal for taking the same function on both sides of the equality.  Earlier theorems are referenced showing 
  
    
      
        m
        =
        m
        +
        0
      
    
    {\displaystyle m=m+0}
  
 and 
  
    
      
        S
        (
        m
        +
        y
        )
        =
        m
        +
        S
        y
      
    
    {\displaystyle S(m+y)=m+Sy}
  
.

Four color theorem and SSReflect extension[edit]
Georges Gonthier of Microsoft Research in Cambridge, England and Benjamin Werner of INRIA used Coq to create a surveyable proof of the four color theorem, which was completed in 2002.[10]  Their work led to the development of the SSReflect ("Small Scale Reflection") package, which was a significant extension to Coq.[11] Despite its name, most of the features added to Coq by SSReflect are general-purpose features and are not limited to the computational reflection style of proof. These features include:

Additional convenient notations for irrefutable and refutable pattern matching, on inductive types with one or two constructors
Implicit arguments for functions applied to zero arguments, which is useful when programming with higher-order functions
Concise anonymous arguments
An improved set tactic with more powerful matching
Support for reflection
SSReflect 1.11 is freely available, dual-licensed under the open source CeCILL-B or CeCILL-2.0 license, and compatible with Coq 8.11.[12]

Applications[edit]
CompCert: an optimizing compiler for almost all of the C programming language which is largely programmed and proved in Coq.
Disjoint-set data structure: correctness proof in Coq was published in 2007.[13]
FeitâThompson theorem: formal proof using Coq was completed in September 2012.[14]
Four color theorem: formal proof using Coq was completed in 2005.[10]
See also[edit]
.mw-parser-output .portalbox{float:right;border:solid #aaa 1px;padding:0}.mw-parser-output .portalbox.tleft{margin:0.5em 1em 0.5em 0}.mw-parser-output .portalbox.tright{margin:0.5em 0 0.5em 1em}.mw-parser-output .portalbox>ul{display:table;box-sizing:border-box;padding:0.1em;max-width:175px;background:#f9f9f9;font-size:85%;line-height:110%;font-style:italic;font-weight:bold}.mw-parser-output .portalbox>ul>li{display:table-row}.mw-parser-output .portalbox>ul>li>span:first-child{display:table-cell;padding:0.2em;vertical-align:middle;text-align:center}.mw-parser-output .portalbox>ul>li>span:last-child{display:table-cell;padding:0.2em 0.2em 0.2em 0.3em;vertical-align:middle}

Mathematics portal
Free and open-source software portal
Nuprl
Agda
Idris
Calculus of constructions
CurryâHoward correspondence
Isabelle (proof assistant) â similar/competing software
Intuitionistic type theory
HOL (proof assistant)
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}"Coq 8.13.1 is out". 2021-02-22.

^ "Coq 8.13+beta1 is out". 2020-12-07.

^ "Alternative names Â· coq/coq Wiki". GitHub. Retrieved 2021-11-11.

^ A short introduction to Coq

^ Avigad, Jeremy; Mahboubi, Assia (3 July 2018). Interactive Theorem Proving: 9th International Conference, ITP 2018, Held as ... ISBNÂ 9783319948218. Retrieved 21 October 2018.

^ "Frequently Asked Questions". Retrieved 2019-05-08.

^ "Introduction to the Calculus of Inductive Constructions". Retrieved 21 May 2019.

^ 
Adam Chlipala.
"Certified Programming with Dependent Types":
"Library Universes".

^ 
Adam Chlipala.
"Certified Programming with Dependent Types":
"Library GeneralRec".
"Library InductiveTypes".

^ Jump up to: a b Gonthier, Georges (2008), "Formal ProofâThe Four-Color Theorem" (PDF), Notices of the American Mathematical Society, vol.Â 55, no.Â 11, pp.Â 1382â1393, MRÂ 2463991

^ 
Georges Gonthier, Assia Mahboubi.
"An introduction to small scale reflection in Coq":
"Journal of Formalized Reasoning".

^ "The Mathematical Components Library 1.11.0".

^ Conchon, Sylvain; FilliÃ¢tre, Jean-Christophe (October 2007), "A Persistent Union-Find Data Structure", ACM SIGPLAN Workshop on ML, Freiburg, Germany

^ "Feit-Thompson theorem has been totally checked in Coq". Msr-inria.inria.fr. 2012-09-20. Archived from the original on 2016-11-19. Retrieved 2012-09-25.


External links[edit]



Wikimedia Commons has media related to Coq (programming language).

The Coq proof assistant â the official English website
coq/coq â the project's source code repository on GitHub
JsCoq Interactive Online System â allows Coq to be run in a web browser, without the need for any software installation
Alectryon â a library to process Coq snippets embedded in documents, showing goals and messages for each Coq sentence
Coq Wiki
Mathematical Components library â widely used library of mathematical structures, part of which is the SSReflect proof language
Constructive Coq Repository at Nijmegen
Math Classes
Coq at Open Hub
Textbooks
The Coq'Art â a book on Coq by Yves Bertot and Pierre CastÃ©ran
Certified Programming with Dependent Types â online and printed textbook by Adam Chlipala
Software Foundations â online textbook by Benjamin C. Pierce et al.
An introduction to small scale reflection in Coq â a tutorial on SSReflect by Georges Gonthier and Assia Mahboubi
Tutorials
Introduction to the Coq Proof Assistant â video lecture by Andrew Appel at Institute for Advanced Study
Video tutorials for the Coq proof assistant by Andrej Bauer.




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Coq&oldid=1062669134"
		Categories: Proof assistantsFree theorem proversDependently typed languagesEducational math softwareOCaml softwareFree software programmed in OCamlFunctional languagesProgramming languages created in 19841989 softwareExtensible syntax programming languagesHidden categories: Articles with short descriptionShort description matches WikidataCommons category link is on Wikidata
	
