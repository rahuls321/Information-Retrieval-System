
Title:
Bucket sort
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Sorting algorithm
.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}Bucket sortClassSorting algorithmData structureArrayWorst-case performance
  
    
      
        O
        
          (
          
            n
            
              2
            
          
          )
        
      
    
    {\displaystyle O\left(n^{2}\right)}
  
Average performance
  
    
      
        O
        
          (
          
            n
            +
            
              
                
                  n
                  
                    2
                  
                
                k
              
            
            +
            k
          
          )
        
      
    
    {\displaystyle O\left(n+{\frac {n^{2}}{k}}+k\right)}
  
, where k is the number of buckets. 
  
    
      
        O
        (
        n
        )
        ,
        
          whenÂ 
        
        k
        â
        n
      
    
    {\displaystyle O(n),{\text{when }}k\approx n}
  
.Worst-case space complexity
  
    
      
        O
        (
        n
        +
        k
        )
      
    
    {\displaystyle O(n+k)}
  

  Elements are distributed among bins
  Then, elements are sorted within each bin
Bucket sort, or bin sort, is a sorting algorithm that works by distributing the elements of an array into a number of buckets. Each bucket is then sorted individually, either using a different sorting algorithm, or by recursively applying the bucket sorting algorithm. It is a distribution sort,  a generalization of pigeonhole sort that allows multiple keys per bucket, and is a cousin of radix sort in the most-to-least significant digit flavor. Bucket sort can be implemented with comparisons and therefore can also be considered a comparison sort algorithm. The computational complexity depends on the algorithm used to sort each bucket, the number of buckets to use, and whether the input is uniformly distributed.
Bucket sort works as follows:

Set up an array of initially empty "buckets".
Scatter: Go over the original array, putting each object in its bucket.
Sort each non-empty bucket.
Gather: Visit the buckets in order and put all elements back into the original array.
Contents

1 Pseudocode
2 Analysis

2.1 Worst-case analysis
2.2 Average-case analysis


3 Optimizations
4 Variants

4.1 Generic bucket sort
4.2 ProxmapSort
4.3 Histogram sort
4.4 Postman's sort
4.5 Shuffle sort


5 Comparison with other sorting algorithms
6 References
7 External links



Pseudocode[edit]
function bucketSort(array, k) is
    buckets â new array of k empty lists
    M â the maximum key value in the array
    for i = 0 to length(array) do
        insert array[i] into buckets[floor(k Ã array[i] / M)]
    for i = 0 to k do 
        nextSort(buckets[i])
    return the concatenation of buckets[0], ...., buckets[k]

Let array denote the array to be sorted and k denote the number of buckets to use. One can compute the maximum key value linear time by iterating over all the keys once. The floor function must be used to convert a floating number to an integer ( and possibly casting of datatypes too ). The function nextSort is a sorting function used to sort each bucket. Conventionally, insertion sort is used, but other algorithms could be used as well, such as selection sort or merge sort. Using bucketSort itself as nextSort produces a relative of radix sort; in particular, the case n = 2 corresponds to quicksort (although potentially with poor pivot choices).

Analysis[edit]
Worst-case analysis[edit]
When the input contains several keys that are close to each other (clustering), those elements are likely to be placed in the same bucket, which results in some buckets containing more elements than average. The worst-case scenario occurs when all the elements are placed in a single bucket. The overall performance would then be dominated by the algorithm used to sort each bucket, for example 
  
    
      
        O
        (
        
          n
          
            2
          
        
        )
      
    
    {\displaystyle O(n^{2})}
  
 insertion sort or 
  
    
      
        O
        (
        n
        log
        â¡
        (
        n
        )
        )
      
    
    {\displaystyle O(n\log(n))}
  
 comparison sort algorithms, such as merge sort.

Average-case analysis[edit]
Consider the case that the input is uniformly distributed. The first step, which is initialize the buckets and find the maximum key value in the array, can be done in 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
  
 time. If division and multiplication can be done in constant time, then scattering each element to its bucket also costs 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
  
. Assume insertion sort is used to sort each bucket, then the third step costs 
  
    
      
        O
        (
        
          
            â
            
              i
              =
              1
            
            
              k
            
          
          
            
              n
              
                i
              
              
                2
              
            
            )
          
        
      
    
    {\displaystyle O(\textstyle \sum _{i=1}^{k}\displaystyle n_{i}^{2})}
  
, where 
  
    
      
        
          n
          
            i
          
        
      
    
    {\displaystyle n_{i}}
  
 is the length of the bucket indexed 
  
    
      
        i
      
    
    {\displaystyle i}
  
. Since we are concerning the average time, the expectation 
  
    
      
        E
        (
        
          n
          
            i
          
          
            2
          
        
        )
      
    
    {\displaystyle E(n_{i}^{2})}
  
 has to be evaluated instead. Let 
  
    
      
        
          X
          
            i
            j
          
        
      
    
    {\displaystyle X_{ij}}
  
 be the random variable that is 
  
    
      
        1
      
    
    {\displaystyle 1}
  
 if element 
  
    
      
        j
      
    
    {\displaystyle j}
  
 is placed in bucket 
  
    
      
        i
      
    
    {\displaystyle i}
  
, and 
  
    
      
        0
      
    
    {\displaystyle 0}
  
 otherwise. We have 
  
    
      
        
          n
          
            i
          
        
        =
        
          â
          
            j
            =
            1
          
          
            n
          
        
        
          X
          
            i
            j
          
        
      
    
    {\displaystyle n_{i}=\sum _{j=1}^{n}X_{ij}}
  
. Therefore,


  
    
      
        
          
            
              
                E
                (
                
                  n
                  
                    i
                  
                  
                    2
                  
                
                )
              
              
                
                =
                E
                
                  (
                  
                    
                      â
                      
                        j
                        =
                        1
                      
                      
                        n
                      
                    
                    
                      X
                      
                        i
                        j
                      
                    
                    
                      â
                      
                        k
                        =
                        1
                      
                      
                        n
                      
                    
                    
                      X
                      
                        i
                        k
                      
                    
                  
                  )
                
              
            
            
              
              
                
                =
                E
                
                  (
                  
                    
                      â
                      
                        j
                        =
                        1
                      
                      
                        n
                      
                    
                    
                      â
                      
                        k
                        =
                        1
                      
                      
                        n
                      
                    
                    
                      X
                      
                        i
                        j
                      
                    
                    
                      X
                      
                        i
                        k
                      
                    
                  
                  )
                
              
            
            
              
              
                
                =
                E
                
                  (
                  
                    
                      â
                      
                        j
                        =
                        1
                      
                      
                        n
                      
                    
                    
                      X
                      
                        i
                        j
                      
                      
                        2
                      
                    
                  
                  )
                
                +
                E
                
                  (
                  
                    
                      â
                      
                        1
                        â¤
                        j
                        ,
                        k
                        â¤
                        n
                      
                    
                    
                      â
                      
                        j
                        â 
                        k
                      
                    
                    
                      X
                      
                        i
                        j
                      
                    
                    
                      X
                      
                        i
                        k
                      
                    
                  
                  )
                
              
            
          
        
      
    
    {\displaystyle {\begin{aligned}E(n_{i}^{2})&=E\left(\sum _{j=1}^{n}X_{ij}\sum _{k=1}^{n}X_{ik}\right)\\&=E\left(\sum _{j=1}^{n}\sum _{k=1}^{n}X_{ij}X_{ik}\right)\\&=E\left(\sum _{j=1}^{n}X_{ij}^{2}\right)+E\left(\sum _{1\leq j,k\leq n}\sum _{j\neq k}X_{ij}X_{ik}\right)\end{aligned}}}
  

The last line separates the summation into the case 
  
    
      
        j
        =
        k
      
    
    {\displaystyle j=k}
  
 and the case 
  
    
      
        j
        â 
        k
      
    
    {\displaystyle j\neq k}
  
. Since the chance of an object distributed to bucket 
  
    
      
        i
      
    
    {\displaystyle i}
  
 is 
  
    
      
        1
        
          /
        
        k
      
    
    {\displaystyle 1/k}
  
, 
  
    
      
        
          X
          
            i
            j
          
        
      
    
    {\displaystyle X_{ij}}
  
 is 1 with probability 
  
    
      
        1
        
          /
        
        k
      
    
    {\displaystyle 1/k}
  
 and 0 otherwise. 


  
    
      
        E
        (
        
          X
          
            i
            j
          
          
            2
          
        
        )
        =
        
          1
          
            2
          
        
        â
        
          (
          
            
              1
              k
            
          
          )
        
        +
        
          0
          
            2
          
        
        â
        
          (
          
            1
            â
            
              
                1
                k
              
            
          
          )
        
        =
        
          
            1
            k
          
        
      
    
    {\displaystyle E(X_{ij}^{2})=1^{2}\cdot \left({\frac {1}{k}}\right)+0^{2}\cdot \left(1-{\frac {1}{k}}\right)={\frac {1}{k}}}
  


  
    
      
        E
        (
        
          X
          
            i
            j
          
        
        
          X
          
            i
            k
          
        
        )
        =
        1
        â
        
          (
          
            
              1
              k
            
          
          )
        
        
          (
          
            
              1
              k
            
          
          )
        
        =
        
          
            1
            
              k
              
                2
              
            
          
        
      
    
    {\displaystyle E(X_{ij}X_{ik})=1\cdot \left({\frac {1}{k}}\right)\left({\frac {1}{k}}\right)={\frac {1}{k^{2}}}}
  

With the summation, it would be


  
    
      
        E
        
          (
          
            
              â
              
                j
                =
                1
              
              
                n
              
            
            
              X
              
                i
                j
              
              
                2
              
            
          
          )
        
        +
        E
        
          (
          
            
              â
              
                1
                â¤
                j
                ,
                k
                â¤
                n
              
            
            
              â
              
                j
                â 
                k
              
            
            
              X
              
                i
                j
              
            
            
              X
              
                i
                k
              
            
          
          )
        
        =
        n
        â
        
          
            1
            k
          
        
        +
        n
        (
        n
        â
        1
        )
        â
        
          
            1
            
              k
              
                2
              
            
          
        
        =
        
          
            
              
                n
                
                  2
                
              
              +
              n
              k
              â
              n
            
            
              k
              
                2
              
            
          
        
      
    
    {\displaystyle E\left(\sum _{j=1}^{n}X_{ij}^{2}\right)+E\left(\sum _{1\leq j,k\leq n}\sum _{j\neq k}X_{ij}X_{ik}\right)=n\cdot {\frac {1}{k}}+n(n-1)\cdot {\frac {1}{k^{2}}}={\frac {n^{2}+nk-n}{k^{2}}}}
  

Finally, the complexity would be 
  
    
      
        O
        
          (
          
            
              â
              
                i
                =
                1
              
              
                k
              
            
            E
            (
            
              n
              
                i
              
              
                2
              
            
            )
          
          )
        
        =
        O
        
          (
          
            
              â
              
                i
                =
                1
              
              
                k
              
            
            
              
                
                  
                    n
                    
                      2
                    
                  
                  +
                  n
                  k
                  â
                  n
                
                
                  k
                  
                    2
                  
                
              
            
          
          )
        
        =
        O
        
          (
          
            
              
                
                  n
                  
                    2
                  
                
                k
              
            
            +
            n
          
          )
        
      
    
    {\displaystyle O\left(\sum _{i=1}^{k}E(n_{i}^{2})\right)=O\left(\sum _{i=1}^{k}{\frac {n^{2}+nk-n}{k^{2}}}\right)=O\left({\frac {n^{2}}{k}}+n\right)}
  
.
The last step of bucket sort, which is concatenating all the sorted objects in each buckets, requires 
  
    
      
        O
        (
        k
        )
      
    
    {\displaystyle O(k)}
  
 time. Therefore, the total complexity is 
  
    
      
        O
        
          (
          
            n
            +
            
              
                
                  n
                  
                    2
                  
                
                k
              
            
            +
            k
          
          )
        
      
    
    {\displaystyle O\left(n+{\frac {n^{2}}{k}}+k\right)}
  
. Note that if k is chosen to be 
  
    
      
        k
        =
        Î
        (
        n
        )
      
    
    {\displaystyle k=\Theta (n)}
  
, then bucket sort runs in 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
  
 average time, given a uniformly distributed input.[1]

Optimizations[edit]
A common optimization is to put the unsorted elements of the buckets back in the original array first, then run insertion sort over the complete array; because insertion sort's runtime is based on how far each element is from its final position, the number of comparisons remains relatively small, and the memory hierarchy is better exploited by storing the list contiguously in memory.[2]
If the input distribution is known or can be estimated, buckets can often be chosen which contain constant density (rather than merely having constant size). This allows 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
  
 average time complexity even without uniformly distributed input.

Variants[edit]
Generic bucket sort[edit]
The most common variant of bucket sort operates on a list of n numeric inputs between zero and some maximum value M and divides the value range into n buckets each of size M/n. If each bucket is sorted using insertion sort, the sort can be shown to run in expected linear time (where the average is taken over all possible inputs).[3] However, the performance of this sort degrades with clustering; if many values occur close together, they will all fall into a single bucket and be sorted slowly.  This performance degradation is avoided in the original bucket sort algorithm by assuming that the input is generated by a random process that distributes elements uniformly over the interval [0,1).[1] 

ProxmapSort[edit]
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}Main article: Proxmap sort
Similar to generic bucket sort as described above, ProxmapSort works by dividing an array of keys into subarrays via the use of a "map key" function that preserves a partial ordering on the keys; as each key is added to its subarray, insertion sort is used to keep that subarray sorted, resulting in the entire array being in sorted order when ProxmapSort completes. ProxmapSort differs from bucket sorts in its use of the map key to place the data approximately where it belongs in sorted order, producing a "proxmap" â a proximity mapping â of the keys.

Histogram sort[edit]
Another variant of bucket sort known as histogram sort or counting sort adds an initial pass that counts the number of elements that will fall into each bucket using a count array.[4] Using this information, the array values can be arranged into a sequence of buckets in-place by a sequence of exchanges, leaving no space overhead for bucket storage.[failed verification]

Postman's sort[edit]
The Postman's sort is a variant of bucket sort that takes advantage of a hierarchical structure of elements, typically described by a set of attributes. This is the algorithm used by letter-sorting machines in post offices: mail is sorted first between domestic and international; then by state, province or territory; then by destination post office; then by routes, etc. Since keys are not compared against each other, sorting time is O(cn), where c depends on the size of the key and number of buckets. This is similar to a radix sort that works "top down," or "most significant digit first."[5]

Shuffle sort[edit]
The shuffle sort[6] is a variant of bucket sort that begins by removing the first 1/8 of the n items to be sorted, sorts them recursively, and puts them in an array. This creates n/8 "buckets" to which the remaining 7/8 of the items are distributed. Each "bucket" is then sorted, and the "buckets" are concatenated into a sorted array.

Comparison with other sorting algorithms[edit]
Bucket sort can be seen as a generalization of counting sort; in fact, if each bucket has size 1 then bucket sort degenerates to counting sort. The variable bucket size of bucket sort allows it to use O(n) memory instead of O(M) memory, where M is the number of distinct values; in exchange, it gives up counting sort's O(n + M) worst-case behavior.
Bucket sort with two buckets is effectively a version of quicksort where the pivot value is always selected to be the middle value of the value range. While this choice is effective for uniformly distributed inputs, other means of choosing the pivot in quicksort such as randomly selected pivots make it more resistant to clustering in the input distribution.
The n-way mergesort algorithm also begins by distributing the list into n sublists and sorting each one; however, the sublists created by mergesort have overlapping value ranges and so cannot be recombined by simple concatenation as in bucket sort. Instead, they must be interleaved by a merge algorithm. However, this added expense is counterbalanced by the simpler scatter phase and the ability to ensure that each sublist is the same size, providing a good worst-case time bound.
Top-down radix sort can be seen as a special case of bucket sort where both the range of values and the number of buckets is constrained to be a power of two. Consequently, each bucket's size is also a power of two, and the procedure can be applied recursively. This approach can accelerate the scatter phase, since we only need to examine a prefix of the bit representation of each element to determine its bucket.

References[edit]

^ Jump up to: a b .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Thomas H. Cormen; Charles E. Leiserson; Ronald L. Rivest & Clifford Stein. Introduction to Algorithms. Bucket sort runs in linear time on the average. Like counting sort, bucket sort is fast because it assumes something about the input. Whereas counting sort assumes that the input consists of integers in a small range, bucket sort assumes that the input is generated by a random process that distributes elements uniformly over the interval [0,1). The idea of bucket sort is to divide the interval [0, 1) into n equal-sized subintervals, or buckets, and then distribute the n input numbers into the buckets. Since the inputs are uniformly distributed over [0, 1), we don't expect many numbers to fall into each bucket. To produce the output, we simply sort the numbers in each bucket and then go through the buckets in order, listing the elements in each.

^ Corwin, E. and Logar, A. "Sorting in linear time â variations on the bucket sort". Journal of Computing Sciences in Colleges, 20, 1, pp.197â202. October 2004.

^ Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. Introduction to Algorithms, Second Edition. MIT Press and McGraw-Hill, 2001. ISBNÂ 0-262-03293-7. Section 8.4: Bucket sort, pp.174â177.

^ NIST's Dictionary of Algorithms and Data Structures: histogram sort

^ http://www.rrsd.com/psort/cuj/cuj.htm

^ A revolutionary new sort from John Cohen Nov 26, 1997


Paul E. Black "Postman's Sort" from Dictionary of Algorithms and Data Structures at NIST.
Robert Ramey '"The Postman's Sort" C Users Journal Aug. 1992
NIST's Dictionary of Algorithms and Data Structures: bucket sort
External links[edit]
Bucket Sort Code for Ansi C
Variant of Bucket Sort with Demo
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}hide.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteSorting algorithmsTheory
Computational complexity theory
Big O notation
Total order
Lists
Inplacement
Stability
Comparison sort
Adaptive sort
Sorting network
Integer sorting
X + Y sorting
Transdichotomous model
Quantum sort
Exchange sorts
Bubble sort
Cocktail shaker sort
Oddâeven sort
Comb sort
Gnome sort
Proportion extend sort
Quicksort
Slowsort
Stooge sort
Bogosort
Selection sorts
Selection sort
Heapsort
Smoothsort
Cartesian tree sort
Tournament sort
Cycle sort
Weak-heap sort
Insertion sorts
Insertion sort
Shellsort
Splaysort
Tree sort
Library sort
Patience sorting
Merge sorts
Merge sort
Cascade merge sort
Oscillating merge sort
Polyphase merge sort
Distribution sorts
American flag sort
Bead sort
Bucket sort
Burstsort
Counting sort
Interpolation sort
Pigeonhole sort
Proxmap sort
Radix sort
Flashsort
Concurrent sorts
Bitonic sorter
Batcher oddâeven mergesort
Pairwise sorting network
Samplesort
Hybrid sorts
Block merge sort
Kirkpatrick-Reisch sort
Timsort
Introsort
Spreadsort
Merge-insertion sort
Other
Topological sorting
Pre-topological order
Pancake sorting
Spaghetti sort





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Bucket_sort&oldid=1068630579"
		Categories: Sorting algorithmsStable sortsHidden categories: Articles with short descriptionShort description matches WikidataAll articles with failed verificationArticles with failed verification from September 2020Articles with example pseudocode
	
