
Title:
Chomsky hierarchy
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Hierarchy of classes of formal grammars
In formal language theory, computer science and linguistics, the Chomsky hierarchy (also referred to as the ChomskyâSchÃ¼tzenberger hierarchy)[1] is a containment hierarchy of classes of formal grammars.
This hierarchy of grammars was described by Noam Chomsky inÂ 1956.[2] It is also named after Marcel-Paul SchÃ¼tzenberger, who played a crucial role in the development of the theory of formal languages.

Contents

1 Formal grammars
2 The hierarchy

2.1 Type-0 grammars
2.2 Type-1 grammars
2.3 Type-2 grammars
2.4 Type-3 grammars


3 References



Formal grammars[edit]
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}Main article: Formal grammar
A formal grammar of this type consists of a finite set of production rules (left-hand side â right-hand side), where each side consists of a finite sequence of the following symbols:

a finite set of nonterminal symbols (indicating that some production rule can yet be applied)
a finite set of terminal symbols (indicating that no production rule can be applied)
a start symbol (a distinguished nonterminal symbol)
A formal grammar provides an axiom schema for (or generates) a formal language, which is a (usually infinite) set of finite-length sequences of symbols  that may be constructed by applying production rules to another sequence of symbols (which initially contains just the start symbol). A rule may be applied by replacing an occurrence of the symbols on its left-hand side with those that appear on its right-hand side. A sequence of rule applications is called a derivation. Such a grammar defines the formal language: all words consisting solely of terminal symbols which can be reached by a derivation from the start symbol.
Nonterminals are often represented by uppercase letters, terminals by lowercase letters, and the start symbol by S. For example, the grammar with terminals {a, b}, nonterminals {S, A, B}, production rules

S â AB
S â Îµ  (where Îµ is the empty string)
A â aS
B â b
and start symbol S, defines the language of all words of the form 
  
    
      
        
          a
          
            n
          
        
        
          b
          
            n
          
        
      
    
    {\displaystyle a^{n}b^{n}}
  
 (i.e. n copies of a followed by n copies of b).
The following is a simpler grammar that defines the same language:
Terminals {a, b}, Nonterminals {S}, Start symbol S, Production rules

S â aSb
S â Îµ
As another example, a grammar for a toy subset of the English language is given by:

terminals
{generate, hate, great, green, ideas, linguists}
nonterminals
{S, NP, VP, N, V, Adj}
production rules
S â NP VP
NP â Adj NP
NP â N
VP â V NP
VP â V
N â ideas
N â linguists
V â generate
V â hate
Adj â great
Adj â green
and start symbol S. An example derivation is

S â NP VP â Adj NP VP â Adj N VP â Adj N V NP â Adj N V Adj NP â Adj N V Adj Adj NP â Adj N V Adj Adj N â great N V Adj Adj N â great linguists V Adj Adj N â great linguists generate Adj Adj N â great linguists generate great  Adj N â great linguists generate great green N â great linguists generate great green ideas.
Other sequences that can be derived from this grammar are: "ideas hate great linguists", and "ideas generate". While these sentences are nonsensical, they are syntactically correct. A syntactically incorrect sentence (e.g. "ideas ideas great hate") cannot be derived from this grammar. See "Colorless green ideas sleep furiously" for a similar example given by Chomsky in 1957; see Phrase structure grammar and Phrase structure rules for more natural language examples and the problems of formal grammar in that area.

The hierarchy[edit]
  Set inclusions described by the Chomsky hierarchy
The following table summarizes each of Chomsky's four types of grammars, the class of language it generates, the type of automaton that recognizes it, and the form its rules must have.




Grammar

Languages

Automaton

Production rules (constraints)*

Examples[3]


Type-0

Recursively enumerable

Turing machine


  
    
      
        Î³
        â
        Î±
      
    
    {\displaystyle \gamma \rightarrow \alpha }
  
 (no constraints)


  
    
      
        L
        =
        {
        w
        
          |
        
        w
      
    
    {\displaystyle L=\{w|w}
  
 describes a terminating Turing machine
  
    
      
        }
      
    
    {\displaystyle \}}
  



Type-1

Context-sensitive

Linear-bounded non-deterministic Turing machine


  
    
      
        Î±
        A
        Î²
        â
        Î±
        Î³
        Î²
      
    
    {\displaystyle \alpha A\beta \rightarrow \alpha \gamma \beta }
  



  
    
      
        L
        =
        {
        
          a
          
            n
          
        
        
          b
          
            n
          
        
        
          c
          
            n
          
        
        
          |
        
        n
        >
        0
        }
      
    
    {\displaystyle L=\{a^{n}b^{n}c^{n}|n>0\}}
  



Type-2

Context-free

Non-deterministic pushdown automaton


  
    
      
        A
        â
        Î±
      
    
    {\displaystyle A\rightarrow \alpha }
  



  
    
      
        L
        =
        {
        
          a
          
            n
          
        
        
          b
          
            n
          
        
        
          |
        
        n
        >
        0
        }
      
    
    {\displaystyle L=\{a^{n}b^{n}|n>0\}}
  



Type-3

Regular

Finite state automaton


  
    
      
        A
        â
        
          a
        
      
    
    {\displaystyle A\rightarrow {\text{a}}}
  
 and
  
    
      
        A
        â
        
          a
        
        B
      
    
    {\displaystyle A\rightarrow {\text{a}}B}
  



  
    
      
        L
        =
        {
        
          a
          
            n
          
        
        
          |
        
        n
        â¥
        0
        }
      
    
    {\displaystyle L=\{a^{n}|n\geq 0\}}
  



* Meaning of symbols:

  
    
      
        
          a
        
      
    
    {\displaystyle {\text{a}}}
  
 = terminal

  
    
      
        A
      
    
    {\displaystyle A}
  
, 
  
    
      
        B
      
    
    {\displaystyle B}
  
 = non-terminal

  
    
      
        Î±
      
    
    {\displaystyle \alpha }
  
, 
  
    
      
        Î²
      
    
    {\displaystyle \beta }
  
, 
  
    
      
        Î³
      
    
    {\displaystyle \gamma }
  
 = string of terminals and/or non-terminals

  
    
      
        Î±
      
    
    {\displaystyle \alpha }
  
, 
  
    
      
        Î²
      
    
    {\displaystyle \beta }
  
 = maybe empty

  
    
      
        Î³
      
    
    {\displaystyle \gamma }
  
 = never empty

Note that the set of grammars corresponding to recursive languages is not a member of this hierarchy; these would be properly between Type-0 and Type-1.
Every regular language is context-free, every context-free language is context-sensitive, every context-sensitive language is recursive and every recursive language is recursively enumerable. These are all proper inclusions, meaning that there exist recursively enumerable languages that are not context-sensitive, context-sensitive languages that are not context-free and context-free languages that are not regular.[4]

Type-0 grammars[edit]
Main article: Unrestricted grammar
Type-0 grammars include all formal grammars. They generate exactly all languages that can be recognized by a Turing machine. These languages are also known as the recursively enumerable or Turing-recognizable languages.[5] Note that this is different from the recursive languages, which can be decided by an always-halting Turing machine.

Type-1 grammars[edit]
Main article: Context-sensitive grammar
Type-1 grammars generate context-sensitive languages. These grammars have rules of the form 
  
    
      
        Î±
        A
        Î²
        â
        Î±
        Î³
        Î²
      
    
    {\displaystyle \alpha A\beta \rightarrow \alpha \gamma \beta }
  
 with 
  
    
      
        A
      
    
    {\displaystyle A}
  
 a nonterminal and 
  
    
      
        Î±
      
    
    {\displaystyle \alpha }
  
, 
  
    
      
        Î²
      
    
    {\displaystyle \beta }
  
 and 
  
    
      
        Î³
      
    
    {\displaystyle \gamma }
  
 strings of terminals and/or nonterminals. The strings 
  
    
      
        Î±
      
    
    {\displaystyle \alpha }
  
 and 
  
    
      
        Î²
      
    
    {\displaystyle \beta }
  
 may be empty, but 
  
    
      
        Î³
      
    
    {\displaystyle \gamma }
  
 must be nonempty.  The rule 
  
    
      
        S
        â
        Ïµ
      
    
    {\displaystyle S\rightarrow \epsilon }
  
 is allowed if 
  
    
      
        S
      
    
    {\displaystyle S}
  
 does not appear on the right side of any rule.  The languages described by these grammars are exactly all languages that can be recognized by a linear bounded automaton (a nondeterministic Turing machine whose tape is bounded by a constant times the length of the input.)

Type-2 grammars[edit]
Main article: Context-free grammar
Type-2 grammars generate the context-free languages. These are defined by rules of the form 
  
    
      
        A
        â
        Î±
      
    
    {\displaystyle A\rightarrow \alpha }
  
 with 
  
    
      
        A
      
    
    {\displaystyle A}
  
 being a nonterminal and 
  
    
      
        Î±
      
    
    {\displaystyle \alpha }
  
 being a string of terminals and/or nonterminals. These languages are exactly all languages that can be recognized by a non-deterministic pushdown automaton. Context-free languagesâor rather its subset of deterministic context-free languageâare the theoretical basis for the phrase structure of most programming languages, though their syntax also includes context-sensitive name resolution due to declarations and scope. Often a subset of grammars is used to make parsing easier, such as by an LL parser.

Type-3 grammars[edit]
Main article: Regular grammar
Type-3 grammars generate the regular languages. Such a grammar restricts its rules to a single nonterminal on the left-hand side and a right-hand side consisting of a single terminal, possibly followed by a single nonterminal (right regular). Alternatively, the right-hand side of the grammar can consist of a single terminal, possibly preceded by a single nonterminal (left regular). These generate the same languages. However, if left-regular rules and right-regular rules are combined, the language need no longer be regular. The rule 
  
    
      
        S
        â
        Îµ
      
    
    {\displaystyle S\rightarrow \varepsilon }
  
 is also allowed here if 
  
    
      
        S
      
    
    {\displaystyle S}
  
 does not appear on the right side of any rule. These languages are exactly all languages that can be decided by a finite state automaton. Additionally, this family of formal languages can be obtained by regular expressions. Regular languages are commonly used to define search patterns and the lexical structure of programming languages.

References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Silberztein, Max (2013). "NooJ Computational Devices". Formalising Natural Languages with NooJ. pp.Â 1â13. ISBNÂ 978-1-4438-4733-9.

^ Chomsky, Noam (1956). "Three models for the description of language" (PDF). IRE Transactions on Information Theory. 2 (3): 113â124. doi:10.1109/TIT.1956.1056813.

^ Geuvers, H.; Rot, J. (2016). "Applications, Chomsky hierarchy, and Recap" (PDF). Regular Languages.

^ Chomsky, Noam (1963). "Chapter 12: Formal Properties of Grammars".  In Luce, R. Duncan; Bush, Robert R.; Galanter, Eugene (eds.). Handbook of Mathematical Psychology. Vol.Â II. John Wiley and Sons, Inc. pp.Â 323â418.

^ Sipser, Michael (1997). Introduction to the Theory of Computation (1stÂ ed.). Cengage Learning. p.Â 130. ISBNÂ 0-534-94728-X. The Church-Turing Thesis


Chomsky, Noam (1959). "On certain formal properties of grammars" (PDF). Information and Control. 2 (2): 137â167. doi:10.1016/S0019-9958(59)90362-6.
Chomsky, Noam; SchÃ¼tzenberger, Marcel P. (1963). "The algebraic theory of context free languages".  In Braffort, P.; Hirschberg, D. (eds.). Computer Programming and Formal Systems (PDF). Amsterdam: North Holland. pp.Â 118â161.
Davis, Martin D.; Sigal, Ron; Weyuker, Elaine J. (1994). Computability, Complexity, and Languages: Fundamentals of Theoretical Computer Science (2ndÂ ed.). Boston: Academic Press, Harcourt, Brace. p.Â 327. ISBNÂ 0-12-206382-1.
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}show.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteAutomata theory: formal languages and formal grammarsChomsky hierarchyGrammarsLanguagesAbstract machines
Type-0
â
Type-1
â
â
â
â
â
Type-2
â
â
Type-3
â
â

Unrestricted
(no common name)
Context-sensitive
Positive range concatenation
Indexed
â
Linear context-free rewriting systems
Tree-adjoining
Context-free
Deterministic context-free
Visibly pushdown
Regular
â
Non-recursive

Recursively enumerable
Decidable
Context-sensitive
Positive range concatenation*
Indexed*
â
Linear context-free rewriting language
Tree-adjoining
Context-free
Deterministic context-free
Visibly pushdown
Regular
Star-free
Finite

Turing machine
Decider
Linear-bounded
PTIME Turing Machine
Nested stack
Thread automaton
restricted Tree stack automaton
Embedded pushdown
Nondeterministic pushdown
Deterministic pushdown
Visibly pushdown
Finite
Counter-free (with aperiodic finite monoid)
Acyclic finite
Each category of languages, except those marked by a *, is a proper subset of the category directly above it. Any language in each category is generated by a grammar and by an automaton in the category in the same line.
showvteNoam Chomsky
Bibliography
Chomsky hierarchy
"Colorless green ideas sleep furiously"
Honorary degrees
Political positions
SelectbibliographyLinguistics
Syntactic Structures (1957)
Current Issues in Linguistic Theory (1964)
Aspects of the Theory of Syntax (1965)
Cartesian Linguistics (1966)
Language and Mind (1966)
The Sound Pattern of English (1968)
"Remarks on Nominalization" (1970)
"Conditions on Transformations" (1973)
Reflections on Language (1975)
The Logical Structure of Linguistic Theory (1975)
Lectures on Government and Binding (1981)
Knowledge of Language (1986)
The Minimalist Program (1995)
New Horizons in the Study of Language and Mind (2000)
Politics
"The Responsibility of Intellectuals" (1967)
American Power and the New Mandarins (1969)
Counter-Revolutionary Violence (1973), with Edward S. Herman
The Fateful Triangle (1983)
Manufacturing Consent (1988), with Edward S. Herman
Necessary Illusions (1989)
Deterring Democracy (1991)
Letters from Lexington (1993)
The Prosperous Few and the Restless Many (1993)
World Orders Old and New (1994)
Objectivity and Liberal Scholarship (1997)
Hegemony or Survival (2003)
Failed States (2006)
Requiem for the American Dream (2017)
Collections
Class Warfare (1996)
Middle East Illusions (2003)
Imperial Ambitions (2005)
Interventions (2007)
Gaza in Crisis (2010)
9-11: Was There An Alternative? (2011)
Making the Future (2012)
Occupy (2012)
On Palestine (2015), with Ilan PappÃ©
Filmography
Manufacturing Consent: Noam Chomsky and the Media (1992)
Last Party 2000 (2001)
Power and Terror: Noam Chomsky in Our Times (2002)
Distorted MoralityÂ â America's War on Terror? (2003)
Noam Chomsky: Rebel Without a Pause (2003) (TV)
Peace, Propaganda & the Promised Land (2004)
Is the Man Who Is Tall Happy? (2013)
Family
William Chomsky (father)
Carol Chomsky (wife)
Aviva Chomsky (daughter)

Authority control 
Integrated Authority File (Germany)





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Chomsky_hierarchy&oldid=1059438225"
		Categories: 1956 in computingFormal languagesGenerative linguisticsNoam ChomskyHidden categories: Articles with short descriptionShort description is different from WikidataArticles with GND identifiers
	
