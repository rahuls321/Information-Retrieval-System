
Title:
Visual Basic .NET
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Object-oriented computer programming language
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}This article is about the modern programming language for .NET. For the original Visual Basic, the last version of which was Visual Basic 6.0, see Visual Basic (classic).


.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}Visual BasicParadigmMulti-paradigm: structured, imperative, object-oriented, declarative, generic, reflective and event-drivenDesignedÂ byMicrosoftDeveloperMicrosoftFirstÂ appeared2001; 21Â years agoÂ (2001)Stable release16.9.15[1]Â 
   / 14 December 2021; 50 days agoÂ (14 December 2021)
Typing disciplineStatic, both strong and weak,[2]  both safe and unsafe,[2] nominativePlatform.NET Framework, Mono, .NET[3][4]OSChiefly WindowsAlso on Android, BSD, iOS, Linux, macOS, Solaris, and UnixLicenseRoslyn compiler: Apache License 2.0[5]Filename extensions.vbWebsitedocs.microsoft.com/dotnet/visual-basic/Major implementations.NET Framework SDK, Roslyn Compiler and MonoDialectsMicrosoft Visual BasicInfluenced byClassic Visual BasicInfluencedSmall Basic
Visual Basic, originally called Visual Basic .NET (VB.NET), is a multi-paradigm, object-oriented programming language, implemented on .NET, Mono, and the .NET Framework. Microsoft launched VB.NET in 2002 as the successor to its original Visual Basic language, the last version of which was Visual Basic 6.0. Although the ".NET" portion of the name was dropped in 2005, this article uses "Visual Basic [.NET]" to refer to all Visual Basic languages released since 2002, in order to distinguish between them and the classic Visual Basic. Along with C# and F#, it is one of the three main languages targeting the .NET ecosystem. As of March 11, 2020, Microsoft announced that evolution of the VB.NET language has concluded.[4]
Microsoft's integrated development environment (IDE) for developing in Visual Basic is Visual Studio. Most Visual Studio editions are commercial; the only exceptions are Visual Studio Express and Visual Studio Community, which are freeware. In addition, the .NET Framework SDK includes a freeware command-line compiler called vbc.exe. Mono also includes a command-line VB.NET compiler.
Visual Basic is often used in conjunction with the Windows Forms GUI library to make desktop apps for Windows. Programming for Windows Forms with Visual Basic involves dragging and dropping controls on a form using a GUI designer and writing corresponding code for each control.

Contents

1 Syntax

1.1 Simple example
1.2 Complex example
1.3 Comparison with the classic Visual Basic

1.3.1 Comparative examples


1.4 Comparison with C#


2 Examples

2.1 Hello World!

2.1.1 Windows Forms Application
2.1.2 Console Application


2.2 Speaking

2.2.1 Windows Forms Application
2.2.2 Console Application




3 Version history

3.1 2002 (VB 7.0)
3.2 2003 (VB 7.1)
3.3 2005 (VB 8.0)
3.4 2008 (VB 9.0)
3.5 2010 (VB 10.0)
3.6 2012 (VB 11.0)
3.7 2013 (VB 12.0)
3.8 2015 (VB 14.0)
3.9 2017 (VB 15.x)
3.10 2019 (VB 16.0)


4 Cross-platform and open-source development
5 See also
6 References
7 Further reading
8 External links



Syntax[edit]
This section needs expansion. You can help by adding to it.  (April 2014)
Visual Basic uses statements to specify actions. The most common statement is an expression statement, consisting of an expression to be evaluated, on a single line. As part of that evaluation, functions or subroutines may be called and variables may be assigned new values. To modify the normal sequential execution of statements, Visual Basic provides several control-flow statements identified by reserved keywords. Structured programming is supported by several constructs including two conditional execution constructs (If ... Then ... Else ... End If and  Select Case ...  Case ...  End Select ) and three iterative execution (loop) constructs (Do ... Loop, For ... To, and For Each) . The For ... To statement has separate initialisation and testing sections, both of which must be present. (See examples below.) The For Each statement steps through each value in a list.
In addition, in Visual Basic:

There is no unified way of defining blocks of statements. Instead, certain keywords, such as "If â¦ Then" or "Sub" are interpreted as starters of sub-blocks of code and have matching termination keywords such as "End If" or "End Sub".
Statements are terminated either with a colon (":") or with the end of line. Multiple-line statements in Visual Basic are enabled with " _" at the end of each such line.  The need for the underscore continuation character was largely removed in version 10 and later versions.[6]
The equals sign ("=") is used in both assigning values to variables and in comparison.
Round brackets (parentheses) are used with arrays, both to declare them and to get a value at a given index in one of them. Visual Basic uses round brackets to define the parameters of subroutines or functions.
A single quotation mark (') or the keyword REM, placed at the beginning of a line or after any number of space or tab characters at the beginning of a line, or after other code on a line, indicates that the (remainder of the) line is a comment.
Simple example[edit]
The following is a very simple Visual Basic program, a version of the classic "Hello, World!" example created as a console application:

Module Module1

    Sub Main()
        ' The classic "Hello, World!" demonstration program
        Console.WriteLine("Hello, World!")
    End Sub

End Module

It prints "Hello, World!" on a command-line window.  Each line serves a specific purpose, as follows:

Module Module1

This is a module definition. Modules are a division of code, which can contain any kind of object, like constants or variables, functions or methods, or classes, but can't be instantiated as objects like classes and cannot inherit from other modules. Modules serve as containers of code that can be referenced from other parts of a program.[7]It is common practice for a module and the code file which contains it to have the same name. However, this is not required, as a single code file may contain more than one module and/or class.

Sub Main()

This line defines a subroutine called "Main". "Main" is the entry point, where the program begins execution.[8]

Console.WriteLine("Hello, world!")

This line performs the actual task of writing the output. Console is a system object, representing a command-line interface (also known as a "console") and granting programmatic access to the operating system's standard streams.  The program calls the Console method WriteLine, which causes the string passed to it to be displayed on the console.
Instead of Console.WriteLine, one could use MsgBox, which prints the message in a dialog box instead of a command-line window.[9]

Complex example[edit]
This piece of code outputs Floyd's Triangle to the console:

Imports System.Console

Module Program

    Sub Main()
        Dim rows As Integer

        ' Input validation.
        Do Until Integer.TryParse(ReadLine("Enter a value for how many rows to be displayed: " & vbcrlf), rows) AndAlso rows >= 1
            WriteLine("Allowed range is 1 and {0}", Integer.MaxValue)
        Loop
      
        ' Output of Floyd's Triangle
        Dim current As Integer = 1
        Dim row As Integer 
        Dim column As Integer
        For row = 1 To rows
            For column = 1 To row
                Write("{0,-2} ", current)
                current += 1
            Next

            WriteLine()
        Next
    End Sub

    ''' <summary>
    ''' Like Console.ReadLine but takes a prompt string.
    ''' </summary>
    Function ReadLine(Optional prompt As String = Nothing) As String
        If prompt IsNot Nothing Then
            Write(prompt)
        End If

        Return Console.ReadLine()
    End Function

End Module

Comparison with the classic Visual Basic[edit]
Main article: Comparison of Visual Basic and Visual Basic .NET
Whether Visual Basic .NET should be considered as just another version of Visual Basic or a completely different language is a topic of debate. There are new additions to support new features, such as structured exception handling and short-circuited expressions. Also, two important data-type changes occurred with the move to VB.NET: compared to Visual Basic 6, the Integer data type has been doubled in length from 16 bits to 32 bits, and the Long data type has been doubled in length from 32 bits to 64 bits. This is true for all versions of VB.NET. A 16-bit integer in all versions of VB.NET is now known as a Short. Similarly, the Windows Forms editor is very similar in style and function to the Visual Basic form editor.
The things that have changed significantly are the semanticsâfrom those of an object-based programming language running on a deterministic, reference-counted engine based on COM to a fully object-oriented language backed by the .NET Framework, which consists of a combination of the Common Language Runtime (a virtual machine using generational garbage collection and a just-in-time compilation engine) and a far larger class library. The increased breadth of the latter is also a problem that VB developers have to deal with when coming to the language, although this is somewhat addressed by the My feature in Visual Studio 2005.
The changes have altered many underlying assumptions about the "right" thing to do with respect to performance and maintainability. Some functions and libraries no longer exist; others are available, but not as efficient as the "native" .NET alternatives. Even if they compile, most converted Visual Basic 6 applications will require some level of refactoring to take full advantage of the new language. Documentation is available to cover changes in the syntax, debugging applications, deployment and terminology.[10]

Comparative examples[edit]
The following simple examples compare VB and VB.NET syntax. They assume that the developer has created a form, placed a button on it and has associated the subroutines demonstrated in each example with the click event handler of the mentioned button. Each example creates a "Hello, World" message box after the button on the form is clicked.
Visual Basic 6:

Private Sub Command1_Click()
    MsgBox "Hello, World"
End Sub

VB.NET (MsgBox or MessageBox class can be used):

Private Sub Button1_Click(sender As object, e As EventArgs) Handles Button1.Click
    MsgBox("Hello, World")
End Sub

Both Visual Basic 6 and Visual Basic .NET automatically generate the Sub and End Sub statements when the corresponding button is double-clicked in design view. Visual Basic .NET will also generate the necessary Class and End Class statements. The developer need only add the statement to display the "Hello, World" message box.
All procedure calls must be made with parentheses in VB.NET, whereas in Visual Basic 6 there were different conventions for functions (parentheses required) and subs (no parentheses allowed, unless called using the keyword Call).
The names Command1 and Button1 are not obligatory. However, these are default names for a command button in Visual Basic 6 and VB.NET respectively.
In VB.NET, the Handles keyword is used to make the sub Button1_Click a handler for the Click event of the object Button1. In Visual Basic 6, event handler subs must have a specific name consisting of the object's name ("Command1"), an underscore ("_"), and the event's name ("Click", hence "Command1_Click").
There is a function called MessageBox.Show in the Microsoft.VisualBasic namespace which can be used (instead of MsgBox) similarly to the corresponding function in Visual Basic 6. There is a controversy[11] about which function to use as a best practice (not only restricted to showing message boxes but also regarding other features of the Microsoft.VisualBasic namespace). Some programmers prefer to do things "the .NET way", since the Framework classes have more features and are less language-specific. Others argue that using language-specific features makes code more readable (for example, using int (C#) or Integer (VB.NET) instead of System.Int32).
In Visual Basic 2008, the inclusion of ByVal sender as Object, ByVal e as EventArgs has become optional.
The following example demonstrates a difference between Visual Basic 6 and VB.NET. Both examples close the active window.
Visual Basic 6:

Sub cmdClose_Click()
    Unload Me
End Sub

VB.NET:

Sub btnClose_Click(sender As Object, e As EventArgs) Handles btnClose.Click
    Close()
End Sub

The 'cmd' prefix is replaced by the 'btn' prefix, conforming to the new convention previously mentioned.[which?]
Visual Basic 6 did not provide common operator shortcuts. The following are equivalent:
Visual Basic 6:

Sub Timer1_Timer()
    'Reduces Form Height by one pixel per tick
    Me.Height = Me.Height - 1
End Sub

VB.NET:

Sub Timer1_Tick(sender As Object, e As EventArgs) Handles Timer1.Tick
    Me.Height -= 1
End Sub

Comparison with C#[edit]
Main article: Comparison of C Sharp and Visual Basic .NET
C# and Visual Basic are Microsoft's first languages made to program on the .NET Framework (later adding F# and more; others have also added languages). Though C# and Visual Basic are syntactically different, that is where the differences mostly end. Microsoft developed both of these languages to be part of the same .NET Framework development platform.  They are both developed, managed, and supported by the same language development team at Microsoft.[12]  They compile to the same intermediate language (IL), which runs against the same .NET Framework runtime libraries.[13]  Although there are some differences in the programming constructs, their differences are primarily syntactic and, assuming one avoids the Visual Basic "Compatibility" libraries provided by Microsoft to aid conversion from Visual Basic 6, almost every feature in VB has an equivalent feature in C# and vice versa.  Lastly, both languages reference the same Base Classes of the .NET Framework to extend their functionality.   As a result, with few exceptions, a program written in either language can be run through a simple syntax converter to translate to the other.  There are many open source and commercially available products for this task.

Examples[edit]
Hello World![edit]
Windows Forms Application[edit]
Requires a button called Button1.Public Class Form1

    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click
        MsgBox("Hello world!", MsgBoxStyle.Information, "Hello world!") ' Show a message that says "Hello world!".
    End Sub
End Class

  Hello world! window
Console Application[edit]
Module Module1

    Sub Main()
        Console.WriteLine("Hello world!") ' Write in the console "Hello world!" and start a new line.
        Console.ReadKey() ' The user must press any key before the application ends.
    End Sub
End Module

Speaking[edit]
Windows Forms Application[edit]
Requires a TextBox titled 'TextBox1' and a button called Button1.Public Class Form1
    
    Private Sub Button1_Click(sender As Object, e As EventArgs) Handles Button1.Click
        CreateObject("Sapi.Spvoice").Speak(TextBox1.Text)
    End Sub
End Class

Console Application[edit]
Module Module1
    Private Voice = CreateObject("Sapi.Spvoice")
    Private Text As String

    Sub Main()
        Console.Write("Enter the text to speak: ") ' Say "Enter the text to speak: "
        Text = Console.ReadLine() ' The user must enter the text to speak.
        Voice.Speak(Text) ' Speak the text the user has entered.
    End Sub
End Module

Version history[edit]
Succeeding the classic Visual Basic version 6.0, the first version of Visual Basic .NET debuted in 2002. As of 2020[update], ten versions of Visual Basic .NET are released.

2002 (VB 7.0)[edit]
The first version, Visual Basic .NET, relies on .NET Framework 1.0. The most important feature is managed code, which contrasts with the classic Visual Basic.

2003 (VB 7.1)[edit]
Visual Basic .NET 2003 was released with .NET Framework 1.1. New features included support for the .NET Compact Framework and a better VB upgrade wizard. Improvements were also made to the performance and reliability of .NET IDE (particularly the background compiler) and runtime. In addition, Visual Basic .NET 2003 was available in the Visual Studio.NET Academic Edition, distributed to a certain number of scholars[weaselÂ words] from each country without cost.

2005 (VB 8.0)[edit]
After Visual Basic .NET 2003, Microsoft dropped ".NET" from the name of the product, calling the next version Visual Basic 2005.
For this release, Microsoft added many features intended to reinforce Visual Basic .NET's focus as a rapid application development platform and further differentiate it from C#., including:

Edit and Continue feature[further explanation needed]
Design-time expression evaluation[further explanation needed]
A pseudo-namespace called "My", which provides:[14][15]
Easy access to certain areas of the .NET Framework that otherwise require significant code to access like using My.Form2.Text = " MainForm " rather than System.WindowsApplication1.Forms.Form2.text = " MainForm "
Dynamically generated classes (e.g. My.Forms)
Improved VB-to-VB.NET converter[16]
A "using" keyword, simplifying the use of objects that require the Dispose pattern to free resources
Just My Code feature, which hides (steps over) boilerplate code written by the Visual Studio .NET IDE and system library code during debugging
Data Source binding, easing database client/server development
To bridge the gaps between itself and other .NET languages, this version added:

Generics[17]
Partial classes, a method of defining some parts of a class in one file and then adding more definitions later; particularly useful for integrating user code with auto-generated code
Operator overloading and nullable types[18]
Support for unsigned integer data types commonly used in other languages
Visual Basic 2005 introduced the IsNot operator that makes 'If X IsNot Y' equivalent to 'If Not X Is Y'. It gained notoriety[19] when it was found to be the subject of a Microsoft patent application.[20][21]

2008 (VB 9.0)[edit]
Visual Basic 9.0 was released along with .NET Framework 3.5 on November 19, 2007.
For this release, Microsoft added many features, including:

A true conditional operator, "If(condition as boolean, truepart, falsepart)", to replace the "IIf" function.
Anonymous types
Support for LINQ
Lambda expressions
XML Literals
Type Inference
Extension methods
2010 (VB 10.0)[edit]
In April 2010, Microsoft released Visual Basic 2010. Microsoft had planned to use Dynamic Language Runtime (DLR) for that release[22] but shifted to a co-evolution strategy between Visual Basic and sister language C# to bring both languages into closer parity with one another. Visual Basic's innate ability to interact dynamically with CLR and COM objects has been enhanced to work with dynamic languages built on the DLR such as IronPython and IronRuby.[23] The Visual Basic compiler was improved to infer line continuation in a set of common contexts, in many cases removing the need for the " _" line continuation characters. Also, existing support of inline Functions was complemented with support for inline Subs as well as multi-line versions of both Sub and Function lambdas.[24]

2012 (VB 11.0)[edit]
Visual Basic 2012 was released alongside .NET Framework 4.5. Major features introduced in this version include:[further explanation needed]

Asynchronous programming with "async" and "await" statements
Iterators
Call hierarchy
Caller information
"Global" keyword in "namespace" statements
2013 (VB 12.0)[edit]
Visual Basic 2013 was released alongside .NET Framework 4.5.1 with Visual Studio 2013. Can also build .NET Framework 4.5.2 applications by installing Developer Pack.[25]

2015 (VB 14.0)[edit]
Visual Basic 2015 (code named VB "14.0") was released with Visual Studio 2015.
Language features include a new "?." operator to perform inline null checks, and a new string interpolation feature is included to format strings inline.[26]

2017 (VB 15.x)[edit]
Visual Basic 2017 (code named VB "15.0") was released with Visual Studio 2017.
Extends support for new Visual Basic 15 language features with revision 2017, 15.3, 15.5, 15.8. Introduces new refactorings that allow organizing source code with one action.[27][28]

2019 (VB 16.0)[edit]
Visual Basic 2019 (code named VB "16.0") was released with Visual Studio 2019.
[29] It is the first version of Visual Basic focused on .NET Core.[30]

Cross-platform and open-source development[edit]
The official Visual Basic compiler is written in Visual Basic and is available on GitHub as a part of the .NET Compiler Platform.[31] The creation of open-source tools for Visual Basic development has been slow compared to C#, although the Mono development platform provides an implementation of Visual Basic-specific libraries and a Visual Basic 2005 compatible compiler written in Visual Basic,[32] as well as standard framework libraries such as Windows Forms GUI library.
MonoDevelop is an open-source alternative IDE. The Gambas environment is also similar but distinct from Visual Basic.

See also[edit]
.mw-parser-output .portalbox{float:right;border:solid #aaa 1px;padding:0}.mw-parser-output .portalbox.tleft{margin:0.5em 1em 0.5em 0}.mw-parser-output .portalbox.tright{margin:0.5em 0 0.5em 1em}.mw-parser-output .portalbox>ul{display:table;box-sizing:border-box;padding:0.1em;max-width:175px;background:#f9f9f9;font-size:85%;line-height:110%;font-style:italic;font-weight:bold}.mw-parser-output .portalbox>ul>li{display:table-row}.mw-parser-output .portalbox>ul>li>span:first-child{display:table-cell;padding:0.2em;vertical-align:middle;text-align:center}.mw-parser-output .portalbox>ul>li>span:last-child{display:table-cell;padding:0.2em 0.2em 0.2em 0.3em;vertical-align:middle}

Free and open-source software portal
Computer programming portal
Microsoft Visual Studio Express
List of .NET libraries and frameworks
Comparison of C# and Visual Basic .NET
Visual Basic for Applications
Microsoft Small Basic
Comparison of programming languages
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}"Visual Studio 2019 version 16.9 Release Notes". December 14, 2021. Retrieved December 25, 2021.

^ Jump up to: a b "Option Explicit and Option Strict in Visual Basic .NET and in Visual Basic". Support. Microsoft. March 19, 2008. Retrieved August 22, 2013.

^ Dollard, Kathleen (November 13, 2018). "Visual Basic in .NET Core 3.0". blogs.msdn.microsoft.com.

^ Jump up to: a b "Visual Basic support planned for .NET 5.0 | Visual Basic Blog". Blogs.msdn.microsoft.com. March 11, 2020. Retrieved August 26, 2020.

^ "Dotnet/Roslyn".

^ "New Features in Visual Basic 10".

^ "Module Statement". MSDN â Developer Center. Retrieved January 20, 2010.

^ "Main Procedure in Visual Basic". MSDN â Developer Center. Retrieved January 20, 2010.

^ "Visual Basic Version of Hello, World". MSDN â Developer Center. Retrieved January 20, 2010.

^ "Microsoft Visual Basic 6.0 Migration Resource Center". MSDN. Microsoft. Retrieved November 9, 2014.

^ "Visual Studio 2003 Retired Technical documentation". Microsoft Download Center.

^ Krill, Paul (February 27, 2009). "Microsoft converging programming languages | Developer World". InfoWorld. Archived from the original on January 26, 2013. Retrieved August 18, 2013.

^ "Microsoft Intermediate Language". Dotnet-guide.com. Retrieved August 18, 2013.

^ Mackenzie, Duncan (2006). "Navigate The .NET Framework And Your Projects With The My Namespace". MSDN Magazine Visual Studio 2005 Guided Tour 2006. Microsoft.

^ Whitney, Tyler (November 2005). "My.Internals: Examining the Visual Basic My Feature". MSDN. Microsoft.

^ "What's New with the Visual Basic Upgrade Wizard in Visual Basic 2005". msdn2.microsoft.com.

^ "Defining and Using Generics in Visual Basic 2005". msdn2.microsoft.com.

^ "Operator Overloading in Visual Basic 2005". msdn2.microsoft.com.

^ Sherriff, Lucy (February 22, 2005). "Real Software slams MS IsNot patent application". The Register. Retrieved April 6, 2009.

^ Taft, Darryl K. (February 21, 2005). "Real Software Slams Microsofts Patent Effort". eWeek. Retrieved April 6, 2009.

^ Vick, Paul A. Jr.; Barsan, Costica Corneliu; Silver, Amanda K. (May 14, 2003). "United States Patent Application: 20040230959". Patent Application Full Text and Image Database. US Patent & Trademark Office. Retrieved April 6, 2009.

^ "What the heck is "VBx"?". May 1, 2007. Retrieved August 12, 2009. With the new DLR, we have support for IronPython, IronRuby, Javascript, and the new dynamic VBx compile

^ "What is New in Visual Basic 2010". Microsoft. 2009. Retrieved August 12, 2009. Visual Basic binds to objects from dynamic languages such as IronPython and IronRuby

^ "What's New in Visual Basic 2010". Microsoft. 2010. Retrieved August 1, 2010.

^ Download Microsoft .NET Framework 4.5.2 Developer Pack for Windows Vista SP2, Windows 7 SP1, Windows 8, Windows 8.1, Windows Server 2008 SP2 Windows Server 2008 R2 SP1, Windows Server 2012 and Windows Server 2012 R2 from Official Microsoft Download Center

^ "New Language Features in Visual Basic 14". msdn.com.

^ reshmim. "Visual Studio 2017 Release Notes". www.visualstudio.com.

^ reshmim. "What's new for Visual Basic 2017,15.3,15.5,15.8". www.visualstudio.com.

^ reshmim. "Visual Studio 2019 Release Notes". www.visualstudio.com.

^ reshmim. "What's new for Visual Basic 16.0". www.visualstudio.com.

^ Roslyn, .NET Foundation, April 13, 2019, retrieved April 14, 2019

^ "Redirectingâ¦". www.mono-project.com.


Further reading[edit]
.mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li{margin-left:0;padding-left:3.2em;text-indent:-3.2em}.mw-parser-output .refbegin-hanging-indents ul,.mw-parser-output .refbegin-hanging-indents ul li{list-style:none}@media(max-width:720px){.mw-parser-output .refbegin-hanging-indents>ul>li{padding-left:1.6em;text-indent:-1.6em}}.mw-parser-output .refbegin-columns{margin-top:0.3em}.mw-parser-output .refbegin-columns ul{margin-top:0}.mw-parser-output .refbegin-columns li{page-break-inside:avoid;break-inside:avoid-column}
"Visual Basic Language Specification 8.0". Microsoft Corporation. November 15, 2005. Retrieved December 10, 2010.
"Visual Basic Language Specification 9.0". Microsoft Corporation. December 19, 2007. Retrieved September 28, 2011.
"Visual Basic Language Specification 11.0". Microsoft Corporation. June 7, 2013. Retrieved September 22, 2013.

External links[edit]



Wikibooks has a book on the topic of: Visual Basic .NET




Wikiversity has learning resources about VB.NET

Official website
The Visual Basic Team Blog
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteDialects of the BASIC programming language (list)ClassicAtari
Atari BASIC
Atari ST BASIC
BASIC Programming (Atari 2600)
Microsoft
Altair BASIC
Applesoft BASIC
Atari Microsoft BASIC
Color BASIC
Commodore BASIC
Disk Extended Color BASIC
Extended Color BASIC
GW-BASIC
IBM BASIC
MBASIC
Microsoft BASIC (MS BASIC for Macintosh)
MSX BASIC
TRS-80 BASICs (Level I, Level II/III)
Thomson BASIC 1.0
Texas Instruments
TI BASIC (TI 99/4A)
TI-BASIC (calculators)
TI Extended BASIC (aka XBasic)
TI-BASIC 83
Hewlett Packard
HP Time-Shared BASIC
Rocky Mountain BASIC
Locomotive Software
Locomotive BASIC
Mallard BASIC
Optimized Systems Software
BASIC A+
BASIC XE
BASIC XL
Microcomputers
Atom BASIC
Integer BASIC
JR-BASIC
North Star BASIC
Sinclair BASIC
S-BASIC
Southampton BASIC System
SCELBAL
Vilnius BASIC
Minicomputers
BASIC-11
Business Basic (B32, Data General)
Data General Extended BASIC
Wang BASIC
Time sharing computers
BASIC-PLUS
VSI BASIC for OpenVMS
Dartmouth BASIC
SUPER BASIC
Other
AlphaBasic
BASICODE
BAL
Casio BASIC
CBASIC
Chinese BASIC
Family BASIC
MacBASIC
PBASIC
SDS BASIC
STOS BASIC
Tiny Basic
Turbo-BASIC XL
UBASIC
ZBasic
ETBASICÂ [zh]
Extenders
BASIC 8
Graphics BASIC
Simons' BASIC
Super Expander
Super Expander 64
YS MegaBasic
Procedure-orientedProprietary
AmigaBASIC
AMOS BASIC
ASIC
BasicX
BBC BASIC
Beta BASIC
FutureBASIC
GFA BASIC
GRASS
Liberty BASIC
LSE
MapBasic
Mobile BASIC
OWBasic
PowerBASIC
PureBasic
QBasic
QuickBASIC
SuperBASIC
SmileBASIC
ThinBasic
Tiger-BASIC
True BASIC
Turbo Basic
WordBASIC
Free and open source
Basic-256
Basic4GL
DarkBASIC
Euphoria
Indic BASIC
Open Programming Language
SdlBasic
SmallBASIC
QB64
wxBasic
XBasic
Xblite
Yabasic
With object extensionsProprietary
AutoIt
Chipmunk Basic
GLBasic
LotusScript
Morfik
PowerBASIC
ProvideX
Run BASIC
VBA
VBScript
VB 5 for Microsoft Excel 5.0
VSTO
VSTA
Embedded Visual Basic
WinWrap Basic
Free and open source
BlitzMax
FreeBASIC
Microsoft Small Basic
Mono-Basic
OpenOffice Basic
ScriptBasic
Roslyn

RAD designersProprietary
CA-Realizer
Visual Basic (classic)
Jabaco
NS Basic
Phoenix Object Basic
RapidQ
Visual Basic (.Net)
Xojo
Free and open source
Basic For Qt
B4X (Basic4android, Basic4ppc)
Gambas
HBasic
WinFBE / Visual FB Editor

vte.NET
.NET strategy
Libraries and frameworks
Implementations
.NET (Core)
.NET Framework
Version history
.NET Compact Framework
.NET Micro Framework
DotGNU
Mono
XNA Framework
Architecture
Common Language Runtime (CLR)
COM Interop
Framework Class Library (FCL)
Components
ADO.NET
Entity Framework
ASP.NET
Web Forms
AJAX
Core
Dynamic Data
MVC
Razor
ClickOnce
Dynamic Language Runtime
Extensible Application Markup Language (XAML)
Language Integrated Query (LINQ)
Managed Extensibility Framework
Microsoft Silverlight
Microsoft XNA
Parallel Extensions
Windows Communication Foundation (WCF)
WCF Data Services
Windows Forms (WinForms)
Windows Identity Foundation (WIF)
Windows Presentation Foundation (WPF)
Windows Workflow Foundation (WF)
.NET Remoting
ToolsObfuscators
Dotfuscator
SmartAssembly
CodeArmor
Decompilers
.NET Reflector
dotPeek
Misc
CLR Profiler
ILAsm
.NET Compiler Platform
Native Image Generator (NGen)
XAMLPad
IDEs
Visual Studio
Blend
Express
MonoDevelop
SharpDevelop
Xamarin Studio
Organizations
.NET Foundation
Microsoft
Xamarin

 Category
 List
 Commons

vteCommon Language InfrastructureArchitecture
Application domain
Code Access Security
Common Intermediate Language
instructions
Common Type System
Platform Invocation Services
Virtual Execution System
Components
Assembly
Delegate
Global Assembly Cache
Manifest
Metadata
Standard Libraries
ImplementationsMicrosoft
.NET
.NET Framework
.NET Compact Framework
.NET Micro Framework
Other
Mono
DotGNU
LanguagesMajor languages
C#
Visual Basic
F#
PowerShell
Other
Axum
A#
Boo
Cobra
C++/CLI
IronScheme
IronPython
IronRuby
JScript .NET
J#
Nemerle
Oxygene
Phalanger
Q#
Scala
Small Basic
X#
Comparison
C# and Java
C# and Visual Basic .NET
Java and .NET platforms
Visual Basic and Visual Basic .NET

vteMicrosoft development toolsDevelopmentenvironmentsVisual Studio
Code
Express
Team System Profiler
Tools for Applications
Tools for Office
Others
App Studio
Blend
Expression Web
FxCop
GW-BASIC
MACRO-80
Macro Assembler
MSBuild
Pascal
QuickBASIC
QBasic
QuickC
Robotics Developer Studio
Roslyn
SharePoint Designer
FrontPage
Small Basic
WebMatrix
Windows SDK
CLR Profiler
ILAsm
Native Image Generator
WinDiff
XAMLPad
Languages
Dynamics AX
BASIC
Visual Basic
Visual Basic .NET
Bosque
Visual C++
C++/CX
C++/CLI
Managed C++
C++/WinRT
C#
C/AL
Dafny
Dexterity
F#
F*
Visual FoxPro
J++
J#
IronPython
IronRuby
JScript
Lean
P
Power Fx
PowerShell
Project Verona
Q#
Small Basic
TypeScript
VBA
VBScript
VPL
XAML
Major APIs andframeworks
Windows API
Silverlight
XNA
DirectX
Managed DirectX
Xbox Development Kit
Windows Installer
.NET Framework
ASP.NET
Core
AJAX
Dynamic Data
MVC
Razor
Web Forms
ADO.NET
Entity Framework
CardSpace
Communication Foundation
Identity Foundation
LINQ
Presentation Foundation
Workflow Foundation
Device drivers
WDK
WDF
KMDF
UMDF
Windows HLK
WDM
DatabaseSQL Server
Express
Compact
Management Studio
Business Intelligence Development Studio
MSDE
SQL services
Analysis
Reporting
Integration
Notification
Other
Visual FoxPro
Microsoft Access
Access Database Engine
Extensible Storage Engine
Source control
Visual SourceSafe
Team Foundation Version Control
Testing anddebugging
CodeView
OneFuzz
Script Debugger
WinDbg
xUnit.net
Delivery
Active Setup
ClickOnce
npm
NuGet
vcpkg
Web Platform Installer
Windows Installer
WiX
Windows Package Manager
Microsoft Store
 Category
vteMicrosoft free and open-source software (FOSS)Overview
Microsoft and open source
Shared Source Initiative
SoftwareApplications
Atom
Conference XP
Family.Show
File Manager
Open Live Writer
Microsoft PowerToys
Windows Calculator
Windows Console
Windows Package Manager
Windows Terminal
WorldWide Telescope
XML Notepad
Video games
Allegiance
Programminglanguages
Bosque
C#
Dafny
F#
F*
GW-BASIC
IronPython
IronRuby
Lean
P
Power Fx
PowerShell
Project Verona
Q#
R Open
Small Basic Online
TypeScript
Visual Basic
Frameworks anddevelopment tools
.NET
.NET Bio
.NET Framework
.NET Gadgeteer
.NET MAUI
.NET Micro Framework
AirSim
ASP.NET
ASP.NET AJAX
ASP.NET Core
ASP.NET MVC
ASP.NET Razor
ASP.NET Web Forms
Babylon.js
BitFunnel
Blazor
C++/WinRT
CCF
ChakraCore
CLR Profiler
Dapr
DeepSpeed
DiskSpd
Dryad
Dynamic Language Runtime
eBPF on Windows
Electron
Entity Framework
Fluent Design System
Fluid Framework
Infer.NET
LightGBM
Managed Extensibility Framework
Microsoft Automatic Graph Layout
Microsoft C++ Standard Library
Microsoft Cognitive Toolkit
Microsoft Detours
Microsoft Enterprise Library
Microsoft SEAL
Mimalloc
ML.NET
mod_mono
Mono
MonoDevelop
MSBuild
MsQuic
Neural Network Intelligence
npm
NuGet
OneFuzz
Open Management Infrastructure
Open Neural Network Exchange
Open Service Mesh
Open XML SDK
Orleans
ProcDump
ProcMon
Python Tools for Visual Studio
R Tools for Visual Studio
RecursiveExtractor
Roslyn
Sandcastle
SignalR
StyleCop
SVNBridge
T2 Temporal Prover
Text Template Transformation Toolkit
TLA+ Toolbox
U-Prove
vcpkg
Virtual File System for Git
Visual Studio Code
Voldemort
VoTT
Vowpal Wabbit
Windows App SDK
Windows Communication Foundation
Windows Driver Frameworks
KMDF
UMDF
Windows Forms
Windows Presentation Foundation
Windows Template Library
Windows UI Library
WinJS
WinObjC
WiX
XSP
xUnit.net
Z3 Theorem Prover
Operating systems
MS-DOS (v1.25 & v2.0)
Barrelfish
SONiC
CBL-Mariner
Other
ChronoZoom
Extensible Storage Engine
FlexWiki
FourQ
Gollum
Project Mu
ReactiveX
SILK
TLAPS
TPM 2.0 Reference Implementation
WikiBhasha
Licenses
Microsoft Public License
Microsoft Reciprocal License
Forges
CodePlex
GitHub
Related
.NET Foundation
F# Software Foundation
Microsoft Open Specification Promise
Open Letter to Hobbyists
Open Source Security Foundation
Outercurve Foundation
 Category
vteProgramming languages
Comparison
Timeline
History

Ada
ALGOL
APL
Assembly
BASIC
C
C++
C#
COBOL
Erlang
Forth
Fortran
Go
Haskell
Java
JavaScript
Kotlin
Lisp
Lua
ML
Pascal
Perl
PHP
Prolog
Python
R
Ruby
Rust
SQL
Shell
Simula
Smalltalk
Swift
more...

 Category
 Lists: Alphabetical
Categorical
Generational
Non-English-based





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Visual_Basic_.NET&oldid=1069397977"
		Categories: .NET programming languages2001 softwareBASIC programming language familyMicrosoft BASICMicrosoft programming languagesMicrosoft Visual StudioObject-oriented programming languagesHidden categories: Articles with short descriptionShort description matches WikidataUse mdy dates from September 2019Articles to be expanded from April 2014All articles to be expandedArticles using small message boxesAll articles with specifically marked weasel-worded phrasesArticles with specifically marked weasel-worded phrases from November 2014Articles containing potentially dated statements from 2020All articles containing potentially dated statementsArticles with specifically marked weasel-worded phrases from February 2014Wikipedia articles needing clarification from February 2014Official website different in Wikidata and WikipediaArticles with example BASIC code
	
