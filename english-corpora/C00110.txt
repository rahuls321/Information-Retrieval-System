
Title:
Binary search tree
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Rooted binary tree data structure
.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}Binary search treeTypetreeInvented1960Invented byP.F. Windley, A.D. Booth, A.J.T. Colin, and T.N. HibbardTime complexity in big O notationAlgorithm

Average
Worst caseSpace

O(n)
O(n)Search

O(log n)
O(n)Insert

O(log n)
O(n)Delete

O(log n)
O(n)
  Fig. 1: A binary search tree of size 9 and depth 3, with 8 at the root. The leaves are not drawn.
In computer science, a binary search tree (BST), also called an ordered or sorted binary tree, is a rooted binary tree data structure whose internal nodes each store a key greater than all the keys in the nodeâs left subtree and less than those in its right subtree. The time complexity of operations on the binary search tree is directly proportional to the height of the tree.
Binary search trees allow binary search for fast lookup, addition, and removal of data items, and can be used to implement dynamic sets and lookup tables. Since the nodes in a BST are laid in such as way that each comparison skips about half of the remaining tree, the lookup performance is proportional to that of binary logarithm.
The performance of a binary search tree is dependent on the order of insertion of the nodes into the tree; several variations of the binary search tree can be built with guaranteed worst-case performance. The basic operations include: search, traversal, insert and delete. BSTs with guaranteed worst-case complexities perform better than an unsorted array, which would require linear search time. 
The complexity analysis of BST shows that, on average, the insert, delete and search takes 
  
    
      
        O
        (
        log
        â¡
        n
        )
      
    
    {\displaystyle O(\log n)}
  
 for 
  
    
      
        n
      
    
    {\displaystyle n}
  
 nodes. In the worst case, they degrade to that of a singly linked list: 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
  
.

Contents

1 History
2 Definition
3 Operations

3.1 Searching

3.1.1 Recursive search
3.1.2 Iterative search
3.1.3 Successor and predecessor


3.2 Insertion
3.3 Deletion


4 Traversal
5 Examples of applications

5.1 Sort
5.2 Priority queue operations


6 Types

6.1 Performance comparisons
6.2 Optimal binary search trees
6.3 Threaded binary trees


7 See also
8 Notes
9 References
10 Further reading
11 External links



History[edit]
The binary search tree algorithm was discovered independently by several researchers, including P.F. Windley, Andrew Donald Booth, Andrew Colin, Thomas N. Hibbard, and attributed to Conway Berners-Lee and David Wheeler, in 1960 for storing labeled data in magnetic tapes.[1][2][3]

Definition[edit]
A binary search tree, also known as ordered binary search tree, is a variation of rooted binary tree in which the nodes are arranged in an order.[4]:â298â The nodes of the tree store a key (and optionally, an associated value), and each has two distinguished sub-trees, commonly denoted left and right. The tree additionally satisfies the binary search property: the key in each node is greater than or equal to any key stored in the left sub-tree, and less than or equal to any key stored in the right sub-tree.[5]:â287â
BST requires an order relation by which every node of the tree is comparable with every other node in the sense of total order. Binary search trees are also efficacious in sorting algorithms and search algorithms. However, the search complexity of a BST depends upon the order in which the nodes are inserted and deleted; since in worst case, successive operations in the binary search tree may lead to degeneracy and form a singly linked list (or "unbalanced tree") like structure, thus has the same worst-case complexity as a linked list.[6][4]:â299-302â Binary search trees are also a fundamental data structure used in construction of abstract data structures such as sets, multisets, and associative arrays.

Operations[edit]
Binary search trees support three main operations: lookup (checking whether a key is present), insertion, and deletion of an element. The latter two possibly change the structural arrangement of the nodes in the tree, whereas the first one is a navigating and read-only operation. Other read-only operations are traversal, verification, etc.

Searching[edit]
Searching in a binary search tree for a specific key can be programmed recursively or iteratively.
Searching begins by examining the root node. If the tree is 
  
    
      
        
          nil
        
      
    
    {\displaystyle {\text{nil}}}
  
, the key being searched for does not exist in the tree. Otherwise, if the key equals that of the root, the search is successful and the node is returned. If the key is less than that of the root, the search proceeds by examining the left subtree. Similarly, if the key is greater than that of the root, the search proceeds by examining the right subtree. This process is repeated until the key is found or the remaining subtree is 
  
    
      
        
          nil
        
      
    
    {\displaystyle {\text{nil}}}
  
. If the searched key is not found after a 
  
    
      
        
          nil
        
      
    
    {\displaystyle {\text{nil}}}
  
 subtree is reached, then the key is not present in the tree.

Recursive search[edit]
The following pseudocode implements the BST search procedure through recursion.[5]:â290â





 Tree-Search(x, key)
   if x = NIL or key = x.key then
     return x
   if key < x.key then
     return Tree-Search(x.left, key)
   else
     return Tree-Search(x.right, key)
   end if


The recursive procedure continues until a 
  
    
      
        
          nil
        
      
    
    {\displaystyle {\text{nil}}}
  
 or the 
  
    
      
        
          key
        
      
    
    {\displaystyle {\text{key}}}
  
 being search for are encountered.

Iterative search[edit]
The recursive version of the search can be "unrolled" into a while loop. On most machines, the iterative version is found to be more efficient.[5]:â291â





 Iterative-Tree-Search(x, key)
   while x â  NIL and key â  x.key then
     if key < x.key then
       xÂ := x.left
     else
       xÂ := x.right
     end if
   repeat
   return x


Since the search may proceed till some leaf node, the running time complexity of BST search is 
  
    
      
        O
        (
        h
        )
      
    
    {\displaystyle O(h)}
  
 where 
  
    
      
        h
      
    
    {\displaystyle h}
  
 is the height of the tree. However, the worst case for BST search is 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
  
 where 
  
    
      
        n
      
    
    {\displaystyle n}
  
 is the total number of nodes in the BST, because an unbalanced BST may degenerate to a linked list. However, if the BST is height-balanced the height is 
  
    
      
        O
        (
        log
        â¡
        n
        )
      
    
    {\displaystyle O(\log n)}
  
.[5]:â290â

Successor and predecessor[edit]
For certain operations, given a node 
  
    
      
        
          x
        
      
    
    {\displaystyle {\text{x}}}
  
, finding the successor or predecessor of 
  
    
      
        
          x
        
      
    
    {\displaystyle {\text{x}}}
  
 is crucial. Assuming all the keys of the BST are distinct, the successor of a node 
  
    
      
        
          x
        
      
    
    {\displaystyle {\text{x}}}
  
 in BST is the node with the smallest key greater than 
  
    
      
        
          x
        
      
    
    {\displaystyle {\text{x}}}
  
's key. On the other hand, the predecessor of a node 
  
    
      
        
          x
        
      
    
    {\displaystyle {\text{x}}}
  
 in BST is the node with the largest key smaller than 
  
    
      
        
          x
        
      
    
    {\displaystyle {\text{x}}}
  
's key. Following is pseudocode for finding the successor and predecessor of a node 
  
    
      
        
          x
        
      
    
    {\displaystyle {\text{x}}}
  
 in BST.[5]:â292â293â





 Tree-Successor(x)
   if x.right â  NIL then
     return Tree-Minimum(x.right)
   end if
   yÂ := x.parent
   while y â  NIL and x = y.right then
     xÂ := y
     yÂ := y.parent
   repeat
   return y



 Tree-Predecessor(x)
   if x.left â  NIL then
     return Tree-Maximum(x.left)
   end if
   yÂ := x.parent
   while y â  NIL and x = y.left then
     xÂ := y
     yÂ := y.parent
   repeat
   return y


Operations such as finding a node in a BST whose key is the maximum or minimum are critical in certain operations, such as determining the successor and predecessor of nodes. Following is the pseudocode for the operations.[5]:â291â292â





 Tree-Maximum(x)
   while x.right â  NIL then
     xÂ := x.right
   repeat
   return x



 Tree-Minimum(x)
   while x.left â  NIL then
     xÂ := x.left
   repeat
   return x


Insertion[edit]
Operations such as insertion and deletion cause the BST representation to change dynamically. The data structure must be modified in such a way that the properties of BST continue to hold. New nodes are inserted as leaf nodes in the BST.[5]:â294â295â Following is an iterative implementation of the insertion operation.[5]:â294â





1    Tree-Insert(T, z)
2      yÂ := NIL
3      xÂ := T.root
4      while x â  NIL do
5        yÂ := x
6        if z.key < x.key then
7          xÂ := x.left
8        else
9          xÂ := x.right
10       end if
11    repeat
12    z.parentÂ := y
13    if y = NIL then
14      T.rootÂ := z
15    else if z.key < y.key then
16      y.leftÂ := z
17    else
18      y.rightÂ := z
19    end if


The procedure maintains a "trailing pointer" 
  
    
      
        
          y
        
      
    
    {\displaystyle {\text{y}}}
  
 as a parent of 
  
    
      
        
          x
        
      
    
    {\displaystyle {\text{x}}}
  
. After initialization on line 2, the while loop along lines 4-11 causes the pointers to be updated. If 
  
    
      
        
          y
        
      
    
    {\displaystyle {\text{y}}}
  
 is 
  
    
      
        
          nil
        
      
    
    {\displaystyle {\text{nil}}}
  
, the BST is empty, thus 
  
    
      
        
          z
        
      
    
    {\displaystyle {\text{z}}}
  
 is inserted as the root node of the binary search tree 
  
    
      
        
          T
        
      
    
    {\displaystyle {\text{T}}}
  
, if it isn't 
  
    
      
        
          nil
        
      
    
    {\displaystyle {\text{nil}}}
  
, insertion proceeds by comparing the keys to that of 
  
    
      
        
          y
        
      
    
    {\displaystyle {\text{y}}}
  
 on the lines 15-19 and the node is inserted accordingly.[5]:â295â

Deletion[edit]
  Fig. 2: Binary search tree special cases deletion illustration.
Deletion of a node, say 
  
    
      
        
          z
        
      
    
    {\displaystyle {\text{z}}}
  
, from a binary search tree 
  
    
      
        
          T
        
      
    
    {\displaystyle {\text{T}}}
  
 should abide three cases:[5]:â295â

If 
  
    
      
        
          z
        
      
    
    {\displaystyle {\text{z}}}
  
 is a leaf node, the parent node of 
  
    
      
        
          z
        
      
    
    {\displaystyle {\text{z}}}
  
 gets replaced with 
  
    
      
        
          nil
        
      
    
    {\displaystyle {\text{nil}}}
  
 and consequently 
  
    
      
        
          z
        
      
    
    {\displaystyle {\text{z}}}
  
 gets removed from the tree, as shown in fig. 2 part (a).
If 
  
    
      
        
          z
        
      
    
    {\displaystyle {\text{z}}}
  
 has a single child node, the child gets elevated as either left or right  child of 
  
    
      
        
          z
        
      
    
    {\displaystyle {\text{z}}}
  
's parent depending on the position of 
  
    
      
        
          z
        
      
    
    {\displaystyle {\text{z}}}
  
 within the BST, as shown in fig. 2 part (b), and as a result, 
  
    
      
        
          z
        
      
    
    {\displaystyle {\text{z}}}
  
 gets removed from the tree.
If 
  
    
      
        
          z
        
      
    
    {\displaystyle {\text{z}}}
  
 has both a left and right child, the successor of 
  
    
      
        
          z
        
      
    
    {\displaystyle {\text{z}}}
  
 (let it be 
  
    
      
        
          y
        
      
    
    {\displaystyle {\text{y}}}
  
) takes the position of 
  
    
      
        
          z
        
      
    
    {\displaystyle {\text{z}}}
  
 in the tree. This depends on the position of 
  
    
      
        
          y
        
      
    
    {\displaystyle {\text{y}}}
  
 within the BST:[5]:â296â
If 
  
    
      
        
          y
        
      
    
    {\displaystyle {\text{y}}}
  
 is 
  
    
      
        
          z
        
      
    
    {\displaystyle {\text{z}}}
  
's immediate right child, 
  
    
      
        
          y
        
      
    
    {\displaystyle {\text{y}}}
  
 gets elevated and 
  
    
      
        
          y
        
      
    
    {\displaystyle {\text{y}}}
  
's left child made point to 
  
    
      
        
          z
        
      
    
    {\displaystyle {\text{z}}}
  
's initial left sub-tree, as shown in fig. 2 part (c).
If 
  
    
      
        
          y
        
      
    
    {\displaystyle {\text{y}}}
  
 isn't the immediate right child of 
  
    
      
        
          z
        
      
    
    {\displaystyle {\text{z}}}
  
, deletion proceeds by replacing the position of 
  
    
      
        
          y
        
      
    
    {\displaystyle {\text{y}}}
  
 by its right child, and 
  
    
      
        
          y
        
      
    
    {\displaystyle {\text{y}}}
  
 takes the position of 
  
    
      
        
          z
        
      
    
    {\displaystyle {\text{z}}}
  
 in the BST, as shown in fig. 2 part (d).
Following is a pseudocode for the deletion operation in a binary search tree.[5]:â296-298â





1    Tree-Delete(T, z)
2      if z.left = NIL then
3        Subtree-Shift(T, z, z.right)
4      else if z.right = NIL then
5        Subtree-Shift(T, z, z.left)
6      else
7        yÂ := Tree-Successor(z)
8        if y.parent â  z then
9          Subtree-Shift(T, y, y.right)
10         y.rightÂ := z.right
11         y.right.parentÂ := y
12       end if
13       Subtree-Shift(T, z, y)
14       y.leftÂ := z.left
15       y.left.parentÂ := y
16     end if



1    Subtree-Shift(T, u, v)
2      if u.parent = NIL then
3        T.rootÂ := v
4      else if u = u.parent.left then
5        u.parent.leftÂ := v
5      else
6        u.parent.rightÂ := v
7      end if
8      if v â  NIL then
9        v.parentÂ := u.parent
10     end if


The 
  
    
      
        
          Tree-Delete
        
      
    
    {\displaystyle {\text{Tree-Delete}}}
  
 procedure deals with the 3 special cases mentioned above. Lines 2-3 deal with case 1; lines 4-5 deal with case 2 and lines 6-16 for case 3. The helper function 
  
    
      
        
          Tree-Shift
        
      
    
    {\displaystyle {\text{Tree-Shift}}}
  
 is used within the deletion algorithm for the purpose of replacing the node 
  
    
      
        
          u
        
      
    
    {\displaystyle {\text{u}}}
  
 with 
  
    
      
        
          v
        
      
    
    {\displaystyle {\text{v}}}
  
 in the binary search tree 
  
    
      
        
          T
        
      
    
    {\displaystyle {\text{T}}}
  
.[5]:â298â This procedure handles the deletion (and substitution) of 
  
    
      
        
          u
        
      
    
    {\displaystyle {\text{u}}}
  
 from the BST.

Traversal[edit]
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}Main article: Tree traversal
A BST can be traversed through three basic algorithms: inorder, preorder, and postorder tree walks.[5]:â287â

Inorder tree walk:  Nodes from the left subtree get visited first, followed by the root node and right subtree.
Preorder tree walk: The root node gets visited first, followed by left and right subtrees.
Postorder tree walk: Nodes from the left subtree get visited first, followed by the right subtree, and finally the root.
Following is a recursive implementation of the tree walks.[5]:â287â289â





 Inorder-Tree-Walk(x)
   if x â  NIL then
     Inorder-Tree-Walk(x.left)
     visit node
     Inorder-Tree-Walk(x.right)
   end if



 Preorder-Tree-Walk(x)
   if x â  NIL then
     visit node
     Preorder-Tree-Walk(x.left)
     Preorder-Tree-Walk(x.right)
   end if



 Postorder-Tree-Walk(x)
   if x â  NIL then
     Postorder-Tree-Walk(x.left)
     Postorder-Tree-Walk(x.right)
     visit node
   end if


Examples of applications[edit]
Sort[edit]
Main article: Tree sort
A binary search tree can be used in sorting algorithm implementation. The process involves inserting all the elements which are to be sorted and performing inorder traversal. This method is similar to that of quicksort where each node corresponds to a partitioning item that subdivides its descendants into smaller keys and larger keys.[7]

Priority queue operations[edit]
Main article: Priority queue
Binary search trees are used in implementing priority queues, using the element or node's key as priorities. Adding new elements to the queue follows the regular BST 
  
    
      
        
          Tree-Insert
        
      
    
    {\displaystyle {\text{Tree-Insert}}}
  
 operation; but the removal operation depends on the type of priority queue:[8]

If it's an ascending order priority queue, removal of an element with the lowest priority is done through leftward traversal of the BST i.e. 
  
    
      
        
          Tree-MinimumÂ 
        
      
    
    {\displaystyle {\text{Tree-Minimum }}}
  
.
On the other hand, if it's a descending order priority queue, removal of an element with the highest priority is done through rightward traversal of the BST i.e. 
  
    
      
        
          Tree-MaximumÂ 
        
      
    
    {\displaystyle {\text{Tree-Maximum }}}
  
.
Types[edit]
There are many types of binary search trees.
Self-balancing binary search trees modify the basic insertion and deletion operations of binary search trees, often using additional information on each node, in order to maintain logarithmic depth. These include two early structures of this type, AVL trees, which maintain an invariant that subtree heights differ by at most one, and red-black trees, which instead color nodes red or black and maintain an invariant on the number of colored nodes on each root-to-leaf path. These two types of trees are unified in the WAVL tree. 
The T-tree is a height-balanced binary search tree optimized to reduce storage space overhead which are used for in-memory databases.[9] 
Weight-balanced trees achieve (a worst-case logarithmic time bound for searching and) constant time bounds (in an amortized sense: summing over whole sequences of operations rather than analysing the time for each operation independently) for the update[10] operations, but can be more flexible as part of recursive structures used in range searching. When keys are inserted in a random order to a non-self-balancing binary tree, or drawn independently from a random distribution, without deletions, the resulting random binary search tree has both logarithmic expected depth, and logarithmic worst-case depth with high probability. 
The treap (tree heap) is a self-balancing version of binary search trees that obtains the same behavior for worst-case operations, by assigning random priorities to each key and using the priorities to structure the tree as a Cartesian tree, with higher priorities at each node than at its children.
Certain types of self-balancing binary search trees have been designed to take advantage of non-uniform access patterns by handling frequently requested keys more quickly. The performance of these online binary search trees can be analyzed by their competitive ratio, the maximum possible ratio of its running time on a sequence of access requests compared to the time of the best possible self-balancing binary search tree for the same access request. Splay trees have been conjectured to have a constant competitive ratio, but this has not been proven. The geometry of binary search trees gives a way of reformulating these problems geometrically, in terms of augmenting point sets to avoid axis-parallel rectangles with only two diagonal vertices present in the augmented set. Another online binary search tree, the tango tree, is inspired by this geometric formulation, and has been proven to achieve an 
  
    
      
        O
        (
        log
        â¡
        log
        â¡
        n
        )
      
    
    {\displaystyle O(\log \log n)}
  
 competitive ratio, while only using 
  
    
      
        O
        (
        log
        â¡
        log
        â¡
        n
        )
      
    
    {\displaystyle O(\log \log n)}
  
 additional bits of memory per node.[11]
A binary search tree may be "degenerate", by having only left children at every node, or by having only right children at every node. When the resulting degenerate binary search tree contains 
  
    
      
        n
      
    
    {\displaystyle n}
  
 nodes it has height of 
  
    
      
        n
        â
        1
      
    
    {\displaystyle n-1}
  
. The performance or time complexity of a lookup operation is essentially identical with that of a linear search i.e. 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
  
, which is alike that of data structures like arrays or linked lists.[12]

Performance comparisons[edit]
In regards to performance characteristics of binary search trees, a study shows that treaps perform better on average case, while redâblack tree was found to have the smallest number of performance variations.[13]

Optimal binary search trees[edit]
Main article: Optimal binary search tree
Optimal binary search tree is a theoretical computer science problem which deals with constructing an "optimal" binary search trees that enables smallest possible search time for a given sequence of accesses.[14]:â449â450â The computational cost required to maintain an "optimal" search tree can be justified if search is more dominant activity in the tree than insertion or deletion.[15][14]:â449â

Threaded binary trees[edit]
Main article: Threaded binary tree
A threaded binary search tree is an accessorial version of a binary tree whose 
  
    
      
        
          nil
        
      
    
    {\displaystyle {\text{nil}}}
  
 pointersâeither left or right fields of a nodeâpoints to the inorder successor or inorder predecessor of the given nodes such that efficient utilization of the placeholders fields are performed.[4]:â311-312â Threading is classified into two categories:[4]:â312â

One-way threading: The left or right pointer field of the nodes, holds a reference to the inorder predecessor or inorder successor, but not both.
Two-way threading: The left and right pointer fields hold the references to the inorder predecessor and inorder successor respectively.
See also[edit]
.mw-parser-output .div-col{margin-top:0.3em;column-width:30em}.mw-parser-output .div-col-small{font-size:90%}.mw-parser-output .div-col-rules{column-rule:1px solid #aaa}.mw-parser-output .div-col dl,.mw-parser-output .div-col ol,.mw-parser-output .div-col ul{margin-top:0}.mw-parser-output .div-col li,.mw-parser-output .div-col dd{page-break-inside:avoid;break-inside:avoid-column}
Binary search algorithm
Search tree
Join-based tree algorithms
Weight-balanced tree

Notes[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

References[edit]


^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Culberson, J.; Munro, J. I. (1 January 1989). "Explaining the Behaviour of Binary Search Trees Under Prolonged Updates: A Model and Simulations". The Computer Journal. 32 (1): 68-69. doi:10.1093/comjnl/32.1.68.

^ Culberson, J.; Munro, J. I. (28 July 1986). "Analysis of the standard deletion algorithms in exact fit domain binary search trees". Algorithmica. Springer Publishing, University of Waterloo: 297. doi:10.1007/BF01840390.

^ P. F. Windley (1 January 1960). "Trees, Forests and Rearranging". The Computer Journal. 3 (2): 84. doi:10.1093/comjnl/3.2.84.

^ Jump up to: a b c d Thareja, Reema (13 October 2018). "Hashing and Collision". Data Structures Using C (2Â ed.). Oxford University Press. ISBNÂ 9780198099307.

^ Jump up to: a b c d e f g h i j k l m n o Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; Stein, Clifford (2001). Introduction to Algorithms (2ndÂ ed.). MIT Press. ISBNÂ 0-262-03293-7.

^ R. A. Frost; M. M. Peterson (1 February 1982). "A Short Note on Binary Search Trees". The Computer Journal. Oxford University Press. 25 (1): 158. doi:10.1093/comjnl/25.1.158.

^ Narayanan, Arvind (2019). "COS226: Binary search trees". Princeton University School of Engineering and Applied Science. Archived from the original on 22 March 2021. Retrieved 21 October 2021 â via cs.princeton.edu.

^ Myers, Andrew. "CS 2112 Lecture and Recitation Notes: Priority Queues and Heaps". Cornell University, Department of Computer Science. Archived from the original on 21 October 2021. Retrieved 21 October 2021.

^ Lehman, Tobin J.; Carey, Michael J. (25â28 August 1986). A Study of Index Structures for Main Memory Database Management Systems. Twelfth International Conference on Very Large Databases (VLDB 1986). Kyoto. ISBNÂ 0-934613-18-4.

^ Blum, Norbert; Mehlhorn, Kurt (1978). "On the Average Number of Rebalancing Operations in Weight-Balanced Trees" (PDF). Theoretical Computer Science. 11 (3): 303â320. doi:10.1016/0304-3975(80)90018-3.

^ Demaine, E. D.; Harmon, D.; Iacono, J.; PÄtraÅcu, M. (2007). "Dynamic OptimalityâAlmost" (PDF). SIAM Journal on Computing. 37 (1): 240. doi:10.1137/S0097539705447347. S2CIDÂ 1480961. Archived (PDF) from the original on 27 February 2021 â via erikdemaine.org.

^ Thornton, Alex (2021). "ICS 46: Binary Search Trees". University of California, Irvine. Archived from the original on 4 July 2021. Retrieved 21 October 2021.

^ Heger, Dominique A. (2004), "A Disquisition on The Performance Behavior of Binary Search Tree Data Structures" (PDF), European Journal for the Informatics Professional, 5 (5): 67â75, archived from the original (PDF) on 2014-03-27, retrieved 2010-10-16 â via Archive.org

^ Jump up to: a b Korah, A.P.; Kaimal, M.R. (1990). "Dynamic Optimal Binary Search Tree". International Journal of Foundations of Computer Science. 1 (4): 449â463. doi:10.1142/S0129054190000308 â via World Scientific.

^ Gonnet, Gaston. "Optimal Binary Search Trees". Scientific Computation. ETH ZÃ¼rich. Archived from the original on 12 October 2014. Retrieved 1 December 2013.


Further reading[edit]
Â This article incorporates public domain materialÂ from theÂ NIST document:Â Black, Paul E. "Binary Search Tree". Dictionary of Algorithms and Data Structures.
Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; Stein, Clifford (2001). "12: Binary search trees, 15.5: Optimal binary search trees". Introduction to Algorithms (2ndÂ ed.). MIT Press. pp.Â 253â272, 356â363. ISBNÂ 0-262-03293-7.
Jarc, Duane J. (3 December 2005). "Binary Tree Traversals". Interactive Data Structure Visualizations. University of Maryland. Archived from the original on 27 February 2014. Retrieved 30 April 2006.
Knuth, Donald (1997). "6.2.2: Binary Tree Searching". The Art of Computer Programming. Vol.Â 3: "Sorting and Searching" (3rdÂ ed.). Addison-Wesley. pp.Â 426â458. ISBNÂ 0-201-89685-0.
Long, Sean. "Binary Search Tree" (PPT). Data Structures and Algorithms Visualization-A PowerPoint Slides Based Approach. SUNY Oneonta.
Parlante, Nick (2001). "Binary Trees". CS Education Library. Stanford University. Archived from the original on 2022-01-30.
External links[edit]



Wikimedia Commons has media related to Binary search trees.

 Ben Pfaff: An Introduction to Binary Search Trees and Balanced Trees. (PDF; 1675Â kB) 2004.
Binary Tree Visualizer (JavaScript animation of various BT-based data structures)
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}show.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteTree data structuresSearch trees(dynamic sets/associative arrays)
2â3
2â3â4
AA
(a,b)
AVL
B
B+
B*
Bx
(Optimal)Â Binary search
Dancing
HTree
Interval
Order statistic
(Left-leaning)Â Redâblack
Scapegoat
Splay
T
Treap
UB
Weight-balanced
Heaps
Binary
Binomial
Brodal
Fibonacci
Leftist
Pairing
Skew
van Emde Boas
Weak
Tries
Ctrie
C-trie (compressed ADT)
Hash
Radix
Suffix
Ternary search
X-fast
Y-fast
Spatial data partitioning trees
Ball
BK
BSP
Cartesian
Hilbert R
k-d (implicit k-d)
M
Metric
MVP
Octree
Priority R
Quad
R
R+
R*
Segment
VP
X
Other trees
Cover
Exponential
Fenwick
Finger
Fractal tree index
Fusion
Hash calendar
iDistance
K-ary
Left-child right-sibling
Link/cut
Log-structured merge
Merkle
PQ
Range
SPQR
Top

showvteWell-known data structuresTypes
Collection
Container
Abstract
Associative array
Multimap
Retrieval Data Structure
List
Stack
Queue
Double-ended queue
Priority queue
Double-ended priority queue
Set
Multiset
Disjoint-set
Arrays
Bit array
Circular buffer
Dynamic array
Hash table
Hashed array tree
Sparse matrix
Linked
Association list
Linked list
Skip list
Unrolled linked list
XOR linked list
Trees
B-tree
Binary search tree
AA tree
AVL tree
Redâblack tree
Self-balancing tree
Splay tree
Heap
Binary heap
Binomial heap
Fibonacci heap
R-tree
R* tree
R+ tree
Hilbert R-tree
Trie
Hash tree
Graphs
Binary decision diagram
Directed acyclic graph
Directed acyclic word graph

List of data structures





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Binary_search_tree&oldid=1068869867"
		Categories: Binary treesData typesSearch treesHidden categories: Articles with short descriptionShort description is different from WikidataCS1: long volume valueCommons category link is on WikidataArticles with example C++ codeArticles with example Python (programming language) code
	
