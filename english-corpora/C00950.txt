
Title:
Q (number format)
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources:Â "Q"Â number formatÂ âÂ newsÂ Â· newspapersÂ Â· booksÂ Â· scholarÂ Â· JSTOR  (May 2015) (Learn how and when to remove this template message)


The Q notation is a succinct way to specify the parameters of a binary fixed point number format.  A number of other notations have been used for the same purpose.

Contents

1 Definition

1.1 Texas Instruments version
1.2 AMD version


2 Characteristics
3 Math operations

3.1 Addition
3.2 Subtraction
3.3 Multiplication
3.4 Division


4 See also
5 References
6 Further reading
7 External links



Definition[edit]
Texas Instruments version[edit]
The Q notation, as defined by Texas Instruments,[citation needed] consists of the letter .mw-parser-output .monospaced{font-family:monospace,monospace}Q followed by a pair of numbers m.n, where m is the number of bits used for the integer part of the value, and n is the number of fraction bits. 
By default, the notation describes signed binary fixed point format, with the unscaled integer being stored  in two's complement format, used in most binary processors. The first bit always gives the sign of the value(1 = negative, 0 = non-negative), and it is not counted in the m parameter.  Thus the total  number w of bits used is 1 + m + n.
For example, the specification Q3.12 describes a signed binary fixed-point number with a w = 16 bits in total, comprising the sign bit, three bits for the integer part, and 12 bits that are assumed to be fraction. That is, a 16-bit signed (two's complement) integer, that is implicitly multiplied by the scaling factor 2â12   
In particular, when n is zero, the numbers are just integers. â  If m is zero, all bits except the sign bit are fraction bits; then the range of the stored number is from â1.0 (inclusive) to +1 (exclusive).  Both m and n may be negative
The m and the dot may be omitted, in which case they are inferred from the size of the variable or register where the value is stored. Thus Q12 means a signed integer with any number of bits, that is implicitly multiplied by 2â12.
The letter U can be prefixed to the Q to denote an unsigned binary fixed-point format.  For example, UQ1.15 describes values represented as unsigned 16-bit integers with implicit scaling factor of 2â15, which range from 0.0 to (216â1)/215 = +1.999969482421875.

AMD version[edit]
A variant of the Q notation has been in use by AMD.  In this variant, the m number includes the sign bit. For example, a 16-bit signed integer would be denoted Q15.0 in the TI variant, but  Q16.0 in the AMD variant.[1][2]

Characteristics[edit]
The resolution (difference between successive values) of a Qm.n or UQm.n format (both used AMD convention) is always 2ân.  The range of representable values is

â2mâ1 to +2mâ1 â 2ân for signed format, and
0 to 2m â 2ân for the unsigned format.
For example, a Q15.1 format number requires 15+1 = 16 bits, has resolution 2â1 = 0.5, and the representable values range from â214 = â16384.0 to +214  â 2â1 = +16383.5. In hexadecimal, the negative values range from 0x8000 to 0xFFFF followed by the non-negative ones from 0x0000 to 0x7FFF.

Math operations[edit]
Q numbers are a ratio of two integers: the numerator is kept in storage, the denominator 
  
    
      
        d
      
    
    {\displaystyle d}
  
 is equal to 2n.
Consider the following example:

The Q8 denominator equals 28 = 256
1.5 equals 384/256
384 is stored, 256 is inferred because it is a Q8 number.
If the Q number's base is to be maintained (n remains constant) the Q number math operations must keep the denominator 
  
    
      
        d
      
    
    {\displaystyle d}
  
 constant. The following formulas show math operations on the general Q numbers 
  
    
      
        
          N
          
            1
          
        
      
    
    {\displaystyle N_{1}}
  
 and 
  
    
      
        
          N
          
            2
          
        
      
    
    {\displaystyle N_{2}}
  
. (If we consider the example as mentioned above, 
  
    
      
        
          N
          
            1
          
        
      
    
    {\displaystyle N_{1}}
  
 is 384 and 
  
    
      
        d
      
    
    {\displaystyle d}
  
 is 256.)

  
    
      
        
          
            
              
                
                  
                    
                      N
                      
                        1
                      
                    
                    d
                  
                
                +
                
                  
                    
                      N
                      
                        2
                      
                    
                    d
                  
                
              
              
                
                =
                
                  
                    
                      
                        N
                        
                          1
                        
                      
                      +
                      
                        N
                        
                          2
                        
                      
                    
                    d
                  
                
              
            
            
              
                
                  
                    
                      N
                      
                        1
                      
                    
                    d
                  
                
                â
                
                  
                    
                      N
                      
                        2
                      
                    
                    d
                  
                
              
              
                
                =
                
                  
                    
                      
                        N
                        
                          1
                        
                      
                      â
                      
                        N
                        
                          2
                        
                      
                    
                    d
                  
                
              
            
            
              
                
                  (
                  
                    
                      
                        
                          N
                          
                            1
                          
                        
                        d
                      
                    
                    Ã
                    
                      
                        
                          N
                          
                            2
                          
                        
                        d
                      
                    
                  
                  )
                
                Ã
                d
              
              
                
                =
                
                  
                    
                      
                        N
                        
                          1
                        
                      
                      Ã
                      
                        N
                        
                          2
                        
                      
                    
                    d
                  
                
              
            
            
              
                
                  (
                  
                    
                      
                        
                          N
                          
                            1
                          
                        
                        d
                      
                    
                    
                      /
                    
                    
                      
                        
                          N
                          
                            2
                          
                        
                        d
                      
                    
                  
                  )
                
                
                  /
                
                d
              
              
                
                =
                
                  
                    
                      
                        N
                        
                          1
                        
                      
                      
                        /
                      
                      
                        N
                        
                          2
                        
                      
                    
                    d
                  
                
              
            
          
        
      
    
    {\displaystyle {\begin{aligned}{\frac {N_{1}}{d}}+{\frac {N_{2}}{d}}&={\frac {N_{1}+N_{2}}{d}}\\{\frac {N_{1}}{d}}-{\frac {N_{2}}{d}}&={\frac {N_{1}-N_{2}}{d}}\\\left({\frac {N_{1}}{d}}\times {\frac {N_{2}}{d}}\right)\times d&={\frac {N_{1}\times N_{2}}{d}}\\\left({\frac {N_{1}}{d}}/{\frac {N_{2}}{d}}\right)/d&={\frac {N_{1}/N_{2}}{d}}\end{aligned}}}
  

Because the denominator is a power of two, the multiplication can be implemented as an arithmetic shift to the left and the division as an arithmetic shift to the right; on many processors shifts are faster than multiplication and division.
To maintain accuracy, the intermediate multiplication and division results must be double precision and care must be taken in rounding the intermediate result before converting back to the desired Q number.
Using C the operations are (note that here, Q refers to the fractional part's number of bits)Â :

Addition[edit]
int16_t q_add(int16_t a, int16_t b)
{
    return a + b;
}

With saturation

int16_t q_add_sat(int16_t a, int16_t b)
{
    int16_t result;
    int32_t tmp;

    tmp = (int32_t)a + (int32_t)b;
    if (tmp > 0x7FFF)
        tmp = 0x7FFF;
    if (tmp < -1 * 0x8000)
        tmp = -1 * 0x8000;
    result = (int16_t)tmp;

    return result;
}

Unlike floating point Â±Inf, saturated results are not sticky and will unsaturate on adding a negative value to a positive saturated value (0x7FFF) and vice versa in that implementation shown. In assembly language, the Signed Overflow flag can be used to avoid the typecasts needed for that C implementation.

Subtraction[edit]
int16_t q_sub(int16_t a, int16_t b)
{
    return a - b;
}

Multiplication[edit]
// precomputed value:
#define K   (1 << (Q - 1))
 
// saturate to range of int16_t
int16_t sat16(int32_t x)
{
	if (x > 0x7FFF) return 0x7FFF;
	else if (x < -0x8000) return -0x8000;
	else return (int16_t)x;
}

int16_t q_mul(int16_t a, int16_t b)
{
    int16_t result;
    int32_t temp;

    temp = (int32_t)a * (int32_t)b; // result type is operand's type
    // Rounding; mid values are rounded up
    temp += K;
    // Correct by dividing by base and saturate result
    result = sat16(temp >> Q);

    return result;
}

Division[edit]
int16_t q_div(int16_t a, int16_t b)
{
    /* pre-multiply by the base (Upscale to Q16 so that the result will be in Q8 format) */
    int32_t temp = (int32_t)a << Q;
    /* Rounding: mid values are rounded up (down for negative values). */
    /* OR compare most significant bits i.e. if (((temp >> 31) & 1) == ((b >> 15) & 1)) */
    if ((temp >= 0 && b >= 0) || (temp < 0 && b < 0)) {   
        temp += b / 2;    /* OR shift 1 bit i.e. temp += (b >> 1); */
    } else {
        temp -= b / 2;    /* OR shift 1 bit i.e. temp -= (b >> 1); */
    }
    return (int16_t)(temp / b);
}

See also[edit]
Fixed-point arithmetic
Floating-point arithmetic
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}"ARM Developer Suite AXD and armsd Debuggers Guide". 1.2. ARM Limited. 2001 [1999]. Chapter 4.7.9. AXD > AXD Facilities > Data formatting > Q-format. ARM DUI 0066D. Archived from the original on 2017-11-04.

^ "Chapter 4.7.9. AXD > AXD Facilities > Data formatting > Q-format". RealView Development Suite AXD and armsd Debuggers Guide (PDF). 3.0. ARM Limited. 2006 [1999]. pp.Â 4â24. ARM DUI 0066G. Archived (PDF) from the original on 2017-11-04.


Further reading[edit]
Oberstar, Erick L. (2007-08-30) [2004]. "Fixed Point Representation & Fractional Math" (PDF). 1.2. Oberstar Consulting. Archived (PDF) from the original on 2017-11-04. Retrieved 2017-11-04. (Note: the accuracy of the article is in dispute; see discussion.)
External links[edit]
"Q-Number-Format Java Implementation". Archived from the original on 2017-11-04. Retrieved 2017-11-04.
"Q-format Converter". Archived from the original on 2021-06-25. Retrieved 2021-06-25.




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Q_(number_format)&oldid=1063407771"
		Categories: Computer arithmeticHidden categories: Articles needing additional references from May 2015All articles needing additional referencesUse dmy dates from May 2019Use list-defined references from January 2022All articles with unsourced statementsArticles with unsourced statements from July 2021
	
