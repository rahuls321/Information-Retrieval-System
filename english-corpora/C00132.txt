
Title:
Exclusive or
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		True when either but not both inputs are true


.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}"XOR" redirects here. For the logic gate, see XOR gate. For other uses, see XOR (disambiguation).
This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources:Â "Exclusive or"Â âÂ newsÂ Â· newspapersÂ Â· booksÂ Â· scholarÂ Â· JSTOR  (May 2013) (Learn how and when to remove this template message)
.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}Exclusive orXORTruth table
  
    
      
        (
        0110
        )
      
    
    {\displaystyle (0110)}
  
Logic gateNormal formsDisjunctive
  
    
      
        
          
            x
            Â¯
          
        
        â
        y
        +
        x
        â
        
          
            y
            Â¯
          
        
      
    
    {\displaystyle {\overline {x}}\cdot y+x\cdot {\overline {y}}}
  
Conjunctive
  
    
      
        (
        
          
            x
            Â¯
          
        
        +
        
          
            y
            Â¯
          
        
        )
        â
        (
        x
        +
        y
        )
      
    
    {\displaystyle ({\overline {x}}+{\overline {y}})\cdot (x+y)}
  
Zhegalkin polynomial
  
    
      
        x
        â
        y
      
    
    {\displaystyle x\oplus y}
  
Post's lattices0-preservingyes1-preservingnoMonotonenoAffineyes.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vte
  Venn diagram of 
  
    
      
        
          A
          â
          B
          â
          C
        
      
    
    {\displaystyle \scriptstyle A\oplus B\oplus C}
  

Exclusive or or exclusive disjunction is a logical operation that is true if and only if its arguments differ (one is true, the other is false).[1]
It is symbolized by the prefix operator J[2] and by the infix operators XOR (/ËÉks ËÉËr/ or /ËzÉËr/), EOR, EXOR, â», â©, â©, â, 
  
    
      
        â®
      
    
    {\displaystyle \nleftrightarrow }
  
, and â¢. The negation of XOR is the logical biconditional, which yields true if and only if the two inputs are the same.
It gains the name "exclusive or" because the meaning of "or" is ambiguous when both operands are true; the exclusive or operator excludes that case. This is sometimes thought of as "one or the other but not both". This could be written as "A or B, but not, A and B".
Since it is associative, it may be considered to be an n-ary operator which is true if and only if an odd number of arguments are true. That is, a XOR b XOR ... may be treated as XOR(a,b,...).

Contents

1 Truth table
2 Equivalences, elimination, and introduction
3 Negation
4 Relation to modern algebra
5 Exclusive "or" in natural language
6 Alternative symbols
7 Properties
8 Computer science

8.1 Bitwise operation


9 Encodings
10 See also
11 Notes
12 External links



Truth table
  Arguments on the left combined by XOR. This is a binary Walsh matrix (cf. Hadamard code).
The truth table of A XOR B shows that it outputs true whenever the inputs differ:


XOR truth table


Input
Output


A
B


0
0
0


0
1
1


1
0
1


1
1
0

0, false
1, true
Equivalences, elimination, and introduction
Exclusive disjunction essentially means 'either one, but not both nor none'. In other words, the statement is true if and only if one is true and the other is false. For example, if two horses are racing, then one of the two will win the race, but not both of them. The exclusive disjunction 
  
    
      
        p
        â®
        q
      
    
    {\displaystyle p\nleftrightarrow q}
  
, also denoted by 
  
    
      
        p
      
    
    {\displaystyle p}
  
 ? 
  
    
      
        q
      
    
    {\displaystyle q}
  
 or 
  
    
      
        J
        â¡
        p
        q
      
    
    {\displaystyle \operatorname {J} pq}
  
, can be expressed in terms of the logical conjunction ("logical and", 
  
    
      
        â§
      
    
    {\displaystyle \wedge }
  
), the disjunction ("logical or", 
  
    
      
        â¨
      
    
    {\displaystyle \lor }
  
), and the negation (
  
    
      
        Â¬
      
    
    {\displaystyle \lnot }
  
) as follows:


  
    
      
        
          
            
              
                p
                â®
                q
              
              
                =
              
              
                (
                p
                â¨
                q
                )
                â§
                Â¬
                (
                p
                â§
                q
                )
              
            
          
        
      
    
    {\displaystyle {\begin{matrix}p\nleftrightarrow q&=&(p\lor q)\land \lnot (p\land q)\end{matrix}}}
  

The exclusive disjunction 
  
    
      
        p
        â®
        q
      
    
    {\displaystyle p\nleftrightarrow q}
  
 can also be expressed in the following way:


  
    
      
        
          
            
              
                p
                â®
                q
              
              
                =
              
              
                (
                p
                â§
                Â¬
                q
                )
                â¨
                (
                Â¬
                p
                â§
                q
                )
              
            
          
        
      
    
    {\displaystyle {\begin{matrix}p\nleftrightarrow q&=&(p\land \lnot q)\lor (\lnot p\land q)\end{matrix}}}
  

This representation of XOR may be found useful when constructing a circuit or network, because it has only one 
  
    
      
        Â¬
      
    
    {\displaystyle \lnot }
  
 operation and small number of 
  
    
      
        â§
      
    
    {\displaystyle \wedge }
  
 and 
  
    
      
        â¨
      
    
    {\displaystyle \lor }
  
 operations. A proof of this identity is given below:


  
    
      
        
          
            
              
                p
                â®
                q
              
              
                =
              
              
                (
                p
                â§
                Â¬
                q
                )
              
              
                â¨
              
              
                (
                Â¬
                p
                â§
                q
                )
              
            
            
              
              
                =
              
              
                (
                (
                p
                â§
                Â¬
                q
                )
                â¨
                Â¬
                p
                )
              
              
                â§
              
              
                (
                (
                p
                â§
                Â¬
                q
                )
                â¨
                q
                )
              
            
            
              
              
                =
              
              
                (
                (
                p
                â¨
                Â¬
                p
                )
                â§
                (
                Â¬
                q
                â¨
                Â¬
                p
                )
                )
              
              
                â§
              
              
                (
                (
                p
                â¨
                q
                )
                â§
                (
                Â¬
                q
                â¨
                q
                )
                )
              
            
            
              
              
                =
              
              
                (
                Â¬
                p
                â¨
                Â¬
                q
                )
              
              
                â§
              
              
                (
                p
                â¨
                q
                )
              
            
            
              
              
                =
              
              
                Â¬
                (
                p
                â§
                q
                )
              
              
                â§
              
              
                (
                p
                â¨
                q
                )
              
            
          
        
      
    
    {\displaystyle {\begin{matrix}p\nleftrightarrow q&=&(p\land \lnot q)&\lor &(\lnot p\land q)\\[3pt]&=&((p\land \lnot q)\lor \lnot p)&\land &((p\land \lnot q)\lor q)\\[3pt]&=&((p\lor \lnot p)\land (\lnot q\lor \lnot p))&\land &((p\lor q)\land (\lnot q\lor q))\\[3pt]&=&(\lnot p\lor \lnot q)&\land &(p\lor q)\\[3pt]&=&\lnot (p\land q)&\land &(p\lor q)\end{matrix}}}
  

It is sometimes useful to write 
  
    
      
        p
        â®
        q
      
    
    {\displaystyle p\nleftrightarrow q}
  
 in the following way:


  
    
      
        
          
            
              
                p
                â®
                q
              
              
                =
              
              
                Â¬
                (
                (
                p
                â§
                q
                )
                â¨
                (
                Â¬
                p
                â§
                Â¬
                q
                )
                )
              
            
          
        
      
    
    {\displaystyle {\begin{matrix}p\nleftrightarrow q&=&\lnot ((p\land q)\lor (\lnot p\land \lnot q))\end{matrix}}}
  

or:


  
    
      
        
          
            
              
                p
                â®
                q
              
              
                =
              
              
                (
                p
                â¨
                q
                )
                â§
                (
                Â¬
                p
                â¨
                Â¬
                q
                )
              
            
          
        
      
    
    {\displaystyle {\begin{matrix}p\nleftrightarrow q&=&(p\lor q)\land (\lnot p\lor \lnot q)\end{matrix}}}
  

This equivalence can be established by applying De Morgan's laws twice to the fourth line of the above proof.
The exclusive or is also equivalent to the negation of a logical biconditional, by the rules of material implication (a material conditional is equivalent to the disjunction of the negation of its antecedent and its consequence) and material equivalence.
In summary, we have, in mathematical and in engineering notation:


  
    
      
        
          
            
              
                p
                â®
                q
              
              
                =
              
              
                (
                p
                â§
                Â¬
                q
                )
              
              
                â¨
              
              
                (
                Â¬
                p
                â§
                q
                )
              
              
                =
              
              
                p
                
                  
                    q
                    Â¯
                  
                
                +
                
                  
                    p
                    Â¯
                  
                
                q
              
            
            
              
              
                =
              
              
                (
                p
                â¨
                q
                )
              
              
                â§
              
              
                (
                Â¬
                p
                â¨
                Â¬
                q
                )
              
              
                =
              
              
                (
                p
                +
                q
                )
                (
                
                  
                    p
                    Â¯
                  
                
                +
                
                  
                    q
                    Â¯
                  
                
                )
              
            
            
              
              
                =
              
              
                (
                p
                â¨
                q
                )
              
              
                â§
              
              
                Â¬
                (
                p
                â§
                q
                )
              
              
                =
              
              
                (
                p
                +
                q
                )
                (
                
                  
                    
                      p
                      q
                    
                    Â¯
                  
                
                )
              
            
          
        
      
    
    {\displaystyle {\begin{matrix}p\nleftrightarrow q&=&(p\land \lnot q)&\lor &(\lnot p\land q)&=&p{\overline {q}}+{\overline {p}}q\\[3pt]&=&(p\lor q)&\land &(\lnot p\lor \lnot q)&=&(p+q)({\overline {p}}+{\overline {q}})\\[3pt]&=&(p\lor q)&\land &\lnot (p\land q)&=&(p+q)({\overline {pq}})\end{matrix}}}
  

Negation
The spirit of De Morgan's laws can be applied, we have:

  
    
      
        Â¬
        (
        p
        â®
        q
        )
        =
        Â¬
        p
        â®
        q
        =
        p
        â®
        Â¬
        q
      
    
    {\displaystyle \lnot (p\nleftrightarrow q)=\lnot p\nleftrightarrow q=p\nleftrightarrow \lnot q}
  


Relation to modern algebra
Although the operators 
  
    
      
        â§
      
    
    {\displaystyle \wedge }
  
 (conjunction) and 
  
    
      
        â¨
      
    
    {\displaystyle \lor }
  
 (disjunction) are very useful in logic systems, they fail a more generalizable structure in the following way:
The systems 
  
    
      
        (
        {
        T
        ,
        F
        }
        ,
        â§
        )
      
    
    {\displaystyle (\{T,F\},\wedge )}
  
 and 
  
    
      
        (
        {
        T
        ,
        F
        }
        ,
        â¨
        )
      
    
    {\displaystyle (\{T,F\},\lor )}
  
 are monoids, but neither is a group. This unfortunately prevents the combination of these two systems into larger structures, such as a mathematical ring.
However, the system using exclusive or 
  
    
      
        (
        {
        T
        ,
        F
        }
        ,
        â
        )
      
    
    {\displaystyle (\{T,F\},\oplus )}
  
 is an abelian group.  The combination of operators 
  
    
      
        â§
      
    
    {\displaystyle \wedge }
  
 and 
  
    
      
        â
      
    
    {\displaystyle \oplus }
  
 over elements 
  
    
      
        {
        T
        ,
        F
        }
      
    
    {\displaystyle \{T,F\}}
  
 produce the well-known field 
  
    
      
        
          F
          
            2
          
        
      
    
    {\displaystyle F_{2}}
  
.  This field can represent any logic obtainable with the system 
  
    
      
        (
        â§
        ,
        â¨
        )
      
    
    {\displaystyle (\land ,\lor )}
  
 and has the added benefit of the arsenal of algebraic analysis tools for fields.
More specifically, if one associates 
  
    
      
        F
      
    
    {\displaystyle F}
  
 with 0 and 
  
    
      
        T
      
    
    {\displaystyle T}
  
 with 1, one can interpret the logical "AND" operation as multiplication on 
  
    
      
        
          F
          
            2
          
        
      
    
    {\displaystyle F_{2}}
  
 and the "XOR" operation as addition on 
  
    
      
        
          F
          
            2
          
        
      
    
    {\displaystyle F_{2}}
  
:


  
    
      
        
          
            
              
                r
                =
                p
                â§
                q
              
              
                â
              
              
                r
                =
                p
                â
                q
                
                  
                  (
                  mod
                  
                  2
                  )
                
              
            
            
              
                r
                =
                p
                â
                q
              
              
                â
              
              
                r
                =
                p
                +
                q
                
                  
                  (
                  mod
                  
                  2
                  )
                
              
            
          
        
      
    
    {\displaystyle {\begin{matrix}r=p\land q&\Leftrightarrow &r=p\cdot q{\pmod {2}}\\[3pt]r=p\oplus q&\Leftrightarrow &r=p+q{\pmod {2}}\\\end{matrix}}}
  

Using this basis to describe a boolean system is referred to as algebraic normal form.

Exclusive "or" in natural language
Disjunction is often understood exclusively in natural languages. In English, the disjunctive word "or" is often understood exclusively, particularly when used with the particle "either". The English example below would normally be understood in conversation as implying that Mary is not both a singer and a poet.[3][4]

1. Mary is a singer or a poet.
However, disjunction can also be understood inclusively, even in combination with "either". For instance, the first example below shows that "either" can be felicitously used in combination with an outright statement that both disjuncts are true. The second example shows that the exclusive inference vanishes away under downward entailing contexts. If disjunction were understood as exclusive in this example, it would leave open the possibility that some people ate both rice and beans.[3]

2. Mary is either a singer or a poet or both.
3. Nobody ate either rice or beans.
Examples such as the above have motivated analyses of the exclusivity inference as pragmatic conversational implicatures calculated on the basis of an inclusive semantics. Implicatures are typically cancellable and do not arise in downward entailing contexts if their calculation depends on the Maxim of Quantity. However, some researchers have treated exclusivity as a bona fide semantic entailment and proposed nonclassical logics which would validate it.[3]
This behavior of English "or" is also found in other languages. However, many languages have disjunctive constructions which are robustly exclusive such as French soit... soit.[3]

Alternative symbols
The symbol used for exclusive disjunction varies from one field of application to the next, and even depends on the properties being emphasized in a given context of discussion.  In addition to the abbreviation "XOR", any of the following symbols may also be seen:

+, a plus sign, which has the advantage that all of the ordinary algebraic properties of mathematical rings and fields can be used without further ado; but the plus sign is also used for inclusive disjunction in some notation systems; note that exclusive disjunction corresponds to addition modulo 2, which has the following addition table, clearly isomorphic to the one above:



Â 
  
    
      
        p
      
    
    {\displaystyle p}
  
Â 

Â 
  
    
      
        q
      
    
    {\displaystyle q}
  
Â 


  
    
      
        p
        +
        q
      
    
    {\displaystyle p+q}
  



0
0
0


0
1
1


1
0
1


1
1
0


  
    
      
        â
      
    
    {\displaystyle \oplus }
  
, a modified plus sign; this symbol is also used in mathematics for the direct sum of algebraic structures
J, as in Jpq
An inclusive disjunction symbol (
  
    
      
        â¨
      
    
    {\displaystyle \lor }
  
) that is modified in some way, such as

  
    
      
        
          
            â¨
            _
          
        
      
    
    {\displaystyle {\underline {\lor }}}
  


  
    
      
        
          
            
              â¨
              Ë
            
          
        
      
    
    {\displaystyle {\dot {\vee }}}
  

^, the caret, used in several programming languages, such as C, C++, C#, D, Java, Perl, Ruby, PHP and Python, denoting the bitwise XOR operator; not used outside of programming contexts because it is too easily confused with other uses of the caret
, sometimes written as
><
>-<
=1, in IEC symbology
Properties

Commutativity: yes
 
  
    
      
        A
        â
        B
      
    
    {\displaystyle A\oplus B}
  
 Â Â Â Â 
  
    
      
        â
      
    
    {\displaystyle \Leftrightarrow }
  
Â Â Â Â  
  
    
      
        B
        â
        A
      
    
    {\displaystyle B\oplus A}
  
  Â Â Â Â 
  
    
      
        â
      
    
    {\displaystyle \Leftrightarrow }
  
Â Â Â Â  

Associativity: yes
 
  
    
      
        Â 
        A
      
    
    {\displaystyle ~A}
  
 
  
    
      
        Â 
        Â 
        Â 
        â
        Â 
        Â 
        Â 
      
    
    {\displaystyle ~~~\oplus ~~~}
  
 
  
    
      
        (
        B
        â
        C
        )
      
    
    {\displaystyle (B\oplus C)}
  
 Â Â Â Â 
  
    
      
        â
      
    
    {\displaystyle \Leftrightarrow }
  
Â Â Â Â  
  
    
      
        (
        A
        â
        B
        )
      
    
    {\displaystyle (A\oplus B)}
  
 
  
    
      
        Â 
        Â 
        Â 
        â
        Â 
        Â 
        Â 
      
    
    {\displaystyle ~~~\oplus ~~~}
  
 
  
    
      
        Â 
        C
      
    
    {\displaystyle ~C}
  
  
  
    
      
        Â 
        Â 
        Â 
        â
        Â 
        Â 
        Â 
      
    
    {\displaystyle ~~~\oplus ~~~}
  
  Â Â Â Â 
  
    
      
        â
      
    
    {\displaystyle \Leftrightarrow }
  
Â Â Â Â   Â Â Â Â 
  
    
      
        â
      
    
    {\displaystyle \Leftrightarrow }
  
Â Â Â Â   
  
    
      
        Â 
        Â 
        Â 
        â
        Â 
        Â 
        Â 
      
    
    {\displaystyle ~~~\oplus ~~~}
  
 

Distributivity:The exclusive or doesn't distribute over any binary function (not even itself), but logical conjunction distributes over exclusive or. 
  
    
      
        C
        â§
        (
        A
        â
        B
        )
        =
        (
        C
        â§
        A
        )
        â
        (
        C
        â§
        B
        )
      
    
    {\displaystyle C\land (A\oplus B)=(C\land A)\oplus (C\land B)}
  
 (Conjunction and exclusive or form the multiplication and addition operations of a field GF(2), and as in any field they obey the distributive law.)
Idempotency: no
  
  
    
      
        Â 
        A
        Â 
      
    
    {\displaystyle ~A~}
  
 
  
    
      
        Â 
        â
        Â 
      
    
    {\displaystyle ~\oplus ~}
  
 
  
    
      
        Â 
        A
        Â 
      
    
    {\displaystyle ~A~}
  
 Â Â Â Â 
  
    
      
        â
      
    
    {\displaystyle \Leftrightarrow }
  
Â Â Â Â  
  
    
      
        Â 
        0
        Â 
      
    
    {\displaystyle ~0~}
  
 Â Â Â Â 
  
    
      
        â
      
    
    {\displaystyle \nLeftrightarrow }
  
Â Â Â Â  
  
    
      
        Â 
        A
        Â 
      
    
    {\displaystyle ~A~}
  
  
  
    
      
        Â 
        â
        Â 
      
    
    {\displaystyle ~\oplus ~}
  
  Â Â Â Â 
  
    
      
        â
      
    
    {\displaystyle \Leftrightarrow }
  
Â Â Â Â   Â Â Â Â 
  
    
      
        â
      
    
    {\displaystyle \nLeftrightarrow }
  
Â Â Â Â  

Monotonicity: no
  
  
    
      
        A
        â
        B
      
    
    {\displaystyle A\rightarrow B}
  
 Â Â Â Â 
  
    
      
        â
      
    
    {\displaystyle \nRightarrow }
  
Â Â Â Â  
  
    
      
        (
        A
        â
        C
        )
      
    
    {\displaystyle (A\oplus C)}
  
 
  
    
      
        â
      
    
    {\displaystyle \rightarrow }
  
 
  
    
      
        (
        B
        â
        C
        )
      
    
    {\displaystyle (B\oplus C)}
  
  Â Â Â Â 
  
    
      
        â
      
    
    {\displaystyle \nRightarrow }
  
Â Â Â Â   Â Â Â Â 
  
    
      
        â
      
    
    {\displaystyle \Leftrightarrow }
  
Â Â Â Â   
  
    
      
        â
      
    
    {\displaystyle \rightarrow }
  
 

Truth-preserving: noWhen all inputs are true, the output is not true.
  
  
    
      
        A
        â§
        B
      
    
    {\displaystyle A\land B}
  
 Â Â Â Â 
  
    
      
        â
      
    
    {\displaystyle \nRightarrow }
  
Â Â Â Â  
  
    
      
        A
        â
        B
      
    
    {\displaystyle A\oplus B}
  
  Â Â Â Â 
  
    
      
        â
      
    
    {\displaystyle \nRightarrow }
  
Â Â Â Â  

Falsehood-preserving: yesWhen all inputs are false, the output is false.
  
  
    
      
        A
        â
        B
      
    
    {\displaystyle A\oplus B}
  
 Â Â Â Â 
  
    
      
        â
      
    
    {\displaystyle \Rightarrow }
  
Â Â Â Â  
  
    
      
        A
        â¨
        B
      
    
    {\displaystyle A\lor B}
  
  Â Â Â Â 
  
    
      
        â
      
    
    {\displaystyle \Rightarrow }
  
Â Â Â Â  

Walsh spectrum: (2,0,0,â2)
Non-linearity: 0The function is linear.

If using binary values for true (1) and false (0), then exclusive or works exactly like addition modulo 2.

Computer science
  Traditional symbolic representation of an XOR logic gate
Bitwise operation
Main article: Bitwise operation
  Nimber addition is the exclusive or of nonnegative integers in binary representation. This is also the vector addition in 
  
    
      
        (
        
          Z
        
        
          /
        
        2
        
          Z
        
        
          )
          
            4
          
        
      
    
    {\displaystyle (\mathbb {Z} /2\mathbb {Z} )^{4}}
  
.
Exclusive disjunction is often used for bitwise operations. Examples:

1 XOR 1 = 0
1 XOR 0 = 1
0 XOR 1 = 1
0 XOR 0 = 0
11102 XOR 10012 = 01112 (this is equivalent to addition without carry)
As noted above, since exclusive disjunction is identical to addition modulo 2, the bitwise exclusive disjunction of two n-bit strings is identical to the standard vector of addition in the vector space 
  
    
      
        (
        
          Z
        
        
          /
        
        2
        
          Z
        
        
          )
          
            n
          
        
      
    
    {\displaystyle (\mathbb {Z} /2\mathbb {Z} )^{n}}
  
.
In computer science, exclusive disjunction has several uses:

It tells whether two bits are unequal.
It is an optional bit-flipper (the deciding input chooses whether to invert the data input).
It tells whether there is an odd number of 1Â bits (
  
    
      
        A
        â
        B
        â
        C
        â
        D
        â
        E
      
    
    {\displaystyle A\oplus B\oplus C\oplus D\oplus E}
  
 is true if and only if an odd number of the variables are true).
In logical circuits, a simple adder can be made with an XOR gate to add the numbers, and a series of AND, OR and NOT gates to create the carry output.
On some computer architectures, it is more efficient to store a zero in a register by XOR-ing the register with itself (bits XOR-ed with themselves are always zero) instead of loading and storing the value zero.
In simple threshold-activated neural networks, modeling the XOR function requires a second layer because XOR is not a linearly separable function.
Exclusive-or is sometimes used as a simple mixing function in cryptography, for example, with one-time pad or Feistel network systems.[citation needed]
Exclusive-or is also heavily used in block ciphers such as AES (Rijndael) or Serpent and in block cipher implementation (CBC, CFB, OFB or CTR).
Similarly, XOR can be used in generating entropy pools for hardware random number generators.  The XOR operation preserves randomness, meaning that a random bit XORed with a non-random bit will result in a random bit.  Multiple sources of potentially random data can be combined using XOR, and the unpredictability of the output is guaranteed to be at least as good as the best individual source.[5]
XOR is used in RAID 3â6 for creating parity information.  For example, RAID can "back up" bytes 100111002 and 011011002 from two (or more) hard drives by XORing the just mentioned bytes, resulting in (111100002) and writing it to another drive.  Under this method, if any one of the three hard drives are lost, the lost byte can be re-created by XORing bytes from the remaining drives. For instance,  if the drive containing 011011002 is lost, 100111002 and 111100002 can be XORed to recover the lost byte.[6]
XOR is also used to detect an overflow in the result of a signed binary arithmetic operation. If the leftmost retained bit of the result is not the same as the infinite number of digits to the left, then that means overflow occurred. XORing those two bits will give a "1" if there is an overflow.
XOR can be used to swap two numeric variables in computers, using the XOR swap algorithm; however this is regarded as more of a curiosity and not encouraged in practice.
XOR linked lists leverage XOR properties in order to save space to represent doubly linked list data structures.
In computer graphics, XOR-based drawing methods are often used to manage such items as bounding boxes and cursors on systems without alpha channels or overlay planes.

Encodings
It is also called "not left-right arrow" (\nleftrightarrow) in Latex-based markdown (
  
    
      
        â®
      
    
    {\displaystyle \nleftrightarrow }
  
). Apart from the ASCII codes, the operator is encoded at .mw-parser-output .monospaced{font-family:monospace,monospace}U+22BB â» XOR (HTMLÂ &#8891;Â Â·  &veebar;) and U+2295 â CIRCLED PLUS (HTMLÂ &#8853;Â Â·  &CirclePlus;, &oplus;), both in block mathematical operators.

See also
.mw-parser-output .div-col{margin-top:0.3em;column-width:30em}.mw-parser-output .div-col-small{font-size:90%}.mw-parser-output .div-col-rules{column-rule:1px solid #aaa}.mw-parser-output .div-col dl,.mw-parser-output .div-col ol,.mw-parser-output .div-col ul{margin-top:0}.mw-parser-output .div-col li,.mw-parser-output .div-col dd{page-break-inside:avoid;break-inside:avoid-column}
Material conditional â¢ (Paradox)
Affirming a disjunct
Ampheck
Boolean algebra (logic)
Boolean domain
Boolean function
Boolean-valued function
Controlled NOT gate
Disjunctive syllogism
First-order logic
Inclusive or
Involution
List of Boolean algebra topics
Logical graph
Logical value
Operation
Parity bit
Propositional calculus
Rule 90
Symmetric difference
XOR cipher
XOR gate
XOR linked list
Notes

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Germundsson, Roger; Weisstein, Eric. "XOR". MathWorld. Wolfram Research. Retrieved 17 June 2015.

^ Craig, Edward, ed. (1998), Routledge Encyclopedia of Philosophy, vol.Â 10, Taylor & Francis, p.Â 496, ISBNÂ 9780415073103

^ Jump up to: a b c d Aloni, Maria (2016), "Disjunction",  in Zalta, Edward N. (ed.), The Stanford Encyclopedia of Philosophy (Winter 2016Â ed.), Metaphysics Research Lab, Stanford University, retrieved 2020-09-03

^ Jennings quotes numerous authors saying that the word "or" has an exclusive sense. See Chapter 3, "The First Myth of 'Or'":Jennings, R. E. (1994). The Genealogy of Disjunction. New York: Oxford University Press.

^ Davies, Robert B (28 February 2002). "Exclusive OR (XOR) and hardware random number generators" (PDF). Retrieved 28 August 2013.

^ Nobel, Rickard (26 July 2011). "How RAID 5 actually works". Retrieved 23 March 2017.


External links



Wikimedia Commons has media related to Exclusive disjunction.




Look up exclusive orÂ or XOR in Wiktionary, the free dictionary.

An example of XOR being used in cryptography
All About XOR
Proofs of XOR properties and applications of XOR, CS103: Mathematical Foundations of Computing, Stanford University
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}hidevteLogical connectives
Tautology/TrueÂ 
  
    
      
        â¤
      
    
    {\displaystyle \top }
  


Alternative denialÂ (NAND gate)Â 
  
    
      
        â
      
    
    {\displaystyle \uparrow }
  

Converse implicationÂ 
  
    
      
        â
      
    
    {\displaystyle \leftarrow }
  

ImplicationÂ (IMPLY gate)Â 
  
    
      
        â
      
    
    {\displaystyle \rightarrow }
  

DisjunctionÂ (OR gate)Â 
  
    
      
        â¨
      
    
    {\displaystyle \lor }
  


NegationÂ (NOT gate)Â 
  
    
      
        Â¬
      
    
    {\displaystyle \neg }
  

Exclusive orÂ (XOR gate)Â 
  
    
      
        â®
      
    
    {\displaystyle \not \leftrightarrow }
  

BiconditionalÂ (XNOR gate)Â 
  
    
      
        â
      
    
    {\displaystyle \leftrightarrow }
  

StatementÂ (Digital buffer)

Joint denialÂ (NOR gate)Â 
  
    
      
        â
      
    
    {\displaystyle \downarrow }
  

NonimplicationÂ (NIMPLY gate)Â 
  
    
      
        â
      
    
    {\displaystyle \nrightarrow }
  

Converse nonimplicationÂ 
  
    
      
        â
      
    
    {\displaystyle \nleftarrow }
  

ConjunctionÂ (AND gate)Â 
  
    
      
        â§
      
    
    {\displaystyle \land }
  


Contradiction/FalseÂ 
  
    
      
        â¥
      
    
    {\displaystyle \bot }
  

Â Philosophy portal




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Exclusive_or&oldid=1055313191"
		Categories: DichotomiesLogical connectivesSemanticsHidden categories: Articles with short descriptionShort description matches WikidataWikipedia indefinitely semi-protected pagesArticles needing additional references from May 2013All articles needing additional referencesAll articles with unsourced statementsArticles with unsourced statements from June 2015Commons category link from WikidataPages that use a deprecated format of the math tags
	
