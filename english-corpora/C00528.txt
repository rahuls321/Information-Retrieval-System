
Title:
L-system
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Rewriting system and type of formal grammar
hideThis article has multiple issues. Please help improve it or discuss these issues on the talk page. (Learn how and when to remove these template messages)

      This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources:Â "L-system"Â âÂ newsÂ Â· newspapersÂ Â· booksÂ Â· scholarÂ Â· JSTOR  (April 2013) (Learn how and when to remove this template message)
This article reads like a textbook. Please improve this article to make it neutral in tone and meet Wikipedia's quality standards.  (August 2020)
    
 (Learn how and when to remove this template message)
  L-system trees form realistic models of natural patterns
An L-system or Lindenmayer system is a parallel rewriting system and a type of formal grammar. An L-system consists of an alphabet of symbols that can be used to make strings, a collection of production rules that expand each symbol into some larger string of symbols, an initial "axiom" string from which to begin construction, and a mechanism for translating the generated strings into geometric structures. L-systems were introduced and developed in 1968 by Aristid Lindenmayer, a Hungarian theoretical biologist and botanist at the University of Utrecht.[1] Lindenmayer used L-systems to describe the behaviour of plant cells and to model the growth processes of plant development. L-systems have also been used to model the morphology of a variety of organisms[2] and can be used to generate self-similar fractals.

Contents

1 Origins
2 L-system structure
3 Examples of L-systems

3.1 Example 1: Algae

3.1.1 Example 1: Algae, explained


3.2 Example 2: Fractal (binary) tree
3.3 Example 3: Cantor set
3.4 Example 4: Koch curve
3.5 Example 5: Sierpinski triangle
3.6 Example 6: Dragon curve
3.7 Example 7: Fractal plant


4 Variations

4.1 Stochastic grammars
4.2 Context sensitive grammars
4.3 Parametric grammars
4.4 Bi-directional grammars


5 Open problems
6 Types of L-systems
7 See also
8 Notes
9 Books
10 External links



Origins[edit]
  'Weeds', generated using an L-system in 3D.
As a biologist, Lindenmayer worked with yeast and filamentous fungi and studied the growth patterns of various types of bacteria, such as the cyanobacteria Anabaena catenula. Originally, the L-systems were devised to provide a formal description of the development of such simple multicellular organisms, and to illustrate the neighbourhood relationships between plant cells. Later on, this system was extended to describe higher plants and complex branching structures.

L-system structure[edit]
The recursive nature of the L-system rules leads to self-similarity and thereby, fractal-like forms are easy to describe with an L-system.   Plant models and natural-looking organic forms are easy to define, as by increasing the recursion level the form slowly 'grows' and becomes more complex. Lindenmayer systems are also popular in the generation of artificial life.
L-system grammars are very similar to the semi-Thue grammar (see Chomsky hierarchy).  L-systems are now commonly known as parametric L systems, defined as a tuple

G = (V, Ï, P),
where

V (the alphabet) is a set of symbols containing both elements that can be replaced (variables) and those which cannot be replaced ("constants" or "terminals")
Ï (start, axiom or initiator) is a string of symbols from V defining the initial state of the system
P is a set of production rules or productions defining the way variables can be replaced with combinations of constants and other variables. A production consists of two strings, the predecessor and the successor. For any symbol A which is a member of the set V which does not appear on the left hand side of a production in P, the identity production A â A is assumed; these symbols are called constants or terminals. (See Law of identity).
The rules of the L-system grammar are applied iteratively starting from the initial state. As many rules as possible are applied simultaneously, per iteration. The fact that each iteration employs as many rules as possible differentiates an L-system from a formal language generated by a formal grammar, which applies only one rule per iteration. If the production rules were to be applied only one at a time, one would quite simply generate a language, rather than an L-system.[clarification needed]Thus, L-systems are strict subsets of languages.[clarification needed]
An L-system is context-free if each production rule refers only to an individual symbol and not to its neighbours. Context-free L-systems are thus specified by a context-free grammar. If a rule depends not only on a single symbol but also on its neighbours, it is termed a context-sensitive L-system.
If there is exactly one production for each symbol, then the L-system is said to be deterministic (a deterministic context-free L-system is popularly called a D0L system). If there are several, and each is chosen with a certain probability during each iteration, then it is a stochastic L-system.
Using L-systems for generating graphical images requires that the symbols in the model refer to elements of a drawing on the computer screen. For example, the program Fractint uses turtle graphics (similar to those in the Logo programming language) to produce screen images. It interprets each constant in an L-system model as a turtle command.

Examples of L-systems[edit]
Example 1: Algae[edit]
Lindenmayer's original L-system for modelling the growth of algae.

variablesÂ :   A B
constantsÂ :   none
axiom    Â :   A
rules    Â :   (A â AB), (B â A)
which produces:

n = 0Â : A
n = 1Â : AB
n = 2Â : ABA
n = 3Â : ABAAB
n = 4Â : ABAABABA
n = 5Â : ABAABABAABAAB
n = 6Â : ABAABABAABAABABAABABA
n = 7Â : ABAABABAABAABABAABABAABAABABAABAAB
Example 1: Algae, explained[edit]
n=0:               A             start (axiom/initiator)
                  / \
n=1:             A   B           the initial single A spawned into AB by rule (A â AB), rule (B â A) couldn't be applied
                /|     \
n=2:           A B      A        former string AB with all rules applied, A spawned into AB again, former B turned into A
             / | |       | \
n=3:         A B A       A B     note all A's producing a copy of themselves in the first place, then a B, which turns ...
           / | | | \     | \ \
n=4:       A B A A B     A B A   ... into an A one generation later, starting to spawn/repeat/recurse then

The result is the sequence of Fibonacci words. If we count the length of each string, we obtain the famous Fibonacci sequence of numbers (skipping the first 1, due to our choice of axiom):

1  2  3  5  8  13  21  34  55 89 ...
If we would like to not skip the first 1, we can use axiom B. That would place B node before the topmost node (A) of the graph above.
For each string, if we count the k-th position from the left end of the string, the value is determined by whether a multiple of the golden ratio falls within the interval 
  
    
      
        (
        k
        â
        1
        ,
        k
        )
      
    
    {\displaystyle (k-1,k)}
  
.  The ratio of A to B likewise converges to the golden mean.
This example yields the same result (in terms of the length of each string, not the sequence of As and Bs) if the rule (A â AB) is replaced with (A â BA), except that the strings are mirrored.
This sequence is a locally catenative sequence because 
  
    
      
        G
        (
        n
        )
        =
        G
        (
        n
        â
        1
        )
        G
        (
        n
        â
        2
        )
      
    
    {\displaystyle G(n)=G(n-1)G(n-2)}
  
, where 
  
    
      
        G
        (
        n
        )
      
    
    {\displaystyle G(n)}
  
 is the n-th generation.

Example 2: Fractal (binary) tree[edit]
variablesÂ : 0, 1
constants: â[â, â]â
axiom Â : 0
rules Â : (1 â 11), (0 â 1[0]0)
The shape is built by recursively feeding the axiom through the production rules. Each character of the input string is checked against the rule list to determine which character or string to replace it with in the output string. In this example, a '1' in the input string becomes '11' in the output string, while '[' remains the same. Applying this to the axiom of '0', we get:




axiom:
0


1st recursion:
1[0]0


2nd recursion:
11[1[0]0]1[0]0


3rd recursion:
1111[11[1[0]0]1[0]0]11[1[0]0]1[0]0


â¦

We can see that this string quickly grows in size and complexity. This string can be drawn as an image by using turtle graphics, where each symbol is assigned a graphical operation for the turtle to perform. For example, in the sample above, the turtle may be given the following instructions:

0: draw a line segment ending in a leaf
1: draw a line segment
[: push position and angle, turn left 45 degrees
]: pop position and angle, turn right 45 degrees
The push and pop refer to a LIFO stack (more technical grammar would have separate symbols for "push position" and "turn left"). When the turtle interpretation encounters a '[', the current position and angle are saved, and are then restored when the interpretation encounters a ']'. If multiple values have been "pushed," then a "pop" restores the most recently saved values. Applying the graphical rules listed above to the earlier recursion, we get:

@media all and (max-width:720px){.mw-parser-output .mod-gallery{width:100%!important}}.mw-parser-output .mod-gallery{display:table}.mw-parser-output .mod-gallery-default{background:transparent;margin-top:0.3em}.mw-parser-output .mod-gallery-center{margin-left:auto;margin-right:auto}.mw-parser-output .mod-gallery-left{float:left}.mw-parser-output .mod-gallery-right{float:right}.mw-parser-output .mod-gallery-none{float:none}.mw-parser-output .mod-gallery-collapsible{width:100%}.mw-parser-output .mod-gallery .title,.mw-parser-output .mod-gallery .main,.mw-parser-output .mod-gallery .footer{display:table-row}.mw-parser-output .mod-gallery .title>div{display:table-cell;padding:0.2em 0 0.6em 1.6em;text-align:center;font-weight:bold}.mw-parser-output .mod-gallery .main>div{display:table-cell}.mw-parser-output .mod-gallery .gallery{line-height:1.35em}.mw-parser-output .mod-gallery .footer>div{display:table-cell;padding:0.2em 0 0.6em 1.6em;text-align:right;font-size:80%;line-height:1em}.mw-parser-output .mod-gallery .title>div *,.mw-parser-output .mod-gallery .footer>div *{overflow:visible}.mw-parser-output .mod-gallery .gallerybox img{background:none!important}.mw-parser-output .mod-gallery .bordered-images .thumb img{border:solid #eaecf0 1px}.mw-parser-output .mod-gallery .whitebg .thumb{background:#fff!important}
		
			
			
Axiom

			
		
		
			
			
First recursion

			
		
		
			
			
Second recursion

			
		
		
			
			
Third recursion

			
		
		
			
			
Fourth recursion

			
		
		
			
			
Seventh recursion, scaled down ten times

			
		

Example 3: Cantor set[edit]

variablesÂ :   A B
constantsÂ :   none
start    Â :   A   {starting character string}
rules    Â :   (A â ABA), (B â BBB)
Let A mean "draw forward" and B mean "move forward".
This produces the famous Cantor's fractal set on a real straight line R.

Example 4: Koch curve[edit]
A variant of the Koch curve which uses only right angles.

variablesÂ :   F
constantsÂ :   + â
start    Â :   F
rules    Â :   (F â F+FâFâF+F)
Here, F means "draw forward", + means "turn left 90Â°", and â means "turn right 90Â°" (see turtle graphics).

n = 0:
F

n = 1:
F+FâFâF+F

n = 2:
F+FâFâF+F+F+FâFâF+FâF+FâFâF+FâF+FâFâF+F+F+FâFâF+F

n = 3:
F+FâFâF+F+F+FâFâF+FâF+FâFâF+FâF+FâFâF+F+F+FâFâF+F+
F+FâFâF+F+F+FâFâF+FâF+FâFâF+FâF+FâFâF+F+F+FâFâF+Fâ
F+FâFâF+F+F+FâFâF+FâF+FâFâF+FâF+FâFâF+F+F+FâFâF+Fâ
F+FâFâF+F+F+FâFâF+FâF+FâFâF+FâF+FâFâF+F+F+FâFâF+F+
F+FâFâF+F+F+FâFâF+FâF+FâFâF+FâF+FâFâF+F+F+FâFâF+F

Example 5: Sierpinski triangle[edit]
The Sierpinski triangle drawn using an L-system.

variablesÂ :   F G
constantsÂ :   + â
start    Â :   FâGâG
rules    Â :   (F â FâG+F+GâF), (G â GG)
angle    Â :   120Â°
Here, F means "draw forward", G means "draw forward", + means "turn left by angle", and â means "turn right by angle".


		
			
			
n = 2

			
		
		
			
			
n = 4

			
		
		
			
			
n = 6

			
		

It is also possible to approximate the Sierpinski triangle using a SierpiÅski arrowhead curve L-system.

variablesÂ :   A B
constantsÂ :   + â
start    Â :   A
rules    Â :   (A â BâAâB), (B â A+B+A)
angle    Â :   60Â°
Here, A and B both mean "draw forward", + means "turn left by angle", and â means "turn right by angle" (see turtle graphics).


Evolution for n = 2, n = 4, n = 6, n = 8
Example 6: Dragon curve[edit]
The dragon curve drawn using an L-system.

variablesÂ :   F G
constantsÂ :   + â
start    Â :   F
rules    Â :   (F â F+G), (G â F-G)
angle    Â :   90Â°
Here, F and G both mean "draw forward", + means "turn left by angle", and â means "turn right by angle".


Dragon curve for n = 10
Example 7: Fractal plant[edit]
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}See also: Barnsley fern
variablesÂ :   X F
constantsÂ :   + â [ ]
start    Â :   X
rules    Â :   (X â F+[[X]-X]-F[-FX]+X), (F â FF)
angle    Â :   25Â°
Here, F means "draw forward", â means "turn right 25Â°", and + means "turn left 25Â°". X does not correspond to any drawing action and is used to control the evolution of the curve. The square bracket "[" corresponds to saving the current values for position and angle, which are restored when the corresponding "]" is executed.

Fractal plant for n = 6
Variations[edit]
A number of elaborations on this basic L-system technique have been developed which can be used in conjunction with each other. Among these are stochastic grammars, context sensitive grammars, and parametric grammars.

Stochastic grammars[edit]
The grammar model we have discussed thus far has been deterministicâthat is, given any symbol in the grammar's alphabet, there has been exactly one production rule, which is always chosen, and always performs the same conversion. One alternative is to specify more than one production rule for a symbol, giving each a probability of occurring. For example, in the grammar of Example 2, we could change the rule for rewriting "0" from:

0 â 1[0]0
to a probabilistic rule:

0 (0.5) â 1[0]0
0 (0.5) â 0
Under this production, whenever a "0" is encountered during string rewriting, there would be a 50% chance it would behave as previously described, and a 50% chance it would not change during production. When a stochastic grammar is used in an evolutionary context, it is advisable to incorporate a random seed into the genotype, so that the stochastic properties of the image remain constant between generations.

Context sensitive grammars[edit]
A context sensitive production rule looks not only at the symbol it is modifying, but the symbols on the string appearing before and after it. For instance, the production rule:

b < a > c â aa
transforms "a" to "aa", but only If the "a" occurs between a "b" and a "c" in the input string:

â¦bacâ¦
As with stochastic productions, there are multiple productions to handle symbols in different contexts. If no production rule can be found for a given context, the identity production is assumed, and the symbol does not change on transformation. If context-sensitive and context-free productions both exist within the same grammar, the context-sensitive production is assumed to take precedence when it is applicable.

Parametric grammars[edit]
In a parametric grammar, each symbol in the alphabet has a parameter list associated with it. A symbol coupled with its parameter list is called a module, and a string in a parametric grammar is a series of modules. An example string might be:

a(0,1)[b(0,0)]a(1,2)
The parameters can be used by the drawing functions, and also by the production rules. The production rules can use the parameters in two ways: first, in a conditional statement determining whether the rule will apply, and second, the production rule can modify the actual parameters. For example, look at:

a(x,y)Â : x == 0 â a(1, y+1)b(2,3)
The module a(x,y) undergoes transformation under this production rule if the conditional x=0 is met. For example, a(0,2) would undergo transformation, and a(1,2) would not.
In the transformation portion of the production rule, the parameters as well as entire modules can be affected. In the above example, the module b(x,y) is added to the string, with initial parameters (2,3). Also, the parameters of the already existing module are transformed. Under the above production rule,

a(0,2)
Becomes

a(1,3)b(2,3)
as the "x" parameter of a(x,y) is explicitly transformed to a "1" and the "y" parameter of a is incremented by one.
Parametric grammars allow line lengths and branching angles to be determined by the grammar, rather than the turtle interpretation methods. Also, if age is given as a parameter for a module, rules can change depending on the age of a plant segment, allowing animations of the entire life-cycle of the tree to be created.

Bi-directional grammars[edit]
The bi-directional model explicitly separates the symbolic rewriting system from the shape assignment. For example, the string rewriting process in the Example 2 (Fractal tree) is independent on how graphical operations are assigned to the symbols. In other words, an infinite number of draw methods are applicable to a given rewriting system.
The bi-directional model consists of 1) a forward process constructs the derivation tree with production rules, and 2) a backward process realizes the tree with shapes in a stepwise manner (from leaves to the root). Each inverse-derivation step involves essential geometric-topological reasoning. With this bi-directional framework, design constraints and objectives are encoded in the grammar-shape translation. In architectural design applications, the bi-directional grammar features consistent interior connectivity and a rich spatial hierarchy.[3]

Open problems[edit]
There are many open problems involving studies of L-systems. For example:

Characterisation of all the deterministic context-free L-systems which are locally catenative. (A complete solution is known only in the case where there are only two variables).[4]
Given a structure, find an L-system that can produce that structure.[citation needed]
Types of L-systems[edit]
L-systems on the real line R:

Prouhet-Thue-Morse system
Well-known L-systems on a plane R2 are: 

space-filling curves (Hilbert curve, Peano's curves, Dekking's church, kolams),
median space-filling curves (LÃ©vy C curve, Harter-Heighway dragon curve, Davis-Knuth terdragon),
tilings (sphinx tiling, Penrose tiling),
trees, plants, and the like.
See also[edit]



Wikimedia Commons has media related to L-systems.

Digital morphogenesis
Fractal
Iterated function system
Hilbert curve
Reactionâdiffusion systemÂ â Type of mathematical model that provides diffusing-chemical-reagent simulations (including Life-like)
Stochastic context-free grammar
SpeedTree
The Algorithmic Beauty of Plants
Notes[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Lindenmayer, Aristid (March 1968). "Mathematical models for cellular interactions in development II. Simple and branching filaments with two-sided inputs". Journal of Theoretical Biology. 18 (3): 300â315. Bibcode:1968JThBi..18..300L. doi:10.1016/0022-5193(68)90080-5. ISSNÂ 0022-5193. PMIDÂ 5659072.

^ Grzegorz Rozenberg and Arto Salomaa. The mathematical theory of L systems (Academic Press, New York, 1980). ISBNÂ 0-12-597140-0

^ Hua, H., 2017, December. A BiâDirectional Procedural Model for Architectural Design. In Computer Graphics Forum (Vol. 36, No. 8, pp. 219-231).

^ Kari, Lila; Rozenberg, Grzegorz; Salomaa, Arto (1997). "L Systems". Handbook of Formal Languages. pp.Â 253â328. doi:10.1007/978-3-642-59136-5_5. ISBNÂ 978-3-642-63863-3.


Books[edit]
PrzemysÅaw Prusinkiewicz, Aristid Lindenmayer â The Algorithmic Beauty of Plants PDF version available here for free
Grzegorz Rozenberg, Arto Salomaa â Lindenmayer Systems: Impacts on Theoretical Computer Science, Computer Graphics, and Developmental Biology ISBNÂ 978-3-540-55320-5
D.S. Ebert, F.K. Musgrave, et al. â Texturing and Modeling: A Procedural Approach, ISBNÂ 0-12-228730-4
Burry, Jane, Burry Mark, (2010). The New Mathematics of Architecture, New York: Thames and Hudson.
Aristid Lindenmayer, "Mathematical models for cellular interaction in development." J. Theoret. Biology, 18:280â315, 1968.
External links[edit]
.mw-parser-output .div-col{margin-top:0.3em;column-width:30em}.mw-parser-output .div-col-small{font-size:90%}.mw-parser-output .div-col-rules{column-rule:1px solid #aaa}.mw-parser-output .div-col dl,.mw-parser-output .div-col ol,.mw-parser-output .div-col ul{margin-top:0}.mw-parser-output .div-col li,.mw-parser-output .div-col dd{page-break-inside:avoid;break-inside:avoid-column}
Algorithmic Botany at the University of Calgary
Branching: L-system TreeãA Java applet and its source code (open source) of the botanical tree growth simulation using the L-system.
Fractint L-System True Fractals
OpenAlea Archived 2005-10-17 at the Wayback Machine: an open-source software environment for plant modeling,[1] which contains L-Py, an open-source python implementation of the Lindenmayer systems[2]
"powerPlant" an open-source landscape modelling software
Fractint home page
A simple L-systems generator (Windows)
Lyndyhop: another simple L-systems generator (Windows & Mac)
An evolutionary L-systems generator (anyos*)
eXtended L-Systems (XL), Relational Growth Grammars, and open-source software platform GroIMP.
A JAVA applet with many fractal figures generated by L-systems. Archived 2016-08-06 at the Wayback Machine
My Graphics â an iPhone/iPad app that generates several L-system graphics patterns.
Musical L-systems: Theory and applications about using L-systems to generate musical structures, from waveforms to macro-forms.
Online experiments with L-Systems using JSXGraph (JavaScript)
Flea A Ruby implementation of LSYSTEM, using a Domain Specific Language instead of terse generator commands
Lindenmayer power A plant and fractal generator using L-systems (JavaScript)
Rozenberg, G.; Salomaa, A. (2001) [1994], "L-systems", Encyclopedia of Mathematics, EMS Press
Laurens LaprÃ©'s L-Parser Archived 2013-09-13 at the Wayback Machine
HTML5 L-Systems â try out experiments online
The vector-graphics program Inkscape features an L-System Parser
Complexity of L-System[dead link]
An implementation of a L-system parser and simple turtle graphics in the Icon programming language
A Lindenmeyer System Generator by Nolan Carroll
Bloogen: L-Systems with a genetic twist

.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}show.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteFractalsCharacteristics
Fractal dimensions
Assouad
Box-counting
Correlation
Hausdorff
Packing
Topological
Recursion
Self-similarity
Iterated function system
Barnsley fern
Cantor set
Koch snowflake
Menger sponge
Sierpinski carpet
Sierpinski triangle
Apollonian gasket
Fibonacci word
Space-filling curve
Blancmange curve
De Rham curve
Minkowski
Dragon curve
Hilbert curve
Koch curve
LÃ©vy C curve
Moore curve
Peano curve
SierpiÅski curve
T-square
n-flake
Vicsek fractal
Hexaflake
Gosper curve
Pythagoras tree
Strange attractor
Multifractal system
L-system
Fractal canopy
Space-filling curve
H tree
Escape-time fractals
Burning Ship fractal
Julia set
Filled
Newton fractal
Douady rabbit
Lyapunov fractal
Mandelbrot set
Misiurewicz point
Multibrot set
Newton fractal
Tricorn
Mandelbox
Mandelbulb
Rendering techniques
Buddhabrot
Orbit trap
Pickover stalk
Random fractals
Brownian motion
Brownian tree
Brownian motor
Fractal landscape
LÃ©vy flight
Percolation theory
Self-avoiding walk
People
Michael Barnsley
Georg Cantor
Bill Gosper
Felix Hausdorff
Desmond Paul Henry
Gaston Julia
Helge von Koch
Paul LÃ©vy
Aleksandr Lyapunov
Benoit Mandelbrot
Hamid Naderi Yeganeh
Lewis Fry Richardson
WacÅaw SierpiÅski
Other
"How Long Is the Coast of Britain?"
Coastline paradox
List of fractals by Hausdorff dimension
The Beauty of Fractals (1986 book)
Fractal art
Chaos: Making a New Science (1987 book)
The Fractal Geometry of Nature  (1982 book)
Kaleidoscope
Chaos theory

showAuthority control General
Integrated Authority File (Germany)
National libraries
United States


^ Pradal, Christophe; Fournier, Christian; Valduriez, Patrick; Cohen-Boulakia, Sarah (2015). OpenAlea: scientific workflows combining data analysis and simulation (PDF). Proceedings of the 27th International Conference on Scientific and Statistical Database Management - SSDBM '15. p.Â 1. doi:10.1145/2791347.2791365. ISBNÂ 9781450337090. S2CIDÂ 14246115.

^ Boudon, FrÃ©dÃ©ric; Pradal, Christophe; Cokelaer, Thomas; Prusinkiewicz, Przemyslaw; Godin, Christophe (2012). "L-Py: An L-System Simulation Framework for Modeling Plant Architecture Development Based on a Dynamic Language". Frontiers in Plant Science. 3: 76. doi:10.3389/fpls.2012.00076. PMCÂ 3362793. PMIDÂ 22670147.






<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=L-system&oldid=1062288091"
		Categories: L-systemsHidden categories: Articles with short descriptionShort description is different from WikidataArticles needing additional references from April 2013All articles needing additional referencesWikipedia articles with style issues from August 2020All articles with style issuesArticles with multiple maintenance issuesWikipedia articles needing clarification from December 2015Wikipedia articles needing clarification from January 2014All articles with unsourced statementsArticles with unsourced statements from May 2012Commons category link is on WikidataWebarchive template wayback linksAll articles with dead external linksArticles with dead external links from August 2020Articles with GND identifiersArticles with LCCN identifiers
	
