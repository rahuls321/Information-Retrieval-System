
Title:
Extended ASCII
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		  Output of the program .mw-parser-output .monospaced{font-family:monospace,monospace}ascii in Cygwin
Extended ASCII (EASCII or high ASCII) character encodings are eight-bit or larger encodings that include the standard seven-bit ASCII characters, plus additional characters. Using the term "extended ASCII" on its own is sometimes criticized,[1][2][3] because it can be mistakenly interpreted to mean that the ASCII standard has been updated to include more than 128 characters or that the term unambiguously identifies a single encoding, neither of which is the case.
There are many extended ASCII encodings (more than 220 DOS and Windows codepages). EBCDIC ("the other" major 8-bit character code) likewise developed many extended variants (more than 186 EBCDIC codepages) over the decades.

Contents

1 History
2 Proprietary extensions
3 ISO 8859 and proprietary adaptations
4 Character set confusion
5 Multi-byte character encodings
6 Usage in computer-readable languages
7 See also
8 References
9 External links



History[edit]
This section needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources:Â "Extended ASCII"Â âÂ newsÂ Â· newspapersÂ Â· booksÂ Â· scholarÂ Â· JSTOR  (March 2016) (Learn how and when to remove this template message)
ASCII was designed in the 1960s for teleprinters and telegraphy, and some computing. Early teleprinters were electromechanical, having no microprocessor and just enough electromechanical memory to function. They fully processed one character at a time, returning to an idle state immediately afterward; this meant that any control sequences had to be only one character long, and thus a large number of codes needed to be reserved for such controls. They were typewriter-derived impact printers, and could only print a fixed set of glyphs, which were cast into a metal type element or elements; this also encouraged a minimum set of glyphs.
Seven-bit ASCII improved over prior five- and six-bit codes. Of the 27=128 codes, 33 were used for controls, and 95 carefully selected printable characters (94 glyphs and one space), which include the English alphabet (uppercase and lowercase), digits, and 31 punctuation marks and symbols: all of the symbols on a standard US typewriter plus a few selected for programming tasks. Some popular peripherals only implemented a 64-printing-character subset: Teletype Model 33 could not transmit "a" through "z" or five less-common symbols ("`", "{", "|", "}", and "~"). and when they received such characters they instead printed "A" through "Z" (forced all caps) and five other mostly-similar symbols ("@", "[", "\", "]", and "^").
The ASCII character set is barely large enough for US English use and lacks many glyphs common in typesetting, and far too small for universal use. Many more letters and symbols are desirable, useful, or required to directly represent letters of alphabets other than English, more kinds of punctuation and spacing, more mathematical operators and symbols (Ã Ã· â â  â¥ â Ï etc.), some unique symbols used by some programming languages, ideograms, logograms, box-drawing characters, etc. For years, applications were designed around the 64-character set and/or the 95-character set, so several characters acquired new uses. For example, ASCII lacks "Ã·", so most programming languages use "/" to indicate division.
The biggest problem for computer users around the world was other alphabets. ASCII's English alphabet almost accommodates European languages, if accented letters are replaced by non-accented letters or two-character approximations. Modified variants of 7-bit ASCII appeared promptly, trading some lesser-used symbols for highly desired symbols or letters, such as replacing "#" with "Â£" on UK Teletypes, "\" with "Â¥" in Japan or "â©" in Korea, etc. At least 29 variant sets resulted. 12 code points were modified by at least one modified set, leaving only 82 "invariant" codes. Programming languages however had assigned meaning to many of the replaced characters, work-arounds were devised such as C  three-character sequences "??(" and "??)" to represent "{" and "}".[4] Languages with dissimilar basic alphabets could use transliteration, such as replacing all the Latin letters with the closest match Cyrillic letters (resulting in odd but somewhat readable text when English was printed in Cyrillic or vice versa). Schemes were also devised so that two letters could be overprinted (often with the backspace control between them) to produce accented letters. Users were not comfortable with any of these compromises and they were often poorly supported.[citation needed]
When computers and peripherals standardized on eight-bit bytes in the 1970s, it became obvious that computers and software could handle text that uses 256-character sets at almost no additional cost in programming, and no additional cost for storage. (Assuming that the unused 8th bit of each byte was not reused in some way, such as error checking, Boolean fields, or packing 8 characters into 7 bytes.) This would allow ASCII to be used unchanged and provide 128 more characters. Many manufacturers devised 8-bit character sets consisting of ASCII plus up to 128 of the unused codes. Since Eastern Europe were politically separated at the time, 8-bit encodings which covered all the more used European (and Latin American) languages, such as Danish, Dutch, French, German, Portuguese, Spanish, Swedish and more could be made, often called "Latin" or "Roman".
128 additional characters is still not enough to cover all purposes, all languages, or even all European languages, so the emergence of many proprietary and national ASCII-derived 8-bit character sets was inevitable. Translating between these sets (transcoding) is complex (especially if a character is not in both sets); and was often not done, producing mojibake (semi-readable resulting text, often users learned how to manually decode it). There were eventually attempts at cooperation or coordination by national and international standards bodies in the late 1990s, but manufacture proprietary sets remained the most popular by far, primarily because the standards excluded many popular characters.

Proprietary extensions[edit]
This section needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.  (June 2020) (Learn how and when to remove this template message)
Various proprietary modifications and extensions of ASCII appeared on non-EBCDIC mainframe computers and minicomputers, especially in universities.
Hewlett-Packard started to add European characters to their extended 7-bit / 8-bit ASCII character set HP Roman Extension around 1978/1979 for use with their workstations, terminals and printers. This later evolved into the widely used regular 8-bit character sets HP Roman-8 and HP Roman-9 (as well as a number of variants).
Atari and Commodore home computers added many graphic symbols to their non-standard ASCII (Respectively, ATASCII and PETSCII, based on the original ASCII standard of 1963).
The TRS-80 character set for the TRS-80 home computer added 64 semigraphics characters (0x80 through 0xBF) that implemented low-resolution block graphics. (Each block-graphic character displayed as a 2x3 grid of pixels, with each block pixel effectively controlled by one of the lower 6 bits.)[5]
IBM introduced eight-bit extended ASCII codes on the original IBM PC and later produced variations for different languages and cultures. IBM called such character sets code pages and assigned numbers to both those they themselves invented as well as many invented and used by other manufacturers. Accordingly, character sets are very often indicated by their IBM code page number. In ASCII-compatible code pages, the lower 128 characters maintained their standard US-ASCII values, and different pages (or sets of characters) could be made available in the upper 128 characters. DOS computers built for the North American market, for example, used code page 437, which included accented characters needed for French, German, and a few other European languages, as well as some graphical line-drawing characters. The larger character set made it possible to create documents in a combination of languages such as English and French (though French computers usually use code page 850), but not, for example, in English and Greek (which required code page 737).
Apple Computer introduced their own eight-bit extended ASCII codes in Mac OS, such as Mac OS Roman. The Apple LaserWriter also introduced the Postscript character set.
Digital Equipment Corporation (DEC) developed the Multinational Character Set, which had fewer characters but more letter and diacritic combinations. It was supported by the VT220 and later DEC computer terminals. This later became the basis for other character sets such as the Lotus International Character Set (LICS), ECMA-94 and ISO 8859-1.

ISO 8859 and proprietary adaptations[edit]
Eventually, ISO released this standard as ISO 8859 describing its own set of eight-bit ASCII extensions. The most popular is ISO 8859-1, also called ISO LatinÂ 1, which contained characters sufficient for the most common Western European languages.
Variations were standardized for other languages as well: ISO 8859-2 for Eastern European languages and ISO 8859-5 for Cyrillic languages, for example.
One notable way in which ISO character sets differ from code pages is that the character positions 128 to 159, corresponding to ASCII control characters with the high-order bit set, are specifically unused and undefined in the ISO standards, though they had often been used for printable characters in proprietary code pages, a breaking of ISO standards that was almost universal.
Microsoft later created code page 1252, a compatible superset of ISO 8859â1 with extra characters in the ISO unused range.
Code page 1252 is the standard character encoding of western European language versions of Microsoft Windows, including English versions.
ISO 8859-1 is the common 8-bit character encoding used by the X Window System, and most Internet standards used it before Unicode.

Character set confusion[edit]
The meaning of each extended code point can be different in every encoding. In order to correctly interpret and display text data (sequences of characters) that includes extended codes, hardware and software that reads or receives the text must use the specific extended ASCII encoding that applies to it. Applying the wrong encoding causes irrational substitution of many or all extended characters in the text.
Software can use a fixed encoding selection, or it can select from a palette of encodings by defaulting, checking the computer's nation and language settings, reading a declaration in the text, analyzing the text, asking the user, letting the user select or override, and/or defaulting to last selection. When text is transferred between computers that use different operating systems, software, and encodings, applying the wrong encoding can be commonplace.
Because the full English alphabet and the most-used characters in English are included in the seven-bit code points of ASCII, which are common to all encodings (even most proprietary encodings), English-language text is less damaged by interpreting it with the wrong encoding, but text in other languages can display as mojibake (complete nonsense). Because many Internet standards use ISO 8859-1, and because Microsoft Windows (using the code page 1252 superset of ISO 8859-1) is the dominant operating system for personal computers today, unannounced use of ISO 8859-1 is quite commonplace, and may generally be assumed unless there are indications otherwise.
Many communications protocols, most importantly SMTP and HTTP, require the character encoding of content to be tagged with IANA-assigned character set identifiers.

Multi-byte character encodings[edit]
Some multi-byte character encodings (character encodings that can handle more than 256 different characters) are also true extended ASCII. That means all ASCII characters are encoded with a single byte with the same value as ASCII, and these values are not used anywhere else. They can be used in file formats where only ASCII bytes are used for keywords and file format syntax, while bytes 0x80-0xFF might be used for free text, including most programming languages, where language keywords, variable names, and function names must be in ASCII, but string constants and comments can use non-ASCII characters. This makes it much easier to introduce a multi-byte character set into existing systems that use extended ASCII.
UTF-8 is true extended ASCII, as are some Extended Unix Code encodings.
ISO/IEC 6937 is not extended ASCII because its code point 0x24 corresponds to the general currency sign (Â¤) rather than to the dollar sign ($), but otherwise is if you consider the accent+letter pairs to be an extended character followed by the ASCII one.
Shift JIS is not true extended ASCII. Besides replacing the backslash with the yen character, multi-byte characters can also include ASCII bytes. It does avoid the use of ASCII delimiters and controls, so in many cases such as HTML it can work. UTF-16 is even less extended ASCII because ASCII characters are stored as two bytes with one byte equal to 0x00. Porting an existing system to support character sets as Shift JIS or UTF-16 is complicated and bug prone.

Usage in computer-readable languages[edit]
For programming languages and document languages such as C and HTML, the principle of Extended ASCII is important, since it enables many different encodings and therefore many human languages to be supported with little extra programming effort in the software that interprets the computer-readable language files.
The principle of Extended ASCII means that:

all ASCII bytes (0x00 to 0x7F) have the same meaning in all variants of extended ASCII,
bytes that are not ASCII bytes are used only for free text and not for tags, keywords, or other features that have special meaning to the interpreting software.
See also[edit]
ASCII
ASCII art
Digraphs and trigraphs
Input method
List of Unicode characters
UTF-8
KOI-8
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Benjamin Riefenstahl (26 Feb 2001). "Re: Cygwin Termcap information involving extended ascii charicters". cygwin (Mailing list). Archived from the original on 11 July 2013. Retrieved 2 December 2012.

^ S. Wolicki (Mar 23, 2012). "Thread: Print Extended ASCII Codes in sql*plus". Archived from the original on March 15, 2013. Retrieved December 2, 2012.

^ Mark J. Reed (March 28, 2004). "vim: how to type extended-ascii?". Newsgroup:Â comp.editors. Archived from the original on August 2, 2013. Retrieved December 2, 2012.

^ "2.2.1.1 Trigraph sequences". Rationale for American National Standard for Information Systems - Programming Language - C. Archived from the original on 2018-09-29. Retrieved 2019-02-08.

^ Goldklang, Ira (2015). "Graphic Tips & Tricks". Archived from the original on 2017-07-29. Retrieved 2017-07-29.


External links[edit]
Roman Czyborra's Unicode and extended ASCII information pages
A short page on ASCII, with the OEM 8-bit chart and the ANSI 8-bit chart
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}hide.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteCharacter encodingsEarly telecommunications
Telegraph code
Needle
Morse
Non-Latin
Wabun/Kana
Chinese
Cyrillic
Korean
Baudot and Murray
Fieldata
ASCII
ISO/IEC 646
BCDIC
Teletex and Videotex/Teletext
T.51/ISO/IEC 6937
ITU T.61
ITU T.101
World System Teletext
background
sets
ISO/IEC 8859
Approved parts
-1 (Western Europe)
-2 (Central Europe)
-3 (Maltese/Esperanto)
-4 (North Europe)
-5 (Cyrillic)
-6 (Arabic)
-7 (Greek)
-8 (Hebrew)
-9 (Turkish)
-10 (Nordic)
-11 (Thai)
-13 (Baltic)
-14 (Celtic)
-15 (New Western Europe)
-16 (Romanian)
Abandoned parts
-12 (Devanagari)
Proposed but notÂ approved
KOI-8 Cyrillic
SÃ¡mi
Adaptations
Welsh
Barents Cyrillic
Estonian
Ukrainian Cyrillic
Bibliographic use
MARC-8
ANSEL
CCCII/EACC
ISO 5426
5426-2
5427
5428
6438
6862
National standards
ArmSCII
BraSCII
CNS 11643
DIN 66003
ELOT 927
GOST 10859
GB 2312
GB 12052
GB 18030
HKSCS
ISCII
JIS X 0201
JIS X 0208
JIS X 0212
JIS X 0213
KOI-7
KPS 9566
KS X 1001
KS X 1002
LST 1564
LST 1590-4
PASCII
Shift JIS
SI 960
TIS-620
TSCII
VISCII
VSCII
YUSCII
ISO/IEC 2022
ISO/IEC 8859
ISO/IEC 10367
Extended Unix Code / EUC
Mac OS Code pages("scripts")
Armenian
Arabic
Barents Cyrillic
Celtic
Central European
Croatian
Cyrillic
Devanagari
Farsi (Persian)
Font X (Kermit)
Gaelic
Georgian
Greek
Gujarati
Gurmukhi
Hebrew
Iceland
Inuit
Keyboard
Latin (Kermit)
Maltese/Esperanto
Ogham
Roman
Romanian
SÃ¡mi
Turkish
Turkic Cyrillic
Ukrainian
VT100
DOS code pages
437
668
708
720
737
770
773
775
776
777
778
850
851
852
853
855
856
857
858
859
860
861
862
863
864
865
866
867
868
869
897
899
903
904
932
936
942
949
950
951
1040
1042
1043
1046
1098
1115
1116
1117
1118
1127
3846
ABICOMP
CS Indic
CSX Indic
CSX+ Indic
CWI-2
Iran System
KamenickÃ½
Mazovia
MIK
IBM AIX code pages
895
896
912
915
921
922
1006
1008
1009
1010
1012
1013
1014
1015
1016
1017
1018
1019
1124
1133
Windows code pages
CER-GS
932
936 (GBK)
950
1169
Extended Latin-8
1250
1251
1252
1253
1254
1255
1256
1257
1258
1270
Cyrillic + Finnish
Cyrillic + French
Cyrillic + German
Polytonic Greek
EBCDIC code pages
37
Japanese language in EBCDIC
DKOI
DEC terminals (VTx)
Multinational (MCS)
National Replacement (NRCS)
French Canadian
Swiss
Spanish
United Kingdom
Dutch
Finnish
French
Norwegian and Danish
Swedish
Norwegian and Danish (alternative)
8-bit Greek
8-bit Turkish
SI 960
Hebrew
Special Graphics
Technical (TCS)
Platform specific
1057
Acorn
Adobe Standard
Adobe Latin 1
Amstrad CPC
Apple II
ATASCII
Atari ST
BICS
Casio calculators
CDC
Compucolor II
CP/M+
DEC RADIX 50
DEC MCS/NRCS
DG International
Fieldata
GEM
GSM 03.38
HP Roman
HP FOCAL
HP RPL
SQUOZE
LICS
LMBCS
MSX
NEC APC
NeXT
PETSCII
Sega SC-3000
Sharp calculators
Sharp MZ
Sinclair QL
Symbol
Teletext
TI calculators
TRS-80
Ventura International
WISCII
XCCS
ZX80
ZX81
ZX Spectrum
UnicodeÂ / ISO/IEC 10646
UTF-1
UTF-7
UTF-8
UTF-16
UTF-32
UTF-EBCDIC
GB 18030
BOCU-1
CESU-8
SCSU
TACE16
Comparison of Unicode encodings
TeX typesetting system
Cork
LY1
OML
OMS
OT1
Miscellaneous code pages
ABICOMP
ASMO 449
Big5
Digital encoding of APL symbols
ISO-IR-68
ARIB STD-B24
HZ
IEC-P27-1
INIS
7-bit
8-bit
ISO-IR-169
ISO 2033
KOI
KOI8-R
KOI8-RU
KOI8-U
MojikyÅ
SEASCII
Stanford/ITS
TRON
Unified Hangul Code
Control character
Morse prosigns
C0 and C1 control codes
ISO/IEC 6429
JIS X 0211
Unicode control, format and separator characters
Whitespace characters
Related topics
CCSID
Character encodings in HTML
Charset detection
Han unification
Hardware code page
MICR code
Mojibake
Variable-width encoding
 Character sets




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Extended_ASCII&oldid=1065418943"
		Categories: Character setsASCIIHidden categories: Articles needing additional references from March 2016All articles needing additional referencesAll articles with unsourced statementsArticles with unsourced statements from August 2019Articles needing additional references from June 2020
	
