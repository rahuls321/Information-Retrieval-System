
Title:
Topological sorting
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}"Dependency resolution" redirects here. For other uses, see Dependency (disambiguation).
In computer science, a topological sort or topological ordering of a directed graph is a linear ordering of its vertices such that for every directed edge uv from vertex u to vertex v, u comes before v in the ordering. For instance, the vertices of the graph may represent tasks to be performed, and the edges may represent constraints that one task must be performed before another; in this application, a topological ordering is just a valid sequence for the tasks. Precisely, a topological sort is a graph traversal in which each node v is visited only after all its dependencies are visited. A topological ordering is possible if and only if the graph has no directed cycles, that is, if it is a directed acyclic graph (DAG). Any DAG has at least one topological ordering, and algorithms are known for constructing a topological ordering of any DAG in linear time. Topological sorting has many applications especially in ranking problems such as feedback arc set. Topological sorting is possible even when the DAG has disconnected components.

Contents

1 Examples
2 Algorithms

2.1 Kahn's algorithm
2.2 Depth-first search
2.3 Parallel algorithms


3 Application to shortest path finding
4 Uniqueness
5 Relation to partial orders
6 Relation to scheduling optimisation
7 See also
8 References
9 Further reading
10 External links



Examples[edit]
The canonical application of topological sorting is in scheduling a sequence of jobs or tasks based on their dependencies. The jobs are represented by vertices, and there is an edge from x to y if job x must be completed before job y can be started (for example, when washing clothes, the washing machine must finish before we put the clothes in the dryer). Then, a topological sort gives an order in which to perform the jobs.  A closely related application of topological sorting algorithms was first studied in the early 1960s in the context of the PERT technique for scheduling in project management.[1] In this application, the vertices of a graph represent the milestones of a project, and the edges represent tasks that must be performed between one milestone and another. Topological sorting forms the basis of linear-time algorithms for finding the critical path of the project, a sequence of milestones and tasks that controls the length of the overall project schedule.
In computer science, applications of this type arise in instruction scheduling, ordering of formula cell evaluation when recomputing formula values in spreadsheets, logic synthesis, determining the order of compilation tasks to perform in makefiles, data serialization, and resolving symbol dependencies in linkers. It is also used to decide in which order to load tables with foreign keys in databases.





The graph shown to the left has many valid topological sorts, including:
5, 7, 3, 11, 8, 2, 9, 10 (visual top-to-bottom, left-to-right)
3, 5, 7, 8, 11, 2, 9, 10 (smallest-numbered available vertex first)
5, 7, 3, 8, 11, 10, 9, 2 (fewest edges first)
7, 5, 11, 3, 10, 8, 9, 2 (largest-numbered available vertex first)
5, 7, 11, 2, 3, 8, 9, 10 (attempting top-to-bottom, left-to-right)
3, 7, 8, 5, 11, 10, 2, 9 (arbitrary)

Algorithms[edit]
The usual algorithms for topological sorting have running time linear in the number of nodes plus the number of edges, asymptotically, 
  
    
      
        O
        (
        
          |
          
            V
          
          |
        
        +
        
          |
          
            E
          
          |
        
        )
        .
      
    
    {\displaystyle O(\left|{V}\right|+\left|{E}\right|).}
  


Kahn's algorithm[edit]
Not to be confused with Kuhn's algorithm.
One of these algorithms, first described by Kahn (1962), works by choosing vertices in the same order as the eventual topological sort.[2] First, find a list of "start nodes" which have no incoming edges and insert them into a set S; at least one such node must exist in a non-empty acyclic graph. Then:

L â Empty list that will contain the sorted elements
S â Set of all nodes with no incoming edge

while S is not empty do
    remove a node n from S
    add n to L
    for each node m with an edge e from n to m do
        remove edge e from the graph
        if m has no other incoming edges then
            insert m into S

if graph has edges then
    return error   (graph has at least one cycle)
else 
    return L   (a topologically sorted order)

If the graph is a DAG, a solution will be contained in the list L (the solution is not necessarily unique). Otherwise, the graph must have at least one cycle and therefore a topological sort is impossible.
Reflecting the non-uniqueness of the resulting sort, the structure S can be simply a set or a queue or a stack. Depending on the order that nodes n are removed from set S, a different solution is created. A variation of Kahn's algorithm that breaks ties lexicographically forms a key component of the CoffmanâGraham algorithm for parallel scheduling and layered graph drawing.

Depth-first search[edit]
An alternative algorithm for topological sorting is based on depth-first search. The algorithm loops through each node of the graph, in an arbitrary order, initiating a depth-first search that terminates when it hits any node that has already been visited since the beginning of the topological sort or the node has no outgoing edges (i.e. a leaf node):

L â Empty list that will contain the sorted nodes
while exists nodes without a permanent mark do
    select an unmarked node n
    visit(n)

function visit(node n)
    if n has a permanent mark then
        return
    if n has a temporary mark then
        stop   (not a DAG)

    mark n with a temporary mark

    for each node m with an edge from n to m do
        visit(m)

    remove temporary mark from n
    mark n with a permanent mark
    add n to head of L

Each node n gets prepended to the output list L only after considering all other nodes which depend on n (all descendants of n in the graph).  Specifically, when the algorithm adds node n, we are guaranteed that all nodes which depend on n are already in the output list L: they were added to L either by the recursive call to visit() which ended before the call to visit n, or by a call to visit() which started even before the call to visit n.  Since each edge and node is visited once, the algorithm runs in linear time. This depth-first-search-based algorithm is the one described by Cormen et al. (2001);[3] it seems to have been first described in print by Tarjan in 1976.[4]

Parallel algorithms[edit]
On a parallel random-access machine, a topological ordering can be constructed in O(log2 n) time using a polynomial number of processors, putting the problem into the complexity class NC2.[5]
One method for doing this is to repeatedly square the adjacency matrix of the given graph, logarithmically many times, using min-plus matrix multiplication with maximization in place of minimization. The resulting matrix describes the longest path distances in the graph. Sorting the vertices by the lengths of their longest incoming paths produces a topological ordering.[6]
An algorithm for parallel topological sorting on distributed memory machines parallelizes the algorithm of Kahn for a DAG 
  
    
      
        G
        =
        (
        V
        ,
        E
        )
      
    
    {\displaystyle G=(V,E)}
  
.[7] On a high level, the algorithm of Kahn repeatedly removes the vertices of indegree 0 and adds them to the topological sorting in the order in which they were removed. Since the outgoing edges of the removed vertices are also removed, there will be a new set of vertices of indegree 0, where the procedure is repeated until no vertices are left. This algorithm performs 
  
    
      
        D
        +
        1
      
    
    {\displaystyle D+1}
  
 iterations, where D is the longest path in G. Each iteration can be parallelized, which is the idea of the following algorithm.
In the following it is assumed that the graph partition is stored on p processing elements (PE) which are labeled 
  
    
      
        0
        ,
        â¦
        ,
        p
        â
        1
      
    
    {\displaystyle 0,\dots ,p-1}
  
. Each PE i initializes a set of local vertices 
  
    
      
        
          Q
          
            i
          
          
            1
          
        
      
    
    {\displaystyle Q_{i}^{1}}
  
 with indegree 0, where the upper index represents the current iteration. Since all vertices in the local sets 
  
    
      
        
          Q
          
            0
          
          
            1
          
        
        ,
        â¦
        ,
        
          Q
          
            p
            â
            1
          
          
            1
          
        
      
    
    {\displaystyle Q_{0}^{1},\dots ,Q_{p-1}^{1}}
  
 have indegree 0, i.e. they are not adjacent, they can be given in an arbitrary order for a valid topological sorting. To assign a global index to each vertex, a prefix sum is calculated over the sizes of 
  
    
      
        
          Q
          
            0
          
          
            1
          
        
        ,
        â¦
        ,
        
          Q
          
            p
            â
            1
          
          
            1
          
        
      
    
    {\displaystyle Q_{0}^{1},\dots ,Q_{p-1}^{1}}
  
. So each step, there are 
  
    
      
        
          â
          
            i
            =
            0
          
          
            p
            â
            1
          
        
        
          |
        
        
          Q
          
            i
          
        
        
          |
        
      
    
    {\textstyle \sum _{i=0}^{p-1}|Q_{i}|}
  
 vertices added to the topological sorting.

  Execution of the parallel topological sorting algorithm on a DAG with two processing elements.
In the first step, PE j assigns the indices 
  
    
      
        
          â
          
            i
            =
            0
          
          
            j
            â
            1
          
        
        
          |
        
        
          Q
          
            i
          
          
            1
          
        
        
          |
        
        ,
        â¦
        ,
        
          (
          
            
              â
              
                i
                =
                0
              
              
                j
              
            
            
              |
            
            
              Q
              
                i
              
              
                1
              
            
            
              |
            
          
          )
        
        â
        1
      
    
    {\textstyle \sum _{i=0}^{j-1}|Q_{i}^{1}|,\dots ,\left(\sum _{i=0}^{j}|Q_{i}^{1}|\right)-1}
  
 to the local vertices in 
  
    
      
        
          Q
          
            j
          
          
            1
          
        
      
    
    {\displaystyle Q_{j}^{1}}
  
. These vertices in 
  
    
      
        
          Q
          
            j
          
          
            1
          
        
      
    
    {\displaystyle Q_{j}^{1}}
  
 are removed, together with their corresponding outgoing edges. For each outgoing edge 
  
    
      
        (
        u
        ,
        v
        )
      
    
    {\displaystyle (u,v)}
  
 with endpoint v in another PE 
  
    
      
        l
        ,
        j
        â 
        l
      
    
    {\displaystyle l,j\neq l}
  
, the message 
  
    
      
        (
        u
        ,
        v
        )
      
    
    {\displaystyle (u,v)}
  
 is posted to PE l. After all vertices in 
  
    
      
        
          Q
          
            j
          
          
            1
          
        
      
    
    {\displaystyle Q_{j}^{1}}
  
 are removed, the posted messages are sent to their corresponding PE. Each message 
  
    
      
        (
        u
        ,
        v
        )
      
    
    {\displaystyle (u,v)}
  
 received updates the indegree of the local vertex v. If the indegree drops to zero, v is added to 
  
    
      
        
          Q
          
            j
          
          
            2
          
        
      
    
    {\displaystyle Q_{j}^{2}}
  
. Then the next iteration starts.
In step k, PE j assigns the indices 
  
    
      
        
          a
          
            k
            â
            1
          
        
        +
        
          â
          
            i
            =
            0
          
          
            j
            â
            1
          
        
        
          |
        
        
          Q
          
            i
          
          
            k
          
        
        
          |
        
        ,
        â¦
        ,
        
          a
          
            k
            â
            1
          
        
        +
        
          (
          
            
              â
              
                i
                =
                0
              
              
                j
              
            
            
              |
            
            
              Q
              
                i
              
              
                k
              
            
            
              |
            
          
          )
        
        â
        1
      
    
    {\textstyle a_{k-1}+\sum _{i=0}^{j-1}|Q_{i}^{k}|,\dots ,a_{k-1}+\left(\sum _{i=0}^{j}|Q_{i}^{k}|\right)-1}
  
, where  
  
    
      
        
          a
          
            k
            â
            1
          
        
      
    
    {\displaystyle a_{k-1}}
  
is the total amount of processed vertices after step 
  
    
      
        k
        â
        1
      
    
    {\displaystyle k-1}
  
. This procedure repeats until there are no vertices left to process, hence 
  
    
      
        
          â
          
            i
            =
            0
          
          
            p
            â
            1
          
        
        
          |
        
        
          Q
          
            i
          
          
            D
            +
            1
          
        
        
          |
        
        =
        0
      
    
    {\textstyle \sum _{i=0}^{p-1}|Q_{i}^{D+1}|=0}
  
. Below is a high level, single program, multiple data pseudo code overview of this algorithm.
Note that the prefix sum for the local offsets 
  
    
      
        
          a
          
            k
            â
            1
          
        
        +
        
          â
          
            i
            =
            0
          
          
            j
            â
            1
          
        
        
          |
        
        
          Q
          
            i
          
          
            k
          
        
        
          |
        
        ,
        â¦
        ,
        
          a
          
            k
            â
            1
          
        
        +
        
          (
          
            
              â
              
                i
                =
                0
              
              
                j
              
            
            
              |
            
            
              Q
              
                i
              
              
                k
              
            
            
              |
            
          
          )
        
        â
        1
      
    
    {\textstyle a_{k-1}+\sum _{i=0}^{j-1}|Q_{i}^{k}|,\dots ,a_{k-1}+\left(\sum _{i=0}^{j}|Q_{i}^{k}|\right)-1}
  
 can be efficiently calculated in parallel.

p processing elements with IDs from 0 to p-1
Input: G = (V, E) DAG, distributed to PEs, PE index j = 0, ..., p - 1
Output: topological sorting of G

function traverseDAGDistributed
    Î´ incoming degree of local vertices V
    Q = {v â V | Î´[v] = 0}                     // All vertices with indegree 0
    nrOfVerticesProcessed = 0

    do                 
        global build prefix sum over size of Q     // get offsets and total amount of vertices in this step
        offset = nrOfVerticesProcessed + sum(Qi, i = 0 to j - 1)          // j is the processor index
        foreach u in Q                                       
            localOrder[u] = index++;
            foreach (u,v) in E do post message (u, v) to PE owning vertex v
        nrOfVerticesProcessed += sum(|Qi|, i = 0 to p - 1)
        deliver all messages to neighbors of vertices in Q  
        receive messages for local vertices V
        remove all vertices in Q
        foreach message (u, v) received:
            if --Î´[v] = 0
                add v to Q
    while global size of Q > 0

    return localOrder

The communication cost depends heavily on the given graph partition. As for runtime, on a CRCW-PRAM model that allows fetch-and-decrement in constant time, this algorithm runs in 
  
    
      
        
          
            O
          
        
        
          (
          
            
              
                
                  m
                  +
                  n
                
                p
              
            
            +
            D
            (
            Î
            +
            log
            â¡
            n
            )
          
          )
        
      
    
    {\textstyle {\mathcal {O}}\left({\frac {m+n}{p}}+D(\Delta +\log n)\right)}
  
, where D is again the longest path in G and Î the maximum degree.[7]

Application to shortest path finding[edit]
The topological ordering can also be used to quickly compute shortest paths through a weighted directed acyclic graph. Let V be the list of vertices in such a graph, in topological order. Then the following algorithm computes the shortest path from some source vertex s to all other vertices:[3]





Let d be an array of the same length as V; this will hold the shortest-path distances from s. Set d[s] = 0, all other d[u] = â.
Let p be an array of the same length as V, with all elements initialized to .mw-parser-output .monospaced{font-family:monospace,monospace}nil. Each p[u] will hold the predecessor of u in the shortest path from s to u.
Loop over the vertices u as ordered in V, starting from s:
For each vertex v directly following u (i.e., there exists an edge from u to v):
Let w be the weight of the edge from u to v.
Relax the edge: if d[v] > d[u] + w, set
d[v] â d[u] + w,
p[v] â u.


Equivalently:





Let d be an array of the same length as V; this will hold the shortest-path distances from s. Set d[s] = 0, all other d[u] = â.
Let p be an array of the same length as V, with all elements initialized to nil. Each p[u] will hold the predecessor of u in the shortest path from s to u.
Loop over the vertices u as ordered in V, starting from s:
For each vertex v into u (i.e., there exists an edge from v to u):
Let w be the weight of the edge from v to u.
Relax the edge: if d[u] > d[v] + w, set
d[u] â d[v] + w,
p[u] â v.


On a graph of n vertices and m edges, this algorithm takes Î(n + m), i.e., linear, time.[3]

Uniqueness[edit]
If a topological sort has the property that all pairs of consecutive vertices in the sorted order are connected by edges, then these edges form a directed Hamiltonian path in the DAG. If a Hamiltonian path exists, the topological sort order is unique; no other order respects the edges of the path. Conversely, if a topological sort does not form a Hamiltonian path, the DAG will have two or more valid topological orderings, for in this case it is always possible to form a second valid ordering by swapping two consecutive vertices that are not connected by an edge to each other. Therefore, it is possible to test in linear time whether a unique ordering exists, and whether a Hamiltonian path exists, despite the NP-hardness of the Hamiltonian path problem for more general directed graphs (i.e. cyclic directed graphs).[8]

Relation to partial orders[edit]
Topological orderings are also closely related to the concept of a linear extension of a partial order in mathematics. A partially ordered set is just a set of objects together with a definition of the "â¤" inequality relation, satisfying the axioms of reflexivity (xÂ â¤Â x), antisymmetry (if xÂ â¤Â y and yÂ â¤Â x then xÂ =Â y) and transitivity (if xÂ â¤Â y and yÂ â¤Â z, then xÂ â¤Â z). A total order is a partial order in which, for every two objects x and y in the set, either xÂ â¤Â y or yÂ â¤Â x. Total orders are familiar in computer science as the comparison operators needed to perform comparison sorting algorithms. For finite sets, total orders may be identified with linear sequences of objects, where the "â¤" relation is true whenever the first object precedes the second object in the order; a comparison sorting algorithm may be used to convert a total order into a sequence in this way. A linear extension of a partial order is a total order that is compatible with it, in the sense that, if xÂ â¤Â y in the partial order, then  xÂ â¤Â y in the total order as well.
One can define a partial ordering from any DAG by letting the set of objects be the vertices of the DAG, and defining xÂ â¤Â y to be true, for any two vertices x and y, whenever there exists a directed path from x to y; that is,  whenever y is reachable from x. With these definitions, a topological ordering of the DAG is the same thing as a linear extension of this partial order. Conversely, any partial ordering may be defined as the reachability relation in a DAG. One way of doing this is to define a DAG that has a vertex for every object in the partially ordered set, and an edge xy for every pair of objects for which xÂ â¤Â y. An alternative way of doing this is to use the transitive reduction of the partial ordering; in general, this produces DAGs with fewer edges, but the reachability relation in these DAGs is still the same partial order. By using these constructions, one can use topological ordering algorithms to find linear extensions of partial orders.

Relation to scheduling optimisation[edit]
By definition, the solution of a scheduling problem that includes a precedence graph is a valid solution to topological sort (irrespective of the number of machines), however, topological sort in itself is not enough to optimally solve a scheduling optimisation problem. Hu's algorithm is a popular method used to solve scheduling problems that require a precedence graph and involve processing times (where the goal is to minimise the largest completion time amongst all the jobs). Like topological sort, Hu's algorithm is not unique and can be solved using DFS (by finding the largest path length and then assigning the jobs). 

See also[edit]
tsort, a Unix program for topological sorting
Feedback arc set, a set of edges whose removal allows the remaining subgraph to be topologically sorted
Tarjan's strongly connected components algorithm, an algorithm that gives the topologically sorted list of strongly connected components in a graph
Pre-topological order
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Jarnagin, M. P. (1960), Automatic machine methods of testing PERT networks for consistency, Technical Memorandum No. K-24/60, Dahlgren, Virginia: U. S. Naval Weapons Laboratory

^ Kahn, Arthur B. (1962), "Topological sorting of large networks", Communications of the ACM, 5 (11): 558â562, doi:10.1145/368996.369025, S2CIDÂ 16728233

^ Jump up to: a b c Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; Stein, Clifford (2001), "Section 22.4: Topological sort", Introduction to Algorithms (2ndÂ ed.), MIT Press and McGraw-Hill, pp.Â 549â552, ISBNÂ 0-262-03293-7

^ Tarjan, Robert E. (1976), "Edge-disjoint spanning trees and depth-first search", Acta Informatica, 6 (2): 171â185, doi:10.1007/BF00268499, S2CIDÂ 12044793

^ Cook, Stephen A. (1985), "A Taxonomy of Problems with Fast Parallel Algorithms", Information and Control, 64 (1â3): 2â22, doi:10.1016/S0019-9958(85)80041-3

^ Dekel, Eliezer; Nassimi, David; Sahni, Sartaj (1981), "Parallel matrix and graph algorithms", SIAM Journal on Computing, 10 (4): 657â675, doi:10.1137/0210049, MRÂ 0635424

^ Jump up to: a b Sanders, Peter; Mehlhorn, Kurt; Dietzfelbinger, Martin; Dementiev, Roman (2019), Sequential and Parallel Algorithms and Data Structures: The Basic Toolbox, Springer International Publishing, ISBNÂ 978-3-030-25208-3

^ Vernet, Oswaldo; Markenzon, Lilian (1997), "Hamiltonian problems for reducible flowgraphs" (PDF), Proceedings: 17th International Conference of the Chilean Computer Science Society, pp.Â 264â267, doi:10.1109/SCCC.1997.637099, hdl:11422/2585, S2CIDÂ 206554481


Further reading[edit]
D. E. Knuth, The Art of Computer Programming, Volume 1, section 2.2.3, which gives an algorithm for topological sorting of a partial ordering, and a brief history.
External links[edit]
NIST Dictionary of Algorithms and Data Structures: topological sort
Weisstein, Eric W., "Topological Sort", MathWorld
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteSorting algorithmsTheory
Computational complexity theory
Big O notation
Total order
Lists
Inplacement
Stability
Comparison sort
Adaptive sort
Sorting network
Integer sorting
X + Y sorting
Transdichotomous model
Quantum sort
Exchange sorts
Bubble sort
Cocktail shaker sort
Oddâeven sort
Comb sort
Gnome sort
Proportion extend sort
Quicksort
Slowsort
Stooge sort
Bogosort
Selection sorts
Selection sort
Heapsort
Smoothsort
Cartesian tree sort
Tournament sort
Cycle sort
Weak-heap sort
Insertion sorts
Insertion sort
Shellsort
Splaysort
Tree sort
Library sort
Patience sorting
Merge sorts
Merge sort
Cascade merge sort
Oscillating merge sort
Polyphase merge sort
Distribution sorts
American flag sort
Bead sort
Bucket sort
Burstsort
Counting sort
Interpolation sort
Pigeonhole sort
Proxmap sort
Radix sort
Flashsort
Concurrent sorts
Bitonic sorter
Batcher oddâeven mergesort
Pairwise sorting network
Samplesort
Hybrid sorts
Block merge sort
Kirkpatrick-Reisch sort
Timsort
Introsort
Spreadsort
Merge-insertion sort
Other
Topological sorting
Pre-topological order
Pancake sorting
Spaghetti sort
vteData structures and algorithmsData structures
Array
Associative array
Binary search tree
Fenwick tree
Graph
Hash table
Heap
Linked list
Queue
Segment tree
Stack
String
Tree
Trie
Algorithms
Backtracking
Binary search
Breadth-first search
Depth-first search
Divide and conquer
Dynamic programming
Fold
Greedy
Minimax
Recursion
Sorting
Streaming
Sweep line
Topological sorting





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Topological_sorting&oldid=1062117596"
		Categories: Graph algorithmsSorting algorithmsDirected graphsHidden categories: Articles with example pseudocode
	
