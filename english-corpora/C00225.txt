
Title:
Edsger W. Dijkstra
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Dutch computer scientist
.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}Edsger W. DijkstraDijkstra in 2002Born(1930-05-11)11 May 1930Rotterdam, NetherlandsDied6 August 2002(2002-08-06) (agedÂ 72)Nuenen, NetherlandsCitizenshipNetherlandsEducationLeiden University (B.S., M.S.)University of Amsterdam (Ph.D.)KnownÂ forSee belowSpouse(s)Maria (Ria) C. DebetsAwardsSIGCSE Outstanding Contribution (1989)Turing Award (1972)ACM Fellow (1994)Dijkstra Prize (2002)Scientific careerFieldsComputer scienceTheoretical computer scienceInstitutionsMathematisch CentrumEindhoven University of TechnologyBurroughs CorporationUniversity of Texas at AustinThesisCommunication with an Automatic ComputerÂ (1959)Doctoral advisorAdriaan van WijngaardenDoctoral studentsNico HabermannJan van de SnepscheutNetty van GasterenDavid A. NaumannInfluencesAdriaan van WijngaardenInfluencedTony Hoare[1]Niklaus Wirth[2][3]Per Brinch Hansen[4]Leslie Lamport[5][6]Shlomi Dolev[7]Alexander Stepanov[8]David GriesDavid Parnas

Edsger Wybe Dijkstra (/ËdaÉªkstrÉ/ DYKE-strÉ; Dutch:Â [ËÉtsxÉr ËÊibÉ ËdÉikstra] (listen); 11 May 1930 â 6 August 2002) was a Dutch computer scientist, programmer, software engineer, systems scientist, science essayist,[9][10] and pioneer in computing science.[11] A theoretical physicist by training, he worked as a programmer at the Mathematisch Centrum (Amsterdam) from 1952 to 1962. A university professor for much of his life, Dijkstra held the Schlumberger Centennial Chair in Computer Sciences at the University of Texas at Austin from 1984 until his retirement in 1999. He was a professor of mathematics at the Eindhoven University of Technology (1962â1984) and a research fellow at the Burroughs Corporation (1973â1984). In 1972, he became the first person who was neither American nor British to win the Turing Award.
One of the most influential figures of computing science's founding generation,[2][3][5][6][12][13] Dijkstra helped shape the new discipline both as an engineer and a theorist.[14][15] His fundamental contributions cover diverse areas of computing science, including compiler construction, operating systems, distributed systems, sequential and concurrent programming, programming paradigm and methodology, programming language research, program design, program development, program verification, software engineering principles, graph algorithms, and philosophical foundations of computer programming and computer science. Many of his papers are the source of new research areas. Several concepts and problems that are now standard in computer science were first identified by Dijkstra or bear names coined by him.[16][17]
Until the mid-1960s computer programming was considered more an art (or a craft) than a scientific discipline. In Harlan Mills's words (1986), "programming [before the 1970s] was regarded as a private, puzzle-solving activity of writing computer instructions to work as a program". In the late 1960s, computer programming was in a state of crisis. Dijkstra was one of a small group of academics and industrial programmers who advocated a new programming style to improve the quality of programs. Dijkstra, who had a background in mathematics and physics, was one of the driving forces behind the acceptance of computer programming as a scientific discipline.[18][19] He coined the phrase "structured programming" and during the 1970s this became the new programming orthodoxy.[20][21][22] As the originator of the structured programming movement (the first remarkable movement in the history of computer programming), his ideas about programming methodology helped lay the foundations for the birth and development of the professional discipline of software engineering, enabling programmers to organize and manage increasingly complex software projects.[23][24] As Bertrand Meyer (2009) noted, "The revolution in views of programming started by Dijkstra's iconoclasm led to a movement known as structured programming, which advocated a systematic, rational approach to program construction. Structured programming is the basis for all that has been done since in programming methodology, including object-oriented programming."[25]
The academic study of concurrent computing started in the 1960s, with Dijkstra (1965) credited with being the first paper in this field, identifying and solving the mutual exclusion problem.[5][26] He was also one of the early pioneers of the research on principles of distributed computing. His foundational work on concurrency, semaphores, mutual exclusion, deadlock (deadly embrace), finding shortest paths in graphs, fault-tolerance, self-stabilization, among many other contributions comprises many of the pillars upon which the field of distributed computing is built. Shortly before his death in 2002, he received the ACM PODC Influential-Paper Award in distributed computing for his work on self-stabilization of program computation. This annual award was renamed the Dijkstra Prize (Edsger W. Dijkstra Prize in Distributed Computing) the following year.[27] As the prize, sponsored jointly by the Association for Computing Machinery (ACM) Symposium on Principles of Distributed Computing (PODC) and the European Association for Theoretical Computer Science (EATCS) International Symposium on Distributed Computing (DISC), recognizes that "No other individual has had a larger influence on research in principles of distributed computing".

Contents

1 Biography

1.1 Early years
1.2 Mathematisch Centrum, Amsterdam
1.3 Eindhoven University of Technology
1.4 Burroughs Corporation
1.5 The University of Texas at Austin
1.6 Last years


2 Pioneering contributions and impact on computing science

2.1 Algorithmic work
2.2 Compiler construction and programming language research
2.3 Role of programming methodology and the birth of the structured programming movement
2.4 Research on program design and development at the dawn of software engineering
2.5 Operating system research
2.6 Concurrent computing (concurrent programming)
2.7 Distributed computing (distributed programming)
2.8 Formal specification and verification
2.9 On the nature of computer science and computer programming


3 Personality and working style
4 EWD manuscripts
5 Personal life and death
6 Influence and recognition
7 Awards and honors
8 See also
9 Selected publications
10 References
11 Further reading
12 External links



Biography[edit]
Early years[edit]
Edsger W. Dijkstra was born in Rotterdam.  His father was a chemist who was president of the Dutch Chemical Society; he taught chemistry at a secondary school and was later its superintendent.  His mother was a mathematician, but never had a formal job.[28][29]
Dijkstra had considered a career in law and had hoped to represent the Netherlands in the United Nations. However, after graduating from school in 1948, at his parents' suggestion he studied mathematics and physics and then theoretical physics at the University of Leiden.[14]
In the early 1950s, electronic computers were a novelty. Dijkstra stumbled on his career quite by accident, and through his supervisor, Professor A. Haantjes, he met Adriaan van Wijngaarden, the director of the Computation Department at the Mathematical Center in Amsterdam, who offered Dijkstra a job; he officially became the Netherlands' first "programmer" in March 1952.[14]
For some time Dijkstra remained committed to physics, working on it in Leiden three days out of each week. With increasing exposure to computing, however, his focus began to shift. As he recalled:[30]

.mw-parser-output .templatequote{overflow:hidden;margin:1em 0;padding:0 40px}.mw-parser-output .templatequote .templatequotecite{line-height:1.5em;text-align:left;padding-left:1.6em;margin-top:0}After having programmed for some three years, I had a discussion with A. van Wijngaarden, who was then my boss at the Mathematical Center in Amsterdam, a discussion for which I shall remain grateful to him as long as I live. The point was that I was supposed to study theoretical physics at the University of Leiden simultaneously, and as I found the two activities harder and harder to combine, I had to make up my mind, either to stop programming and become a real, respectable theoretical physicist, or to carry my study of physics to a formal completion only, with a minimum of effort, and to become....., yes what? A programmer? But was that a respectable profession? For after all, what was programming? Where was the sound body of knowledge that could support it as an intellectually respectable discipline? I remember quite vividly how I envied my hardware colleagues, who, when asked about their professional competence, could at least point out that they knew everything about vacuum tubes, amplifiers and the rest, whereas I felt that, when faced with that question, I would stand empty-handed. Full of misgivings I knocked on Van Wijngaarden's office door, asking him whether I could "speak to him for a moment"; when I left his office a number of hours later, I was another person. For after having listened to my problems patiently, he agreed that up till that moment there was not much of a programming discipline, but then he went on to explain quietly that automatic computers were here to stay, that we were just at the beginning and could not I be one of the persons called to make programming a respectable discipline in the years to come? This was a turning point in my life and I completed my study of physics formally as quickly as I could.ââEdsger Dijkstra, The Humble Programmer (EWD340), Communications of the ACM
When Dijkstra married Maria (Ria) C. Debets in 1957, he was required as a part of the marriage rites to state his profession. He stated that he was a programmer, which was unacceptable to the authorities, there being no such profession then in The Netherlands.[30][31]
In 1959, he received his PhD from the University of Amsterdam for a thesis entitled 'Communication with an Automatic Computer', devoted to a description of the assembly language designed for the first commercial computer developed in the Netherlands, the Electrologica X1. His thesis supervisor was Van Wijngaarden.[16]

Mathematisch Centrum, Amsterdam[edit]
From 1952 until 1962, Dijkstra worked at the Mathematisch Centrum in Amsterdam,[16] where he worked closely with Bram Jan Loopstra and Carel S. Scholten, who had been hired to build a computer. Their mode of interaction was disciplined: They would first decide upon the interface between the hardware and the software, by writing a programming manual. Then the hardware designers would have to be faithful to their part of the contract, while Dijkstra, the programmer, would write software for the nonexistent machine. Two of the lessons he learned from this experience were the importance of clear documentation, and that program debugging can be largely avoided through careful design.[14]
Dijkstra formulated and solved the shortest path problem for a demonstration at the official inauguration of the ARMAC computer in 1956. Because of the absence of journals dedicated to automatic computing, he did not publish the result until 1959.
At the Mathematical Center, Dijkstra and his colleague Jaap ZonneveldÂ [nl] developed the first compiler for the programming language ALGOL 60 by August 1960, more than a year before a compiler was produced by another group.[14] It had a profound influence on his later thinking on programming as a scientific activity.

Eindhoven University of Technology[edit]
  The Eindhoven University of Technology, located in Eindhoven in the south of the Netherlands, where Dijkstra was a professor of mathematics from 1962 to 1984.
In 1962, Dijkstra moved to Eindhoven, and later to Nuenen, in the south of the Netherlands, where he became a professor in the Mathematics Department at the Eindhoven University of Technology.[16] The university did not have a separate computer science department and the culture of the mathematics department did not particularly suit him. Dijkstra tried to build a group of computer scientists who could collaborate on solving problems. This was an unusual model of research for the Mathematics Department.[14] In the late 1960s he built the THE operating system (named for the university, then known as Technische Hogeschool Eindhoven), which has influenced the designs of subsequent operating systems through its use of software based paged virtual memory.[32]

Burroughs Corporation[edit]
Dijkstra joined Burroughs Corporation, a company known then for producing computers based on an innovative hardware architecture, as its research fellow in August 1973. His duties consisted of visiting some of the firm's research centers a few times a year and carrying on his own research, which he did in the smallest Burroughs research facility, namely, his study on the second floor of his house in Nuenen. In fact, Dijkstra was the only research fellow of Burroughs and worked for it from home, occasionally travelling to its branches in the United States. As a result, he reduced his appointment at the university to one day a week. That day, Tuesday, soon became known as the day of the famous 'Tuesday Afternoon Club', a seminar during which he discussed with his colleagues scientific articles, looking at all aspects: notation, organisation, presentation, language, content, etc. Shortly after he moved in 1984 to the University of Texas at Austin (USA), a new 'branch' of the Tuesday Afternoon Club emerged in Austin, Texas.[16]
The Burroughs years saw him at his most prolific in output of research articles. He wrote nearly 500 documents in the EWD series (described below), most of them technical reports, for private circulation within a select group.[14]

The University of Texas at Austin[edit]
  The University of Texas at Austin, where Dijkstra held the Schlumberger Centennial Chair in Computer Sciences from 1984 until 1999.
Dijkstra accepted the Schlumberger Centennial Chair in the Computer Science Department at the University of Texas at Austin in 1984.

Last years[edit]
Dijkstra worked in Austin until his retirement  in November 1999. To mark the occasion and to celebrate his forty-plus years of seminal contributions to computing science, the Department of Computer Sciences organized a symposium, which took place on his 70th birthday in May 2000.[14]
Dijkstra and his wife returned from Austin to his original house in Nuenen (Netherlands) where he found that he had only months to live. He said that he wanted to retire in Austin, Texas, but to die in the Netherlands. Dijkstra died on 6 August 2002 after a long struggle with cancer.[33] He and his wife Maria (Ria) Debets were survived by their three children: Marcus, Femke, and the computer scientist Rutger M. Dijkstra.

Pioneering contributions and impact on computing science[edit]
.mw-parser-output .sidebar{width:22em;float:right;clear:right;margin:0.5em 0 1em 1em;background:#f8f9fa;border:1px solid #aaa;padding:0.2em;text-align:center;line-height:1.4em;font-size:88%;border-collapse:collapse;display:table}body.skin-minerva .mw-parser-output .sidebar{display:table!important;float:right!important;margin:0.5em 0 1em 1em!important}.mw-parser-output .sidebar-subgroup{width:100%;margin:0;border-spacing:0}.mw-parser-output .sidebar-left{float:left;clear:left;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-none{float:none;clear:both;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-outer-title{padding:0 0.4em 0.2em;font-size:125%;line-height:1.2em;font-weight:bold}.mw-parser-output .sidebar-top-image{padding:0.4em}.mw-parser-output .sidebar-top-caption,.mw-parser-output .sidebar-pretitle-with-top-image,.mw-parser-output .sidebar-caption{padding:0.2em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-pretitle{padding:0.4em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-title,.mw-parser-output .sidebar-title-with-pretitle{padding:0.2em 0.8em;font-size:145%;line-height:1.2em}.mw-parser-output .sidebar-title-with-pretitle{padding:0.1em 0.4em}.mw-parser-output .sidebar-image{padding:0.2em 0.4em 0.4em}.mw-parser-output .sidebar-heading{padding:0.1em 0.4em}.mw-parser-output .sidebar-content{padding:0 0.5em 0.4em}.mw-parser-output .sidebar-content-with-subgroup{padding:0.1em 0.4em 0.2em}.mw-parser-output .sidebar-above,.mw-parser-output .sidebar-below{padding:0.3em 0.8em;font-weight:bold}.mw-parser-output .sidebar-collapse .sidebar-above,.mw-parser-output .sidebar-collapse .sidebar-below{border-top:1px solid #aaa;border-bottom:1px solid #aaa}.mw-parser-output .sidebar-navbar{text-align:right;font-size:115%;padding:0 0.4em 0.4em}.mw-parser-output .sidebar-list-title{padding:0 0.4em;text-align:left;font-weight:bold;line-height:1.6em;font-size:105%}.mw-parser-output .sidebar-list-title-c{padding:0 0.4em;text-align:center;margin:0 3.3em}@media(max-width:720px){body.mediawiki .mw-parser-output .sidebar{width:100%!important;clear:both;float:none!important;margin-left:0!important;margin-right:0!important}}Programming paradigms
Action
Agent-oriented
Array-oriented
Automata-based
Concurrent computing
Choreographic programming
Relativistic programming
Data-driven
Declarative (contrast: Imperative)
Functional
Functional logic
Purely functional
Logic
Abductive logic
Answer set
Concurrent logic
Functional logic
Inductive logic
Constraint
Constraint logic
Concurrent constraint logic
Dataflow
Flow-based
Reactive
Functional reactive
Ontology
Query language
Differentiable
Dynamic/scripting
Event-driven
Function-level (contrast: Value-level)
Point-free style
Concatenative
Generic
Imperative (contrast: Declarative)
Procedural
Object-oriented
Polymorphic
Intentional
Language-oriented
Domain-specific
Literate
Natural-language programming
Metaprogramming
Automatic
Inductive programming
Reflective
Attribute-oriented
Macro
Template
Non-structured (contrast: Structured)
Array
Nondeterministic
Parallel computing
Process-oriented
Probabilistic
Quantum
Set-theoretic
Stack-based
Structured (contrast: Non-structured)
Block-structured
Structured concurrency
Object-oriented
Actor-based
Class-based
Concurrent
Prototype-based
By separation of concerns:
Aspect-oriented
Role-oriented
Subject-oriented
Recursive
Symbolic
Value-level (contrast: Function-level)
.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vte
Although a theoretical physicist by training, Dijkstra became one of the most influential figures of computing science's founding generation.[2][3][5][6][7][8][12][13] As an early pioneer in many research areas of computing science, he helped shape the new discipline from both an engineering and an academic perspective. Many of his papers are the source of new research areas. Many concepts that are now standard in computer science were first identified by Dijkstra or bear names coined by him. Several important problems were also first formulated and solved by him. A 1994 survey of over a thousand professors of computer science was conducted to obtain a list of 38 most influential scholarly papers in the field, and Dijkstra is the author of five papers.[12][34][13] At the age of 42, he became the first non-American, non-British, and continental European winner of the Turing Award.
During his forty-plus years as a computing scientist, which included positions in both academia and industry, Dijkstra made numerous seminal contributions to many areas of computing science, including compiler construction, operating systems, concurrent computing (concurrent programming), distributed computing, programming paradigm and methodology, programming language research, program design, program development, program verification, software engineering principles, algorithm design, and philosophical foundations of computer programming and computer science. In addition, Dijkstra was intensely interested in teaching computer science, and in the relationships between academic computing science and the software industry.
His main pioneering contributions (including ideas, inventions and innovations) include:

Concepts, methods, principles and theories: DijkstraâZonneveld ALGOL 60 compiler (first complete working ALGOL 60 compiler), call stack, concurrency, concurrent programming, cooperating sequential processes, critical section, deadly embrace (deadlock), dining philosophers problem, Dutch national flag problem, fault-tolerant systems, goto-less programming, guarded command language (guarded commands), layered structure in software architecture, levels of abstraction, multithreaded programming, mutual exclusion (mutex or lock), producerâconsumer problem (bounded buffer problem), program families, predicate transformer semantics, process synchronization, self-stabilizing distributed systems (self-stabilization), semaphore, separation of concerns, sleeping barber problem, structured analysis, structured programming, THE multiprogramming system, unbounded nondeterminism, weakest precondition calculus
Algorithms: Dijkstra's algorithm, DJP algorithm, Dijkstra-Scholten algorithm, Dekker's algorithm (generalization), banker's algorithm, smoothsort, shunting-yard algorithm, tri-color marking algorithm, concurrent algorithms, distributed algorithms, deadlock prevention algorithms, mutual exclusion algorithms, self-stabilizing algorithms
Algorithmic work[edit]
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}See also: Shortest path problem, Graph algorithms, Concurrent algorithms, Mutual exclusion algorithms, Deadlock prevention algorithms, Distributed algorithms, Self-stabilizing algorithms, Sorting algorithms, and Parsing algorithms
  Dijkstra's algorithm. It picks the unvisited vertex with the lowest-distance, calculates the distance through it to each unvisited neighbor, and updates the neighbor's distance if smaller. Mark visited (set to red) when done with neighbors.
Dijkstra's algorithmic work (especially graph algorithms, concurrent algorithms, and distributed algorithms) plays an important role in many areas of computing science. According to Leslie Lamport (2002), Dijkstra "started the field of concurrent and distributed algorithms with his 1965 CACM paper "Solution of a Problem in Concurrent Programming Control", in which he first stated and solved the mutual exclusion problem." As Lamport explains, "that paper is probably why PODC exists (...). It remains to this day the most influential paper in the field. That it did not win a PODC Influential Paper Award reflects an artificial separation between concurrent and distributed algorithmsâa separation that has never existed in Dijkstra's work."[5]
In 1959 Dijkstra published in a 3-page article 'A note on two problems in connexion with graphs' the algorithm to find the shortest path in a graph between any two given nodes, now called Dijkstra's algorithm. Its impact over the next 40 years is summarised from the article of Mikkel Thorup, 'Undirected Single Source Shortest Paths with Positive Integer Weights in Linear Time' (1999): "Since 1959, all theoretical developments in SSSP [Single-Source Shortest Paths] for general directed and undirected graphs have been based on Dijkstra's algorithm." Dijkstra's algorithm is used in SPF, Shortest Path First, which is used in the routing protocols OSPF and IS-IS. Various modifications to Dijkstra's algorithm have been proposed by many authors using heuristics to reduce the run time of shortest path search. One of the most used heuristic algorithms is the A* search algorithm (first described by Peter Hart, Nils Nilsson and Bertram Raphael of Stanford Research Institute in 1968),[35] the main goal is to reduce the run time by reducing the search space. Dijkstra thought about the shortest path problem when working at the Mathematical Center in Amsterdam in 1956 as a programmer to demonstrate capabilities of a new computer named ARMAC. His objective was to choose both a problem and an answer (that would be produced by computer) that non-computing people could understand. He designed the shortest path algorithm in about 20 minutes without aid of paper and pen and later implemented it for ARMAC for a slightly simplified transportation map of 64 cities in the Netherlands (so that 6 bits would suffice to represent the city in the algorithm).[29] As he recalled, in an interview published in 2001:[36]

What is the shortest way to travel from Rotterdam to Groningen, in general: from given city to given city? It is the algorithm for the shortest path, which I designed in about twenty minutes. One morning I was shopping in Amsterdam with my young fiancÃ©e, and tired, we sat down on the cafÃ© terrace to drink a cup of coffee and I was just thinking about whether I could do this, and I then designed the algorithm for the shortest path. As I said, it was a twenty-minute invention. In fact, it was published in â59, three years late. The publication is still readable, it is, in fact, quite nice. One of the reasons that it is so nice was that I designed it without pencil and paper. I learned later that one of the advantages of designing without pencil and paper is that you are almost forced to avoid all avoidable complexities. Eventually that algorithm became, to my great amazement, one of the cornerstones of my fame.ââEdsger Dijkstra, in an interview with Philip L. Frana, Communications of the ACM 53 (8), 2001.
A year later, he came across another problem from hardware engineers working on the institute's next computer: minimize the amount of wire needed to connect the pins on the back panel of the machine. As a solution, he rediscovered the algorithm known as Prim's minimal spanning tree algorithm. The Prim's algorithm was originally developed in 1930 by Czech mathematician VojtÄch JarnÃ­k.[37] and later independently rediscovered and republished by Robert C. Prim in 1957,[38] and Dijkstra in 1959.[39] Therefore, it is also sometimes called the DJP algorithm.[40]
In 1961, Dijkstra first described the shunting-yard algorithm, a method for parsing mathematical expressions specified in infix notation, in the Mathematisch Centrum report.[41] It can be used to produce output in Reverse Polish notation (RPN) or as an abstract syntax tree (AST). The algorithm was named the shunting yard algorithm because its operation resembles that of a railroad shunting yard. The shunting-yard algorithm is commonly used to implement operator-precedence parsers.
In 1962 or 1963, Dijkstra proposed the semaphore mechanism for mutual exclusion algorithm for n processes (a generalization of Dekker's algorithm), which was probably the first published concurrent algorithm and which introduced a new area of algorithmic research. He also identified the deadlock problem and proposed the banker's algorithm that prevents deadlock.
In 1974, Dijkstra presented three self-stabilization algorithms for mutual exclusion on a ring. This work is considered the first to introduce and demonstrate the self-stabilization concept.[42]
In the mid-1970s, Dijkstra (together with other authors) introduced two useful abstractions (mutator and collector) to the study of garbage collection. The mutator abstracts the process that performs the computation, including allocation of a new storage cell. The collector is the process that automatically reclaims garbage. Further, this paper gives a formalization of tri-color marking that is basic to incremental garbage collection.[43][44]
In the early 1980s, Dijkstra and Carel S. Scholten proposed the DijkstraâScholten algorithm for detecting termination in distributed systems.
In 1981, Dijkstra developed smoothsort, a comparison-based sorting algorithm and a variation of heapsort.

Compiler construction and programming language research[edit]
See also: ALGOL 60, Electrologica X1, and Compiler construction
  ALGOL 60 was created as the result of the January 1960 ALGOL conference in Paris. By August 1960, Dijkstra and his colleague Jaap Zonneveld put into operation the first complete working ALGOL 60 compiler (for the Electrologica X1 computer) in the world. The DijkstraâZonneveld compiler predates the second ALGOL 60 compiler (by another group) by more than a year.[14]
Dijkstra was known to be a fan of the programming language ALGOL, and worked on the team that implemented the first compiler for ALGOL 60, which he was closely involved in developing, realising, and popularising. As discussed by Peter Naur in the article 'The European side of the last phase of the development of ALGOL 60', in the Proceedings of the First ACM SIGPLAN Conference on History of Programming Languages, January 1978, Dijkstra took part in the period 1958â1959 in a number of meetings that culminated in the publication of the report defining the ALGOL 60 language. Dijkstra's name does not appear in the list of 13 authors of the final report, but he was an official member of the International Federation for Information Processing (IFIP) IFIP Working Group 2.1 on Algorithmic Languages and Calculi,[45] which specified, supports, and maintains ALGOL 60 and ALGOL 68.[46] He eventually left the committee, apparently because he could not agree with the majority opinions. Still, while at the Mathematisch Centrum (Amsterdam), he wrote jointly with Jaap Zonneveld the first ALGOL 60 compiler. By August 1960, he and Zonneveld put into operation the first complete working ALGOL 60 compiler (for the Electrologica X1 computer), more than a year before a compiler was produced by another group.[14] Dijkstra and Zonneveld, who collaborated on the compiler, agreed not to shave until the project was completed. Zonneveld shaved shortly thereafter, but Dijkstra kept his beard for the rest of his life.[47]
ALGOL was the result of a collaboration of American and European committees. ALGOL 60 (short for ALGOrithmic Language 1960) is a member of the ALGOL family of computer programming languages. It followed on from ALGOL 58 and inspired many languages that followed it. It gave rise to many other languages, including BCPL, B, Pascal, Simula, and C.[48] Algol 60 was a sophisticatedly designed computer language and it provided a large number of hitherto unknown implementation challenges. As Bjarne Stroustrup notes, "one problem with Algol60 was that no one knew how to implement it."[49] A major new challenge in Algol 60 implementation was the run-time allocation and management of data. In 1960, Dijkstra and Zonneveld showed how recursive procedures could be executed using a run-time stack of activation records, and how to efficiently access identifiers from statically enclosing scopes using the so-called display.[50] The ALGOL 60 compiler was one of the first to support recursion[51] employing a novel method to do so. Dijkstra's short book Primer of Algol 60 Programming, originally published in 1962, was the standard reference for the language for several years.

Role of programming methodology and the birth of the structured programming movement[edit]
Main articles: Software crisis, Programming methodology, Goto-less programming, and Structured programming
In 1965 Dijkstra wrote his famous Notes on Structured Programming and declared programming as a discipline in contrast to a craft. Also in 1965 Hoare published an important paper about data structuring. These ideas had a profound influence on new programming language, in particular Pascal. Languages are the vehicles in which these ideas were to be expressed. Structured programming became supported by a structured programming language.ââNiklaus Wirth, IEEE Annals of the History of Computing (2008)[3]
The revolution in views of programming started by Dijkstra's iconoclasm led to a movement known as structured programming, which advocated a systematic, rational approach to program construction. Structured programming is the basis for all that has been done since in programming methodology, including object-oriented programming.ââBertrand Meyer, Touch of Class: Learning to Program Well with Objects and Contracts (2009)[25]
Computer programming in the 1950s to 1960s was not recognized as an academic discipline and unlike mature sciences there were no theoretical concepts or coding systems. Programming as a professional activity was poorly understood in those years. In the late 1960s computer programming was in state of crisis. Software crisis is a term used in the early days of computing science for the difficulty of writing useful and efficient computer programs in the required time. The software crisis was due to the rapid increases in computer power and the complexity of the problems that could be tackled. With the increase in the complexity of the software, many software problems arose because existing methods were insufficient. The term "software crisis" was coined by some attendees at the first of the NATO Software Engineering Conferences in 1968 at Garmisch, Germany.[52][53][54] His 1972 ACM Turing Award Lecture makes reference to this same problem: "The major cause of the software crisis is that the machines have become several orders of magnitude more powerful! To put it quite bluntly: as long as there were no machines, programming was no problem at all; when we had a few weak computers, programming became a mild problem, and now we have gigantic computers, programming has become an equally gigantic problem."[30]
While Dijkstra had programmed extensively in machine code in the 1950s, he came to the conclusion that in high-level languages frequent use of the GOTO statement was usually symptomatic of poor structure. In 1968 he wrote a private paper "A Case against the GO TO Statement",[55] which was then published as a letter in CACM.[56] Editor Niklaus Wirth gave this letter the heading "Go To Statement Considered Harmful", which introduced the phrase "considered harmful" into computing.
Dijkstra argued that the programming statement GOTO, found in many high-level programming languages, is a major source of errors, and should therefore be eliminated. This letter caused a huge debate in the programming community. Some went to the length of equating good programming with the elimination of GO TO. Dijkstra refused to mention the debate, or even the GO TO statement, in his article "Notes on Structured Programming". The debate has long since died down; programming languages provide alternatives to the GO TO, few programmers today use it liberally, and most never use it at all.[14]
Dijkstra's thesis was that departures from linear control flow were clearer if allowed only in disciplined higher-level structures such as the if-then-else statement and the while loop. This methodology was developed into structured programming movement, the title of his 1972 book, coauthored with Tony Hoare and Ole-Johan Dahl. Considered by many as the first significant movement in the history of computer programming, structured programming became the new programming orthodoxy during the 1970s.[57][58][59]
Structured programming is often regarded as "goto-less programming". But as Bertrand Meyer notes, "As the first book on the topic [Structured Programming by Dijkstra, Dahl, and Hoare] shows, structured programming is about much more than control structures and the goto. Its principal message is that programming should be considered a scientific discipline based on mathematical rigor."[25] As a programming paradigm, structured programming â especially in the 1970s and 1980s â significantly influenced the birth of many modern programming languages such as Pascal,[2][3][60] C, Modula-2, and Ada.[61] The Fortran 77 version which incorporates the concepts of structured programming, was released in 1978. The C++ language was a considerably extended and enhanced version of the popular structured programming language C (see also: list of C-based programming languages). Since C++ was developed from a more traditional structured language, it is a 'hybrid language', rather than a pure object-oriented programming language.[62]
In his article Structured Programming: Retrospect and Prospect (1986), Harlan Mills writes, "Edsger W. Dijkstra's 1969 Structured Programming article precipitated a decade of intense focus on programming techniques that has fundamentally altered human expectations and achievements in software development. Before this decade of intense focus, programming was regarded as a private, puzzle-solving activity of writing computer instructions to work as a program. After this decade, programming could be regarded as a public, mathematics-based activity of restructuring specifications into programs. Before, the challenge was in getting programs to run at all, and then in getting them further debugged to do the right things. After, programs could be expected to both run and do the right things with little or no debugging. Before, it was common wisdom that no sizable program could be error-free. After, many sizable programs have run a year or more with no errors detected. These expectations and achievements are not universal because of the inertia of industrial practices. But they are well-enough established to herald fundamental change in software development."
The book Concise Encyclopedia of Computer Science (2004), edited by Edwin D. Reilly, notes that "the major contributions of structured programming have been twofoldâthe elevation of programming technique to something less of an art and more of a science, and the demonstration that carefully structured programs can be creative works of sufficient literary merit to deserve being read by humans and not just by computer."[63]

Research on program design and development at the dawn of software engineering[edit]
See also: History of software engineering, Software architecture, and Separation of concerns
Dijkstra's ideas about programming methodology (especially the structured programming movement) helped lay the foundations for the birth and development of the professional discipline of software engineering (in particular the software design and development), enabling programmers to organize and manage increasingly complex software projects.[64][65] In the late 1960s Dijkstra discussed the concept of program families. In the mid 1970s, David Parnas and others clarified the idea and showed how to apply it in software engineering principles.
The rise of the structured programming movement led to many other structured approaches applied to software design. The techniques of structured analysis and structured design are outgrowths of structured programming concepts and techniques, and of the early ideas about modular design. Principles of modularity were strengthened by Larry Constantine's concepts of coupling (to be minimized between modules) and cohesion (to be maximized within modules), by David Parnas's techniques of information hiding, and by abstract data types.[66] A number of tools and methods employing structured concepts were developed, such as Structured Design, Jackson's Structured Programming, Ross' Structured Analysis and Design Technique (SADT), Yourdon's Structured Method, Structured Systems Analysis and Design Method (SSADM), and James Martin's information technology engineering. The field of software metrics is often considered as a direct influence of the structured programming movement on software engineering in the 1970s.
Separation of concerns (SoC), one of the basic principles in software engineering, is a design principle for separating a computer program into distinct sections, such that each section addresses a separate concern. The term separation of concerns was coined by Dijkstra in his 1974 paper "On the role of scientific thought".[67]

Operating system research[edit]
Main article: THE multiprogramming system
In the 1960s Dijkstra and his colleagues in Eindhoven designed and implemented THE (standing for 'Technische Hogeschool Eindhoven') operating system, which was organised into clearly identified abstraction layers.[68] His 1968 article on this subject provided the foundation for subsequent designs of the operating systems. The IEEE Computer Society's David Alan Grier writes, "We generally trace the idea of building computer systems in layers back to a 1967 paper that the Dutch computer scientist Edsger Dijkstra gave to a joint IEEE Computer Society/ACM conference. Prior to this paper, engineers had struggled with the problem of how to organize software. If you look at early examples of programs, and you can find many in the electronic library of the Computer Society, you will find that most code of that era is complicated, difficult to read, hard to modify, and challenging to reuse. In his 1967 paper, Dijkstra described how software could be constructed in layers and gave an example of a simple operating system that used five layers. He admitted that this system might not be a realistic test of his ideas but he argued that the "larger the project, the more essential the structuring!" The idea of using layers to control complexity has become a mainstay of software architecture. We see it in many forms and apply it to many problems. We see it in the hierarchy of classes in object-oriented programming and in the structure of service-oriented architecture (SOA). SOA is a relatively recent application of layering in computer science. It was articulated in 2007 as a means of controlling complexity in business systems, especially distributed systems that make substantial use of the Internet. Like Dijkstra's plan for system development, its layering system is called the SOA Solution Stack or S3. The S3's nine layers are: 1) operational systems, 2) service components, 3) services, 4) business processes, 5) consumer actions, 6) system integration, 7) quality control and assurance, 8) information architecture, and 9) system governance and policies."[69]
Dijkstra organized the design of the system in layers in order to reduce the overall complexity of the software. Though the term 'architecture' had not yet been used to describe software design, this was certainly considered the first glimpse of software architecture.[70] It introduced a number of design principles which have become part of the working vocabulary of every professional programmer: levels of abstraction, programming in layers, the semaphore, and cooperating sequential processes. His original paper on the THE operating system was reprinted in the 25th Anniversary issue of Communications of the ACM, in January 1983. By way of introduction, the Editor-in-Chief says, "This project initiated a long line of research in multilevel systems architecture â a line that continues to the present day because hierarchical modularity is a powerful approach to organizing large systems."[14]

Concurrent computing (concurrent programming)[edit]
Main articles: Concurrency (computer science), Concurrent computing, Concurrent programming, Concurrent algorithms, Dining philosophers problem, Mutual exclusion, Semaphore (programming), and Cooperating sequential processes
While concurrent program execution had been considered for years, the computer science of concurrency began with Edsger Dijkstra's seminal 1965 paper that introduced the mutual exclusion problem. (...) The second fundamental concurrent programming problem to be studied was producer-consumer synchronization. This form of synchronization was used at the hardware level in the earliest computers, but it was first identified as a concurrency problem by Dijkstra in 1965, though not published in this formulation until 1968. (...) After distributed systems, the next major step in concurrent algorithms was the study of fault tolerance. The first scientific examination of fault tolerance was Dijkstra's seminal 1974 paper on self-stabilization. However, as sometimes happens with work that is ahead of its time, that paper received little attention and was essentially forgotten for a decade. (...) The ensuing decades have seen a huge growth of interest in concurrency particularly in distributed systems. Looking back at the origins of the field, what stands out is the fundamental role played by Edsger Dijkstra, to whom this history is dedicated.ââLeslie Lamport, Turing Lecture: The Computer Science of Concurrency: The Early Years (June 2015)[6]
  A semaphore (Dutch: seinpaal), the term used in Dijkstra's original paper.[71] In the early 1960s Dijkstra proposed the first synchronisation mechanism for concurrent processes, the semaphore with its two operations, P and V.
In a one-page paper from 1965 Dijkstra introduced the 'mutual exclusion problem' for n processes and discussed a solution to it. It was probably the first published concurrent algorithm.[6][16] The notion, standard by now, of a 'critical section' was also introduced in this paper. Per Brinch Hansen, a pioneer in the field of concurrent computing, considers Dijkstra's Cooperating Sequential Processes (1965) to be the first classic paper in concurrent programming. As Brinch Hansen notes, 'Dijkstra lays the conceptual foundation for abstract concurrent programming' with that paper.[72]

  A simple example of two processes modifying a linked list at the same time causing a conflict. The requirement of mutual exclusion was first identified and solved by Dijkstra in his seminal 1965 paper titled Solution of a problem in concurrent programming control, and is credited as the first topic in the study of concurrent algorithms.
In 1968 Dijkstra published his seminal paper 'Cooperating sequential processes', a 70-page essay that originated the field of concurrent programming. He discussed in it the notion of mutual exclusion (mutex) and the criteria a satisfactory solution should satisfy. He also redressed the historical perspective left out of his 1965 paper by including the first known correct solution to the mutual exclusion problem, for two processes, due to Theodorus Dekker. Dijkstra subsequently generalized Dekker's solution to n processes.[73][74] Further, he proposed the first synchronisation mechanism for concurrent processes,[75] the semaphore with its two operations, P and V. He also identified the 'deadlock problem' (called there 'the problem of the deadly embrace')[76] and proposed an elegant 'Banker's algorithm' that prevents deadlock. The deadlock detection and prevention became perennial research problems in the field of concurrent programming.

  Illustration of the dining philosophers problem
The dining philosophers problem is an example problem often used in concurrent algorithm design to illustrate synchronization issues and techniques for resolving them. It was originally formulated in 1965 by Dijkstra as a student exam exercise, presented in terms of computers competing for access to tape drive peripherals. Soon after, Tony Hoare gave the problem its present formulation.[77] The sleeping barber problem is also attributed to Dijkstra.
Michel Raynal (2012) writes, "Since the early work of E.W. Dijkstra (1965), who introduced the mutual exclusion problem, the concept of a process, the semaphore object, the notion of a weakest precondition, and guarded commands (among many other contributions), synchronization is no longer a catalog of tricks but a domain of computing science with its own concepts, mechanisms, and techniques whose results can be applied in many domains. This means that process synchronization has to be a major topic of any computer science curriculum."[78]
John W. McCormick et al. (2011) notes, "The notion of the concurrent program as a means for writing parallel programs without regard for the underlying hardware was first introduced by Edsger Dijkstra (1968). Moti Ben-Ari (1982) elegantly summed up Dijkstra's idea in three sentences: âConcurrent programming is the name given to programming notation and techniques for expressing potential parallelism and solving the resulting synchronization and communication problems. Implementation of parallelism is a topic in computer systems (hardware and software) that is essentially independent of concurrent programming. Concurrent programming is important because it provides an abstract setting in which to study parallelism without getting bogged down in the implementation details.â"[79]

Distributed computing (distributed programming)[edit]
Main articles: Distributed computing, Distributed systems, and Self-stabilization
Dijkstra was one of the very early pioneers of the research on principles of distributed computing.[27] The Dijkstra Prize sponsors recognize, "no other individual has had a larger influence on research in principles of distributed computing."[27] Some of his papers are even considered to be those that established the field. Dijkstra's 1965 paper, Solution of a Problem in Concurrent Programming Control was the first to present the correct solution to the mutual exclusion problem. Leslie Lamport writes that this work "is probably why PODC exists" and it "started the field of concurrent and distributed algorithms".[5]
In particular, his paper "Self-stabilizing Systems in Spite of Distributed Control" (1974) started the sub-field of self-stabilization. It is also considered as the first scientific examination of fault-tolerant systems.[6] Dijkstra's paper was not widely noticed until Leslie Lamport's invited talk at the ACM Symposium on Principles of Distributed Computing (PODC) in 1983. In his report on Dijkstra's work on self-stabilizing distributed systems, Lamport regarded it to be 'a milestone in work on fault tolerance' and 'a very fertile field for research'.[80]

Formal specification and verification[edit]
From the 1970s, Dijkstra's chief interest was formal verification. In 1976 Dijkstra published a seminal book, A Discipline of Programming, which put forward his method of systematic development of programs together with their correctness proofs. In his exposition he used his 'Guarded Command Language'. The language, with its reliance on non-determinism, the adopted weakest precondition semantics and the proposed development method has had a considerable impact on the field to this day. The refinement calculus, originally proposed by Ralph-Johan Back[81] and developed by Carroll Morgan,[82] is an extension of Dijkstra's weakest precondition calculus, where program statements are modeled as predicate transformers.[83]
In 1984, to add further support to this approach to programming, he published jointly with Wim Feijen an introductory textbook for first-year students of computer science. The book, first published in Dutch, was entitled Een methode van programmeren. The English edition appeared in 1988 as A Method of Programming.

On the nature of computer science and computer programming[edit]
See also: Philosophy of computer science
Many of Dijkstra's opinions on computer science and programming have become widespread. For example, the programming phrase "two or more, use a for" (a rule of thumb when to use a loop) is sometimes attributed to him.[84]
He was the first to make the claim that programming is so inherently complex that, in order to manage it successfully, programmers need to harness every trick and abstraction possible.
Dijkstra was one of the most famous opponents of the engineering view of computing science. Like Peter Naur and Kristen Nygaard, Dijkstra disliked the very term 'computer science'. Computer science, as Dijkstra pointed out, deserves a better name. He suggests it can be called 'computing science'. Instead of the computer, or computing technology, Dijkstra wanted to emphasize the abstract mechanisms that computing science uses to master complexity. When expressing the abstract nature of computing science, he wrote,

A confusion of even longer standing came from the fact that the unprepared included the electronic engineers that were supposed to design, build and maintain the machines. The job was actually beyond the electronic technology of the day, and, as a result, the question of how to get and keep the physical equipment more or less in working condition became in the early days the all-overriding concern. As a result, the topic became â primarily in the USA â prematurely known as âcomputer scienceâ â which, actually, is like referring to surgery as âknife scienceâ â and it was firmly implanted in people's minds that computing science is about machines and their peripheral equipment. Quod non [Latin: "Which is not true"]. We now know that electronic technology has no more to contribute to computing than the physical equipment. We now know that programmable computer is no more and no less than an extremely handy device for realizing any conceivable mechanism without changing a single wire, and that the core challenge for computing science is hence a conceptual one, viz., what (abstract) mechanisms we can conceive without getting lost in the complexities of our own making.[85]
In The Humble Programmer (1972), Dijkstra wrote: "We must not forget that it is not our [computing scientists'] business to make programs, it is our business to design classes of computations that will display a desired behaviour."
Dijkstra also opposed the inclusion of software engineering under the umbrella of academic computer science. He wrote that, "As economics is known as "The Miserable Science", software engineering should be known as "The Doomed Discipline", doomed because it cannot even approach its goal since its goal is self-contradictory." And "software engineering has accepted as its charter 'How to program if you cannot.'"[86]

Personality and working style[edit]
  Dijkstra at the blackboard during a conference at ETH Zurich in 1994. He once remarked, "A picture may be worth a thousand words, a formula is worth a thousand pictures."[87]
Simplicity is a great virtue but it requires hard work to achieve it and education to appreciate it. And to make matters worse: complexity sells better. The computing industry is not the only one that has discovered that sore truth: so has the academic world. If you deliver a lecture that is crystal clear from the beginning to end, your audience feels cheated and mutters while leaving the lecture hall "That was all rather trivial, wasn't it?"ââE.W. Dijkstra, "On the Nature of Computing Science" (EWD896), August 1984
You can hardly blame M.I.T. for not taking notice of an obscure computer scientist in a small town in the Netherlands.ââDijkstra used to wittily describe himself, in Nuenen in the mid-1960s.[88][18]
In the world of computing science, Dijkstra is well known as a "character". In the preface of his book A Discipline of Programming (1976) he stated the following: "For the absence of a bibliography I offer neither explanation nor apology." In fact, most of his articles and books have no references at all.[16] This approach to references was deplored by some researchers. But Dijkstra chose this way of working to preserve his self-reliance.
As a university professor for much of his life, Dijkstra saw teaching not just as a required activity but as a serious research endeavour.[14] His approach to teaching was unconventional.[89] His lecturing style has been described as idiosyncratic. When lecturing, the long pauses between sentences have often been attributed to the fact that English is not Dijkstra's first language. However the pauses also served as a way for him to think on his feet and he was regarded as a quick and deep thinker while engaged in the act of lecturing. His courses for students in Austin had little to do with computer science but they dealt with the presentation of mathematical proofs.[16] At the beginning of each semester he would take a photo of each of the students, in order to memorize their names. He never followed a textbook, with the possible exception of his own while it was under preparation. When lecturing, he would write proofs in chalk on a blackboard rather than using overhead foils. He invited the students to suggest ideas, which he then explored, or refused to explore because they violated some of his tenets. He assigned challenging homework problems, and would study his students' solutions thoroughly. He conducted his final examinations orally, over a whole week. Each student was examined in Dijkstra's office or home, and an exam lasted several hours.[14]

It is not the task of the University to offer what society asks for, but to give what society needs. [The things society asks for are generally understood, and you don't need a University for that; the university has to offer what no one else can provide.]ââE.W. Dijkstra, "Answers to questions from students of Software Engineering" (EWD1305), November 2000
Dijkstra was also highly original in his way of assessing people's capacity for a job. When Vladimir Lifschitz came to Austin in 1990 for a job interview, Dijkstra gave him a puzzle. Vladimir solved it and has been working in Austin since then.[16]
Despite having invented much of the technology of software, he eschewed the use of computers in his own work for many decades. Even after he succumbed to his UT colleagues' encouragement and acquired a Macintosh computer, he used it only for e-mail and for browsing the World Wide Web.[90] Dijkstra never wrote his articles using a computer. He preferred to rely on his typewriter and later on his Montblanc pen.[16] Dijkstra's favorite writing instrument was the Montblanc MeisterstÃ¼ck fountain pen. He repeatedly tried other pens, but none ever displaced the Montblanc.
He had no use for word processors, believing that one should be able to write a letter or article without rough drafts, rewriting, or any significant editing. He would work it all out in his head before putting pen to paper, and once mentioned that when he was a physics student he would solve his homework problems in his head while walking the streets of Leiden.[14]
Most of Dijkstra's publications were written by him alone. He never had a secretary and took care of all his correspondence alone.[16] When colleagues prepared a Festschrift for his sixtieth birthday, published by Springer-Verlag, he took the trouble to thank each of the 61 contributors separately, in a hand-written letter.[16]
Throughout Dijkstra's career, his work was characterized by elegance and economy.[16] A prolific writer (especially as an essayist), Dijkstra authored more than 1,300 papers, many written by hand in his precise script. They were essays and parables; fairy tales and warnings; comprehensive explanation and pedagogical pretext. Most were about mathematics and computer science; others were trip reports that are more revealing about their author than about the people and places visited. It was his habit to copy each paper and circulate it to a small group of colleagues who would copy and forward the papers to another limited group of scientists.[91]  His love affair with simplicity came at an early age and under his mother's guidance. He once said he had asked his mother whether trigonometry was a difficult topic. She replied that he must learn all the formulas and that further, if he required more than five lines to prove something, he was on the wrong track.[92]
Dijkstra was famous for his wit, eloquence, rudeness, abruptness and often cruelty to fellow professionals, and way with words, such as in his remark, "The question of whether Machines Can Think (â¦) is about as relevant as the question of whether Submarines Can Swim."[93] His advice to a promising researcher, who asked how to select a topic for research, was the wise words: "Do only what only you can do".[14] Dijkstra was also known for his vocal criticism and absence of social skills when interacting with colleagues. As an outspoken and critical visionary, he strongly opposed the teaching of BASIC.[94]
In many of his more witty essays, Dijkstra described a fictional company of which he served as chairman. The company was called Mathematics, Inc., a company that he imagined having commercialized the production of mathematical theorems in the same way that software companies had commercialized the production of computer programs.  He invented a number of activities and challenges of Mathematics Inc. and documented them in several papers in the EWD series. The imaginary company had produced a proof of the Riemann Hypothesis but then had great difficulties collecting royalties from mathematicians who had proved results assuming the Riemann Hypothesis. The proof itself was a trade secret.[95] Many of the company's proofs were rushed out the door and then much of the company's effort had to be spent on maintenance.[96] A more successful effort was the Standard Proof for Pythagoras' Theorem, that replaced the more than 100 incompatible existing proofs.[97] Dijkstra described Mathematics Inc. as "the most exciting and most miserable business ever conceived".[95] EWD 443 (1974) describes his fictional company as having over 75 percent of the world's market share.[98][99]

EWD manuscripts[edit]
Dijkstra was well known for his habit of carefully composing manuscripts with his fountain pen. The manuscripts are called EWDs, since Dijkstra numbered them with EWD, his initials, as a prefix. According to Dijkstra himself, the EWDs started when he moved from the Mathematical Centre in Amsterdam to the Eindhoven University of Technology (then Technische Hogeschool Eindhoven). After going to Eindhoven, Dijkstra experienced a writer's block for more than a year. Dijkstra distributed photocopies of a new EWD among his colleagues. Many recipients photocopied and forwarded their copies, so the EWDs spread throughout the international computer science community. The topics were computer science and mathematics, and included trip reports, letters, and speeches. These short articles span a period of 40 years. Almost all EWDs appearing after 1972 were hand-written. They are rarely longer than 15 pages and are consecutively numbered. The last one, No. 1318, is from 14 April 2002. Within computer science they are known as the EWD reports, or, simply the EWDs. More than 1300 EWDs have been scanned, with a growing number transcribed to facilitate search, and are available online at the Dijkstra archive of the University of Texas.[100]

Personal life and death[edit]
Dijkstra led a modest lifestyle, to the point of being spartan.[16] His and his wife's house in Nuenen was simple, small and unassuming. He did not own a TV, a VCR or a mobile telephone, and did not go to the movies.[16] He played the piano, and, while in Austin, liked to go to concerts. An enthusiastic listener of classical music, Dijkstra's favorite composer was Mozart.[14]
Dijkstra died on 6 August 2002. According to officials at the University of Texas, the cause of death was cancer.[101][102][103]

Influence and recognition[edit]
@media all and (max-width:720px){.mw-parser-output .rquote{width:auto!important;float:none!important}}The difference between a computer programmer and a computer scientist is a job-title thing. Edsger Dijkstra wants proudly to be called a "computer programmer," although he hasn't touched a computer now for some years. (...) His great strength is that he is uncompromising. It would make him physically ill to think of programming in C++.ââDonald Knuth (1996), an interview with Donald Knuth by Jack Woehr of Dr. Dobb's Journal.[104]
In 1972 the Association for Computing Machinery (ACM) acknowledged Dijkstra's seminal contributions to the field by awarding him the distinguished Turing Award. The citation for the award reads:[105]

Edsger Dijkstra was a principal contributor in the late 1950s to the development of the ALGOL, a high level programming language which has become a model of clarity and mathematical rigor. He is one of the principal exponents of the science and art of programming languages in general, and has greatly contributed to our understanding of their structure, representation, and implementation. His fifteen years of publications extend from theoretical articles on graph theory to basic manuals, expository texts, and philosophical contemplations in the field of programming languages.
The introduction given at the awards ceremony is a tribute to Dijkstra:[105]

The working vocabulary of programmers everywhere is studded with words originated or forcefully promulgated by E.W. Dijkstra â display, deadly embrace, semaphore, go-to-less programming, structured programming. But his influence on programming is more pervasive than any glossary can possibly indicate. The precious gift that this Turing Award acknowledges is Dijkstra's style: his approach to programming as a high, intellectual challenge; his eloquent insistence and practical demonstration that programs should be composed correctly, not just debugged into correctness; and his illuminating perception of problems at the foundations of program design. (â¦) We have come to value good programs in much the same way as we value good literature. And at the center of this movement, creating and reflecting patterns no less beautiful than useful, stands E.W. Dijkstra.
In the words of Sir Tony Hoare, FRS, delivered by him at Dijkstra's funeral:[14]

Edsger is widely recognized as a man who has thought deeply about many deep questions; and among the deepest questions is that of traditional moral philosophy: How is it that a person should live their life? Edsger found his answer to this question early in his life: He decided he would live as an academic scientist, conducting research into a new branch of science, the science of computing. He would lay the foundations that would establish computing as a rigorous scientific discipline; and in his research and in his teaching and in his writing, he would pursue perfection to the exclusion of all other concerns. From these commitments he never deviated, and that is how he has made to his chosen subject of study the greatest contribution that any one person could make in any one lifetime.
In March 2003, the following email was sent to the distributed computing community:[106]

This is to announce that the award formerly known as the "PODC Influential-Paper Award" has been renamed the "Edsger W. Dijkstra Prize in Distributed Computing" after the late Edsger W. Dijkstra, a pioneer in the area of distributed computing. His foundational work on concurrency primitives (such as the semaphore), concurrency problems (such as mutual exclusion and deadlock), reasoning about concurrent systems, and self-stabilization comprises one of the most important supports upon which the field of distributed computing is built. No other individual has had a larger influence on research in principles of distributed computing.
Former ACM President Peter J. Denning wrote about Dijkstra:[107]

Edsger Dijkstra, one of the giants of our field and a passionate believer in the mathematical view of programs and programming (...) Over the previous quarter-century, he had formulated many of the great intellectual challenges of the field as programmingâthe goto statement, structured programming, concurrent processes, semaphores, deadlocks, recursive programming in Algol, and deriving correct programs.
Awards and honors[edit]
Among Dijkstra's awards and honors are:[90]

Member of the Royal Netherlands Academy of Arts and Sciences (1971)[108]
Distinguished Fellow of the British Computer Society (1971)
The Association for Computing Machinery's A.M. Turing Award (1972)[109]
Harry H. Goode Memorial Award from the IEEE Computer Society (1974).[110]
Foreign Honorary Member of the American Academy of Arts and Sciences (1975)
Doctor of Science Honoris Causa from the Queen's University Belfast (1976)
Computer Pioneer Charter Recipient from the IEEE Computer Society (1982)
ACM/SIGCSE Award for Outstanding Contributions to Computer Science Education (1989)
Fellow of the Association for Computing Machinery (1994)[111]
Honorary doctorate from the Athens University of Economics & Business, Greece (2001).
In 1969, the British Computer Society (BCS) received approval for an award and fellowship, Distinguished Fellow of the British Computer Society (DFBCS), to be awarded under bylaw 7 of their royal charter. In 1971, the first election was made, to Dijkstra.[112]
In 1990, on occasion of Dijkstra's 60th birthday, the Department of Computer Science (UTCS) at the University of Texas at Austin organized a two-day seminar in his honor. Speakers came from all over the United States and Europe, and a group of computer scientists contributed research articles which were edited into a book.[14][113]
In 2002, the C&C Foundation of Japan recognized Dijkstra "for his pioneering contributions to the establishment of the scientific basis for computer software through creative research in basic software theory, algorithm theory, structured programming, and semaphores." Dijkstra was alive to receive notice of the award, but it was accepted by his family in an award ceremony after his death.
Shortly before his death in 2002, Dijkstra received the ACM PODC Influential-Paper Award in distributed computing for his work on self-stabilization of program computation. This annual award was renamed the Dijkstra Prize (Edsger W. Dijkstra Prize in Distributed Computing) the following year, in his honor.
The Dijkstra Award for Outstanding Academic Achievement in Computer Science (Loyola University Chicago, Department of Computer Science) is named for Edsger W. Dijkstra. Beginning in 2005, this award recognizes the top academic performance by a graduating computer science major. Selection is based on GPA in all major courses and election by department faculty.[114]
The Department of Computer Science (UTCS) at the University of Texas at Austin hosted the inaugural Edsger W. Dijkstra Memorial Lecture on 12 October 2010. Tony Hoare, Emeritus Professor at Oxford and Principal Researcher at Microsoft Research, was the speaker for the event. This lecture series was made possible by a generous grant from Schlumberger to honor the memory of Dijkstra.

See also[edit]
Dijkstra's algorithm
Dining philosophers problem
Guarded Command Language
Predicate transformer semantics
Weakest precondition calculus
Semaphore
Smoothsort
Go To Statement Considered Harmful
On the Cruelty of Really Teaching Computer Science
List of pioneers in computer science
List of important publications in computer science
List of important publications in theoretical computer science
List of important publications in concurrent, parallel, and distributed computing
Selected publications[edit]
Books
.mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li{margin-left:0;padding-left:3.2em;text-indent:-3.2em}.mw-parser-output .refbegin-hanging-indents ul,.mw-parser-output .refbegin-hanging-indents ul li{list-style:none}@media(max-width:720px){.mw-parser-output .refbegin-hanging-indents>ul>li{padding-left:1.6em;text-indent:-1.6em}}.mw-parser-output .refbegin-columns{margin-top:0.3em}.mw-parser-output .refbegin-columns ul{margin-top:0}.mw-parser-output .refbegin-columns li{page-break-inside:avoid;break-inside:avoid-column}
.mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}â (1962). A Primer of ALGOL 60 Programming: Together with Report on the Algorithmic Language ALGOL 60. Academic Press. ISBNÂ 978-0122162503.
â; Dahl, Ole-Johan; Hoare, C.A.R. (1972). Structured Programming. Academic Press. ISBNÂ 978-0-12-200550-3.
â (1976). A Discipline of Programming. Prentice Hall. ISBNÂ 978-0132158718.
â (1982). Selected Writings on Computing: A Personal Perspective. Monographs in Computer Science. Springer. ISBNÂ 978-0387906522.
â; Feijen, W.H.J.; Sterringa, Joke (1988). A Method of Programming. Addison-Wesley. ISBNÂ 978-0201175363.
â; Scholten, Carel S. (1990). Predicate Calculus and Program Semantics. Texts and Monographs in Computer Science. Springer-Verlag. ISBNÂ 978-0387969572.

Selected articles

â (1959). "A Note on Two Problems in Connexion with Graphs" (PDF). Numerische Mathematik. 23 (3): 269â271. CiteSeerXÂ 10.1.1.165.7577. doi:10.1007/BF01386390. S2CIDÂ 123284777.
â (1962). "Some Meditations on Advanced Programming". Proc. IFIP Congress. Amsterdam: North-Holland. pp.Â 535â8.
â (1965). Cooperating Sequential Processes (Technical report). Technische Hogeschool Eindhoven. EWD-123. Retrieved 20 September 2020. Reprinted in Genuys, F., ed. (1968). Programming Languages: N.A.T.O. Advanced Summer School Held in Villard-de-Lans in 1966. Academic Press. pp.Â 43â112. OCLCÂ 499952053. Published as Dijkstra, E.W. (1968). "Cooperating Sequential Processes".  In Hansen, P.B. (ed.). The Origin of Concurrent Programming. New York: Springer. pp.Â 65â138. doi:10.1007/978-1-4757-3472-0_2. ISBNÂ 978-1-4419-2986-0.
â (1965). "Solution of a Problem in Concurrent Programming Control". Comm. ACM. 8 (9): 569. doi:10.1145/365559.365617. S2CIDÂ 19357737.
â (1965). "Programming Considered as a Human Activity". Proc. IFIP Congress. pp.Â 213â7.
â (1968). "Go To Statement Considered Harmful". Letters to the editor. Comm. ACM. 11 (3): 147â8. doi:10.1145/362929.362947. S2CIDÂ 17469809.
â (1968). "A Constructive Approach to the Problem of Program Correctness". BIT Numerical Mathematics. 8 (3): 174â186. doi:10.1007/bf01933419. S2CIDÂ 62224342.
â (May 1968). "The Structure of the 'THE'-Multiprogramming System". ACM Symp. on Operating Systems. Comm. ACM. 11 (5): 341â346. doi:10.1145/363095.363143. S2CIDÂ 2021311.
â (April 1970). Notes on Structured Programming (PDF) (Report). 70-WSK-03 â via E.W. Dijkstra Archive. Center for American History, University of Texas at Austin.
â (1971). A Short Introduction to the Art of Computer Programming. Eindhoven: Technische Hogeschool. OCLCÂ 3474242. EWD316.
â (1971). "Hierarchical Ordering of Sequential Processes". Acta Inform. 1 (2): 115â138. doi:10.1007/bf00289519. S2CIDÂ 31573213.
â (1972). "The Humble Programmer". Comm. ACM. 15 (10): 859â866. doi:10.1145/355604.361591.
â (JuneâJuly 1974). "Programming as a Discipline of Mathematical Nature". American Mathematical Monthly. 81 (6): 608â612. doi:10.2307/2319209. JSTORÂ 2319209.
â (1974). "On the role of scientific thought". E.W. Dijkstra Archive, Center for American History, University of Texas at Austin. EWD447.
â (1974). "Self-stabilizing Systems in Spite of Distributed Control". Comm. ACM. 17 (11): 643â4. doi:10.1145/361179.361202. S2CIDÂ 11101426.
â (1975). "How do we tell truths that might hurt?". Selected Writings on Computing: A Personal Perspective. Monographs in Computer Science. Springer (published 1982). pp.Â 129â131. ISBNÂ 978-0387906522.
â (1975). "Craftsman or Scientist". ACM Pacific 1975. pp.Â 217â223.
â (1975). "On the teaching of programming, i. e. on the teaching of thinking". Language Hierarchies and Interfaces. 1975: 1â10.
â (1977). "Programming: From Craft to Scientific Discipline". International Computing Symposium. 1977: 23â30.
â (1978). "On the Interplay between Mathematics and Programming". Program Construction. Lecture Notes in Computer Science. Vol.Â 69. pp.Â 35â46. doi:10.1007/BFb0014649. ISBNÂ 978-3-540-09251-3. S2CIDÂ 26233314.
â (1975). "Correctness Concerns And, Among Other Things, Why They Are Resented". (ACM) Proceedings of the International Conference on Reliable Software. 21â23 April 1975, Los Angeles, California, USA: 546â550.
â (1975). "Guarded Commands, Nondeterminacy and Formal Derivation of Programs". Comm. ACM. 18 (8): 453â7. doi:10.1145/360933.360975. S2CIDÂ 1679242.
â (1978). "Finding the Correctness Proof of a Concurrent Program". Program Construction. 1978: 24â34.
â (1984). "The threats to computing science". E.W. Dijkstra Archive, Center for American History, University of Texas at Austin. EWD898.
â (1986). "On a Cultural Gap". The Mathematical Intelligencer. 8 (1): 48â52. doi:10.1007/BF03023921. S2CIDÂ 120847834.
â (1987). "Mathematicians and Computing Scientists: The Cultural Gap". Abacus. 4 (4): 26â31.
â (1989). "On the Cruelty of Really Teaching Computer Science". A debate on teaching computing science. Comm. ACM. 32 (12): 1398â1404. doi:10.1145/76380.76381. S2CIDÂ 16961489.
â (1999). "Computing Science: Achievements and Challenges". ACM SIGAPP Applied Computing Review. 7 (2): 2â9. doi:10.1145/335527.335528. S2CIDÂ 34430415.
â (2001). "The End of Computing Science?". Comm. ACM. 44 (3): 92. doi:10.1145/365181.365217. S2CIDÂ 31142279.
â (2001). "What led to Notes on Structured Programming". E.W. Dijkstra Archive, Center for American History, University of Texas at Austin.

References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ Hoare, C.A.R. (12 October 2010). "The 2010 Edsger W. Dijkstra Memorial Lecture: What Can We Learn from Edsger W. Dijkstra?". Department of Computer Science, The University of Texas at Austin. Retrieved 12 August 2015.

^ a b c d Niklaus Wirth (2005): "Of great influence to Pascal was Structured Programming, put forth by E. W. Dijkstra. This method of proceeding in a design would obliviously be greatly encouraged by the use of a Structured Language, a language with a set of constructs that could freely be combined and nested. The textual structure of a program should directly reflect its flow of control."

^ a b c d e Wirth, Niklaus (JulyâSeptember 2008). "A Brief History of Software Engineering" (PDF). IEEE Annals of the History of Computing. 30 (3): 32â39. doi:10.1109/MAHC.2008.33. S2CIDÂ 9035976. Retrieved 22 September 2020. In 1965 Dijkstra wrote his famous Notes on Structured Programming and declared programming as a discipline in contrast to a craft. Also in 1965 Hoare published an important paper about data structuring. These ideas had a profound influence on new programming languages, in particular Pascal. Languages are the vehicles in which these ideas were to be expressed. Structured programming became supported by a structured programming language.

^ In his 2004 memoir, "A Programmer's Story: The Life of a Computer Pioneer", Brinch Hansen wrote that he used "Cooperating Sequential Processes" to guide his work implementing multiprogramming on the RC 4000, and described it saying, "One of the great works in computer programming, this masterpiece laid the conceptual foundation for concurrent programming."

^ a b c d e f Lamport, Leslie (2002). "2002 PODC Influential Paper Award". ACM Symposium on Principles of Distributed Computing. Retrieved 22 September 2020. Edsger W. Dijkstra started the field of concurrent and distributed algorithms with his 1965 CACM paper "Solution of a Problem in Concurrent Programming Control", in which he first stated and solved the mutual exclusion problem. That paper is probably why PODC exists; it certainly inspired most of my work.

^ a b c d e f Lamport (2015)

^ a b Dolev, Shlomi: Self-stabilization. (Cambridge, MA: MIT Press, 2000) ISBNÂ 978-0-262-04178-2

^ a b Lo Russo, Graziano (1997). "An Interview with A. Stepanov (Edizioni Infomedia srl.)". STLport.org. Retrieved 21 December 2017. Alexander Stepanov: "...I also discovered books of two great computer scientists from whose work I learned the scientific foundation of my trade: Donald Knuth and Edsger Dijkstra. Knuth taught me the answers. Dijkstra taught me the questions. Time and time again I come back to their works for new insights."

^ "Edsger Dijkstra | Dutch computer scientist".

^ Istrail (2008). "A prolific writer, he [Dijkstra] authored more than 1,300 papers, many written by hand in his precise and elegant script. They were essays and parables; fairy tales and warnings; comprehensive explanation and pedagogical pretext. Most were about mathematics and computer science; others were trip reports that are more revealing about their author than about the people and places visited. This âDijkstranian styleâ of writing flourished on the frontier between technical computing science and the philosophy substantiating its distinguished development. It was his habit to copy each paper and circulate it to a small group of colleagues who would copy and forward the papers to another limited group of scientists. (...) I read them with joy and excitement and my love for mathematics and computer science has been influenced in no small measure by his works."

^ Hoare, Tony (March 2003). "Obituary: Edsger Wybe Dijkstra". Physics Today. 56 (3): 96â98. Bibcode:2003PhT....56c..96H. doi:10.1063/1.1570789.

^ a b c Laplante (1996).

^ a b c Laplante (2008).

^ a b c d e f g h i j k l m n o p q r s Faulkner, Larry R.; Durbin, John R. (19 August 2013). "In Memoriam: Edsger Wybe Dijkstra" (PDF). University of Texas at Austin. Retrieved 20 August 2015.

^ O'Regan, Gerard (2013). Giants of Computing: A Compendium of Select, Pivotal Pioneers. Springer. pp.Â 91â92.

^ a b c d e f g h i j k l m n o Apt (2002)

^ Gries, David (1978). Programming Methodology: A Collection of Articles by Members of IFIP WG2.3. Springer. p.Â 7. ISBNÂ 978-1-4612-6315-9.

^ a b Markoff, John (10 August 2002). "Edsger Dijkstra: Physicist Who Shaped Computer Era". New York Times. Retrieved 10 April 2015.

^ Schofield, Jack (19 August 2002). "Edsger Dijkstra: Pioneering computer programmer who made his subject intellectually respectable". The Guardian. Retrieved 19 April 2015.

^ Knuth, Donald (1974). "Structured Programming with Go To Statements". Computing Surveys. 6 (4): 261â301. CiteSeerXÂ 10.1.1.103.6084. doi:10.1145/356635.356640. S2CIDÂ 207630080. A revolution is taking place in the way we write programs and teach programming, because we are beginning to understand the associated mental processes more deeply. It is impossible to read the recent book Structured Programming [by Dijkstra, Ole-Johan Dahl, and Tony Hoare (1972)], without having it change your life. The reason for this revolution and its future prospects have been aptly described by E.W. Dijkstra in his 1972 Turing Award Lecture, The Humble Programmer.

^ Broy & Denert (2002), p.Â 19.

^ Nakagawa, Toru (18 July 2005). "Software Engineering And TRIZ (1) â Structured Programming Reviewed With TRIZ". TRIZ Journal. Retrieved 18 August 2015.

^ Hashagen, Ulf; Keil-Slawik, Reinhard; Norberg, A., eds. (2002). History of Computing: Software Issues (International Conference on the History of Computing, ICHC 2000 April 5â7, 2000 Heinz Nixdorf MuseumsForum). Paderborn, Germany: Springer. p.Â 106.

^ Henderson, Harry (2009). Encyclopedia of Computer Science and Technology (revisedÂ ed.). Facts on File. p.Â 150. ISBNÂ 978-0-816-06382-6.

^ a b c Meyer, Bertrand (2009). Touch of Class: Learning to Program Well with Objects and Contracts. Springer. p.Â 188. ISBNÂ 978-3540921448.

^ Lamport (2015). "While concurrent program execution had been considered for years, the computer science of concurrency began with Edsger Dijkstra's seminal 1965 paper that introduced the mutual exclusion problem. (...) The first scientific examination of fault tolerance was Dijkstra's seminal 1974 paper on self-stabilization. (...) The ensuing decades have seen a huge growth of interest in concurrencyâparticularly in distributed systems. Looking back at the origins of the field, what stands out is the fundamental role played by Edsger Dijkstra, to whom this history is dedicated."

^ a b c 
"Edsger W. Dijkstra Prize in Distributed Computing". ACM Symposium on Principles of Distributed Computing.â
"Dijkstra Prize". European Association for Theoretical Computer Science (EATCS).â
"Dijkstra Prize". International Symposium on Distributed Computing (DISC).â
"The Edsger W. Dijkstra Prize in Distributed Computing is named for Edsger Wybe Dijkstra (1930â2002), a pioneer in the area of distributed computing. His foundational work on concurrency primitives (such as the semaphore), concurrency problems (such as mutual exclusion and deadlock), reasoning about concurrent systems, and self-stabilization comprises one of the most important supports upon which the field of distributed computing is built. No other individual has had a larger influence on research in principles of distributed computing."

^ "Edsger Wybe Dijkstra". Stichting Digidome. 3 September 2003. Archived from the original on 6 December 2004.

^ a b O'Connor, J. J.; Robertson, E. F. (July 2008). "Dijkstra biography". MacTutor. School of Mathematics and Statistics, University of St Andrews, Scotland. Archived from the original on 11 October 2013. Retrieved 18 January 2014.

^ a b c Dijkstra, Edsger W. (1972). "The Humble Programmer". ACM Turing Lecture 1972. EWD340.

^ James, Mike (1 May 2013). "Edsger Dijkstra â The Poetry of Programming". i-programmer.info. Retrieved 12 August 2015.

^ Silberschatz, Abraham; Peterson, James L. (1988). Operating System Concepts. p.Â 512.

^ Goodwins, Rupert (8 August 2002). "Computer science pioneer Dijkstra dies". Retrieved 22 December 2010.

^ Chen, Peter P. (2002). "From Goto-less to Structured Programming: The Legacy of Edsger W. Dijkstra". IEEE Software. 19 (5): 21. doi:10.1109/MS.2002.1032847. S2CIDÂ 29320163.

^ Hart, P. E.; Nilsson, N. J.; Raphael, B. (1968). "A Formal Basis for the Heuristic Determination of Minimum Cost Paths". IEEE Transactions on Systems Science and Cybernetics SSC4. 4 (2): 100â107. doi:10.1109/TSSC.1968.300136.

^ Frana, Philip L (2001). "An Interview with Edsger W. Dijkstra (OH 330)". Comm. ACM. 53 (8): 41â47. doi:10.1145/1787234.1787249.

^ JarnÃ­k, V. (1930), "O jistÃ©m problÃ©mu minimÃ¡lnÃ­m" [About a certain minimal problem], PrÃ¡ce MoravskÃ© PÅÃ­rodovÄdeckÃ© SpoleÄnosti (in Czech), 6: 57â63

^ Prim, R. C. (November 1957), "Shortest connection networks And some generalizations", Bell System Technical Journal, 36 (6): 1389â1401, Bibcode:1957BSTJ...36.1389P, doi:10.1002/j.1538-7305.1957.tb01515.x

^ Dijkstra, E. W. (1959), "A note on two problems in connexion with graphs" (PDF), Numerische Mathematik, 1: 269â271, CiteSeerXÂ 10.1.1.165.7577, doi:10.1007/BF01386390, S2CIDÂ 123284777

^ Pettie, Seth; Ramachandran, Vijaya (2002), "An optimal minimum spanning tree algorithm" (PDF), Journal of the ACM, 49 (1): 16â34, doi:10.1145/505241.505243, MRÂ 2148431, S2CIDÂ 5362916

^ Dijkstra, Edsger (1961). Algol 60 Translation: An Algol 60 Translator for the X1 and Making a Translator for Algol 60 (Report). Stichting Mathematisch Centrum.

^ Dolev (2000), p.Â 16.

^ "Glossary 'Garbage Collection'". People Behind Informatics. University of Klagenfurt. Retrieved 12 August 2015.

^ Hudson, Richard (31 August 2015). "Go GC: Prioritizing low latency and simplicity". Go Programming Language Blog. Retrieved 21 September 2015.

^ Jeuring, Johan; Meertens, Lambert; Guttmann, Walter (17 August 2016). "Profile of IFIP Working Group 2.1". Foswiki. Retrieved 2 September 2020.

^ Swierstra, Doaitse; Gibbons, Jeremy; Meertens, Lambert (2 March 2011). "ScopeEtc: IFIP21: Foswiki". Foswiki. Retrieved 2 September 2020.

^ van Emden, Maarten (6 May 2008). "I remember Edsger Dijkstra (1930â2002)". Retrieved 22 December 2010.

^ Hoare, C.A.R. (December 1973). "Hints on Programming Language Design" (PDF). p.Â 27.

^ Stroustrup, Bjarne (2014). Programming: Principles and Practice Using C++ (2ndÂ ed.). Addison-Wesley Professional. p.Â 827.

^ Sestoft, Peter (2015). "Early Nordic Compilers and Autocodes".  In Gram, Christian; Rasmussen, Per; Ãstergaard, SÃ¸ren Duus (eds.). History of Nordic Computing 4, Revised Selected Papers. 4th IFIP WG 9.7 Conference, HiNC 4, Copenhagen, Denmark, August 13â15, 2014. Springer. p.Â 358.

^ Daylight, E. G. (2011). "Dijkstra's Rallying Cry for Generalization: the Advent of the Recursive Procedure, late 1950s â early 1960s". The Computer Journal. 54 (11): 1756â1772. doi:10.1093/comjnl/bxr002.

^ Haigh, Thomas (AprilâJune 2010). "Computing the American Way: Contextualizing the Early US Computer Industry" (PDF). IEEE Annals of the History of Computing. 32 (2): 8â20. doi:10.1109/MAHC.2010.33. S2CIDÂ 10691009. Retrieved 19 September 2020.

^ Randell, Brian. The 1968/69 NATO Software Engineering Reports. Dagstuhl-Seminar 9635: "History of Software Engineering" Schloss Dagstuhl, August 26â30, 1996.

^ Peter Naur; Brian Randell, eds. (January 1969). Report on a conference sponsored by the NATO Science Committee Garmisch, Germany, 7th to 11th October 1968 (PDF) (Report).

^ Dijkstra, Edsger W. A Case against the GO TO Statement (EWD-215) (PDF). E.W. Dijkstra Archive. Center for American History, University of Texas at Austin. (transcription)

^ Dijkstra, E. W. (March 1968). "Letters to the editor: go to statement considered harmful". Comm. ACM. 11 (3): 147â8. doi:10.1145/362929.362947. S2CIDÂ 17469809.

^ Knuth (1974).

^ Mills, Harlan D. (1986). Structured Programming: Retrospect and Prospect. (IEEE Software 3(6): 58â66, November 1986).

^ Reilly, Edwin D. (2004). Concise Encyclopedia of Computer Science. John Wiley & Sons. p.Â 734. ISBNÂ 978-0-470-09095-4.

^ Ryder, Barbara G.; Soffa, Mary Lou; Burnett, Margaret (October 2005). "Impact of Software Engineering Research on Modern Programming Languages". ACM Transactions on Software Engineering and Methodology. 14 (4): 431â477. CiteSeerXÂ 10.1.1.216.7772. doi:10.1145/1101815.1101818. S2CIDÂ 8593990.

^ Reilly (2004), p.Â 734. "The first significant SP [Structured Programming] language was Algol 60 (q.v.). Subsequently developed SP languages in current use are Ada, C (q.v.), C++ (q.v.), Pascal, and Java (q.v.)."

^ Graba, Jan (1998). Up and Running with C++. Springer. p.Â 1. ISBNÂ 978-3-540-76234-8.

^ Reilly (2004), p.Â 734.

^ Broy & Denert (2002), p.Â [pageÂ needed].

^ Henderson (2009), p.Â [pageÂ needed].

^ Selby, Richard W. (2007). Software Engineering: Barry W. Boehm's Lifetime Contributions to Software Development, Management, and Research. (IEEE Computer Society), pp. 701â702

^ Dijkstra, Edsger W (1982). "On the role of scientific thought". Selected writings on Computing: A Personal Perspective. New York, NY, USA: Springer-Verlag. pp.Â 60â66. ISBNÂ 978-0-387-90652-2.

^ Brown, Kyle; Craig, Gary; Hester, Greg; Amsden, Jim; Pitt, David; Jakab, Peter M.; Berg, Daniel; Stinehour, Russell; Weitzel, Mark (2003). Enterprise Java Programming with IBM WebSphere (2ndÂ ed.). IBM Press. p.Â 5. ISBNÂ 978-0-321-18579-2. Most experienced IT professionals will agree that developing and adhering to a standard architecture is key to the success of large-scale software development. Computer pioneer Edsger Dijkstra validated this notion when he developed THE operating system in 1968. Since then, layered architectures have proved their viability in technological domains, such as hardware and networking. Layering has proved itself in the operating system domain; however, the same benefits are available when applied to e-commerce or to thin clientâoriented applications. Layered architectures have become essential in supporting the iterative development process by promoting reusability, scalability, and maintainability.

^ Grier, David Alan. "Closer Than You Might Think: Layers upon Layers". IEEE Computer Society. Retrieved 12 August 2015.

^ Albin, Stephen T. (2003). The Art of Software Architecture: Design Methods and Techniques. Wiley. p.Â 3. ISBNÂ 978-0-471-46829-5.

^ Dijkstra, Edsger W. Over seinpalen (EWD-74) (PDF). E.W. Dijkstra Archive. Center for American History, University of Texas at Austin. (transcription)

^ Brinch Hansen (2002), p.Â 8.

^ Anderson, J.H.; Kim, Y.-J.; Herman, T. (2003). "Shared-Memory Mutual Exclusion: Major Research Trends Since 1986". Distributed Computing. 16 (2â3): 75â110. CiteSeerXÂ 10.1.1.74.3990. doi:10.1007/s00446-003-0088-6. S2CIDÂ 17615199.

^ Alagarsamy, K. (2003). "Some Myths About Famous Mutual Exclusion Algorithms" (PDF). ACM SIGACT News. 34 (3): 94â103. CiteSeerXÂ 10.1.1.113.3361. doi:10.1145/945526.945527. S2CIDÂ 7545330.

^ Raynal, Michel (2012). Concurrent Programming: Algorithms, Principles, and Foundations. Springer. p.Â vi. ISBNÂ 978-3-642-32027-9.

^ James, Mike (1 May 2013). "Edsger Dijkstra â The Poetry of Programming". i-programmer.info. Retrieved 12 August 2015.

^ Hoare, C. A. R. (2004). "Communicating Sequential Processes" (PDF). Prentice Hall International.

^ Raynal, Michel (2012). Concurrent Programming: Algorithms, Principles, and Foundations. Springer. ISBNÂ 978-3-642-32027-9.[pageÂ needed]

^ McCormick, John W.; Singhoff, Frank; Hugues, JÃ©rÃ´me (2011). Building Parallel, Embedded, and Real-Time Applications with Ada. Cambridge University Press. p.Â 5.

^ Dolev (2000), p.Â 3.

^ Back, Ralph-Johan; von Wright, Joakim (2012) [1978]. Refinement Calculus: A Systematic Introduction. Texts in Computer Science. Springer. ISBNÂ 978-1-4612-1674-2.

^ Morgan, Carroll; Vickers, Trevor, eds. (2012) [1992]. On the Refinement Calculus. Springer. ISBNÂ 978-1-4471-3273-8.

^ Back & von Wright (2012), p.Â v.

^ Stabler, Edward P. (2014). "Recursion in Grammar and Performance".  In Roeper, Tom; Speas, Margaret (eds.). Recursion: Complexity in Cognition. Studies in Theoretical Psycholinguistics. Vol.Â 43. Springer International Publishing. pp.Â 159â177. doi:10.1007/978-3-319-05086-7_8. ISBNÂ 978-3-319-05085-0.

^ Dijkstra, Edsger W. On a cultural gap (EWD-924) (PDF). E.W. Dijkstra Archive. Center for American History, University of Texas at Austin. (transcription)âDijkstra, E.W. (1986). "On a cultural gap". The Mathematical Intelligencer. 8 (1): 48â52. doi:10.1007/bf03023921. S2CIDÂ 120847834.

^ Dijkstra, Edsger W. On the cruelty of really teaching computer science (EWD-1036) (PDF). E.W. Dijkstra Archive. Center for American History, University of Texas at Austin. (transcription)

^ Dijkstra, E.W. (July 1996), A first exploration of effective reasoning [EWD896]. (E.W. Dijkstra Archive, Center for American History, University of Texas at Austin)

^ Shasha, Dennis; Lazere, Cathy: Out of Their Minds: The Lives and Discoveries of 15 Great Computer Scientists. (New York, NY: Springer, 1998, ISBNÂ 978-0-387-98269-4), p. 64

^ Irfan Hyder, Syed (2013)[full citation needed]

^ a b In Memoriam Edsger Wybe Dijkstra (memorial), University of Texas

^ Istrail (2008).

^ Dijkstra, Edsger. "Denken als Discipline". VPRO. Noorderlicht. Retrieved 21 June 2016.

^ Dijkstra, Edsger W. The threats to computing science (EWD-898) (PDF). E.W. Dijkstra Archive. Center for American History, University of Texas at Austin. (transcription)

^ Dijkstra, Edsger W. How do we tell truths that might hurt? (EWD-498) (PDF). E.W. Dijkstra Archive. Center for American History, University of Texas at Austin. (transcription)

^ a b Dijkstra, Edsger W. EWD-475 (PDF). E.W. Dijkstra Archive. Center for American History, University of Texas at Austin. (transcription)

^ Dijkstra, Edsger W. EWD-539 (PDF). E.W. Dijkstra Archive. Center for American History, University of Texas at Austin. (transcription)

^ Dijkstra, Edsger W. EWD-427 (PDF). E.W. Dijkstra Archive. Center for American History, University of Texas at Austin. (transcription)

^ Dijkstra, Edsger W. EWD-443 (PDF). E.W. Dijkstra Archive. Center for American History, University of Texas at Austin. (transcription)

^ Dijkstra, Edsger W (1982). Selected Writings on Computing: A Personal Perspective. Berlin: Springer-Verlag. ISBNÂ 978-0-387-90652-2.

^ "The manuscripts of Edsger W. Dijkstra". E. W. Dijkstra Archive. University of Texas.

^ "World-renowned University of Texas at Austin computer scientist Edsger Dijkstra dies". UT News. 7 August 2002. Retrieved 4 August 2020.

^ Dale, Nell; Lewis, John (31 December 2014). Computer Science Illuminated. Jones & Bartlett Publishers. p.Â 316. ISBNÂ 978-1-284-05592-4.

^ "Edsger Dijkstra Passes Away". Dr. Dobb's Journal. 27: 14. 2002.

^ Woehr, Jack (1 April 1996). "An interview with Donald Knuth". Dr. Dobb's Journal. Retrieved 12 August 2015.

^ a b Edsger W. Dijkstra â Award Winner â ACM Awards (Extract from the Turing award Citation ready by M. Doug McIlroy, chairman of the ACM Turing Award Committee, at the presentation of his lecture on 14 August 1972, at the ACM Annual Conference in Boston.)

^ Dale, Nell; Lewis, John (2011). Computer Science Illuminated, 4th Edition (Jones and Barlett Publishers, LLC.), p. 313

^ Denning, Peter J. (2004). "The Field of Programmers Myth" (PDF). Comm. ACM. 47 (7): 15â20. doi:10.1145/1005817.1005836. S2CIDÂ 415372.

^ "Edsger Wybe Dijkstra (1930â2002)". Royal Netherlands Academy of Arts and Sciences. Retrieved 17 July 2015.

^ "A. M. Turing Award". Association for Computing Machinery. Retrieved 5 February 2011.

^ "Edsger W. Dijkstra 1974 Harry H. Goode Memorial Award Recipient". IEEE Computer Society. Retrieved 17 January 2014.

^ "ACM Fellows â D". Association for Computing Machinery. Archived from the original on 24 January 2011. Retrieved 15 February 2011.

^ "Roll of Distinguished Fellows". British Computer Society. Archived from the original on 4 March 2016. Retrieved 10 September 2014.

^ Feijen & Gries (1990).

^ "Awards". Loyola University Chicago.


Further reading[edit]
Altisen, Karine; Devismes, StÃ©phane; Dubois, Swan; Petit, Franck; Raynal, Michel (2019). Introduction to Distributed Self-Stabilizing Algorithms. San Rafael, CA: Morgan & Claypool Publishers. ISBNÂ 9781681735375.
Apt, Krzysztof R. (2002). "Edsger Wybe Dijkstra (1930â2002): A Portrait of a Genius". Formal Aspects of Computing. 14 (2): 92â98. arXiv:cs/0210001. Bibcode:2002cs.......10001A. doi:10.1007/s001650200029. S2CIDÂ 12482128.
Brinch Hansen, Per (2002). The Origin of Concurrent Programming: From Semaphores to Remote Procedure Calls. Springer. ISBNÂ 978-0-387-95401-1.
Ben-Ari, M. (2006). Principles of Concurrent and Distributed Programming (2ndÂ ed.). Addison-Wesley. ISBNÂ 978-0-321-31283-9.
Broy, M.; Denert, Ernst, eds. (2002). Software Pioneers: Contributions to Software Engineering. Springer. ISBNÂ 978-3-540-43081-0.
Chen, Peter P. (2002). "From Goto-less to Structured Programming: The Legacy of Edsger W. Dijkstra". IEEE Software. 19 (5): 21. doi:10.1109/MS.2002.1032847. S2CIDÂ 29320163.
Daylight, Edgar G. (2012). The Dawn of Software Engineering: from Turing to Dijkstra. Lonely Scholar. ISBNÂ 9789491386022.
Daylight, Edgar G. (2011). "Dijkstra's Rallying Cry for Generalization: The Advent of the Recursive Procedure, Late 1950sâEarly 1960s". The Computer Journal. 54 (11): 1756â72. doi:10.1093/comjnl/bxr002.
Dolev, Shlomi (2000). Self-stabilization. MIT Press. ISBNÂ 978-0-262-04178-2.
Feijen, W.H.J.; Gries, David, eds. (1990). Beauty Is Our Business: A Birthday Salute to Edsger W. Dijkstra. Springer. ISBNÂ 978-0-387-97299-2.
Istrail, Sorin (FallâWinter 2008). "Storytelling About Lighthouses: Criticizing Professor Dijkstra Considered Harmless" (PDF). Conduit. Vol.Â 17, no.Â 2. Brown University Department of Computer Science. pp.Â 10â17.
Istrail, Sorin (SpringâSummer 2010). "Storytelling About Lighthouses: When Professor Dijkstra Slapped Me in the Quest for Beautiful Code" (PDF). Conduit. Vol.Â 19, no.Â 1. Brown University Department of Computer Science. pp.Â 10â12.
James, Mike (2013). "Edsger Dijkstra â The Poetry of Programming". I-programmer.info.
Lamport, Leslie (June 2015). "Turing Lecture: The Computer Science of Concurrency: The Early Years". Comm. ACM. 58 (6): 71â76. doi:10.1145/2771951. S2CIDÂ 19164754.
Laplante, Phillip A. (1996). Great papers in computer science. IEEE Press. ISBNÂ 978-0-7803-1112-1.
Laplante, Phillip A. (2008). "Great Papers in Computer Science: A Retrospective" (PDF). Journal of Scientific and Practical Computing. 2 (1): 31â35. CiteSeerXÂ 10.1.1.559.2457. Archived from the original (PDF) on 5 May 2018.
Lee, J.A.N. (1991). "Frontiers of Computing: A Tribute to Edsger W. Dijkstra on the Occasion of his 60th Birthday". Ann. Hist. Comp. 13 (1): 91â96. doi:10.1109/MAHC.1991.10000.
Markoff, John (2002). "Edsger Dijkstra, 72, Physicist Who Shaped Computer Era". The New York Times.
Milone, Lorenzo (2009). "E.W. Dijkstra, una vita da informatico [in Italian]" (PDF). Mondo Digitale. 9 (2).
OâRegan, Gerard (2013). Giants of Computing: A Compendium of Select, Pivotal Pioneers. Springer. ISBNÂ 978-1-4471-5340-5.
Payette, Sandy (2014). "Hopper and Dijkstra: Crisis, Revolution, and the Future of Programming". IEEE Annals of the History of Computing. 36 (4): 64â73. doi:10.1109/MAHC.2014.54. S2CIDÂ 9029390.
Shasha, Dennis; Lazere, Cathy (2 July 1998). Out of their Minds: The Lives and Discoveries of 15 Great Computer Scientists. Springer. ISBNÂ 978-0-387-98269-4.
External links[edit]



Wikimedia Commons has media related to Edsger Wybe Dijkstra.




Wikiquote has quotations related to: Edsger W. Dijkstra

"E.W. Dijkstra Archive". Center for American History, University of Texas at Austin.
"Dijkstra's Rallying Cry for Generalization". A site devoted to Dijkstraâs works and thoughts, created and maintained by the historian of computing Edgar Graham Daylight.
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}vteEdsger DijkstraNotableworks
A Primer of ALGOL 60 Programming (book)
Structured Programming (book)
A Discipline of Programming (book)
A Method of Programming (book)
Predicate Calculus and Program Semantics (book)
Selected Writings on Computing: A Personal Perspective (book)
A Note on Two Problems in Connexion with Graphs
Cooperating Sequential Processes
Solution of a Problem in Concurrent Programming Control
The Structure of the 'THE'-Multiprogramming System
Go To Statement Considered Harmful
Notes on Structured Programming
The Humble Programmer
Programming Considered as a Human Activity
How Do We Tell Truths That Might Hurt?
On the Role of Scientific Thought
Self-stabilizing Systems in Spite of Distributed Control
On the Cruelty of Really Teaching Computer Science
Selected papers
EWD manuscripts
Main researchareas
Theoretical computing science
Software engineering
Systems science
Algorithm design
Concurrent computing
Distributed computing
Formal methods
Programming methodology
Programming language research
Program design and development
Software architecture
Philosophy of computer programming and computing science
ScientificcontributionsConcepts,methods,principlesand theories
DijkstraâZonneveld ALGOL 60 compiler (first complete working ALGOL 60 compiler)
Call stack
Concurrency
Concurrent programming
Cooperating sequential processes
Critical section
Deadly embrace (deadlock)
Dining philosophers problem
Dutch national flag problem
Fault-tolerant system
Goto-less programming
Guarded Command Language
Layered structure in software architecture
Levels of abstraction
Multithreaded programming
Mutual exclusion (mutex)
Producerâconsumer problem (bounded buffer problem)
Program families
Predicate transformer semantics
Process synchronization
Self-stabilizing distributed system
Semaphore (programming)
Separation of concerns
Sleeping barber problem
Software crisis
Structured analysis
Structured programming
THE multiprogramming system
Unbounded nondeterminism
Weakest precondition calculus
Algorithms
Banker's algorithm
Dijkstra's algorithm
DJP algorithm (Prim's algorithm)
Dijkstra-Scholten algorithm
Dekker's algorithm (generalization)
Smoothsort
Shunting-yard algorithm
Tri-color marking algorithm
Concurrent algorithms
Distributed algorithms
Deadlock prevention algorithms
Mutual exclusion algorithms
Self-stabilizing algorithms
Relatedpeople
Shlomi Dolev
Per Brinch Hansen
Tony Hoare
Ole-Johan Dahl
Leslie Lamport
David Parnas
Jaap Zonneveld
Carel S. Scholten 
Adriaan van Wijngaarden
Niklaus Wirth
Othertopics
Centrum Wiskunde & Informatica (CWI Amsterdam)
Electrologica X1
Electrologica X8
Dijkstra Prize (Edsger W. Dijkstra Prize in Distributed Computing)
Dijkstra Fellowship
International Symposium on Stabilization, Safety, and Security of Distributed Systems
E.W. Dijkstra Archive (University of Texas at Austin)
List of important publications in computer science
List of important publications in theoretical computer science
List of important publications in concurrent, parallel, and distributed computing
List of pioneers in computer science
List of people considered father or mother of a technical field

 Wikiquote

vteTimelines of computingComputing
Before 1950
1950â1979
1980s
1990s
2000s
2010s
2020s
Scientific
Women in computing
Computer science
Algorithms
Artificial intelligence
Binary prefixes
Cryptography
Machine learning
Quantum computing
Software
Free and open-source software
Hypertext technology
Operating systems
DOS family
Windows
Linux
Programming languages
Virtualization development
Malware
Internet
Internet conflicts
Web browsers
Web search engines
Notable people
Kathleen Antonelli
John Vincent Atanasoff
Charles Babbage
John Backus
Jean Bartik
George Boole
Vint Cerf
John Cocke
Stephen Cook
Edsger W. Dijkstra
J. Presper Eckert
Adele Goldstine
Lois Haibt
Betty Holberton
Margaret Hamilton
Grace Hopper
David A. Huffman
Bob Kahn
Brian Kernighan
Andrew Koenig
Semyon Korsakov
Nancy Leveson
Ada Lovelace
Donald Knuth
Joseph Kruskal
Douglas McIlroy
Marlyn Meltzer
John von Neumann
KlÃ¡ra DÃ¡n von Neumann
Dennis Ritchie
Guido van Rossum
Frances Spence
Bjarne Stroustrup
Ruth Teitelbaum
Ken Thompson
Linus Torvalds
Alan Turing
Paul Vixie
Larry Wall
Stephen Wolfram
Niklaus Wirth
Steve Wozniak
Konrad Zuse

vteConcurrent computingGeneral
Concurrency
Concurrency control
Process calculi
CSP
CCS
ACP
LOTOS
Ï-calculus
Ambient calculus
API-Calculus
PEPA
Join-calculus
Classic problems
ABA problem
Cigarette smokers problem
Deadlock
Dining philosophers problem
Producerâconsumer problem
Race condition
Readersâwriters problem
Sleeping barber problem

Â Category: Concurrent computing

vteSoftware engineeringFields
Computer programming
DevOps
Requirements engineering
Site reliability engineering
Software deployment
Software design
Software maintenance
Software testing
Systems analysis
Formal methods
Concepts
Data modeling
Enterprise architecture
Functional specification
Modeling language
Programming paradigm
Software
Software archaeology
Software architecture
Software configuration management
Software development process/methodology
Software quality
Software quality assurance
Software verification and validation
Structured analysis
Essential Analysis
Orientations
Agile
Aspect-oriented
Object orientation
Ontology
Service orientation
SDLC
ModelsDevelopmental
Agile
EUP
Executable UML
Incremental model
Iterative model
Prototype model
RAD
UP
Scrum
Spiral model
V-Model
Waterfall model
XP
Other
SPICE
CMMI
Data model
ER model
Function model
Information model
Metamodeling
Object model
Systems model
View model
Languages
IDEF
UML
USL
SysML
Related fields
Computer science
Computer engineering
Information science
Project management
Risk management
Systems engineering

 Category
 Commons

vteComputer scienceNote: This template roughly follows the 2012 ACM Computing Classification System.Hardware
Printed circuit board
Peripheral
Integrated circuit
Very Large Scale Integration
Systems on Chip (SoCs)
Energy consumption (Green computing)
Electronic design automation
Hardware acceleration
Computer systems organization
Computer architecture
Embedded system
Real-time computing
Dependability
Networks
Network architecture
Network protocol
Network components
Network scheduler
Network performance evaluation
Network service
Software organization
Interpreter
Middleware
Virtual machine
Operating system
Software quality
Software notations and tools
Programming paradigm
Programming language
Compiler
Domain-specific language
Modeling language
Software framework
Integrated development environment
Software configuration management
Software library
Software repository
Software development
Control variable
Software development process
Requirements analysis
Software design
Software construction
Software deployment
Software maintenance
Programming team
Open-source model
Theory of computation
Model of computation
Formal language
Automata theory
Computability theory
Computational complexity theory
Logic
Semantics
Algorithms
Algorithm design
Analysis of algorithms
Algorithmic efficiency
Randomized algorithm
Computational geometry
Mathematics of computing
Discrete mathematics
Probability
Statistics
Mathematical software
Information theory
Mathematical analysis
Numerical analysis
Theoretical computer science
Information systems
Database management system
Information storage systems
Enterprise information system
Social information systems
Geographic information system
Decision support system
Process control system
Multimedia information system
Data mining
Digital library
Computing platform
Digital marketing
World Wide Web
Information retrieval
Security
Cryptography
Formal methods
Security services
Intrusion detection system
Hardware security
Network security
Information security
Application security
Humanâcomputer interaction
Interaction design
Social computing
Ubiquitous computing
Visualization
Accessibility
Concurrency
Concurrent computing
Parallel computing
Distributed computing
Multithreading
Multiprocessing
Artificial intelligence
Natural language processing
Knowledge representation and reasoning
Computer vision
Automated planning and scheduling
Search methodology
Control method
Philosophy of artificial intelligence
Distributed artificial intelligence
Machine learning
Supervised learning
Unsupervised learning
Reinforcement learning
Multi-task learning
Cross-validation
Graphics
Animation
Rendering
Image manipulation
Graphics processing unit
Mixed reality
Virtual reality
Image compression
Solid modeling
Applied computing
E-commerce
Enterprise software
Computational mathematics
Computational physics
Computational chemistry
Computational biology
Computational social science
Computational engineering
Computational healthcare
Digital art
Electronic publishing
Cyberwarfare
Electronic voting
Video games
Word processing
Operations research
Educational technology
Document management

 Category
 Outline
WikiProject
 Commons

vteSystems scienceSystemtypes
Anatomical
Art
Biological
Complex
Complex adaptive
Conceptual
Coupled humanâenvironment
Database
Dynamical
Ecological
Economic
Energy
Formal
Holarchic
Information
Legal
Measurement
Metric
Multi-agent
Nervous
Nonlinear
Operating
Planetary
Political
Sensory
Social
Star
Writing
Concepts
Doubling time
Leverage points
Limiting factor
Negative feedback
Positive feedback
Theoreticalfields
Chaos theory
Complex systems
Control theory
Cybernetics
Earth system science
Living systems
Sociotechnical system
Systemics
Urban metabolism
World-systems theory

Analysis
Biology
Dynamics
Ecology
Engineering
Neuroscience
Pharmacology
Psychology
Theory (Systems thinking)
Scientists
Alexander Bogdanov
Russell L. Ackoff
William Ross Ashby
Ruzena Bajcsy
BÃ©la H. BÃ¡nÃ¡thy
Gregory Bateson
Anthony Stafford Beer
Richard E. Bellman
Ludwig von Bertalanffy
Margaret Boden
Kenneth E. Boulding
Murray Bowen
Kathleen Carley
Mary Cartwright
C. West Churchman
Manfred Clynes
George Dantzig
Edsger W. Dijkstra
Fred Emery
Heinz von Foerster
Stephanie Forrest
Jay Wright Forrester
Barbara Grosz
Charles A.Â S. Hall
Mike Jackson
Lydia Kavraki
James J. Kay
Faina M. Kirillova
George Klir
Allenna Leonard
Edward Norton Lorenz
Niklas Luhmann
Humberto Maturana
Margaret Mead
Donella Meadows
Mihajlo D. Mesarovic
James Grier Miller
Radhika Nagpal
Howard T. Odum
Talcott Parsons
Ilya Prigogine
Qian Xuesen
Anatol Rapoport
John Seddon
Peter Senge
Claude Shannon
Katia Sycara
Eric Trist
Francisco Varela
Manuela M. Veloso
Kevin Warwick
Norbert Wiener
Jennifer Wilby
Anthony Wilden
Applications
Systems theory in anthropology
Systems theory in archaeology
Systems theory in political science
Organizations
List
Principia Cybernetica

 Category
 Portal
 Commons

vteALGOL programmingImplementationsTechnicalstandards
ALGOL 58
ALGOL 60
ALGOL 68
Dialects
ABC ALGOL
ALCOR
ALGO
ALGOL 68C
ALGOL 68-R
ALGOL 68RS (ELLA)
ALGOL 68S
ALGOL N
ALGOL W
ALGOL X
Atlas Autocode (Edinburgh IMP)
Burroughs ALGOL
Coral 66
Dartmouth ALGOL 30
DASK ALGOL
DG/L
Elliott ALGOL
Executive Systems Problem Oriented Language (ESPOL) â New Executive Programming Language (NEWP)
FLACC
IMP
JOVIAL
Kidsgrove Algol
Mary
NELIAC
RTL/2
S-algol, PS-algol, Napier88
Simula
Small Machine ALGOL Like Language (SMALL)
SMIL ALGOL
Formalisms
Jensen's device
Van Wijngaarden grammar
CommunityOrganizationsProfessionalassociations
ALCOR Group
Association for Computing Machinery (ACM)
BSI Group
Euro-Asian Council for Standardization, Metrology and Certification (EASC)
International Federation for Information Processing (IFIP) IFIP Working Group 2.1
Society of Applied Mathematics and Mechanics (GAMM)
Business
Burroughs Corporation
Elliott Brothers
Regnecentralen
Education
Case Institute of Technology
University of Edinburgh
University of St Andrews
Manchester University
Massachusetts Institute of Technology (MIT)
Government
Royal Radar Establishment (RRE)
PeopleALGOL 58
John Backus
Friedrich L. Bauer
Hermann Bottenbruch
Charles Katz
Alan Perlis
Heinz Rutishauser
Klaus Samelson
Joseph Henry Wegstein
ALGOL 60
Backus^
Roland Carl Backhouse
Bauer^
Richard Bird
Stephen R. Bourne
Edsger W. Dijkstra
Andrey Ershov
Robert W. Floyd
Jeremy Gibbons
Julien Green
David Gries
Eric Hehner
Tony Hoare
JÃ¸rn Jensen
Katz^
Peter Landin
Tom Maibaum
Conor McBride
John McCarthy
Carroll Morgan
Peter Naur
Maurice Nivat
John E. L. Peck
Perlis^
Brian Randell
Rutishauser^
Samelson^
Jacob T. Schwartz
Micha Sharir
David Turner
Bernard Vauquois
Eiiti Wada
Wegstein^
Adriaan van Wijngaarden
Mike Woodger
Simula
Ole-Johan Dahl
Kristen Nygaard
ALGOL 68
Bauer^
Susan G. Bond
Bourne^
Robert Dewar
Dijkstra^
Gerhard Goos
Michael Guy
Hoare^
Cornelis H. A. Koster
Peter Landin
Charles H. Lindsey
Barry J. Mailloux
McCarthy^
Lambert Meertens
Naur^
Peck^
Willem van der Poel
Randell^
Douglas T. Ross
Samelson^
Michel Sintzoff
van Wijngaarden^
Niklaus Wirth
Woodger^
Philip Woodward
Nobuo Yoneda

Hal Abelson
John Barnes
Tony Brooker
Ron Morrison
Peter O'Hearn
John C. ReynoldsOther
ALGOL Bulletin
 Category: ALGOL  Category: ALGOL 60
^ = full name and link in prior ALGOL version above
vteA. M. Turing Award laureates1960s
Alan Perlis (1966)
Maurice Vincent Wilkes (1967)
Richard Hamming (1968)
Marvin Minsky (1969)
1970s
James H. Wilkinson (1970)
John McCarthy (1971)
Edsger W. Dijkstra (1972)
Charles Bachman (1973)
Donald Knuth (1974)
Allen Newell; Herbert A. Simon (1975)
Michael O. Rabin; Dana Scott (1976)
John Backus (1977)
Robert W. Floyd (1978)
Kenneth E. Iverson (1979)
1980s
Tony Hoare (1980)
Edgar F. Codd (1981)
Stephen Cook (1982)
Ken Thompson; Dennis Ritchie (1983)
Niklaus Wirth (1984)
Richard Karp (1985)
John Hopcroft; Robert Tarjan (1986)
John Cocke (1987)
Ivan Sutherland (1988)
William Kahan (1989)
1990s
Fernando J. CorbatÃ³ (1990)
Robin Milner (1991)
Butler Lampson (1992)
Juris Hartmanis; Richard E. Stearns (1993)
Edward Feigenbaum; Raj Reddy (1994)
Manuel Blum (1995)
Amir Pnueli (1996)
Douglas Engelbart (1997)
Jim Gray (1998)
Fred Brooks (1999)
2000s
Andrew Yao (2000)
Ole-Johan Dahl; Kristen Nygaard (2001)
Ron Rivest; Adi Shamir; Leonard Adleman (2002)
Alan Kay (2003)
Vint Cerf; Bob Kahn (2004)
Peter Naur (2005)
Frances Allen (2006)
Edmund M. Clarke; E. Allen Emerson; Joseph Sifakis (2007)
Barbara Liskov (2008)
Charles P. Thacker (2009)
2010s
Leslie G. Valiant (2010)
Judea Pearl (2011)
Shafi Goldwasser; Silvio Micali (2012)
Leslie Lamport (2013)
Michael Stonebraker (2014)
Martin Hellman; Whitfield Diffie (2015)
Tim Berners-Lee (2016)
John L. Hennessy; David Patterson (2017)
Yoshua Bengio; Geoffrey Hinton; Yann LeCun (2018)
Ed Catmull; Pat Hanrahan (2019)
2020s
Alfred Aho; Jeffrey Ullman (2020)

Authority control General
Integrated Authority File (Germany)
ISNI
1
VIAF
1
WorldCat
National libraries
Norway
United States
Latvia
Japan
Australia
Israel
Netherlands
Poland
Sweden
Biographical dictionaries
Netherlands
Scientific databases
Association for Computing Machinery
CiNii (Japan)
DBLP (computer science)
Mathematics Genealogy Project
Scopus author
Other
Faceted Application of Subject Terminology
Social Networks and Archival Context
SUDOC (France)
1
Trove (Australia)
1







<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Edsger_W._Dijkstra&oldid=1065564097"
		Categories: Edsger W. Dijkstra1930 births2002 deathsComputer science educatorsComputer science writersDutch computer scientistsDutch computer programmersDutch software engineersDutch systems scientists20th-century Dutch inventorsDutch technology writersDutch essayistsFormal methods peopleProgramming language designersProgramming language researchersResearchers in distributed computingSoftware engineering researchersTheoretical computer scientistsDijkstra Prize laureatesFellows of the Association for Computing MachineryFellows of the British Computer SocietyMembers of the Royal Netherlands Academy of Arts and SciencesTuring Award laureatesBurroughs Corporation peopleEindhoven University of Technology facultyUniversity of Texas at Austin facultyLeiden University alumniDutch expatriates in the United StatesDeaths from cancer in the NetherlandsDeaths from colorectal cancerScientists from Rotterdam20th-century Dutch engineers20th-century Dutch mathematicians20th-century essayistsHidden categories: CS1 Czech-language sources (cs)Wikipedia articles needing page number citations from September 2020All articles with incomplete citationsArticles with incomplete citations from September 2020Articles with short descriptionShort description matches WikidataArticles with hCardsArticles with hAudio microformatsPages incorrectly using the Blockquote templateArticles containing Dutch-language textCommons category link is on WikidataArticles with GND identifiersArticles with ISNI identifiersArticles with VIAF identifiersArticles with WORLDCATID identifiersArticles with BIBSYS identifiersArticles with LCCN identifiersArticles with LNB identifiersArticles with NDL identifiersArticles with NLA identifiersArticles with NLI identifiersArticles with NTA identifiersArticles with PLWABN identifiersArticles with SELIBR identifiersArticles with BPN identifiersArticles with ACM-DL identifiersArticles with CINII identifiersArticles with DBLP identifiersArticles with MGP identifiersArticles with Scopus identifiersArticles with FAST identifiersArticles with SNAC-ID identifiersArticles with SUDOC identifiersArticles with Trove identifiersUse dmy dates from August 2020
	
