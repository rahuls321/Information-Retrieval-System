
Title:
Dynamic programming
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Problem optimization method
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}Not to be confused with Dynamic programming language or Dynamic problem.
  Figure 1. Finding the shortest path in a graph using optimal substructure; a straight line indicates a single edge; a wavy line indicates a shortest path between the two vertices it connects (among other paths, not shown, sharing the same two vertices); the bold line is the overall shortest path from start to goal.
Dynamic programming is both a mathematical optimization method and a computer programming method. The method was developed by Richard Bellman in the 1950s and has found applications in numerous fields, from aerospace engineering to economics.
In both contexts it refers to simplifying a complicated problem by breaking it down into simpler sub-problems in a recursive manner. While some decision problems cannot be taken apart this way, decisions that span several points in time do often break apart recursively. Likewise, in computer science, if a problem can be solved optimally by breaking it into sub-problems and then recursively finding the optimal solutions to the sub-problems, then it is said to have optimal substructure.
If sub-problems can be nested recursively inside larger problems, so that dynamic programming methods are applicable, then there is a relation between the value of the larger problem and the values of the sub-problems.[1] In the optimization literature this relationship is called the Bellman equation.

Contents

1 Overview

1.1 Mathematical optimization
1.2 Control theory

1.2.1 Example from economics: Ramsey's problem of optimal saving


1.3 Computer programming
1.4 Bioinformatics


2 Examples: Computer algorithms

2.1 Dijkstra's algorithm for the shortest path problem
2.2 Fibonacci sequence
2.3 A type of balanced 0â1 matrix
2.4 Checkerboard
2.5 Sequence alignment
2.6 Tower of Hanoi puzzle
2.7 Egg dropping puzzle

2.7.1 Faster DP solution using a different parametrization


2.8 Matrix chain multiplication


3 History
4 Algorithms that use dynamic programming
5 See also
6 References
7 Further reading
8 External links



Overview[edit]
Mathematical optimization[edit]
In terms of mathematical optimization, dynamic programming usually refers to simplifying a decision by breaking it down into a sequence of decision steps over time. This is done by defining a sequence of value functions V1, V2, ..., Vn taking y as an argument representing the state of the system at times i from 1 to n. The definition of Vn(y) is the value obtained in state y at the last time n. The values Vi at earlier times iÂ =Â nÂ â1,Â nÂ âÂ 2,Â ...,Â 2,Â 1 can be found by working backwards, using a recursive relationship called the Bellman equation. For iÂ =Â 2,Â ...,Â n, Viâ1 at any state y is calculated from Vi by maximizing a simple function (usually the sum) of the gain from a decision at time iÂ âÂ 1 and the function Vi at the new state of the system if this decision is made. Since Vi has already been calculated for the needed states, the above operation yields Viâ1 for those states. Finally, V1 at the initial state of the system is the value of the optimal solution. The optimal values of the decision variables can be recovered, one by one, by tracking back the calculations already performed.

Control theory[edit]
In control theory, a typical problem is to find an admissible control 
  
    
      
        
          
            u
          
          
            â
          
        
      
    
    {\displaystyle \mathbf {u} ^{\ast }}
  
 which causes the system 
  
    
      
        
          
            
              
                x
              
              Ë
            
          
        
        (
        t
        )
        =
        
          g
        
        
          (
          
            
              x
            
            (
            t
            )
            ,
            
              u
            
            (
            t
            )
            ,
            t
          
          )
        
      
    
    {\displaystyle {\dot {\mathbf {x} }}(t)=\mathbf {g} \left(\mathbf {x} (t),\mathbf {u} (t),t\right)}
  
 to follow an admissible trajectory 
  
    
      
        
          
            x
          
          
            â
          
        
      
    
    {\displaystyle \mathbf {x} ^{\ast }}
  
 on a continuous time interval 
  
    
      
        
          t
          
            0
          
        
        â¤
        t
        â¤
        
          t
          
            1
          
        
      
    
    {\displaystyle t_{0}\leq t\leq t_{1}}
  
 that minimizes a cost function


  
    
      
        J
        =
        b
        
          (
          
            
              x
            
            (
            
              t
              
                1
              
            
            )
            ,
            
              t
              
                1
              
            
          
          )
        
        +
        
          â«
          
            
              t
              
                0
              
            
          
          
            
              t
              
                1
              
            
          
        
        f
        
          (
          
            
              x
            
            (
            t
            )
            ,
            
              u
            
            (
            t
            )
            ,
            t
          
          )
        
        
          d
        
        t
      
    
    {\displaystyle J=b\left(\mathbf {x} (t_{1}),t_{1}\right)+\int _{t_{0}}^{t_{1}}f\left(\mathbf {x} (t),\mathbf {u} (t),t\right)\mathrm {d} t}
  

The solution to this problem is an optimal control law or policy 
  
    
      
        
          
            u
          
          
            â
          
        
        =
        h
        (
        
          x
        
        (
        t
        )
        ,
        t
        )
      
    
    {\displaystyle \mathbf {u} ^{\ast }=h(\mathbf {x} (t),t)}
  
, which produces an optimal trajectory 
  
    
      
        
          
            x
          
          
            â
          
        
      
    
    {\displaystyle \mathbf {x} ^{\ast }}
  
 and a cost-to-go function 
  
    
      
        
          J
          
            â
          
        
      
    
    {\displaystyle J^{\ast }}
  
. The latter obeys the fundamental equation of dynamic programming:


  
    
      
        â
        
          J
          
            t
          
          
            â
          
        
        =
        
          min
          
            
              u
            
          
        
        
          {
          
            f
            
              (
              
                
                  x
                
                (
                t
                )
                ,
                
                  u
                
                (
                t
                )
                ,
                t
              
              )
            
            +
            
              J
              
                x
              
              
                â
                
                  
                    T
                  
                
              
            
            
              g
            
            
              (
              
                
                  x
                
                (
                t
                )
                ,
                
                  u
                
                (
                t
                )
                ,
                t
              
              )
            
          
          }
        
      
    
    {\displaystyle -J_{t}^{\ast }=\min _{\mathbf {u} }\left\{f\left(\mathbf {x} (t),\mathbf {u} (t),t\right)+J_{x}^{\ast {\mathsf {T}}}\mathbf {g} \left(\mathbf {x} (t),\mathbf {u} (t),t\right)\right\}}
  

a partial differential equation known as the HamiltonâJacobiâBellman equation, in which 
  
    
      
        
          J
          
            x
          
          
            â
          
        
        =
        
          
            
              â
              
                J
                
                  â
                
              
            
            
              â
              
                x
              
            
          
        
        =
        
          
            [
            
              
                
                  
                    â
                    
                      J
                      
                        â
                      
                    
                  
                  
                    â
                    
                      x
                      
                        1
                      
                    
                  
                
              
              Â 
              Â 
              Â 
              Â 
              
                
                  
                    â
                    
                      J
                      
                        â
                      
                    
                  
                  
                    â
                    
                      x
                      
                        2
                      
                    
                  
                
              
              Â 
              Â 
              Â 
              Â 
              â¦
              Â 
              Â 
              Â 
              Â 
              
                
                  
                    â
                    
                      J
                      
                        â
                      
                    
                  
                  
                    â
                    
                      x
                      
                        n
                      
                    
                  
                
              
            
            ]
          
          
            
              T
            
          
        
      
    
    {\displaystyle J_{x}^{\ast }={\frac {\partial J^{\ast }}{\partial \mathbf {x} }}=\left[{\frac {\partial J^{\ast }}{\partial x_{1}}}~~~~{\frac {\partial J^{\ast }}{\partial x_{2}}}~~~~\dots ~~~~{\frac {\partial J^{\ast }}{\partial x_{n}}}\right]^{\mathsf {T}}}
  
 and 
  
    
      
        
          J
          
            t
          
          
            â
          
        
        =
        
          
            
              â
              
                J
                
                  â
                
              
            
            
              â
              t
            
          
        
      
    
    {\displaystyle J_{t}^{\ast }={\frac {\partial J^{\ast }}{\partial t}}}
  
. One finds that minimizing 
  
    
      
        
          u
        
      
    
    {\displaystyle \mathbf {u} }
  
 in terms of 
  
    
      
        t
      
    
    {\displaystyle t}
  
, 
  
    
      
        
          x
        
      
    
    {\displaystyle \mathbf {x} }
  
, and the unknown function 
  
    
      
        
          J
          
            x
          
          
            â
          
        
      
    
    {\displaystyle J_{x}^{\ast }}
  
 and then substitutes the result into the HamiltonâJacobiâBellman equation to get the partial differential equation to be solved with boundary condition 
  
    
      
        J
        
          (
          
            t
            
              1
            
          
          )
        
        =
        b
        
          (
          
            
              x
            
            (
            
              t
              
                1
              
            
            )
            ,
            
              t
              
                1
              
            
          
          )
        
      
    
    {\displaystyle J\left(t_{1}\right)=b\left(\mathbf {x} (t_{1}),t_{1}\right)}
  
.[2] In practice, this generally requires numerical techniques for some discrete approximation to the exact optimization relationship.
Alternatively, the continuous process can be approximated by a discrete system, which leads to a following recurrence relation analog to the HamiltonâJacobiâBellman equation:


  
    
      
        
          J
          
            k
          
          
            â
          
        
        
          (
          
            
              x
            
            
              n
              â
              k
            
          
          )
        
        =
        
          min
          
            
              
                u
              
              
                n
                â
                k
              
            
          
        
        
          {
          
            
              
                
                  f
                  ^
                
              
            
            
              (
              
                
                  
                    x
                  
                  
                    n
                    â
                    k
                  
                
                ,
                
                  
                    u
                  
                  
                    n
                    â
                    k
                  
                
              
              )
            
            +
            
              J
              
                k
                â
                1
              
              
                â
              
            
            
              (
              
                
                  
                    
                      
                        g
                      
                      ^
                    
                  
                
                
                  (
                  
                    
                      
                        x
                      
                      
                        n
                        â
                        k
                      
                    
                    ,
                    
                      
                        u
                      
                      
                        n
                        â
                        k
                      
                    
                  
                  )
                
              
              )
            
          
          }
        
      
    
    {\displaystyle J_{k}^{\ast }\left(\mathbf {x} _{n-k}\right)=\min _{\mathbf {u} _{n-k}}\left\{{\hat {f}}\left(\mathbf {x} _{n-k},\mathbf {u} _{n-k}\right)+J_{k-1}^{\ast }\left({\hat {\mathbf {g} }}\left(\mathbf {x} _{n-k},\mathbf {u} _{n-k}\right)\right)\right\}}
  

at the 
  
    
      
        k
      
    
    {\displaystyle k}
  
-th stage of 
  
    
      
        n
      
    
    {\displaystyle n}
  
 equally spaced discrete time intervals, and where 
  
    
      
        
          
            
              f
              ^
            
          
        
      
    
    {\displaystyle {\hat {f}}}
  
 and 
  
    
      
        
          
            
              
                g
              
              ^
            
          
        
      
    
    {\displaystyle {\hat {\mathbf {g} }}}
  
 denote discrete approximations to 
  
    
      
        f
      
    
    {\displaystyle f}
  
 and 
  
    
      
        
          g
        
      
    
    {\displaystyle \mathbf {g} }
  
. This functional equation is known as the Bellman equation, which can be solved for an exact solution of the discrete approximation of the optimization equation.[3]

Example from economics: Ramsey's problem of optimal saving[edit]
See also: RamseyâCassâKoopmans model
In economics, the objective is generally to maximize (rather than minimize) some dynamic social welfare function. In Ramsey's problem, this function relates amounts of consumption to levels of utility. Loosely speaking, the planner faces the trade-off between contemporaneous consumption and future consumption (via investment in capital stock that is used in production), known as intertemporal choice. Future consumption is discounted at a constant rate 
  
    
      
        Î²
        â
        (
        0
        ,
        1
        )
      
    
    {\displaystyle \beta \in (0,1)}
  
. A discrete approximation to the transition equation of capital is given by


  
    
      
        
          k
          
            t
            +
            1
          
        
        =
        
          
            
              g
              ^
            
          
        
        
          (
          
            
              k
              
                t
              
            
            ,
            
              c
              
                t
              
            
          
          )
        
        =
        f
        (
        
          k
          
            t
          
        
        )
        â
        
          c
          
            t
          
        
      
    
    {\displaystyle k_{t+1}={\hat {g}}\left(k_{t},c_{t}\right)=f(k_{t})-c_{t}}
  

where 
  
    
      
        c
      
    
    {\displaystyle c}
  
 is consumption, 
  
    
      
        k
      
    
    {\displaystyle k}
  
 is capital, and 
  
    
      
        f
      
    
    {\displaystyle f}
  
 is a production function satisfying the Inada conditions. An initial capital stock 
  
    
      
        
          k
          
            0
          
        
        >
        0
      
    
    {\displaystyle k_{0}>0}
  
 is assumed.
Let 
  
    
      
        
          c
          
            t
          
        
      
    
    {\displaystyle c_{t}}
  
 be consumption in period t, and assume consumption yields utility 
  
    
      
        u
        (
        
          c
          
            t
          
        
        )
        =
        ln
        â¡
        (
        
          c
          
            t
          
        
        )
      
    
    {\displaystyle u(c_{t})=\ln(c_{t})}
  
 as long as the consumer lives. Assume the consumer is impatient, so that he discounts future utility by a factor b each period, where 
  
    
      
        0
        <
        b
        <
        1
      
    
    {\displaystyle 0<b<1}
  
. Let 
  
    
      
        
          k
          
            t
          
        
      
    
    {\displaystyle k_{t}}
  
 be capital in period t. Assume initial capital is a given amount 
  
    
      
        
          k
          
            0
          
        
        >
        0
      
    
    {\displaystyle k_{0}>0}
  
, and suppose that this period's capital and consumption determine next period's capital as 
  
    
      
        
          k
          
            t
            +
            1
          
        
        =
        A
        
          k
          
            t
          
          
            a
          
        
        â
        
          c
          
            t
          
        
      
    
    {\displaystyle k_{t+1}=Ak_{t}^{a}-c_{t}}
  
, where A is a positive constant and 
  
    
      
        0
        <
        a
        <
        1
      
    
    {\displaystyle 0<a<1}
  
. Assume capital cannot be negative. Then the consumer's decision problem can be written as follows:


  
    
      
        max
        
          â
          
            t
            =
            0
          
          
            T
          
        
        
          b
          
            t
          
        
        ln
        â¡
        (
        
          c
          
            t
          
        
        )
      
    
    {\displaystyle \max \sum _{t=0}^{T}b^{t}\ln(c_{t})}
  
 subject to 
  
    
      
        
          k
          
            t
            +
            1
          
        
        =
        A
        
          k
          
            t
          
          
            a
          
        
        â
        
          c
          
            t
          
        
        â¥
        0
      
    
    {\displaystyle k_{t+1}=Ak_{t}^{a}-c_{t}\geq 0}
  
 for all 
  
    
      
        t
        =
        0
        ,
        1
        ,
        2
        ,
        â¦
        ,
        T
      
    
    {\displaystyle t=0,1,2,\ldots ,T}
  

Written this way, the problem looks complicated, because it involves solving for all the choice variables 
  
    
      
        
          c
          
            0
          
        
        ,
        
          c
          
            1
          
        
        ,
        
          c
          
            2
          
        
        ,
        â¦
        ,
        
          c
          
            T
          
        
      
    
    {\displaystyle c_{0},c_{1},c_{2},\ldots ,c_{T}}
  
. (The capital 
  
    
      
        
          k
          
            0
          
        
      
    
    {\displaystyle k_{0}}
  
 is not a choice variableâthe consumer's initial capital is taken as given.)
The dynamic programming approach to solve this problem involves breaking it apart into a sequence of smaller decisions. To do so, we define a sequence of value functions 
  
    
      
        
          V
          
            t
          
        
        (
        k
        )
      
    
    {\displaystyle V_{t}(k)}
  
, for 
  
    
      
        t
        =
        0
        ,
        1
        ,
        2
        ,
        â¦
        ,
        T
        ,
        T
        +
        1
      
    
    {\displaystyle t=0,1,2,\ldots ,T,T+1}
  
 which represent the value of having any amount of capital k at each time t. There is (by assumption) no utility from having capital after death, 
  
    
      
        
          V
          
            T
            +
            1
          
        
        (
        k
        )
        =
        0
      
    
    {\displaystyle V_{T+1}(k)=0}
  
.
The value of any quantity of capital at any previous time can be calculated by backward induction using the Bellman equation. In this problem, for each 
  
    
      
        t
        =
        0
        ,
        1
        ,
        2
        ,
        â¦
        ,
        T
      
    
    {\displaystyle t=0,1,2,\ldots ,T}
  
, the Bellman equation is


  
    
      
        
          V
          
            t
          
        
        (
        
          k
          
            t
          
        
        )
        
        =
        
        max
        
          (
          
            ln
            â¡
            (
            
              c
              
                t
              
            
            )
            +
            b
            
              V
              
                t
                +
                1
              
            
            (
            
              k
              
                t
                +
                1
              
            
            )
          
          )
        
      
    
    {\displaystyle V_{t}(k_{t})\,=\,\max \left(\ln(c_{t})+bV_{t+1}(k_{t+1})\right)}
  
 subject to 
  
    
      
        
          k
          
            t
            +
            1
          
        
        =
        A
        
          k
          
            t
          
          
            a
          
        
        â
        
          c
          
            t
          
        
        â¥
        0
      
    
    {\displaystyle k_{t+1}=Ak_{t}^{a}-c_{t}\geq 0}
  

This problem is much simpler than the one we wrote down before, because it involves only two decision variables, 
  
    
      
        
          c
          
            t
          
        
      
    
    {\displaystyle c_{t}}
  
 and 
  
    
      
        
          k
          
            t
            +
            1
          
        
      
    
    {\displaystyle k_{t+1}}
  
. Intuitively, instead of choosing his whole lifetime plan at birth, the consumer can take things one step at a time. At time t, his current capital 
  
    
      
        
          k
          
            t
          
        
      
    
    {\displaystyle k_{t}}
  
 is given, and he only needs to choose current consumption 
  
    
      
        
          c
          
            t
          
        
      
    
    {\displaystyle c_{t}}
  
 and saving 
  
    
      
        
          k
          
            t
            +
            1
          
        
      
    
    {\displaystyle k_{t+1}}
  
.
To actually solve this problem, we work backwards. For simplicity, the current level of capital is denoted as k. 
  
    
      
        
          V
          
            T
            +
            1
          
        
        (
        k
        )
      
    
    {\displaystyle V_{T+1}(k)}
  
 is already known, so using the Bellman equation once we can calculate 
  
    
      
        
          V
          
            T
          
        
        (
        k
        )
      
    
    {\displaystyle V_{T}(k)}
  
, and so on until we get to 
  
    
      
        
          V
          
            0
          
        
        (
        k
        )
      
    
    {\displaystyle V_{0}(k)}
  
, which is the value of the initial decision problem for the whole lifetime. In other words, once we know 
  
    
      
        
          V
          
            T
            â
            j
            +
            1
          
        
        (
        k
        )
      
    
    {\displaystyle V_{T-j+1}(k)}
  
, we can calculate 
  
    
      
        
          V
          
            T
            â
            j
          
        
        (
        k
        )
      
    
    {\displaystyle V_{T-j}(k)}
  
, which is the maximum of 
  
    
      
        ln
        â¡
        (
        
          c
          
            T
            â
            j
          
        
        )
        +
        b
        
          V
          
            T
            â
            j
            +
            1
          
        
        (
        A
        
          k
          
            a
          
        
        â
        
          c
          
            T
            â
            j
          
        
        )
      
    
    {\displaystyle \ln(c_{T-j})+bV_{T-j+1}(Ak^{a}-c_{T-j})}
  
, where 
  
    
      
        
          c
          
            T
            â
            j
          
        
      
    
    {\displaystyle c_{T-j}}
  
 is the choice variable and 
  
    
      
        A
        
          k
          
            a
          
        
        â
        
          c
          
            T
            â
            j
          
        
        â¥
        0
      
    
    {\displaystyle Ak^{a}-c_{T-j}\geq 0}
  
.
Working backwards, it can be shown that the value function at time 
  
    
      
        t
        =
        T
        â
        j
      
    
    {\displaystyle t=T-j}
  
 is


  
    
      
        
          V
          
            T
            â
            j
          
        
        (
        k
        )
        
        =
        
        a
        
          â
          
            i
            =
            0
          
          
            j
          
        
        
          a
          
            i
          
        
        
          b
          
            i
          
        
        ln
        â¡
        k
        +
        
          v
          
            T
            â
            j
          
        
      
    
    {\displaystyle V_{T-j}(k)\,=\,a\sum _{i=0}^{j}a^{i}b^{i}\ln k+v_{T-j}}
  

where each 
  
    
      
        
          v
          
            T
            â
            j
          
        
      
    
    {\displaystyle v_{T-j}}
  
 is a constant, and the optimal amount to consume at time 
  
    
      
        t
        =
        T
        â
        j
      
    
    {\displaystyle t=T-j}
  
 is


  
    
      
        
          c
          
            T
            â
            j
          
        
        (
        k
        )
        
        =
        
        
          
            1
            
              
                â
                
                  i
                  =
                  0
                
                
                  j
                
              
              
                a
                
                  i
                
              
              
                b
                
                  i
                
              
            
          
        
        A
        
          k
          
            a
          
        
      
    
    {\displaystyle c_{T-j}(k)\,=\,{\frac {1}{\sum _{i=0}^{j}a^{i}b^{i}}}Ak^{a}}
  

which can be simplified to


  
    
      
        
          
            
              
                
                  c
                  
                    T
                  
                
                (
                k
                )
              
              
                
                =
                A
                
                  k
                  
                    a
                  
                
              
            
            
              
                
                  c
                  
                    T
                    â
                    1
                  
                
                (
                k
                )
              
              
                
                =
                
                  
                    
                      A
                      
                        k
                        
                          a
                        
                      
                    
                    
                      1
                      +
                      a
                      b
                    
                  
                
              
            
            
              
                
                  c
                  
                    T
                    â
                    2
                  
                
                (
                k
                )
              
              
                
                =
                
                  
                    
                      A
                      
                        k
                        
                          a
                        
                      
                    
                    
                      1
                      +
                      a
                      b
                      +
                      
                        a
                        
                          2
                        
                      
                      
                        b
                        
                          2
                        
                      
                    
                  
                
              
            
            
              
              
                
                â¦
              
            
            
              
                
                  c
                  
                    2
                  
                
                (
                k
                )
              
              
                
                =
                
                  
                    
                      A
                      
                        k
                        
                          a
                        
                      
                    
                    
                      1
                      +
                      a
                      b
                      +
                      
                        a
                        
                          2
                        
                      
                      
                        b
                        
                          2
                        
                      
                      +
                      â¦
                      +
                      
                        a
                        
                          T
                          â
                          2
                        
                      
                      
                        b
                        
                          T
                          â
                          2
                        
                      
                    
                  
                
              
            
            
              
                
                  c
                  
                    1
                  
                
                (
                k
                )
              
              
                
                =
                
                  
                    
                      A
                      
                        k
                        
                          a
                        
                      
                    
                    
                      1
                      +
                      a
                      b
                      +
                      
                        a
                        
                          2
                        
                      
                      
                        b
                        
                          2
                        
                      
                      +
                      â¦
                      +
                      
                        a
                        
                          T
                          â
                          2
                        
                      
                      
                        b
                        
                          T
                          â
                          2
                        
                      
                      +
                      
                        a
                        
                          T
                          â
                          1
                        
                      
                      
                        b
                        
                          T
                          â
                          1
                        
                      
                    
                  
                
              
            
            
              
                
                  c
                  
                    0
                  
                
                (
                k
                )
              
              
                
                =
                
                  
                    
                      A
                      
                        k
                        
                          a
                        
                      
                    
                    
                      1
                      +
                      a
                      b
                      +
                      
                        a
                        
                          2
                        
                      
                      
                        b
                        
                          2
                        
                      
                      +
                      â¦
                      +
                      
                        a
                        
                          T
                          â
                          2
                        
                      
                      
                        b
                        
                          T
                          â
                          2
                        
                      
                      +
                      
                        a
                        
                          T
                          â
                          1
                        
                      
                      
                        b
                        
                          T
                          â
                          1
                        
                      
                      +
                      
                        a
                        
                          T
                        
                      
                      
                        b
                        
                          T
                        
                      
                    
                  
                
              
            
          
        
      
    
    {\displaystyle {\begin{aligned}c_{T}(k)&=Ak^{a}\\c_{T-1}(k)&={\frac {Ak^{a}}{1+ab}}\\c_{T-2}(k)&={\frac {Ak^{a}}{1+ab+a^{2}b^{2}}}\\&\dots \\c_{2}(k)&={\frac {Ak^{a}}{1+ab+a^{2}b^{2}+\ldots +a^{T-2}b^{T-2}}}\\c_{1}(k)&={\frac {Ak^{a}}{1+ab+a^{2}b^{2}+\ldots +a^{T-2}b^{T-2}+a^{T-1}b^{T-1}}}\\c_{0}(k)&={\frac {Ak^{a}}{1+ab+a^{2}b^{2}+\ldots +a^{T-2}b^{T-2}+a^{T-1}b^{T-1}+a^{T}b^{T}}}\end{aligned}}}
  

We see that it is optimal to consume a larger fraction of current wealth as one gets older, finally consuming all remaining wealth in period T, the last period of life.

Computer programming[edit]
There are two key attributes that a problem must have in order for dynamic programming to be applicable: optimal substructure and overlapping sub-problems. If a problem can be solved by combining optimal solutions to non-overlapping sub-problems, the strategy is called "divide and conquer" instead.[1]  This is why merge sort and quick sort are not classified as dynamic programming problems.
Optimal substructure means that the solution to a given optimization problem can be obtained by the combination of optimal solutions to its sub-problems. Such optimal substructures are usually described by means of recursion. For example, given a graph G=(V,E), the shortest path p from a vertex u to a vertex v exhibits optimal substructure: take any intermediate vertex w on this shortest path p. If p is truly the shortest path, then it can be split into sub-paths p1 from u to w and p2 from w to v such that these, in turn, are indeed the shortest paths between the corresponding vertices (by the simple cut-and-paste argument described in Introduction to Algorithms). Hence, one can easily formulate the solution for finding shortest paths in a recursive manner, which is what the BellmanâFord algorithm or the FloydâWarshall algorithm does.
Overlapping sub-problems means that the space of sub-problems must be small, that is, any recursive algorithm solving the problem should solve the same sub-problems over and over, rather than generating new sub-problems. For example, consider the recursive formulation for generating the Fibonacci series: Fi = Fiâ1 + Fiâ2, with base case F1Â =Â F2Â =Â 1. Then F43 =Â F42Â +Â F41, and F42 =Â F41Â +Â F40. Now F41 is being solved in the recursive sub-trees of both F43 as well as F42. Even though the total number of sub-problems is actually small (only 43 of them), we end up solving the same problems over and over if we adopt a naive recursive solution such as this. Dynamic programming takes account of this fact and solves each sub-problem only once.

  Figure 2. The subproblem graph for the Fibonacci sequence. The fact that it is not a tree indicates overlapping subproblems.
This can be achieved in either of two ways:[citation needed]

Top-down approach: This is the direct fall-out of the recursive formulation of any problem. If the solution to any problem can be formulated recursively using the solution to its sub-problems, and if its sub-problems are overlapping, then one can easily memoize or store the solutions to the sub-problems in a table. Whenever we attempt to solve a new sub-problem, we first check the table to see if it is already solved. If a solution has been recorded, we can use it directly, otherwise we solve the sub-problem and add its solution to the table.
Bottom-up approach: Once we formulate the solution to a problem recursively as in terms of its sub-problems, we can try reformulating the problem in a bottom-up fashion: try solving the sub-problems first and use their solutions to build-on and arrive at solutions to bigger sub-problems. This is also usually done in a tabular form by iteratively generating solutions to bigger and bigger sub-problems by using the solutions to small sub-problems. For example, if we already know the values of F41 and F40, we can directly calculate the value of F42.
Some programming languages can automatically memoize the result of a function call with a particular set of arguments, in order to speed up call-by-name evaluation (this mechanism is referred to as call-by-need). Some languages make it possible portably (e.g. Scheme, Common Lisp, Perl or D). Some languages have automatic memoization  built in, such as tabled Prolog and J, which supports memoization with the M. adverb.[4] In any case, this is only possible for a referentially transparent function. Memoization is also encountered as an easily accessible design pattern within term-rewrite based languages such as Wolfram Language.

Bioinformatics[edit]
Dynamic programming is widely used in bioinformatics for the tasks such as sequence alignment, protein folding, RNA structure prediction and protein-DNA binding. The first dynamic programming algorithms for protein-DNA binding were developed in the 1970s independently by Charles DeLisi in USA[5] and Georgii Gurskii and Alexander Zasedatelev in USSR.[6] Recently these algorithms have become very popular in bioinformatics and computational biology, particularly in the studies of nucleosome positioning and transcription factor binding.

Examples: Computer algorithms[edit]
Dijkstra's algorithm for the shortest path problem[edit]
From a dynamic programming point of view, Dijkstra's algorithm for the shortest path problem  is a successive approximation scheme that solves the dynamic programming functional equation for the shortest path problem by the Reaching method.[7][8][9]
In fact, Dijkstra's explanation of the logic behind the algorithm,[10] namely

.mw-parser-output .templatequote{overflow:hidden;margin:1em 0;padding:0 40px}.mw-parser-output .templatequote .templatequotecite{line-height:1.5em;text-align:left;padding-left:1.6em;margin-top:0}
Problem 2. Find the path of minimum total length between two given nodes 
  
    
      
        P
      
    
    {\displaystyle P}
  
 and 
  
    
      
        Q
      
    
    {\displaystyle Q}
  
.
We use the fact that, if 
  
    
      
        R
      
    
    {\displaystyle R}
  
 is a node on the minimal path from 
  
    
      
        P
      
    
    {\displaystyle P}
  
 to 
  
    
      
        Q
      
    
    {\displaystyle Q}
  
, knowledge of the latter implies the knowledge of the minimal path from 
  
    
      
        P
      
    
    {\displaystyle P}
  
 to 
  
    
      
        R
      
    
    {\displaystyle R}
  
.


is a paraphrasing of Bellman's famous Principle of Optimality in the context of the shortest path problem.

Fibonacci sequence[edit]
Using dynamic programming in the calculation of the nth member of the Fibonacci sequence improves its performance greatly. Here is a naÃ¯ve implementation, based directly on the mathematical definition:

function fib(n)
    if n <= 1 return n
    return fib(n â 1) + fib(n â 2)

Notice that if we call, say, fib(5), we produce a call tree that calls the function on the same value many different times:

fib(5)
fib(4) + fib(3)
(fib(3) + fib(2)) + (fib(2) + fib(1))
((fib(2) + fib(1)) + (fib(1) + fib(0))) + ((fib(1) + fib(0)) + fib(1))
(((fib(1) + fib(0)) + fib(1)) + (fib(1) + fib(0))) + ((fib(1) + fib(0)) + fib(1))
In particular, fib(2) was calculated three times from scratch. In larger examples, many more values of fib, or subproblems, are recalculated, leading to an exponential time algorithm.
Now, suppose we have a simple map object, m, which maps each value of fib that has already been calculated to its result, and we modify our function to use it and update it. The resulting function requires only O(n) time instead of exponential time (but requires O(n) space):

var mÂ := map(0 â 0, 1 â 1)
function fib(n)
    if key n is not in map m 
        m[n]Â := fib(n â 1) + fib(n â 2)
    return m[n]

This technique of saving values that have already been calculated is called memoization;  this is the top-down approach, since we first break the problem into subproblems and then calculate and store values.
In the bottom-up approach, we calculate the smaller values of fib first, then build larger values from them. This method also uses O(n) time since it contains a loop that repeats n â 1 times, but it only takes constant (O(1)) space, in contrast to the top-down approach which requires O(n) space to store the map.

function fib(n)
    if n = 0
        return 0
    else
        var previousFibÂ := 0, currentFibÂ := 1
        repeat n â 1 times // loop is skipped if n = 1
            var newFibÂ := previousFib + currentFib
            previousFibÂ := currentFib
            currentFib Â := newFib
        return currentFib

In both examples, we only calculate fib(2) one time, and then use it to calculate both fib(4) and fib(3), instead of computing it every time either of them is evaluated.
The above method actually takes 
  
    
      
        Î©
        (
        
          n
          
            2
          
        
        )
      
    
    {\displaystyle \Omega (n^{2})}
  
 time for large n because addition of two integers with 
  
    
      
        Î©
        (
        n
        )
      
    
    {\displaystyle \Omega (n)}
  
 bits each takes 
  
    
      
        Î©
        (
        n
        )
      
    
    {\displaystyle \Omega (n)}
  
 time. (The nth fibonacci number has 
  
    
      
        Î©
        (
        n
        )
      
    
    {\displaystyle \Omega (n)}
  
 bits.) Also, there is a closed form for the Fibonacci sequence, known as Binet's formula, from which the 
  
    
      
        n
      
    
    {\displaystyle n}
  
-th term can be computed in approximately 
  
    
      
        O
        (
        n
        (
        log
        â¡
        n
        
          )
          
            2
          
        
        )
      
    
    {\displaystyle O(n(\log n)^{2})}
  
 time, which is more efficient than the above dynamic programming technique. However, the simple recurrence directly gives the matrix form that leads to an approximately 
  
    
      
        O
        (
        n
        log
        â¡
        n
        )
      
    
    {\displaystyle O(n\log n)}
  
 algorithm by fast matrix exponentiation.

A type of balanced 0â1 matrix[edit]
This section does not cite any sources. Please help improve this section by adding citations to reliable sources. Unsourced material may be challenged and removed.  (May 2013) (Learn how and when to remove this template message)
Consider the problem of assigning values, either zero or one, to the positions of an n Ã n matrix, with n even, so that each row and each column contains exactly n / 2 zeros and n / 2 ones. We ask how many different assignments there are for a given 
  
    
      
        n
      
    
    {\displaystyle n}
  
. For example, when n = 4, five possible solutions are


  
    
      
        
          
            [
            
              
                
                  0
                
                
                  1
                
                
                  0
                
                
                  1
                
              
              
                
                  1
                
                
                  0
                
                
                  1
                
                
                  0
                
              
              
                
                  0
                
                
                  1
                
                
                  0
                
                
                  1
                
              
              
                
                  1
                
                
                  0
                
                
                  1
                
                
                  0
                
              
            
            ]
          
        
        
          Â andÂ 
        
        
          
            [
            
              
                
                  0
                
                
                  0
                
                
                  1
                
                
                  1
                
              
              
                
                  0
                
                
                  0
                
                
                  1
                
                
                  1
                
              
              
                
                  1
                
                
                  1
                
                
                  0
                
                
                  0
                
              
              
                
                  1
                
                
                  1
                
                
                  0
                
                
                  0
                
              
            
            ]
          
        
        
          Â andÂ 
        
        
          
            [
            
              
                
                  1
                
                
                  1
                
                
                  0
                
                
                  0
                
              
              
                
                  0
                
                
                  0
                
                
                  1
                
                
                  1
                
              
              
                
                  1
                
                
                  1
                
                
                  0
                
                
                  0
                
              
              
                
                  0
                
                
                  0
                
                
                  1
                
                
                  1
                
              
            
            ]
          
        
        
          Â andÂ 
        
        
          
            [
            
              
                
                  1
                
                
                  0
                
                
                  0
                
                
                  1
                
              
              
                
                  0
                
                
                  1
                
                
                  1
                
                
                  0
                
              
              
                
                  0
                
                
                  1
                
                
                  1
                
                
                  0
                
              
              
                
                  1
                
                
                  0
                
                
                  0
                
                
                  1
                
              
            
            ]
          
        
        
          Â andÂ 
        
        
          
            [
            
              
                
                  1
                
                
                  1
                
                
                  0
                
                
                  0
                
              
              
                
                  1
                
                
                  1
                
                
                  0
                
                
                  0
                
              
              
                
                  0
                
                
                  0
                
                
                  1
                
                
                  1
                
              
              
                
                  0
                
                
                  0
                
                
                  1
                
                
                  1
                
              
            
            ]
          
        
        .
      
    
    {\displaystyle {\begin{bmatrix}0&1&0&1\\1&0&1&0\\0&1&0&1\\1&0&1&0\end{bmatrix}}{\text{ and }}{\begin{bmatrix}0&0&1&1\\0&0&1&1\\1&1&0&0\\1&1&0&0\end{bmatrix}}{\text{ and }}{\begin{bmatrix}1&1&0&0\\0&0&1&1\\1&1&0&0\\0&0&1&1\end{bmatrix}}{\text{ and }}{\begin{bmatrix}1&0&0&1\\0&1&1&0\\0&1&1&0\\1&0&0&1\end{bmatrix}}{\text{ and }}{\begin{bmatrix}1&1&0&0\\1&1&0&0\\0&0&1&1\\0&0&1&1\end{bmatrix}}.}
  

There are at least three possible approaches: brute force, backtracking, and dynamic programming.
Brute force consists of checking all assignments of zeros and ones and counting those that have balanced rows and columns (n / 2 zeros and n / 2 ones). As there are 
  
    
      
        
          2
          
            
              n
              
                2
              
            
          
        
      
    
    {\displaystyle 2^{n^{2}}}
  
 possible assignments and 
  
    
      
        
          
            
              
                
                  (
                
                
                  n
                  
                    n
                    
                      /
                    
                    2
                  
                
                
                  )
                
              
            
          
          
            n
          
        
      
    
    {\displaystyle {\tbinom {n}{n/2}}^{n}}
  
 sensible assignments, this strategy is not practical except maybe up to 
  
    
      
        n
        =
        6
      
    
    {\displaystyle n=6}
  
.
Backtracking for this problem consists of choosing some order of the matrix elements and recursively placing ones or zeros, while checking that in every row and column the number of elements that have not been assigned plus the number of ones or zeros are both at least n / 2. While more sophisticated than brute force, this approach will visit every solution once, making it impractical for n larger than six, since the number of solutions is already 116,963,796,250 for nÂ =Â 8, as we shall see.
Dynamic programming makes it possible to count the number of solutions without visiting them all. Imagine backtracking values for the first row â what information would we require about the remaining rows, in order to be able to accurately count the solutions obtained for each first row value? We consider k Ã n boards, where 1 â¤ k â¤ n, whose 
  
    
      
        k
      
    
    {\displaystyle k}
  
 rows contain 
  
    
      
        n
        
          /
        
        2
      
    
    {\displaystyle n/2}
  
 zeros and 
  
    
      
        n
        
          /
        
        2
      
    
    {\displaystyle n/2}
  
 ones. The function f to which memoization is applied maps vectors of n pairs of integers to the number of admissible boards (solutions). There is one pair for each column, and its two components indicate respectively the number of zeros and ones that have yet to be placed in that column. We seek the value of 
  
    
      
        f
        (
        (
        n
        
          /
        
        2
        ,
        n
        
          /
        
        2
        )
        ,
        (
        n
        
          /
        
        2
        ,
        n
        
          /
        
        2
        )
        ,
        â¦
        (
        n
        
          /
        
        2
        ,
        n
        
          /
        
        2
        )
        )
      
    
    {\displaystyle f((n/2,n/2),(n/2,n/2),\ldots (n/2,n/2))}
  
 (
  
    
      
        n
      
    
    {\displaystyle n}
  
 arguments or one vector of 
  
    
      
        n
      
    
    {\displaystyle n}
  
 elements). The process of subproblem creation involves iterating over every one of  
  
    
      
        
          
            
              
                (
              
              
                n
                
                  n
                  
                    /
                  
                  2
                
              
              
                )
              
            
          
        
      
    
    {\displaystyle {\tbinom {n}{n/2}}}
  
 possible assignments for the top row of the board, and going through every column, subtracting one from the appropriate element of the pair for that column, depending on whether the assignment for the top row contained a zero or a one at that position. If any one of the results is negative, then the assignment is invalid and does not contribute to the set of solutions (recursion stops). Otherwise, we have an assignment for the top row of the k Ã n board and recursively compute the number of solutions to the remaining (k â 1) Ã n board, adding the numbers of solutions for every admissible assignment of the top row and returning the sum, which is being memoized. The base case is the trivial subproblem, which occurs for a 1 Ã n board. The number of solutions for this board is either zero or one, depending on whether the vector is a permutation of n / 2 
  
    
      
        (
        0
        ,
        1
        )
      
    
    {\displaystyle (0,1)}
  
 and n / 2 
  
    
      
        (
        1
        ,
        0
        )
      
    
    {\displaystyle (1,0)}
  
 pairs or not.
For example, in the first two boards shown above the sequences of vectors would be

((2, 2) (2, 2) (2, 2) (2, 2))       ((2, 2) (2, 2) (2, 2) (2, 2))     k = 4
  0      1      0      1              0      0      1      1

((1, 2) (2, 1) (1, 2) (2, 1))       ((1, 2) (1, 2) (2, 1) (2, 1))     k = 3
  1      0      1      0              0      0      1      1

((1, 1) (1, 1) (1, 1) (1, 1))       ((0, 2) (0, 2) (2, 0) (2, 0))     k = 2
  0      1      0      1              1      1      0      0

((0, 1) (1, 0) (0, 1) (1, 0))       ((0, 1) (0, 1) (1, 0) (1, 0))     k = 1
  1      0      1      0              1      1      0      0

((0, 0) (0, 0) (0, 0) (0, 0))       ((0, 0) (0, 0), (0, 0) (0, 0))

The number of solutions (sequence A058527 in the OEIS) is


  
    
      
        1
        ,
        
        2
        ,
        
        90
        ,
        
        297200
        ,
        
        116963796250
        ,
        
        6736218287430460752
        ,
        â¦
      
    
    {\displaystyle 1,\,2,\,90,\,297200,\,116963796250,\,6736218287430460752,\ldots }
  

Links to the MAPLE implementation of the dynamic programming approach may be found among the external links.

Checkerboard[edit]
This section does not cite any sources. Please help improve this section by adding citations to reliable sources. Unsourced material may be challenged and removed.  (May 2013) (Learn how and when to remove this template message)
Consider a checkerboard with n Ã n squares and a cost function c(i, j) which returns a cost associated with square (i,j) (i being the row, j being the column). For instance (on a 5 Ã 5 checkerboard),




5

6
7
4
7
8


4

7
6
1
1
4


3

3
5
7
8
2


2

â
6
7
0
â


1

â
â
*5*
â
â



1
2
3
4
5

Thus c(1, 3) = 5
Let us say there was a checker that could start at any square on the first rank (i.e., row) and you wanted to know the shortest path (the sum of the minimum costs at each visited rank) to get to the last rank; assuming the checker could move only diagonally left forward, diagonally right forward, or straight forward. That is, a checker on (1,3) can move to (2,2), (2,3) or (2,4).




5








4








3








2


x
x
x



1



o





1
2
3
4
5

This problem exhibits optimal substructure. That is, the solution to the entire problem relies on solutions to subproblems. Let us define a function q(i, j) as

q(i, j) = the minimum cost to reach square (i, j).
Starting at rank n and descending to rank 1, we compute the value of this function for all the squares at each successive rank. Picking the square that holds the minimum value at each rank gives us the shortest path between rank n and rank 1.
The function q(i, j) is equal to the minimum cost to get to any of the three squares below it (since those are the only squares that can reach it) plus c(i, j). For instance:




5








4



A




3


B
C
D



2








1









1
2
3
4
5


  
    
      
        q
        (
        A
        )
        =
        min
        (
        q
        (
        B
        )
        ,
        q
        (
        C
        )
        ,
        q
        (
        D
        )
        )
        +
        c
        (
        A
        )
        
      
    
    {\displaystyle q(A)=\min(q(B),q(C),q(D))+c(A)\,}
  

Now, let us define q(i, j) in somewhat more general terms:


  
    
      
        q
        (
        i
        ,
        j
        )
        =
        
          
            {
            
              
                
                  â
                
                
                  j
                  <
                  1
                  
                    Â orÂ 
                  
                  j
                  >
                  n
                
              
              
                
                  c
                  (
                  i
                  ,
                  j
                  )
                
                
                  i
                  =
                  1
                
              
              
                
                  min
                  (
                  q
                  (
                  i
                  â
                  1
                  ,
                  j
                  â
                  1
                  )
                  ,
                  q
                  (
                  i
                  â
                  1
                  ,
                  j
                  )
                  ,
                  q
                  (
                  i
                  â
                  1
                  ,
                  j
                  +
                  1
                  )
                  )
                  +
                  c
                  (
                  i
                  ,
                  j
                  )
                
                
                  
                    otherwise.
                  
                
              
            
            
          
        
      
    
    {\displaystyle q(i,j)={\begin{cases}\infty &j<1{\text{ or }}j>n\\c(i,j)&i=1\\\min(q(i-1,j-1),q(i-1,j),q(i-1,j+1))+c(i,j)&{\text{otherwise.}}\end{cases}}}
  

The first line of this equation deals with a board modeled as squares indexed on 1 at the lowest bound and n at the highest bound. The second line specifies what happens at the first rank; providing a base case. The third line, the recursion, is the important part. It represents the A,B,C,D terms in the example. From this definition we can derive straightforward recursive code for q(i,Â j). In the following pseudocode, n is the size of the board, c(i, j) is the cost function, and min() returns the minimum of a number of values:

function minCost(i, j)
    if j < 1 or j > n
        return infinity
    else if i = 1
        return c(i, j)
    else
        return min( minCost(i-1, j-1), minCost(i-1, j), minCost(i-1, j+1) ) + c(i, j)

This function only computes the path cost, not the actual path. We discuss the actual path below. This, like the Fibonacci-numbers example, is horribly slow because it too exhibits the overlapping sub-problems attribute. That is, it recomputes the same path costs over and over. However, we can compute it much faster in a bottom-up fashion if we store path costs in a two-dimensional array q[i, j] rather than using a function. This avoids recomputation; all the values needed for array q[i, j] are computed ahead of time only once. Precomputed values for (i,j) are simply looked up whenever needed.
We also need to know what the actual shortest path is. To do this, we use another array p[i, j]; a predecessor array. This array records the path to any square s. The predecessor of s is modeled as an offset relative to the index (in q[i, j]) of the precomputed path cost of s. To reconstruct the complete path, we lookup the predecessor of s, then the predecessor of that square, then the predecessor of that square, and so on recursively, until we reach the starting square. Consider the following code:

function computeShortestPathArrays()
    for x from 1 to n
        q[1, x]Â := c(1, x)
    for y from 1 to n
        q[y, 0]    Â := infinity
        q[y, n + 1]Â := infinity
    for y from 2 to n
        for x from 1 to n
            mÂ := min(q[y-1, x-1], q[y-1, x], q[y-1, x+1])
            q[y, x]Â := m + c(y, x)
            if m = q[y-1, x-1]
                p[y, x]Â := -1
            else if m = q[y-1, x]
                p[y, x]Â :=  0
            else
                p[y, x]Â :=  1

Now the rest is a simple matter of finding the minimum and printing it.

function computeShortestPath()
    computeShortestPathArrays()
    minIndexÂ := 1
    minÂ := q[n, 1]
    for i from 2 to n
        if q[n, i] < min
            minIndexÂ := i
            minÂ := q[n, i]
    printPath(n, minIndex)

function printPath(y, x)
    print(x)
    print("<-")
    if y = 2
        print(x + p[y, x])
    else
        printPath(y-1, x + p[y, x])

Sequence alignment[edit]
In genetics, sequence alignment is an important application where dynamic programming is essential.[11]  Typically, the problem consists of transforming one sequence into another using edit operations that replace, insert, or remove an element.  Each operation has an associated cost, and the goal is to find the sequence of edits with the lowest total cost.
The problem can be stated naturally as a recursion, a sequence A is optimally edited into a sequence B by either:

inserting the first character of B, and performing an optimal alignment of A and the tail of B
deleting the first character of A, and performing the optimal alignment of the tail of A and B
replacing the first character of A with the first character of B, and performing optimal alignments of the tails of A and B.
The partial alignments can be tabulated in a matrix, where cell (i,j) contains the cost of the optimal alignment of A[1..i] to B[1..j].  The cost in cell (i,j) can be calculated by adding the cost of the relevant operations to the cost of its neighboring cells, and selecting the optimum.
Different variants exist, see SmithâWaterman algorithm and NeedlemanâWunsch algorithm.

Tower of Hanoi puzzle[edit]
  A model set of the Towers of Hanoi (with 8 disks)
  An animated solution of the Tower of Hanoi puzzle for T(4,3).
The Tower of Hanoi or Towers of Hanoi is a mathematical game or puzzle. It consists of three rods, and a number of disks of different sizes which can slide onto any rod. The puzzle starts with the disks in a neat stack in ascending order of size on one rod, the smallest at the top, thus making a conical shape.
The objective of the puzzle is to move the entire stack to another rod, obeying the following rules:

Only one disk may be moved at a time.
Each move consists of taking the upper disk from one of the rods and sliding it onto another rod, on top of the other disks that may already be present on that rod.
No disk may be placed on top of a smaller disk.
The dynamic programming solution consists of solving the functional equation

S(n,h,t) = S(n-1,h, not(h,t))Â ; S(1,h,t)Â ; S(n-1,not(h,t),t)
where n denotes the number of disks to be moved, h denotes the home rod, t denotes the target rod, not(h,t) denotes the third rod (neither h nor t), ";" denotes concatenation, and

S(n, h, t)Â := solution to a problem consisting of n disks that are to be moved from rod h to rod t.
For n=1 the problem is trivial, namely S(1,h,t) = "move a disk from rod h to rod t" (there is only one disk left).
The  number of moves required by this solution is 2nÂ âÂ 1. If the objective is to maximize the number of moves (without cycling) then the dynamic programming functional equation  is slightly more complicated and  3nÂ âÂ 1 moves are required.[12]

Egg dropping puzzle[edit]
The following is a description of the instance of this famous puzzle involving N=2 eggs and a building with H=36 floors:[13] 

Suppose that we wish to know which stories in a 36-story building are safe to drop eggs from, and which will cause the eggs to break on landing (using U.S. English terminology, in which the first floor is at ground level). We make a few assumptions:
An egg that survives a fall can be used again.
A broken egg must be discarded.
The effect of a fall is the same for all eggs.
If an egg breaks when dropped, then it would break if dropped from a higher window.
If an egg survives a fall, then it would survive a shorter fall.
It is not ruled out that the first-floor windows break eggs, nor is it ruled out that eggs can survive the 36th-floor windows.
If only one egg is available and we wish to be sure of obtaining the right result, the experiment can be carried out in only one way. Drop the egg from the first-floor window; if it survives, drop it from the second-floor window. Continue upward until it breaks. In the worst case, this method may require 36 droppings. Suppose 2 eggs are available. What is the lowest number of egg-droppings that is guaranteed to work in all cases?
To derive a dynamic programming functional equation for this puzzle, let the state of the dynamic programming model be a pair s = (n,k), where

n = number of test eggs available, n = 0, 1, 2, 3, ..., NÂ âÂ 1.
k = number of (consecutive) floors yet to be tested, k = 0, 1, 2, ..., HÂ âÂ 1.
For instance, s = (2,6) indicates that two test eggs are available and 6 (consecutive) floors are yet to be tested. The initial state of the process is s = (N,H) where N denotes the number of test eggs available at the commencement of the experiment. The process terminates either when there are no more test eggs (n = 0) or when k = 0, whichever occurs first. If termination occurs at state s = (0,k) and kÂ >Â 0, then the test failed.
Now, let

W(n,k) = minimum number of trials required to identify the value of the critical floor under the worst-case scenario given that the process is in state s = (n,k).
Then it can be shown that[14]

W(n,k) = 1 + min{max(W(n â 1, x â 1), W(n,k â x)): x = 1, 2, ..., k }
with W(n,0) = 0 for all nÂ >Â 0 and W(1,k) = k for allÂ k. It is easy to solve this equation iteratively by systematically increasing the values of n andÂ k.

Faster DP solution using a different parametrization[edit]
Notice that the above solution takes 
  
    
      
        O
        (
        n
        
          k
          
            2
          
        
        )
      
    
    {\displaystyle O(nk^{2})}
  
 time with a DP solution. This can be improved to 
  
    
      
        O
        (
        n
        k
        log
        â¡
        k
        )
      
    
    {\displaystyle O(nk\log k)}
  
 time by binary searching on the optimal 
  
    
      
        x
      
    
    {\displaystyle x}
  
 in the above recurrence, since 
  
    
      
        W
        (
        n
        â
        1
        ,
        x
        â
        1
        )
      
    
    {\displaystyle W(n-1,x-1)}
  
 is increasing in 
  
    
      
        x
      
    
    {\displaystyle x}
  
 while 
  
    
      
        W
        (
        n
        ,
        k
        â
        x
        )
      
    
    {\displaystyle W(n,k-x)}
  
 is decreasing in 
  
    
      
        x
      
    
    {\displaystyle x}
  
, thus a local minimum of 
  
    
      
        max
        (
        W
        (
        n
        â
        1
        ,
        x
        â
        1
        )
        ,
        W
        (
        n
        ,
        k
        â
        x
        )
        )
      
    
    {\displaystyle \max(W(n-1,x-1),W(n,k-x))}
  
 is a global minimum. Also, by storing the optimal 
  
    
      
        x
      
    
    {\displaystyle x}
  
 for each cell in the DP table and referring to its value for the previous cell, the optimal 
  
    
      
        x
      
    
    {\displaystyle x}
  
 for each cell can be found in constant time, improving it to 
  
    
      
        O
        (
        n
        k
        )
      
    
    {\displaystyle O(nk)}
  
 time. However, there is an even faster solution that involves a different parametrization of the problem:
Let 
  
    
      
        k
      
    
    {\displaystyle k}
  
 be the total number of floors such that the eggs break when dropped from the 
  
    
      
        k
      
    
    {\displaystyle k}
  
th floor (The example above is equivalent to taking 
  
    
      
        k
        =
        37
      
    
    {\displaystyle k=37}
  
).
Let 
  
    
      
        m
      
    
    {\displaystyle m}
  
 be the minimum floor from which the egg must be dropped to be broken.
Let 
  
    
      
        f
        (
        t
        ,
        n
        )
      
    
    {\displaystyle f(t,n)}
  
 be the maximum number of values of 
  
    
      
        m
      
    
    {\displaystyle m}
  
 that are distinguishable using 
  
    
      
        t
      
    
    {\displaystyle t}
  
 tries and 
  
    
      
        n
      
    
    {\displaystyle n}
  
 eggs.
Then 
  
    
      
        f
        (
        t
        ,
        0
        )
        =
        f
        (
        0
        ,
        n
        )
        =
        1
      
    
    {\displaystyle f(t,0)=f(0,n)=1}
  
 for all 
  
    
      
        t
        ,
        n
        â¥
        0
      
    
    {\displaystyle t,n\geq 0}
  
.
Let 
  
    
      
        a
      
    
    {\displaystyle a}
  
 be the floor from which the first egg is dropped in the optimal strategy.
If the first egg broke, 
  
    
      
        m
      
    
    {\displaystyle m}
  
 is from 
  
    
      
        1
      
    
    {\displaystyle 1}
  
 to 
  
    
      
        a
      
    
    {\displaystyle a}
  
 and distinguishable using at most 
  
    
      
        t
        â
        1
      
    
    {\displaystyle t-1}
  
 tries and 
  
    
      
        n
        â
        1
      
    
    {\displaystyle n-1}
  
 eggs.
If the first egg did not break, 
  
    
      
        m
      
    
    {\displaystyle m}
  
 is from 
  
    
      
        a
        +
        1
      
    
    {\displaystyle a+1}
  
 to 
  
    
      
        k
      
    
    {\displaystyle k}
  
 and distinguishable using 
  
    
      
        t
        â
        1
      
    
    {\displaystyle t-1}
  
 tries and 
  
    
      
        n
      
    
    {\displaystyle n}
  
 eggs.
Therefore, 
  
    
      
        f
        (
        t
        ,
        n
        )
        =
        f
        (
        t
        â
        1
        ,
        n
        â
        1
        )
        +
        f
        (
        t
        â
        1
        ,
        n
        )
      
    
    {\displaystyle f(t,n)=f(t-1,n-1)+f(t-1,n)}
  
.
Then the problem is equivalent to finding the minimum 
  
    
      
        x
      
    
    {\displaystyle x}
  
 such that 
  
    
      
        f
        (
        x
        ,
        n
        )
        â¥
        k
      
    
    {\displaystyle f(x,n)\geq k}
  
.
To do so, we could compute 
  
    
      
        {
        f
        (
        t
        ,
        i
        )
        :
        0
        â¤
        i
        â¤
        n
        }
      
    
    {\displaystyle \{f(t,i):0\leq i\leq n\}}
  
 in order of increasing 
  
    
      
        t
      
    
    {\displaystyle t}
  
, which would take 
  
    
      
        O
        (
        n
        x
        )
      
    
    {\displaystyle O(nx)}
  
 time.
Thus, if we separately handle the case of 
  
    
      
        n
        =
        1
      
    
    {\displaystyle n=1}
  
, the algorithm would take 
  
    
      
        O
        (
        n
        
          
            k
          
        
        )
      
    
    {\displaystyle O(n{\sqrt {k}})}
  
 time.
But the recurrence relation can in fact be solved, giving 
  
    
      
        f
        (
        t
        ,
        n
        )
        =
        
          â
          
            i
            =
            0
          
          
            n
          
        
        
          
            
              (
            
            
              t
              i
            
            
              )
            
          
        
      
    
    {\displaystyle f(t,n)=\sum _{i=0}^{n}{\binom {t}{i}}}
  
, which can be computed in 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
  
 time using the identity 
  
    
      
        
          
            
              (
            
            
              t
              
                i
                +
                1
              
            
            
              )
            
          
        
        =
        
          
            
              (
            
            
              t
              i
            
            
              )
            
          
        
        
          
            
              t
              â
              i
            
            
              i
              +
              1
            
          
        
      
    
    {\displaystyle {\binom {t}{i+1}}={\binom {t}{i}}{\frac {t-i}{i+1}}}
  
 for all 
  
    
      
        i
        â¥
        0
      
    
    {\displaystyle i\geq 0}
  
.
Since 
  
    
      
        f
        (
        t
        ,
        n
        )
        â¤
        f
        (
        t
        +
        1
        ,
        n
        )
      
    
    {\displaystyle f(t,n)\leq f(t+1,n)}
  
 for all 
  
    
      
        t
        â¥
        0
      
    
    {\displaystyle t\geq 0}
  
, we can binary search on 
  
    
      
        t
      
    
    {\displaystyle t}
  
 to find 
  
    
      
        x
      
    
    {\displaystyle x}
  
, giving an 
  
    
      
        O
        (
        n
        log
        â¡
        k
        )
      
    
    {\displaystyle O(n\log k)}
  
 algorithm.[15]

Matrix chain multiplication[edit]
This section does not cite any sources. Please help improve this section by adding citations to reliable sources. Unsourced material may be challenged and removed.  (May 2013) (Learn how and when to remove this template message)
Main article: Matrix chain multiplication
Matrix chain multiplication is a well-known example that demonstrates utility of dynamic programming. For example,  engineering applications often have to multiply a chain of matrices. It is not surprising to find matrices of large dimensions, for example 100Ã100. Therefore, our task is to multiply matrices 
  
    
      
        
          A
          
            1
          
        
        ,
        
          A
          
            2
          
        
        ,
        .
        .
        .
        .
        
          A
          
            n
          
        
      
    
    {\displaystyle A_{1},A_{2},....A_{n}}
  
. Matrix multiplication is not commutative, but is associative; and we can multiply only two matrices at a time. So, we can multiply this chain of matrices in many different ways, for example:

((A1 Ã A2) Ã A3) Ã ... An
A1Ã(((A2ÃA3)Ã ... ) Ã An)
(A1 Ã A2) Ã (A3 Ã ... An)
and so on. There are numerous ways to multiply this chain of matrices. They will all produce the same final result, however they will take more or less time to compute, based on which particular matrices are multiplied. If matrix A has dimensions mÃn and matrix B has dimensions nÃq, then matrix C=AÃB will have dimensions mÃq, and will require m*n*q scalar multiplications (using a simplistic matrix multiplication algorithm for purposes of illustration).
For example, let us multiply matrices A, B and C. Let us assume that their dimensions are mÃn, nÃp, and pÃs, respectively. Matrix AÃBÃC will be of size mÃs and can be calculated in two ways shown below:

Ax(BÃC)    This order of matrix multiplication will require nps + mns scalar multiplications.
(AÃB)ÃC    This order of matrix multiplication will require mnp + mps scalar calculations.
Let us assume that m = 10, n = 100, p = 10 and s = 1000. So, the first way to multiply the chain will require 1,000,000 + 1,000,000 calculations. The second way will require only 10,000+100,000 calculations. Obviously, the second way is faster, and we should multiply the matrices using that arrangement of parenthesis.
Therefore, our conclusion is that the order of parenthesis matters, and that our task is to find the optimal order of parenthesis.
At this point, we have several choices, one of which is to design a dynamic programming algorithm that will split the problem into overlapping problems and calculate the optimal arrangement of parenthesis. The dynamic programming solution is presented below.
Let's call m[i,j] the minimum number of scalar multiplications needed to multiply a chain of matrices from matrix i to matrix j (i.e. Ai Ã .... Ã Aj, i.e. i<=j). We split the chain at some matrix k, such that i <= k < j, and try to find out which combination produces minimum m[i,j].
The formula is:

       if i = j, m[i,j]= 0
       if i < j, m[i,j]= min over all possible values of k (m[i,k]+m[k+1,j] + 
  
    
      
        
          p
          
            i
            â
            1
          
        
        â
        
          p
          
            k
          
        
        â
        
          p
          
            j
          
        
      
    
    {\displaystyle p_{i-1}*p_{k}*p_{j}}
  
) 

where k ranges from i to jÂ âÂ 1.


  
    
      
        
          p
          
            i
            â
            1
          
        
      
    
    {\displaystyle p_{i-1}}
  
 is the row dimension of matrix i,

  
    
      
        
          p
          
            k
          
        
      
    
    {\displaystyle p_{k}}
  
 is the column dimension of matrix k,

  
    
      
        
          p
          
            j
          
        
      
    
    {\displaystyle p_{j}}
  
 is the column dimension of matrix j.
This formula can be coded as shown below, where input parameter "chain" is the chain of matrices, i.e. 
  
    
      
        
          A
          
            1
          
        
        ,
        
          A
          
            2
          
        
        ,
        .
        .
        .
        
          A
          
            n
          
        
      
    
    {\displaystyle A_{1},A_{2},...A_{n}}
  
:

function OptimalMatrixChainParenthesis(chain)
    n = length(chain)
    for i = 1, n
        m[i,i] = 0    // Since it takes no calculations to multiply one matrix
    for len = 2, n
        for i = 1, n - len + 1
            j = i + len -1
            m[i,j] = infinity      // So that the first calculation updates
            for k = i, j-1
                q = m[i, k] + m[k+1, j] + 
  
    
      
        
          p
          
            i
            â
            1
          
        
        â
        
          p
          
            k
          
        
        â
        
          p
          
            j
          
        
      
    
    {\displaystyle p_{i-1}*p_{k}*p_{j}}
  

                if q < m[i, j]     // The new order of parentheses is better than what we had
                    m[i, j] = q    // Update
                    s[i, j] = k    // Record which k to split on, i.e. where to place the parenthesis

So far, we have calculated values for all possible m[i, j], the minimum number of calculations to multiply a chain from matrix i to matrix j, and we have recorded the corresponding "split point"s[i, j]. For example, if we are multiplying chain A1ÃA2ÃA3ÃA4, and it turns out that m[1, 3] = 100 and s[1, 3] = 2, that means that the optimal placement of parenthesis for matrices 1 to 3 is 
  
    
      
        (
        
          A
          
            1
          
        
        Ã
        
          A
          
            2
          
        
        )
        Ã
        
          A
          
            3
          
        
      
    
    {\displaystyle (A_{1}\times A_{2})\times A_{3}}
  
 and to multiply those matrices will require 100 scalar calculation.
This algorithm will produce "tables" m[, ] and s[, ] that will have entries for all possible values of i and j. The final solution for the entire chain is m[1, n], with corresponding split at s[1, n]. Unraveling the solution will be recursive, starting from the top and continuing until we reach the base case, i.e. multiplication of single matrices.
Therefore, the next step is to actually split the chain, i.e. to place the parenthesis where they (optimally) belong. For this purpose we could use the following algorithm:

function PrintOptimalParenthesis(s, i, j)
    if i = j
        print "A"i
    else
        print "(" 
        PrintOptimalParenthesis(s, i, s[i, j]) 
        PrintOptimalParenthesis(s, s[i, j] + 1, j) 
        print ")"

Of course, this algorithm is not useful for actual multiplication. This algorithm is just a user-friendly way to see what the result looks like.
To actually multiply the matrices using the proper splits, we need the following algorithm:

   function MatrixChainMultiply(chain from 1 to n)       // returns the final matrix, i.e. A1ÃA2Ã... ÃAn
      OptimalMatrixChainParenthesis(chain from 1 to n)   // this will produce s[ . ] and m[ . ] "tables"
      OptimalMatrixMultiplication(s, chain from 1 to n)  // actually multiply

   function OptimalMatrixMultiplication(s, i, j)   // returns the result of multiplying a chain of matrices from Ai to Aj in optimal way
      if i < j
         // keep on splitting the chain and multiplying the matrices in left and right sides
         LeftSide = OptimalMatrixMultiplication(s, i, s[i, j])
         RightSide = OptimalMatrixMultiplication(s, s[i, j] + 1, j)
         return MatrixMultiply(LeftSide, RightSide) 
      else if i = j
         return Ai   // matrix at position i
      else 
         print "error, i <= j must hold"

    function MatrixMultiply(A, B)    // function that multiplies two matrices
      if columns(A) = rows(B) 
         for i = 1, rows(A)
            for j = 1, columns(B)
               C[i, j] = 0
               for k = 1, columns(A)
                   C[i, j] = C[i, j] + A[i, k]*B[k, j] 
               return C 
      else 
          print "error, incompatible dimensions."

History[edit]
The term dynamic programming was originally used in the 1940s by Richard Bellman to describe the process of solving problems where one needs to find the best decisions one after another.  By 1953, he refined this to the modern meaning, referring specifically to nesting smaller decision problems inside larger decisions,[16]  and the field was thereafter recognized by the IEEE as a systems analysis and engineering topic.  Bellman's contribution is remembered in the name of the Bellman equation, a central result of dynamic programming which restates an optimization problem in recursive form.
Bellman explains the reasoning behind the term dynamic programming in his autobiography, Eye of the Hurricane: An Autobiography:

I spent the Fall quarter (of 1950) at RAND. My first task was to find a name for multistage decision processes. An interesting question is, "Where did the name, dynamic programming, come from?" The 1950s were not good years for mathematical research. We had a very interesting gentleman in Washington named Wilson. He was Secretary of Defense, and he actually had a pathological fear and hatred of the word "research". Iâm not using the term lightly; Iâm using it precisely. His face would suffuse, he would turn red, and he would get violent if people used the term research in his presence. You can imagine how he felt, then, about the term mathematical. The RAND Corporation was employed by the Air Force, and the Air Force had Wilson as its boss, essentially. Hence, I felt I had to do something to shield Wilson and the Air Force from the fact that I was really doing mathematics inside the RAND Corporation. What title, what name, could I choose? In the first place I was interested in planning, in decision making, in thinking. But planning, is not a good word for various reasons. I decided therefore to use the word "programming". I wanted to get across the idea that this was dynamic, this was multistage, this was time-varying. I thought, let's kill two birds with one stone. Let's take a word that has an absolutely precise meaning, namely dynamic, in the classical physical sense. It also has a very interesting property as an adjective, and that is it's impossible to use the word dynamic in a pejorative sense. Try thinking of some combination that will possibly give it a pejorative meaning. It's impossible. Thus, I thought dynamic programming was a good name. It was something not even a Congressman could object to. So I used it as an umbrella for my activities.ââRichard Bellman, Eye of the Hurricane: An Autobiography (1984, page 159)
The word dynamic was chosen by Bellman to capture the time-varying aspect of the problems, and because it sounded impressive.[11] The word programming referred to the use of the method to find an optimal program, in the sense of a military schedule for training or logistics.  This usage is the same as that in the phrases linear programming and mathematical programming, a synonym for mathematical optimization.[17]
The above explanation of the origin of the term is lacking. As Russell and Norvig in their book have written, referring to the above story: "This cannot be strictly true, because his first paper using the term (Bellman, 1952) appeared before Wilson became Secretary of Defense in 1953."[18] Also, there is a comment in a speech by Harold J. Kushner, where he remembers Bellman. Quoting Kushner as he speaks of Bellman: "On the other hand, when I asked him the same question, he replied that he was trying to upstage Dantzig's linear programming by adding dynamic. Perhaps both motivations were true."

Algorithms that use dynamic programming[edit]
This section does not cite any sources. Please help improve this section by adding citations to reliable sources. Unsourced material may be challenged and removed.  (May 2013) (Learn how and when to remove this template message)
Recurrent solutions to lattice models for protein-DNA binding
Backward induction as a solution method for finite-horizon discrete-time dynamic optimization problems
Method of undetermined coefficients can be used to solve the Bellman equation in infinite-horizon, discrete-time, discounted, time-invariant dynamic optimization problems
Many string algorithms including longest common subsequence, longest increasing subsequence, longest common substring, Levenshtein distance (edit distance)
Many algorithmic problems on graphs can be solved efficiently for graphs of bounded treewidth or bounded clique-width by using dynamic programming on a tree decomposition of the graph.
The CockeâYoungerâKasami (CYK) algorithm which determines whether and how a given string can be generated by a given context-free grammar
Knuth's word wrapping algorithm that minimizes raggedness when word wrapping text
The use of transposition tables and refutation tables in computer chess
The Viterbi algorithm (used for hidden Markov models, and particularly in part of speech tagging)
The Earley algorithm (a type of chart parser)
The NeedlemanâWunsch algorithm and other algorithms used in bioinformatics, including sequence alignment, structural alignment, RNA structure prediction[11]
Floyd's all-pairs shortest path algorithm
Optimizing the order for chain matrix multiplication
Pseudo-polynomial time algorithms for the subset sum, knapsack and partition problems
The dynamic time warping algorithm for computing the global distance between two time series
The Selinger (a.k.a. System R) algorithm for relational database query optimization
De Boor algorithm for evaluating B-spline curves
DuckworthâLewis method for resolving the problem when games of cricket are interrupted
The value iteration method for solving Markov decision processes
Some graphic image edge following selection methods such as the "magnet" selection tool in Photoshop
Some methods for solving interval scheduling problems
Some methods for solving the travelling salesman problem, either exactly (in exponential time) or approximately (e.g. via the bitonic tour)
Recursive least squares method
Beat tracking in music information retrieval
Adaptive-critic training strategy for artificial neural networks
Stereo algorithms for solving the correspondence problem used in stereo vision
Seam carving (content-aware image resizing)
The BellmanâFord algorithm for finding the shortest distance in a graph
Some approximate solution methods for the linear search problem
Kadane's algorithm for the maximum subarray problem
Optimization of electric generation expansion plans in the Wein Automatic System Planning (WASP) package
See also[edit]
Convexity in economics
Greedy algorithm
Non-convexity (economics)
Stochastic programming
Stochastic dynamic programming
Reinforcement learning
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ Jump up to: a b Cormen, T. H.; Leiserson, C. E.; Rivest, R. L.; Stein, C. (2001), Introduction to Algorithms (2nd ed.), MIT Press & McGrawâHill, .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}ISBNÂ 0-262-03293-7 . pp. 344.

^ Kamien, M. I.; Schwartz, N. L. (1991). Dynamic Optimization: The Calculus of Variations and Optimal Control in Economics and Management (SecondÂ ed.). New York: Elsevier. p.Â 261. ISBNÂ 978-0-444-01609-6.

^ Kirk, Donald E. (1970). Optimal Control Theory: An Introduction. Englewood Cliffs, NJ: Prentice-Hall. pp.Â 94â95. ISBNÂ 978-0-13-638098-6.

^ "M. Memo". J Vocabulary. J Software. Retrieved 28 October 2011.

^ DeLisi, Biopolymers, 1974, Volume 13, Issue 7, pages 1511â1512, July 1974

^ GurskiÄ­ GV, Zasedatelev AS, Biofizika, 1978 Sep-Oct;23(5):932-46

^ Sniedovich, M. (2006), "Dijkstra's algorithm revisited: the dynamic programming connexion" (PDF), Journal of Control and Cybernetics, 35 (3): 599â620. Online version of the paper with interactive computational modules.

^ Denardo, E.V. (2003), Dynamic Programming: Models and Applications, Mineola, NY: Dover Publications, ISBNÂ 978-0-486-42810-9

^ Sniedovich, M. (2010), Dynamic Programming: Foundations and Principles, Taylor & Francis, ISBNÂ 978-0-8247-4099-3

^ Dijkstra 1959, p.Â 270 harvnb error: no target: CITEREFDijkstra1959 (help)

^ Jump up to: a b c Eddy, S. R. (2004). "What is Dynamic Programming?". Nature Biotechnology. 22 (7): 909â910. doi:10.1038/nbt0704-909. PMIDÂ 15229554. S2CIDÂ 5352062.

^ Moshe Sniedovich (2002), "OR/MS Games: 2. The Towers of Hanoi Problem", INFORMS Transactions on Education, 3 (1): 34â51, doi:10.1287/ited.3.1.45.

^ Konhauser J.D.E., Velleman, D., and Wagon, S. (1996). Which way did the Bicycle Go? Dolciani Mathematical Expositions â No 18.  The Mathematical Association of America.

^ Sniedovich, Moshe (2003). "OR/MS Games: 4. The Joy of Egg-Dropping in Braunschweig and Hong Kong". INFORMS Transactions on Education. 4: 48â64. doi:10.1287/ited.4.1.48.

^ Dean Connable Wills, Connections between combinatorics of permutations and algorithms and geometry

^ Stuart Dreyfus. "Richard Bellman on the birth of Dynamical Programming".

^ Nocedal, J.; Wright, S. J. (2006). Numerical Optimization. Springer. p.Â 9. ISBNÂ 9780387303031.

^ Russell, S.; Norvig, P. (2009). Artificial Intelligence: A Modern Approach (3rdÂ ed.). Prentice Hall. ISBNÂ 978-0-13-207148-2.


Further reading[edit]
Adda, Jerome; Cooper, Russell (2003), Dynamic Economics, MIT Press, ISBNÂ 9780262012010. An accessible introduction to dynamic programming in economics. MATLAB code for the book.
Bellman, Richard (1954), "The theory of dynamic programming", Bulletin of the American Mathematical Society, 60 (6): 503â516, doi:10.1090/S0002-9904-1954-09848-8, MRÂ 0067459. Includes an extensive bibliography of the literature in the area, up to the year 1954.
Bellman, Richard (1957), Dynamic Programming, Princeton University Press. Dover paperback edition (2003), ISBNÂ 0-486-42809-5.
Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; Stein, Clifford (2001), Introduction to Algorithms (2ndÂ ed.), MIT Press & McGrawâHill, ISBNÂ 978-0-262-03293-3. Especially pp.Â 323â69.
Dreyfus, Stuart E.; Law, Averill M. (1977), The Art and Theory of Dynamic Programming, Academic Press, ISBNÂ 978-0-12-221860-6.
Giegerich, R.; Meyer, C.; Steffen, P. (2004), "A Discipline of Dynamic Programming over Sequence Data" (PDF), Science of Computer Programming, 51 (3): 215â263, doi:10.1016/j.scico.2003.12.005.
Meyn, Sean (2007), Control Techniques for Complex Networks, Cambridge University Press, ISBNÂ 978-0-521-88441-9, archived from the original on 2010-06-19.
Sritharan, S. S. (1991). "Dynamic Programming of the Navier-Stokes Equations". Systems and Control Letters. 16 (4): 299â307. doi:10.1016/0167-6911(91)90020-f.
Stokey, Nancy; Lucas, Robert E.; Prescott, Edward (1989), Recursive Methods in Economic Dynamics, Harvard Univ. Press, ISBNÂ 978-0-674-75096-8.
External links[edit]
This article's use of external links may not follow Wikipedia's policies or guidelines. Please improve this article by removing excessive or inappropriate external links, and converting useful links where appropriate into footnote references.  (March 2016) (Learn how and when to remove this template message)
A Tutorial on Dynamic programming
MIT course on algorithms â Includes a video lecture on DP along with lecture notes, see lecture 15.
Applied Mathematical Programming by Bradley, Hax, and Magnanti, Chapter 11
More DP Notes
King, Ian, 2002 (1987), "A Simple Introduction to Dynamic Programming in Macroeconomic Models." An introduction to dynamic programming as an important tool in economic theory.
Dynamic Programming: from novice to advanced A TopCoder.com article by Dumitru on Dynamic Programming
Algebraic Dynamic Programming â a formalized framework for dynamic programming, including an entry-level course to DP, University of Bielefeld
Dreyfus, Stuart, "Richard Bellman on the birth of Dynamic Programming."
Dynamic programming tutorial
A Gentle Introduction to Dynamic Programming and the Viterbi Algorithm
Tabled Prolog BProlog, XSB, SWI-Prolog
IFORS online interactive dynamic programming modules including, shortest path, traveling salesman, knapsack, false coin, egg dropping, bridge and torch, replacement, chained matrix products, and critical path problem.
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}hide.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteOptimization: Algorithms, methods, and heuristicsshowUnconstrained nonlinearFunctions
Golden-section search
Interpolation methods
Line search
NelderâMead method
Successive parabolic interpolation
GradientsConvergence
Trust region
Wolfe conditions
QuasiâNewton
BerndtâHallâHallâHausman
BroydenâFletcherâGoldfarbâShanno and L-BFGS
DavidonâFletcherâPowell
Symmetric rank-one (SR1)
Other methods
Conjugate gradient
GaussâNewton
Gradient
LevenbergâMarquardt
Powell's dog leg method
Truncated Newton
Hessians
Newton's method
showConstrained nonlinearGeneral
Barrier methods
Penalty methods
Differentiable
Augmented Lagrangian methods
Sequential quadratic programming
Successive linear programming
showConvex optimizationConvex minimization
Cutting-plane method
Reduced gradient (FrankâWolfe)
Subgradient method
Linear andquadraticInterior point
Affine scaling
Ellipsoid algorithm of Khachiyan
Projective algorithm of Karmarkar
Basis-exchange
Simplex algorithm of Dantzig
Revised simplex algorithm
Criss-cross algorithm
Principal pivoting algorithm of Lemke
hideCombinatorialParadigms
Approximation algorithm
Dynamic programming
Greedy algorithm
Integer programming
Branch and bound/cut
Graph algorithmsMinimum spanning tree
BorÅ¯vka
Prim
Kruskal

    Shortest path
BellmanâFord
SPFA
Dijkstra
FloydâWarshall
Network flows
Dinic
EdmondsâKarp
FordâFulkerson
Pushârelabel maximum flow
showMetaheuristics
Evolutionary algorithm
Hill climbing
Local search
Simulated annealing
Tabu search

Software

showvteParsing algorithmsTop-down
LL
Recursive descent
Tail recursive
Pratt parser
Bottom-up
Precedence
Simple
Operator
Shunting-yard
Bounded-context
LR
Simple
Look-ahead
Canonical
Generalized
CYK
Recursive ascent
Shift-reduce
Mixed, other
Combinator
Chart
Earley
Related topics
PEG
Definite clause grammar
Deterministic parsing
Dynamic programming
Memoization
Parser generator
LALR
Parse tree
AST
Scannerless parsing
History of compiler construction
Comparison of parser generators
showvteData structures and algorithmsData structures
Array
Associative array
Binary search tree
Fenwick tree
Graph
Hash table
Heap
Linked list
Queue
Segment tree
Stack
String
Tree
Trie
Algorithms
Backtracking
Binary search
Breadth-first search
Depth-first search
Divide and conquer
Dynamic programming
Fold
Greedy
Minimax
Recursion
Sorting
Streaming
Sweep line
Topological sorting

showAuthority control General
Integrated Authority File (Germany)
National libraries
Spain
France (data)
United States
Japan





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Dynamic_programming&oldid=1067629005"
		Categories: Dynamic programmingOptimization algorithms and methodsEquationsSystems engineeringOptimal controlHidden categories: Harv and Sfn no-target errorsArticles with short descriptionShort description is different from WikidataAll articles with unsourced statementsArticles with unsourced statements from June 2009Articles needing additional references from May 2013All articles needing additional referencesWikipedia external links cleanup from March 2016Wikipedia spam cleanup from March 2016Articles with GND identifiersArticles with BNE identifiersArticles with BNF identifiersArticles with LCCN identifiersArticles with NDL identifiers
	
