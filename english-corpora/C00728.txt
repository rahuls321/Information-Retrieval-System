
Title:
Formal grammar
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Structure of a formal language
In formal language theory, a grammar (when the context is not given, often called a formal grammar for clarity) describes how to form strings from a language's alphabet that are valid according to the language's syntax. A grammar does not describe the meaning of the strings or what can be done with them in whatever contextâonly their form. A formal grammar is defined as a set of production rules for such strings in a formal language.
Formal language theory, the discipline that studies formal grammars and languages, is a branch of applied mathematics.  Its applications are found in theoretical computer science, theoretical linguistics, formal semantics, mathematical logic, and other areas.
A formal grammar is a set of rules for rewriting strings, along with a "start symbol" from which rewriting starts. Therefore, a grammar is usually thought of as a language generator. However, it can also sometimes be used as the basis for a "recognizer"âa function in computing that determines whether a given string belongs to the language or is grammatically incorrect. To describe such recognizers, formal language theory uses separate formalisms, known as automata theory. One of the interesting results of automata theory is that it is not possible to design a recognizer for certain formal languages.[1]
Parsing is the process of recognizing an utterance (a string in natural languages) by breaking it down to a set of symbols and analyzing each one against the grammar of the language.  Most languages have the meanings of their utterances structured according to their syntaxâa practice known as compositional semantics. As a result, the first step to describing the meaning of an utterance in language is to break it down part by part and look at its analyzed form (known as its parse tree in computer science, and as its deep structure in generative grammar).

Contents

1 History
2 Introductory example

2.1 Example 1
2.2 Examples 2 and 3


3 Formal definition

3.1 The syntax of grammars
3.2 Some mathematical constructs regarding formal grammars
3.3 Example


4 The Chomsky hierarchy

4.1 Context-free grammars
4.2 Regular grammars
4.3 Other forms of generative grammars
4.4 Recursive grammars


5 Analytic grammars
6 See also
7 References
8 External links



History[edit]
This section needs expansion. You can help by adding to it.  (February 2018)
PÄá¹ini's treatise Astadyayi gives formal production rules and definitions to describe the formal grammar of Sanskrit.[2] There are different uses of "form" and "formalism", which have changed over time, depending on the fields the relevant author was in contact with. A historical overview of the concept is given in [3]

Introductory example[edit]
A grammar mainly consists of a set of production rules, rewriting rules for transforming strings. Each rule specifies a replacement of a particular string (its left-hand side) with another (its right-hand side). A rule can be applied to each string that contains its left-hand side and produces a string in which an occurrence of that left-hand side has been replaced with its right-hand side.
Unlike a semi-Thue system, which is wholly defined by these rules, a grammar further distinguishes between two kinds of symbols: nonterminal and terminal symbols; each left-hand side must contain at least one nonterminal symbol. It also distinguishes a special nonterminal symbol, called the start symbol.
The language generated by the grammar is defined to be the set of all strings without any nonterminal symbols that can be generated from the string consisting of a single start symbol by (possibly repeated) application of its rules in whatever way possible.
If there are essentially different ways of generating the same single string, the grammar is said to be ambiguous.
In the following examples, the terminal symbols are a and b, and the start symbol is S.

Example 1[edit]
Suppose we have the following production rules:

1. 
  
    
      
        S
        â
        a
        S
        b
      
    
    {\displaystyle S\rightarrow aSb}
  

2. 
  
    
      
        S
        â
        b
        a
      
    
    {\displaystyle S\rightarrow ba}
  

then we start with S, and can choose a rule to apply to it. If we choose rule 1, we obtain the string aSb. If we then choose rule 1 again, we replace S with aSb and obtain the string aaSbb. If we now choose rule 2, we replace S with ba and obtain the string aababb, and are done. We can write this series of choices more briefly, using symbols: 
  
    
      
        S
        â
        a
        S
        b
        â
        a
        a
        S
        b
        b
        â
        a
        a
        b
        a
        b
        b
      
    
    {\displaystyle S\Rightarrow aSb\Rightarrow aaSbb\Rightarrow aababb}
  
.
The language of the grammar is the infinite set 
  
    
      
        {
        
          a
          
            n
          
        
        b
        a
        
          b
          
            n
          
        
        â£
        n
        â¥
        0
        }
        =
        {
        b
        a
        ,
        a
        b
        a
        b
        ,
        a
        a
        b
        a
        b
        b
        ,
        a
        a
        a
        b
        a
        b
        b
        b
        ,
        â¦
        }
      
    
    {\displaystyle \{a^{n}bab^{n}\mid n\geq 0\}=\{ba,abab,aababb,aaababbb,\dotsc \}}
  
, where 
  
    
      
        
          a
          
            k
          
        
      
    
    {\displaystyle a^{k}}
  
 is 
  
    
      
        a
      
    
    {\displaystyle a}
  
 repeated 
  
    
      
        k
      
    
    {\displaystyle k}
  
 times (and 
  
    
      
        n
      
    
    {\displaystyle n}
  
 in particular represents the number of times production rule 1 has been applied). This grammar is context-free (only single nonterminals appear as left-hand sides) and unambiguous.

Examples 2 and 3[edit]
Suppose the rules are these instead:

1. 
  
    
      
        S
        â
        a
      
    
    {\displaystyle S\rightarrow a}
  

2. 
  
    
      
        S
        â
        S
        S
      
    
    {\displaystyle S\rightarrow SS}
  

3. 
  
    
      
        a
        S
        a
        â
        b
      
    
    {\displaystyle aSa\rightarrow b}
  

This grammar is not context-free due to rule 3 and it is ambiguous due to the multiple ways in which rule 2 can be used to generate sequences of 
  
    
      
        S
      
    
    {\displaystyle S}
  
s.
However, the language it generates is simply the set of all nonempty strings consisting of 
  
    
      
        a
      
    
    {\displaystyle a}
  
s and/or 
  
    
      
        b
      
    
    {\displaystyle b}
  
s.
This is easy to see: to generate a 
  
    
      
        b
      
    
    {\displaystyle b}
  
 from an 
  
    
      
        S
      
    
    {\displaystyle S}
  
, use rule 2 twice to generate 
  
    
      
        S
        S
        S
      
    
    {\displaystyle SSS}
  
, then rule 1 twice and rule 3 once to produce 
  
    
      
        b
      
    
    {\displaystyle b}
  
. This means we can generate arbitrary nonempty sequences of 
  
    
      
        S
      
    
    {\displaystyle S}
  
s and then replace each of them with 
  
    
      
        a
      
    
    {\displaystyle a}
  
 or 
  
    
      
        b
      
    
    {\displaystyle b}
  
 as we please.
That same language can alternatively be generated by a context-free, nonambiguous grammar; for instance, the regular grammar with rules

1. 
  
    
      
        S
        â
        a
        S
      
    
    {\displaystyle S\rightarrow aS}
  

2. 
  
    
      
        S
        â
        b
        S
      
    
    {\displaystyle S\rightarrow bS}
  

3. 
  
    
      
        S
        â
        a
      
    
    {\displaystyle S\rightarrow a}
  

4. 
  
    
      
        S
        â
        b
      
    
    {\displaystyle S\rightarrow b}
  

Formal definition[edit]
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}Main article: Unrestricted grammar
The syntax of grammars[edit]
In the classic formalization of generative grammars first proposed by Noam Chomsky in the 1950s,[4][5] a grammar G consists of the following components:

A finite set N of nonterminal symbols, that is disjoint with the strings formed from G.
A finite set 
  
    
      
        Î£
      
    
    {\displaystyle \Sigma }
  
 of terminal symbols that is disjoint from N.
A finite set P of production rules, each rule of the form

  
    
      
        (
        Î£
        âª
        N
        
          )
          
            â
          
        
        N
        (
        Î£
        âª
        N
        
          )
          
            â
          
        
        â
        (
        Î£
        âª
        N
        
          )
          
            â
          
        
      
    
    {\displaystyle (\Sigma \cup N)^{*}N(\Sigma \cup N)^{*}\rightarrow (\Sigma \cup N)^{*}}
  

where 
  
    
      
        
          â
        
      
    
    {\displaystyle {*}}
  
 is the Kleene star operator and 
  
    
      
        âª
      
    
    {\displaystyle \cup }
  
 denotes set union. That is, each production rule maps from one string of symbols to another, where the first string (the "head") contains an arbitrary number of symbols provided at least one of them is a nonterminal. In the case that the second string (the "body") consists solely of the empty stringâi.e., that it contains no symbols at allâit may be denoted with a special notation (often 
  
    
      
        Î
      
    
    {\displaystyle \Lambda }
  
, e or 
  
    
      
        Ïµ
      
    
    {\displaystyle \epsilon }
  
) in order to avoid confusion.
A distinguished symbol 
  
    
      
        S
        â
        N
      
    
    {\displaystyle S\in N}
  
 that is the start symbol, also called the sentence symbol.
A grammar is formally defined as the tuple 
  
    
      
        (
        N
        ,
        Î£
        ,
        P
        ,
        S
        )
      
    
    {\displaystyle (N,\Sigma ,P,S)}
  
. Such a formal grammar is often called a rewriting system or a phrase structure grammar in the literature.[6][7]

Some mathematical constructs regarding formal grammars[edit]
The operation of a grammar can be defined in terms of relations on strings:

Given a grammar 
  
    
      
        G
        =
        (
        N
        ,
        Î£
        ,
        P
        ,
        S
        )
      
    
    {\displaystyle G=(N,\Sigma ,P,S)}
  
, the binary relation 
  
    
      
        
          
            â
            G
          
        
      
    
    {\displaystyle {\underset {G}{\Rightarrow }}}
  
 (pronounced as  "G derives in one step") on strings in 
  
    
      
        (
        Î£
        âª
        N
        
          )
          
            â
          
        
      
    
    {\displaystyle (\Sigma \cup N)^{*}}
  
 is defined by:

  
    
      
        x
        
          
            â
            G
          
        
        y
        
        âº
        
        â
        u
        ,
        v
        ,
        p
        ,
        q
        â
        (
        Î£
        âª
        N
        
          )
          
            â
          
        
        :
        (
        x
        =
        u
        p
        v
        )
        â§
        (
        p
        â
        q
        â
        P
        )
        â§
        (
        y
        =
        u
        q
        v
        )
      
    
    {\displaystyle x{\underset {G}{\Rightarrow }}y\iff \exists u,v,p,q\in (\Sigma \cup N)^{*}:(x=upv)\wedge (p\rightarrow q\in P)\wedge (y=uqv)}
  

the relation 
  
    
      
        
          
            
              â
              G
            
            â
          
        
      
    
    {\displaystyle {\overset {*}{\underset {G}{\Rightarrow }}}}
  
 (pronounced as G derives in zero or more steps) is defined as the reflexive transitive closure of 
  
    
      
        
          
            â
            G
          
        
      
    
    {\displaystyle {\underset {G}{\Rightarrow }}}
  

a sentential form is a member of 
  
    
      
        (
        Î£
        âª
        N
        
          )
          
            â
          
        
      
    
    {\displaystyle (\Sigma \cup N)^{*}}
  
 that can be derived in a finite number of steps from the start symbol 
  
    
      
        S
      
    
    {\displaystyle S}
  
; that is, a sentential form is a member of 
  
    
      
        
          {
          
            w
            â
            (
            Î£
            âª
            N
            
              )
              
                â
              
            
            â£
            S
            
              
                
                  â
                  G
                
                â
              
            
            w
          
          }
        
      
    
    {\displaystyle \left\{w\in (\Sigma \cup N)^{*}\mid S{\overset {*}{\underset {G}{\Rightarrow }}}w\right\}}
  
. A sentential form that contains no nonterminal symbols (i.e. is a member of 
  
    
      
        
          Î£
          
            â
          
        
      
    
    {\displaystyle \Sigma ^{*}}
  
) is called a sentence.[8]
the language of 
  
    
      
        G
      
    
    {\displaystyle G}
  
, denoted as 
  
    
      
        
          L
        
        (
        G
        )
      
    
    {\displaystyle {\boldsymbol {L}}(G)}
  
, is defined as the set of sentences built by 
  
    
      
        G
      
    
    {\displaystyle G}
  
.
Note that the grammar 
  
    
      
        G
        =
        (
        N
        ,
        Î£
        ,
        P
        ,
        S
        )
      
    
    {\displaystyle G=(N,\Sigma ,P,S)}
  
 is effectively the semi-Thue system 
  
    
      
        (
        N
        âª
        Î£
        ,
        P
        )
      
    
    {\displaystyle (N\cup \Sigma ,P)}
  
, rewriting strings in exactly the same way; the only difference is in that we distinguish specific nonterminal symbols, which must be rewritten in rewrite rules, and are only interested in rewritings from the designated start symbol 
  
    
      
        S
      
    
    {\displaystyle S}
  
 to strings without nonterminal symbols.

Example[edit]
For these examples, formal languages are specified using set-builder notation.
Consider the grammar 
  
    
      
        G
      
    
    {\displaystyle G}
  
 where 
  
    
      
        N
        =
        
          {
          
            S
            ,
            B
          
          }
        
      
    
    {\displaystyle N=\left\{S,B\right\}}
  
, 
  
    
      
        Î£
        =
        
          {
          
            a
            ,
            b
            ,
            c
          
          }
        
      
    
    {\displaystyle \Sigma =\left\{a,b,c\right\}}
  
, 
  
    
      
        S
      
    
    {\displaystyle S}
  
 is the start symbol, and 
  
    
      
        P
      
    
    {\displaystyle P}
  
 consists of the following production rules:

1. 
  
    
      
        S
        â
        a
        B
        S
        c
      
    
    {\displaystyle S\rightarrow aBSc}
  

2. 
  
    
      
        S
        â
        a
        b
        c
      
    
    {\displaystyle S\rightarrow abc}
  

3. 
  
    
      
        B
        a
        â
        a
        B
      
    
    {\displaystyle Ba\rightarrow aB}
  

4. 
  
    
      
        B
        b
        â
        b
        b
      
    
    {\displaystyle Bb\rightarrow bb}
  

This grammar defines the language 
  
    
      
        L
        (
        G
        )
        =
        
          {
          
            
              a
              
                n
              
            
            
              b
              
                n
              
            
            
              c
              
                n
              
            
            â£
            n
            â¥
            1
          
          }
        
      
    
    {\displaystyle L(G)=\left\{a^{n}b^{n}c^{n}\mid n\geq 1\right\}}
  
 where 
  
    
      
        
          a
          
            n
          
        
      
    
    {\displaystyle a^{n}}
  
 denotes a string of n consecutive 
  
    
      
        a
      
    
    {\displaystyle a}
  
's. Thus, the language is the set of strings that consist of 1 or more 
  
    
      
        a
      
    
    {\displaystyle a}
  
's, followed by the same number of 
  
    
      
        b
      
    
    {\displaystyle b}
  
's, followed by the same number of 
  
    
      
        c
      
    
    {\displaystyle c}
  
's.
Some examples of the derivation of strings in 
  
    
      
        L
        (
        G
        )
      
    
    {\displaystyle L(G)}
  
 are: 

.mw-parser-output .div-col{margin-top:0.3em;column-width:30em}.mw-parser-output .div-col-small{font-size:90%}.mw-parser-output .div-col-rules{column-rule:1px solid #aaa}.mw-parser-output .div-col dl,.mw-parser-output .div-col ol,.mw-parser-output .div-col ul{margin-top:0}.mw-parser-output .div-col li,.mw-parser-output .div-col dd{page-break-inside:avoid;break-inside:avoid-column}

  
    
      
        
          S
        
        
          
            â
            2
          
        
        
          a
          b
          c
        
      
    
    {\displaystyle {\boldsymbol {S}}{\underset {2}{\Rightarrow }}{\boldsymbol {abc}}}
  


  
    
      
        
          
            
              
                
                  S
                
              
              
                
                
                  
                    â
                    1
                  
                
                
                  a
                  B
                  S
                  c
                
              
            
            
              
              
                
                
                  
                    â
                    2
                  
                
                a
                B
                
                  a
                  b
                  c
                
                c
              
            
            
              
              
                
                
                  
                    â
                    3
                  
                
                a
                
                  a
                  B
                
                b
                c
                c
              
            
            
              
              
                
                
                  
                    â
                    4
                  
                
                a
                a
                
                  b
                  b
                
                c
                c
              
            
          
        
      
    
    {\displaystyle {\begin{aligned}{\boldsymbol {S}}&{\underset {1}{\Rightarrow }}{\boldsymbol {aBSc}}\\&{\underset {2}{\Rightarrow }}aB{\boldsymbol {abc}}c\\&{\underset {3}{\Rightarrow }}a{\boldsymbol {aB}}bcc\\&{\underset {4}{\Rightarrow }}aa{\boldsymbol {bb}}cc\end{aligned}}}
  


  
    
      
        
          
            
              
                
                  S
                
              
              
                
                
                  
                    â
                    1
                  
                
                
                  a
                  B
                  S
                  c
                
                
                  
                    â
                    1
                  
                
                a
                B
                
                  a
                  B
                  S
                  c
                
                c
              
            
            
              
              
                
                
                  
                    â
                    2
                  
                
                a
                B
                a
                B
                
                  a
                  b
                  c
                
                c
                c
              
            
            
              
              
                
                
                  
                    â
                    3
                  
                
                a
                
                  a
                  B
                
                B
                a
                b
                c
                c
                c
                
                  
                    â
                    3
                  
                
                a
                a
                B
                
                  a
                  B
                
                b
                c
                c
                c
                
                  
                    â
                    3
                  
                
                a
                a
                
                  a
                  B
                
                B
                b
                c
                c
                c
              
            
            
              
              
                
                
                  
                    â
                    4
                  
                
                a
                a
                a
                B
                
                  b
                  b
                
                c
                c
                c
                
                  
                    â
                    4
                  
                
                a
                a
                a
                
                  b
                  b
                
                b
                c
                c
                c
              
            
          
        
      
    
    {\displaystyle {\begin{aligned}{\boldsymbol {S}}&{\underset {1}{\Rightarrow }}{\boldsymbol {aBSc}}{\underset {1}{\Rightarrow }}aB{\boldsymbol {aBSc}}c\\&{\underset {2}{\Rightarrow }}aBaB{\boldsymbol {abc}}cc\\&{\underset {3}{\Rightarrow }}a{\boldsymbol {aB}}Babccc{\underset {3}{\Rightarrow }}aaB{\boldsymbol {aB}}bccc{\underset {3}{\Rightarrow }}aa{\boldsymbol {aB}}Bbccc\\&{\underset {4}{\Rightarrow }}aaaB{\boldsymbol {bb}}ccc{\underset {4}{\Rightarrow }}aaa{\boldsymbol {bb}}bccc\end{aligned}}}
  

(Note on notation: 
  
    
      
        P
        
          
            â
            i
          
        
        Q
      
    
    {\displaystyle P{\underset {i}{\Rightarrow }}Q}
  
 reads "String P generates string Q by means of production i", and the generated part is each time indicated in bold type.)
The Chomsky hierarchy[edit]
Main article: Chomsky hierarchy 
When Noam Chomsky first formalized generative grammars in 1956,[4] he classified them into types now known as the Chomsky hierarchy. The difference between these types is that they have increasingly strict production rules and can therefore express fewer formal languages. Two important types are context-free grammars (Type 2) and regular grammars (Type 3). The languages that can be described with such a grammar are called context-free languages and regular languages, respectively. Although much less powerful than unrestricted grammars (Type 0), which can in fact express any language that can be accepted by a Turing machine, these two restricted types of grammars are most often used because parsers for them can be efficiently implemented.[9] For example, all regular languages can be recognized by a finite-state machine, and for useful subsets of context-free grammars there are well-known algorithms to generate efficient LL parsers and LR parsers to recognize the corresponding languages those grammars generate.

Context-free grammars[edit]
A context-free grammar is a grammar in which the left-hand side of each production rule consists of only a single nonterminal symbol. This restriction is non-trivial; not all languages can be generated by context-free grammars. Those that can are called context-free languages.
The language 
  
    
      
        L
        (
        G
        )
        =
        
          {
          
            
              a
              
                n
              
            
            
              b
              
                n
              
            
            
              c
              
                n
              
            
            â£
            n
            â¥
            1
          
          }
        
      
    
    {\displaystyle L(G)=\left\{a^{n}b^{n}c^{n}\mid n\geq 1\right\}}
  
 defined above is not a context-free language, and this can be strictly proven using the pumping lemma for context-free languages, but for example the language 
  
    
      
        
          {
          
            
              a
              
                n
              
            
            
              b
              
                n
              
            
            â£
            n
            â¥
            1
          
          }
        
      
    
    {\displaystyle \left\{a^{n}b^{n}\mid n\geq 1\right\}}
  
 (at least 1 
  
    
      
        a
      
    
    {\displaystyle a}
  
 followed by the same number of 
  
    
      
        b
      
    
    {\displaystyle b}
  
's) is context-free, as it can be defined by the grammar 
  
    
      
        
          G
          
            2
          
        
      
    
    {\displaystyle G_{2}}
  
 with 
  
    
      
        N
        =
        
          {
          S
          }
        
      
    
    {\displaystyle N=\left\{S\right\}}
  
, 
  
    
      
        Î£
        =
        
          {
          
            a
            ,
            b
          
          }
        
      
    
    {\displaystyle \Sigma =\left\{a,b\right\}}
  
, 
  
    
      
        S
      
    
    {\displaystyle S}
  
 the start symbol, and the following production rules:

1. 
  
    
      
        S
        â
        a
        S
        b
      
    
    {\displaystyle S\rightarrow aSb}
  

2. 
  
    
      
        S
        â
        a
        b
      
    
    {\displaystyle S\rightarrow ab}
  

A context-free language can be recognized in 
  
    
      
        O
        (
        
          n
          
            3
          
        
        )
      
    
    {\displaystyle O(n^{3})}
  
 time (see Big O notation) by an algorithm such as Earley's recogniser. That is, for every context-free language, a machine can be built that takes a string as input and determines in 
  
    
      
        O
        (
        
          n
          
            3
          
        
        )
      
    
    {\displaystyle O(n^{3})}
  
 time whether the string is a member of the language, where 
  
    
      
        n
      
    
    {\displaystyle n}
  
 is the length of the string.[10] Deterministic context-free languages is a subset of context-free languages that can be recognized in linear time.[11] There exist various algorithms that target either this set of languages or some subset of it.

Regular grammars[edit]
In regular grammars, the left hand side is again only a single nonterminal symbol, but now the right-hand side is also restricted. The right side may be the empty string, or a single terminal symbol, or a single terminal symbol followed by a nonterminal symbol, but nothing else. (Sometimes a broader definition is used: one can allow longer strings of terminals or single nonterminals without anything else, making languages easier to denote while still defining the same class of languages.)
The language 
  
    
      
        
          {
          
            
              a
              
                n
              
            
            
              b
              
                n
              
            
            â£
            n
            â¥
            1
          
          }
        
      
    
    {\displaystyle \left\{a^{n}b^{n}\mid n\geq 1\right\}}
  
 defined above is not regular, but the language 
  
    
      
        
          {
          
            
              a
              
                n
              
            
            
              b
              
                m
              
            
            â£
            m
            ,
            n
            â¥
            1
          
          }
        
      
    
    {\displaystyle \left\{a^{n}b^{m}\mid m,n\geq 1\right\}}
  
 (at least 1 
  
    
      
        a
      
    
    {\displaystyle a}
  
 followed by at least 1 
  
    
      
        b
      
    
    {\displaystyle b}
  
, where the numbers may be different) is, as it can be defined by the grammar 
  
    
      
        
          G
          
            3
          
        
      
    
    {\displaystyle G_{3}}
  
 with 
  
    
      
        N
        =
        
          {
          
            S
            ,
            A
            ,
            B
          
          }
        
      
    
    {\displaystyle N=\left\{S,A,B\right\}}
  
, 
  
    
      
        Î£
        =
        
          {
          
            a
            ,
            b
          
          }
        
      
    
    {\displaystyle \Sigma =\left\{a,b\right\}}
  
, 
  
    
      
        S
      
    
    {\displaystyle S}
  
 the start symbol, and the following production rules:


  
    
      
        S
        â
        a
        A
      
    
    {\displaystyle S\rightarrow aA}
  


  
    
      
        A
        â
        a
        A
      
    
    {\displaystyle A\rightarrow aA}
  


  
    
      
        A
        â
        b
        B
      
    
    {\displaystyle A\rightarrow bB}
  


  
    
      
        B
        â
        b
        B
      
    
    {\displaystyle B\rightarrow bB}
  


  
    
      
        B
        â
        Ïµ
      
    
    {\displaystyle B\rightarrow \epsilon }
  

All languages generated by a regular grammar can be recognized in 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
  
 time by a finite-state machine. Although in practice, regular grammars are commonly expressed using regular expressions, some forms of regular expression used in practice do not strictly generate the regular languages and do not show linear recognitional performance due to those deviations.

Other forms of generative grammars[edit]
Many extensions and variations on Chomsky's original hierarchy of formal grammars have been developed, both by linguists and by computer scientists, usually either in order to increase their expressive power or in order to make them easier to analyze or parse. Some forms of grammars developed include:

Tree-adjoining grammars increase the expressiveness of conventional generative grammars by allowing rewrite rules to operate on parse trees instead of just strings.[12]
Affix grammars[13] and attribute grammars[14][15] allow rewrite rules to be augmented with semantic attributes and operations, useful both for increasing grammar expressiveness and for constructing practical language translation tools.
Recursive grammars[edit]
Not to be confused with Recursive language.
A recursive grammar is a grammar that contains production rules that are recursive. For example, a grammar for a context-free language is left-recursive if there exists a non-terminal symbol A that can be put through the production rules to produce a string with A as the leftmost symbol.[16] An example of recursive grammar is a clause within a sentence separated by two commas.[17] All types of grammars in the Okoye hierarchy can be recursive.[citation needed]

Analytic grammars[edit]
Though there is a tremendous body of literature on parsing algorithms, most of these algorithms assume that the language to be parsed is initially described by means of a generative formal grammar, and that the goal is to transform this generative grammar into a working parser. Strictly speaking, a generative grammar does not in any way correspond to the algorithm used to parse a language, and various algorithms have different restrictions on the form of production rules that are considered well-formed.
An alternative approach is to formalize the language in terms of an analytic grammar in the first place, which more directly corresponds to the structure and semantics of a parser for the language. Examples of analytic grammar formalisms include the following:

The Language Machine directly implements unrestricted analytic grammars. Substitution rules are used to transform an input to produce outputs and behaviour. The system can also produce the lm-diagram, which shows what happens when the rules of an unrestricted analytic grammar are being applied.
Top-down parsing language (TDPL): a highly minimalist analytic grammar formalism developed in the early 1970s to study the behavior of top-down parsers.[18]
Link grammars: a form of analytic grammar designed for linguistics, which derives syntactic structure by examining the positional relationships between pairs of words.[19][20]
Parsing expression grammars (PEGs): a more recent generalization of TDPL designed around the practical expressiveness needs of programming language and compiler writers.[21]
See also[edit]

Abstract syntax tree
Adaptive grammar
Ambiguous grammar
BackusâNaur form (BNF)
Categorial grammar
Concrete syntax tree
Extended BackusâNaur form (EBNF)
Grammar framework
L-system
Lojban
Post canonical system
Shape grammar
Well-formed formula

References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Meduna, Alexander (2014), Formal Languages and Computation: Models and Their Applications, CRC Press, p.Â 233, ISBNÂ 9781466513457. For more on this subject, see undecidable problem.

^ "Panini biography". www-history.mcs.st-andrews.ac.uk. Archived from the original on 2018-08-15.

^ McElvenny J (2019).  McElvenny J (ed.). Form and formalism in linguistics (pdf). Berlin: Language Science Press. doi:10.5281/zenodo.2654375. ISBNÂ 978-3-96110-182-5.

^ Jump up to: a b Chomsky, Noam (Sep 1956). "Three models for the description of language". IRE Transactions on Information Theory. 2 (3): 113â124. doi:10.1109/TIT.1956.1056813.

^ Chomsky, Noam (1957). Syntactic Structures. The Hague: Mouton.

^ Ginsburg, Seymour (1975). Algebraic and automata theoretic properties of formal languages. North-Holland. pp.Â 8â9. ISBNÂ 978-0-7204-2506-2.

^ Harrison, Michael A. (1978). Introduction to Formal Language Theory. Reading, Mass.: Addison-Wesley Publishing Company. p.Â 13. ISBNÂ 978-0-201-02955-0.

^ Sentential Forms, Context-Free Grammars, David Matuszek

^ Grune, Dick & Jacobs, Ceriel H., Parsing Techniques â A Practical Guide, Ellis Horwood, England, 1990.

^ Earley, Jay, "An Efficient Context-Free Parsing Algorithm," Communications of the ACM, Vol. 13 No. 2, pp. 94-102, February 1970.

^ Knuth, D. E. (July 1965). "On the translation of languages from left to right". Information and Control. 8 (6): 607â639. doi:10.1016/S0019-9958(65)90426-2.

^ Joshi, Aravind K., et al., "Tree Adjunct Grammars," Journal of Computer Systems Science, Vol. 10 No. 1, pp. 136-163, 1975.

^ Koster , Cornelis H. A., "Affix Grammars," in ALGOL 68 Implementation, North Holland Publishing Company, Amsterdam, p. 95-109, 1971.

^ Knuth, Donald E., "Semantics of Context-Free Languages," Mathematical Systems Theory, Vol. 2 No. 2, pp. 127-145, 1968.

^ Knuth, Donald E., "Semantics of Context-Free Languages (correction)," Mathematical Systems Theory, Vol. 5 No. 1, pp 95-96, 1971.

^ Notes on Formal Language Theory and Parsing, James Power, Department of Computer Science National University of Ireland, Maynooth Maynooth, Co. Kildare, Ireland.JPR02

^ Borenstein, Seth (April 27, 2006). "Songbirds grasp grammar, too". Northwest Herald. p.Â 2 â via Newspapers.com.

^ Birman, Alexander, The TMG Recognition Schema, Doctoral thesis, Princeton University, Dept. of Electrical Engineering, February 1970.

^ Sleator, Daniel D. & Temperly, Davy, "Parsing English with a Link Grammar," Technical Report CMU-CS-91-196, Carnegie Mellon University Computer Science, 1991.

^ Sleator, Daniel D. & Temperly, Davy, "Parsing English with a Link Grammar," Third International Workshop on Parsing Technologies, 1993. (Revised version of above report.)

^ Ford, Bryan, Packrat Parsing: a Practical Linear-Time Algorithm with Backtracking, Masterâs thesis, Massachusetts Institute of Technology, Sept. 2002.


External links[edit]
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}show.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteAutomata theory: formal languages and formal grammarsChomsky hierarchyGrammarsLanguagesAbstract machines
Type-0
â
Type-1
â
â
â
â
â
Type-2
â
â
Type-3
â
â

Unrestricted
(no common name)
Context-sensitive
Positive range concatenation
Indexed
â
Linear context-free rewriting systems
Tree-adjoining
Context-free
Deterministic context-free
Visibly pushdown
Regular
â
Non-recursive

Recursively enumerable
Decidable
Context-sensitive
Positive range concatenation*
Indexed*
â
Linear context-free rewriting language
Tree-adjoining
Context-free
Deterministic context-free
Visibly pushdown
Regular
Star-free
Finite

Turing machine
Decider
Linear-bounded
PTIME Turing Machine
Nested stack
Thread automaton
restricted Tree stack automaton
Embedded pushdown
Nondeterministic pushdown
Deterministic pushdown
Visibly pushdown
Finite
Counter-free (with aperiodic finite monoid)
Acyclic finite
Each category of languages, except those marked by a *, is a proper subset of the category directly above it. Any language in each category is generated by a grammar and by an automaton in the category in the same line.
showvteMathematical logicGeneral
Axiom
First-order logic
Formal proof
Logical consequence
Formal semantics
Foundations of mathematics
Model
Set
Theorem
Theory
Type theory
TheoremsÂ (list)
GÃ¶del's completenessÂ andÂ incompleteness theorems
Tarski's undefinability
BanachâTarski paradox
Cantor'sÂ theorem,Â paradoxÂ andÂ diagonal argument
LindstrÃ¶m's
LÃ¶wenheimâSkolem
Compactness
LogicsTraditional
Classical logic
Proposition
Inference
Logical equivalence
Argument
Validity
Syllogism
Square of opposition
Venn diagram
Propositional
Boolean algebra
Boolean functions
Logical connectives
Propositional calculus
Propositional formula
Truth tables
Many-valued logic
Predicate
First-order
Quantifiers
Predicate
Second-order
Monadic predicate calculus
Set theory
Set
Element
Ordered pair
Ordinal number
Russell's paradox
Power set
Subset
Relation
Function/Map
Domain
Codomain
Image
Extensionality
Forcing
Cardinality
Empty set
Inhabited set
Enumeration
Countable set
Uncountable set
Finite set
Infinite set
Class
SchrÃ¶derâBernstein theorem
Set theories
ZermeloâFraenkel
Axiom of choice
Continuum hypothesis
General
KripkeâPlatek
MorseâKelley
Naive
TarskiâGrothendieck
Von NeumannâBernaysâGÃ¶del
SyntaxÂ &Â Language
Alphabet
Arity
Expression
Ground
Extension
Relation
Formal
Grammar
Language
Proof
System
Theory
Formation rule
Formula
Atomic
Open
Free/bound variable
Logical connective
Â¬
â¨
â§
â
â
=
Predicate
Functional
Variable
Propositional variable
Quantifier
â
â
Sentence
Atomic
Signature
String
Substitution
Symbol
Function
Logical/Constant
Non-logical
Variable
Term
Proof theory
Formal proof
Natural deduction
Logical consequence
Rule of inference
Sequent calculus
Theorem
Systems
Formal
Axiomatic
Deductive
Hilbert
Complete theory
IndependenceÂ (fromÂ ZFC)
Model theory
Interpretation
Model
Equivalence
Finite
Saturated
Substructure
Non-standard model
of arithmetic
Diagram
Elementary
Categorical theory
Model complete theory
Strength
Semantics of logic
Theories of truth
Semantic
Tarski's
Kripke's
T-schema
Transfer principle
Truth predicate
Truth value
Type
Ultraproduct
Validity
Computability theory
ChurchâTuring thesis
Computably enumerable
Computable function
Computable set
Decision problem
Halting problem
Primitive recursive function
Recursion
Recursive set

Authority control 
Integrated Authority File (Germany)





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Formal_grammar&oldid=1064890442"
		Categories: Formal languagesGrammarMathematical logicSyntaxAutomata (computation)Hidden categories: Articles with short descriptionShort description matches WikidataArticles to be expanded from February 2018All articles to be expandedArticles using small message boxesAll articles with unsourced statementsArticles with unsourced statements from November 2019Articles with GND identifiers
	
