
Title:
Umple
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}UmpleParadigmobject-orientedDesignedÂ byUniversity of OttawaDeveloperCruise Group in the Department of Electrical Engineering and Computer Science, Led by Timothy Lethbridge at University of OttawaFirstÂ appeared2008Stable release1.31.1
   /    AugustÂ 18,Â 2021Â (2021-08-18)
Typing disciplinestaticPlatformJVMLicenseMIT LicenseFilename extensions.umpWebsitewww.umple.orgInfluenced byJava, C++, UML, Ruby, PHP
Umple is a language for both object-oriented programming and modelling with class diagrams and state diagrams.
The name Umple is a portmanteau of "UML", "ample" and "Simple",[1] indicating that it is designed to provide ample features to extend programming languages with UML capabilities.

Contents

1 History and philosophy
2 Features and capabilities
3 License
4 Examples
5 Umple use in practice
6 Tools
7 See also
8 References
9 External links



History and philosophy[edit]
The design of Umple started in 2008 at the University of Ottawa. Umple was open-sourced and its development was moved to Google Code in early 2011 and to GitHub in 2015.
Umple was developed, in part, to address certain problems observed in the modelling community.
[2]
Most specifically, it was designed to bring modelling and programming into alignment, It was intended to help overcome inhibitions against modelling common in the programmer community. It was also intended to reduce some of the difficulties of model-driven development that arise from the need to use large, expensive or incomplete tools. One design objective is to enable programmers to model in a way they see as natural, by adding modelling constructs to programming languages.

Features and capabilities[edit]
Umple can be used to represent in a textual manner many UML modelling entities found in class diagrams and state diagrams.[2] Umple can generate code for these in various programming languages. Currently Umple fully supports Java, C++ and PHP as target programming languages and has functional, but somewhat incomplete support for Ruby.
Umple also incorporates various features not related to UML, such as the Singleton pattern, keys, immutability, mixins and aspect-oriented code injection.
The class diagram notations Umple supports includes classes, interfaces, attributes, associations, generalizations and operations. The code Umple generates for attributes include code in the constructor, 'get' methods and 'set' methods. The generated code differs considerably depending on whether the attribute has properties such as immutability, has a default value, or is part of a key.
Umple generates many methods for manipulating, querying and navigating associations. It supports all combinations of UML multiplicity and enforces referential integrity.
Umple supports the vast majority of UML state machine notation, including arbitrarily deep nested states, concurrent regions, actions on entry, exit and transition, plus long-lasting activities while in a state.
[3]
A state machine is treated as an enumerated attribute where the value is controlled by events. Events encoded in the state machine can be methods written by the user, or else generated by the Umple compiler. Events are triggered by calling the method. An event can trigger transitions (subject to guards) in several different state machines. Since a program can be entirely written around one or more state machines, Umple enables automata-based programming.
The bodies of methods are written in one of the target programming languages. The same is true for other imperative code such as state machine actions and guards, and code to be injected in an aspect-oriented manner. Such code can be injected before many of the methods in the code Umple generates, for example before or after setting or getting attributes and associations.
The Umple notation for UML constructs can  be embedded in any of its supported target programming languages. When this is done, Umple can be seen as a pre-processor: The Umple compiler expands the UML constructs into code of the target language. Code in a target language can be passed to the Umple compiler directly; if no Umple-specific notation is found, then the target-language code is emitted unchanged by the Umple compiler.
Umple, combined with one of its target languages for imperative code, can be seen and used as a complete programming language. Umple plus Java can therefore be seen as an extension of Java.
Alternatively, if imperative code and Umple-specific concepts are left out, Umple can be seen as a way of expressing a large subset of UML in a purely textual manner. Code in one of the supported programming languages can be added in the same manner as UML envisions adding action language code.

License[edit]
Umple is licensed under an MIT-style license.

Examples[edit]
Here is the classic Hello world program written in Umple (extending Java):
[4]

class HelloWorld {
    public static void main(String [ ] args) {
        System.out.println("Hello World");
    }
}

This example looks just like Java, because Umple extends other programming languages.
With the program saved in a file named HelloWorld.ump, it can be compiled from the command line:

$ java -jar umple.jar HelloWorld.ump

To run it:

$ java HelloWorld

The following is a fully executable example showing embedded Java methods and declaration of an association.[4]

class Person {
    name; // Attribute, string by default
    String toString () {
        return(getName());
    }
}
  
class Student {
    isA Person;
}
  
class Mentor {
    isA Person;
}
  
association {
    0..1 Mentor -- * Student;
}
  
class Person {  
    public static void main(String [ ] args) {
        Mentor m = new Mentor("Nick The Mentor");
        Student s = new Student("Tom The Student");
        s.setMentor(m);
        System.out.println("The mentor of "  + s  + " is " +  s.getMentor());
        System.out.println("The students of " +  m  + " are " +  m.getStudents());
    }
}

The following example describes a state machine called status, with states Open, Closing, Closed, Opening and HalfOpen, and with various events that cause transitions from one state to another.
[5]

class GarageDoor
{
    status {
        Open { buttonOrObstacle -> Closing;  }
        Closing {
            buttonOrObstacle -> Opening;
            reachBottom -> Closed;
        }
        Closed { buttonOrObstacle -> Opening; }
        Opening {
            buttonOrObstacle -> HalfOpen;
            reachTop -> Open;
        }
        HalfOpen { buttonOrObstacle -> Opening; }
    }
}

Umple use in practice[edit]
The first version of the Umple compiler was written in Java, Antlr and Jet (Java Emitter Templates), but in a bootstrapping process, the Java code was converted to Umple following a technique called Umplification.[6] The Antlr and Jet were also later converted to native Umple. Umple is therefore now written entirely in itself, in other words it is self-hosted and serves as its own largest test case.
Umple and UmpleOnline have been used in the classroom by several instructors to teach UML and modelling. In one study it was found to help speed up the process of teaching UML, and was also found to improve the grades of students.[7]

Tools[edit]
Umple is available as a Jar file so it can be run from the command line, and as an Eclipse plugin.
There is also an online tool for Umple called UmpleOnline
[8]
, which allows a developer to create an Umple system by drawing a UML class diagram, editing Umple code or both. Umple models created with UmpleOnline are stored in the cloud.  Currently UmpleOnline only supports Umple programs consisting of a single input file.
In addition to code, Umple's tools can generate a variety of other types of output, including user interfaces based on the Umple model.[9]

See also[edit]
Model Driven Engineering
Executable UML
Unified Modeling Language
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}"Official project website".

^ Jump up to: a b 
Forward, Andrew (2010). "The Convergence of Modeling and Programming: Facilitating the Representation of Attributes and Associations in the Umple Model-Oriented Programming Language". PhD Thesis, University of Ottawa.

^ 
Badreddin, Omar (2012). "A Manifestation of Model-Code Duality: Facilitating the Representation of State Machines in the Umple Model-Oriented Programming Language". PhD Thesis, University of Ottawa.

^ Jump up to: a b 
"Hello World Examples". Umple User Manual. 2013.

^ 
"Basic State Machines". Umple User Manual. 2013.

^ 
Lethbridge, Timothy C.; Forward, Andrew; Badreddin, Omar (2010). "Umplification: Refactoring to Incrementally Add Abstraction to a Program". 2010 17th Working Conference on Reverse Engineering. pp.Â 220â224. doi:10.1109/wcre.2010.32. ISBNÂ 978-1-4244-8911-4. S2CIDÂ 14808702.

^ 
Lethbridge, Timothy C.; Mussbacher, Gunter; Forward, Andrew; Badreddin, Omar (2011). "Teaching UML using umple: Applying model-oriented programming in the classroom". 2011 24th IEEE-CS Conference on Software Engineering Education and Training (CSEE&T). pp.Â 421â428. doi:10.1109/cseet.2011.5876118. ISBNÂ 978-1-4577-0349-2. S2CIDÂ 15975894.

^ 
CRuiSE group, University of Ottawa. "Umple Online".

^ 
Forward, Andrew; Badreddin, Omar; Lethbridge, Timothy C.; Solano, Julian (July 2012). "Model-driven rapid prototyping with Umple". Software: Practice and Experience. 42 (7): 781â797. doi:10.1002/spe.1155. S2CIDÂ 36046547.


External links[edit]
Umple home page at the University of Ottawa
UmpleOnline web application for editing UML diagrams and code simultaneously
Google Code open source hosting site for Umple
Umple development discussion list
Umple blog
Umple YouTube Videos




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Umple&oldid=1053276075"
		Categories: Free UML toolsUnified Modeling LanguageConcurrent programming languagesJava programming language familyJVM programming languagesObject-oriented programming languagesStatically typed programming languagesProgramming languages created in 2008Java platform softwareProgramming toolsSoftware using the MIT licenseHidden categories: Articles with example code
	
