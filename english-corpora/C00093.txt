
Title:
Software design pattern
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Reusable solution to a commonly occurring software problem
In software engineering, a software design pattern is a general, reusable solution to a commonly occurring problem within a given context in software design. It is not a finished design that can be transformed directly into source or machine code. Rather, it is a description or template for how to solve a problem that can be used in many different situations. Design patterns are formalized best practices that the programmer can use to solve common problems when designing an application or system.
Object-oriented design patterns typically show relationships and interactions between classes or objects, without specifying the final application classes or objects that are involved. Patterns that imply mutable state may be unsuited for functional programming languages. Some patterns can be rendered unnecessary in languages that have built-in support for solving the problem they are trying to solve, and object-oriented patterns are not necessarily suitable for non-object-oriented languages.
Design patterns may be viewed as a structured approach to computer programming intermediate between the levels of a programming paradigm and a concrete algorithm.

Contents

1 History
2 Practice
3 Structure

3.1 Domain-specific patterns


4 Classification and list

4.1 Creational patterns
4.2 Structural patterns
4.3 Behavioral patterns
4.4 Concurrency patterns


5 Documentation
6 Criticism
7 See also
8 References
9 Further reading



History[edit]
Patterns originated as an architectural concept by Christopher Alexander as early as 1977 (c.f. "The Pattern of Streets," JOURNAL OF THE AIP, September, 1977, Vol. 32, No. 3, pp.Â 273â278). In 1987, Kent Beck and Ward Cunningham began experimenting with the idea of applying patterns to programming â specifically pattern languages â and presented their results at the OOPSLA conference that year.[1][2] In the following years, Beck, Cunningham and others followed up on this work.
Design patterns gained popularity in computer science after the book Design Patterns: Elements of Reusable Object-Oriented Software was published in 1994  by the so-called "Gang of Four" (Gamma et al.), which is frequently abbreviated as "GoF". That same year, the first Pattern Languages of Programming Conference was held, and the following year the Portland Pattern Repository was set up for documentation of design patterns. The scope of the term remains a matter of dispute. Notable books in the design pattern genre include:

.mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Gamma, Erich; Helm, Richard; Johnson, Ralph; Vlissides, John (1995). Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley. ISBNÂ 978-0-201-63361-0.
Brinch Hansen, Per (1995). Studies in Computational Science: Parallel Programming Paradigms. Prentice Hall. ISBNÂ 978-0-13-439324-7.
Buschmann, Frank; Meunier, Regine; Rohnert, Hans; Sommerlad, Peter (1996). Pattern-Oriented Software Architecture, Volume 1: A System of Patterns. John Wiley & Sons. ISBNÂ 978-0-471-95869-7.
Beck, Kent (1997). Smalltalk Best Practice Patterns. Prentice Hall. ISBNÂ 978-0134769042.
Schmidt, Douglas C.; Stal, Michael; Rohnert, Hans; Buschmann, Frank (2000). Pattern-Oriented Software Architecture, Volume 2: Patterns for Concurrent and Networked Objects. John Wiley & Sons. ISBNÂ 978-0-471-60695-6.
Fowler, Martin (2002). Patterns of Enterprise Application Architecture. Addison-Wesley. ISBNÂ 978-0-321-12742-6.
Hohpe, Gregor; Woolf, Bobby (2003). Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions. Addison-Wesley. ISBNÂ 978-0-321-20068-6.
Freeman, Eric T.; Robson, Elisabeth; Bates, Bert; Sierra, Kathy (2004). Head First Design Patterns. O'Reilly Media. ISBNÂ 978-0-596-00712-6.
Although design patterns have been applied practically for a long time, formalization of the concept of design patterns languished for several years.[3]

Practice[edit]
Design patterns can speed up the development process by providing tested, proven development paradigms.[4] Effective software design requires considering issues that may not become visible until later in the implementation. Freshly written code can often have hidden subtle issues that take time to be detected, issues that sometimes can cause major problems down the road. Reusing design patterns helps to prevent such subtle issues,[5] and it also improves code readability for coders and architects who are familiar with the patterns.
In order to achieve flexibility, design patterns usually introduce additional levels of indirection, which in some cases may complicate the resulting designs and hurt application performance.
By definition, a pattern must be programmed anew into each application that uses it. Since some authors see this as a step backward from software reuse as provided by components, researchers have worked to turn patterns into components. Meyer and Arnout were able to provide full or partial componentization of two-thirds of the patterns they attempted.[6]
Software design techniques are difficult to apply to a broader range of problems.[citation needed] Design patterns provide general solutions, documented in a format that does not require specifics tied to a particular problem.

Structure[edit]
Design patterns are composed of several sections (see Â§Â Documentation below). Of particular interest are the Structure, Participants, and Collaboration sections. These sections describe a design motif: a prototypical micro-architecture that developers copy and adapt to their particular designs to solve the recurrent problem described by the design pattern. A micro-architecture is a set of program constituents (e.g., classes, methods...) and their relationships. Developers use the design pattern by introducing in their designs this prototypical micro-architecture, which means that micro-architectures in their designs will have structure and organization similar to the chosen design motif.

Domain-specific patterns[edit]
Efforts have also been made to codify design patterns in particular domains, including use of existing design patterns as well as domain-specific design patterns. Examples include user interface design patterns,[7] information visualization,[8] secure design,[9] "secure usability",[10] Web design [11] and business model design.[12]
The annual Pattern Languages of Programming Conference proceedings [13] include many examples of domain-specific patterns.

Classification and list[edit]
Design patterns had originally been categorized into 3 sub-classifications based on what kind of problem they solve. Creational patterns provide the capability to create objects based on a required criterion and in a controlled way. Structural patterns are about organizing different classes and objects to form larger structures and provide new functionality. Finally, behavioral patterns are about identifying common communication patterns between objects and realizing these patterns.

Creational patterns[edit]



Name

Description

In Design Patterns

In Code Complete[14]

Other


Abstract factory

Provide an interface for creating families of related or dependent objects without specifying their concrete classes.

Yes

Yes

N/A


Builder

Separate the construction of a complex object from its representation, allowing the same construction process to create various representations.

Yes

No

N/A


Dependency Injection

A class accepts the objects it requires from an injector instead of creating the objects directly.

No

No

N/A


Factory method

Define an interface for creating a single object, but let subclasses decide which class to instantiate. Factory Method lets a class defer instantiation to subclasses.

Yes

Yes

N/A


Lazy initialization

Tactic of delaying the creation of an object, the calculation of a value, or some other expensive process until the first time it is needed. This pattern appears in the GoF catalog as "virtual proxy", an implementation strategy for the Proxy pattern.

No

No

PoEAA[15]


Multiton

Ensure a class has only named instances, and provide a global point of access to them.

No

No

N/A


Object pool

Avoid expensive acquisition and release of resources by recycling objects that are no longer in use. Can be considered a generalisation of connection pool and thread pool patterns.

No

No

N/A


Prototype

Specify the kinds of objects to create using a prototypical instance, and create new objects from the 'skeleton' of an existing object, thus boosting performance and keeping memory footprints to a minimum.

Yes

No

N/A


Resource acquisition is initialization (RAII)

Ensure that resources are properly released by tying them to the lifespan of suitable objects.

No

No

N/A


Singleton

Ensure a class has only one instance, and provide a global point of access to it.

Yes

Yes

N/A

Structural patterns[edit]



Name

Description

In Design Patterns

In Code Complete[14]

Other


Adapter, Wrapper, or Translator

Convert the interface of a class into another interface clients expect. An adapter lets classes work together that could not otherwise because of incompatible interfaces. The enterprise integration pattern equivalent is the translator.

Yes

Yes

N/A


Bridge

Decouple an abstraction from its implementation allowing the two to vary independently.

Yes

Yes

N/A


Composite

Compose objects into tree structures to represent part-whole hierarchies. Composite lets clients treat individual objects and compositions of objects uniformly.

Yes

Yes

N/A


Decorator

Attach additional responsibilities to an object dynamically keeping the same interface. Decorators provide a flexible alternative to subclassing for extending functionality.

Yes

Yes

N/A


Extension object

Adding functionality to a hierarchy without changing the hierarchy.

No

No

Agile Software Development, Principles, Patterns, and Practices[16]


Facade

Provide a unified interface to a set of interfaces in a subsystem. Facade defines a higher-level interface that makes the subsystem easier to use.

Yes

Yes

N/A


Flyweight

Use sharing to support large numbers of similar objects efficiently.

Yes

No

N/A


Front controller

The pattern relates to the design of Web applications. It provides a centralized entry point for handling requests.

No

No


J2EE Patterns[17]
PoEAA[18]



Marker

Empty interface to associate metadata with a class.

No

No

Effective Java[19]


Module

Group several related elements, such as classes, singletons, methods, globally used, into a single conceptual entity.

No

No

N/A


Proxy

Provide a surrogate or placeholder for another object to control access to it.

Yes

No

N/A


Twin[20]

Twin allows modeling of multiple inheritance in programming languages that do not support this feature.

No

No

N/A

Behavioral patterns[edit]



Name

Description

In Design Patterns

In Code Complete[14]

Other


Blackboard

Artificial intelligence pattern for combining disparate sources of data (see blackboard system)

No

No

N/A


Chain of responsibility

Avoid coupling the sender of a request to its receiver by giving more than one object a chance to handle the request. Chain the receiving objects and pass the request along the chain until an object handles it.

Yes

No

N/A


Command

Encapsulate a request as an object, thereby allowing for the parameterization of clients with different requests, and the queuing or logging of requests. It also allows for the support of undoable operations.

Yes

No

N/A


Interpreter

Given a language, define a representation for its grammar along with an interpreter that uses the representation to interpret sentences in the language.

Yes

No

N/A


Iterator

Provide a way to access the elements of an aggregate object sequentially without exposing its underlying representation.

Yes

Yes

N/A


Mediator

Define an object that encapsulates how a set of objects interact. Mediator promotes loose coupling by keeping objects from referring to each other explicitly, and it allows their interaction to vary independently.

Yes

No

N/A


Memento

Without violating encapsulation, capture and externalize an object's internal state allowing the object to be restored to this state later.

Yes

No

N/A


Null object

Avoid null references by providing a default object.

No

No

N/A


Observer or Publish/subscribe

Define a one-to-many dependency between objects where a state change in one object results in all its dependents being notified and updated automatically.

Yes

Yes

N/A


Servant

Define common functionality for a group of classes. The servant pattern is also frequently called helper class or utility class implementation for a given set of classes. The helper classes generally have no objects hence they have all static methods that act upon different kinds of class objects.

No

No

N/A


Specification

Recombinable business logic in a Boolean fashion.

No

No

N/A


State

Allow an object to alter its behavior when its internal state changes. The object will appear to change its class.

Yes

No

N/A


Strategy

Define a family of algorithms, encapsulate each one, and make them interchangeable. Strategy lets the algorithm vary independently from clients that use it.

Yes

Yes

N/A


Template method

Define the skeleton of an algorithm in an operation, deferring some steps to subclasses. Template method lets subclasses redefine certain steps of an algorithm without changing the algorithm's structure.

Yes

Yes

N/A


Visitor

Represent an operation to be performed on instances of a set of classes. Visitor lets a new operation be defined without changing the classes of the elements on which it operates.

Yes

No

N/A

Concurrency patterns[edit]



Name

Description

In POSA2[21]

Other


Active Object

Decouples method execution from method invocation that reside in their own thread of control. The goal is to introduce concurrency, by using asynchronous method invocation and a scheduler for handling requests.

Yes

N/A


Balking

Only execute an action on an object when the object is in a particular state.

No

N/A


Binding properties

Combining multiple observers to force properties in different objects to be synchronized or coordinated in some way.[22]

No

N/A


Compute kernel

The same calculation many times in parallel, differing by integer parameters used with non-branching pointer math into shared arrays, such as GPU-optimized Matrix multiplication or Convolutional neural network.

No

N/A


Double-checked locking

Reduce the overhead of acquiring a lock by first testing the locking criterion (the 'lock hint') in an unsafe manner; only if that succeeds does the actual locking logic proceed.
Can be unsafe when implemented in some language/hardware combinations. It can therefore sometimes be considered an anti-pattern.


Yes

N/A


Event-based asynchronous

Addresses problems with the asynchronous pattern that occur in multithreaded programs.[23]

No

N/A


Guarded suspension

Manages operations that require both a lock to be acquired and a precondition to be satisfied before the operation can be executed.

No

N/A


Join

Join-pattern provides a way to write concurrent, parallel and distributed programs by message passing. Compared to the use of threads and locks, this is a high-level programming model.

No

N/A


Lock

One thread puts a "lock" on a resource, preventing other threads from accessing or modifying it.[24]

No

PoEAA[15]


Messaging design pattern (MDP)

Allows the interchange of information (i.e. messages) between components and applications.

No

N/A


Monitor object

An object whose methods are subject to mutual exclusion, thus preventing multiple objects from erroneously trying to use it at the same time.

Yes

N/A


Reactor

A reactor object provides an asynchronous interface to resources that must be handled synchronously.

Yes

N/A


Read-write lock

Allows concurrent read access to an object, but requires exclusive access for write operations. An underlying semaphore might be used for writing, and a Copy-on-write mechanism may or may not be used.

No

N/A


Scheduler

Explicitly control when threads may execute single-threaded code.

No

N/A


Thread pool

A number of threads are created to perform a number of tasks, which are usually organized in a queue. Typically, there are many more tasks than threads. Can be considered a special case of the object pool pattern.

No

N/A


Thread-specific storage

Static or "global" memory local to a thread.

Yes

N/A


Safe Concurrency with Exclusive Ownership

Avoiding the need for runtime concurrent mechanisms, because exclusive ownership can be proven. This is a notable capability of the Rust language, but compile-time checking isn't the only means, a programmer will often manually design such patterns into code - omitting the use of locking mechanism because the programmer assesses that a given variable is never going to be concurrently accessed.

No

N/A


CPU atomic operation

x86 and other CPU architectures support a range of atomic instructions that guarantee memory safety for modifying and accessing primitive values (integers). For example, two threads may both increment a counter safely. These capabilities can also be used to implement the mechanisms for other concurrency patterns as above. The C# language uses the Interlocked class for these capabilities.

No

N/A

Documentation[edit]
The documentation for a design pattern describes the context in which the pattern is used, the forces within the context that the pattern seeks to resolve, and the suggested solution.[25] There is no single, standard format for documenting design patterns. Rather, a variety of different formats have been used by different pattern authors. However, according to Martin Fowler, certain pattern forms have become more well-known than others, and consequently become common starting points for new pattern-writing efforts.[26] One example of a commonly used documentation format is the one used by Erich Gamma, Richard Helm, Ralph Johnson, and John Vlissides in their book Design Patterns. It contains the following sections:

Pattern Name and Classification: A descriptive and unique name that helps in identifying and referring to the pattern.
Intent: A description of the goal behind the pattern and the reason for using it.
Also Known As: Other names for the pattern.
Motivation (Forces): A scenario consisting of a problem and a context in which this pattern can be used.
Applicability: Situations in which this pattern is usable; the context for the pattern.
Structure: A graphical representation of the pattern. Class diagrams and Interaction diagrams may be used for this purpose.
Participants: A listing of the classes and objects used in the pattern and their roles in the design.
Collaboration: A description of how classes and objects used in the pattern interact with each other.
Consequences: A description of the results, side effects, and trade offs caused by using the pattern.
Implementation: A description of an implementation of the pattern; the solution part of the pattern.
Sample Code: An illustration of how the pattern can be used in a programming language.
Known Uses: Examples of real usages of the pattern.
Related Patterns: Other patterns that have some relationship with the pattern; discussion of the differences between the pattern and similar patterns.
Criticism[edit]
It has been observed that design patterns may just be a sign that some features are missing in a given programming language (Java or C++ for instance). Peter Norvig demonstrates that 16 out of the 23 patterns in the Design Patterns book (which is primarily focused on C++) are simplified or eliminated (via direct language support) in Lisp or Dylan.[27] Related observations were made by Hannemann and Kiczales who implemented several of the 23 design patterns using an aspect-oriented programming language (AspectJ) and showed that code-level dependencies were removed from the implementations of 17 of the 23 design patterns and that aspect-oriented programming could simplify the implementations of design patterns.[28]
See also Paul Graham's essay "Revenge of the Nerds".[29]
Inappropriate use of patterns may unnecessarily increase complexity.[30]

See also[edit]
.mw-parser-output .div-col{margin-top:0.3em;column-width:30em}.mw-parser-output .div-col-small{font-size:90%}.mw-parser-output .div-col-rules{column-rule:1px solid #aaa}.mw-parser-output .div-col dl,.mw-parser-output .div-col ol,.mw-parser-output .div-col ul{margin-top:0}.mw-parser-output .div-col li,.mw-parser-output .div-col dd{page-break-inside:avoid;break-inside:avoid-column}
Abstraction principle
Algorithmic skeleton
Anti-pattern
Architectural pattern
Canonical protocol pattern
Debugging patterns
Design pattern
Distributed design patterns
Double-chance function
Enterprise Architecture framework
GRASP (object-oriented design)
Helper class
Idiom in programming
Interaction design pattern
List of software development philosophies
List of software engineering topics
Pattern language
Pattern theory
Pedagogical patterns
Portland Pattern Repository
Refactoring
Software development methodology

References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ Smith, Reid (October 1987). Panel on design methodology. OOPSLA '87 Addendum to the Proceedings. doi:10.1145/62138.62151. Ward cautioned against requiring too much programming at, what he termed, 'the high level of wizards.' He pointed out that a written 'pattern language' can significantly improve the selection and application of abstractions. He proposed a 'radical shift in the burden of design and implementation' basing the new methodology on an adaptation of Christopher Alexander's work in pattern languages and that programming-oriented pattern languages developed at Tektronix has significantly aided their software development efforts.

^ Beck, Kent; Cunningham, Ward (September 1987). Using Pattern Languages for Object-Oriented Program. OOPSLA '87 workshop on Specification and Design for Object-Oriented Programming. Retrieved 2006-05-26.

^ Baroni, Aline LÃºcia; GuÃ©hÃ©neuc, Yann-GaÃ«l; Albin-Amiot, HervÃ© (June 2003). "Design Patterns Formalization". Nantes: Ãcole Nationale SupÃ©rieure des Techniques Industrielles et des Mines de Nantes. CiteSeerXÂ 10.1.1.62.6466. {{cite journal}}: Cite journal requires |journal= (help)

^ Bishop, Judith. "C# 3.0 Design Patterns: Use the Power of C# 3.0 to Solve Real-World Problems". C# Books from O'Reilly Media. Retrieved 2012-05-15. If you want to speed up the development of your .NET applications, you're ready for C# design patterns -- elegant, accepted and proven ways to tackle common programming problems.

^ Tiako, Pierre F. (31 March 2009). "Formal Modeling and Specification of Design Patterns Using RTPA". Software Applications: Concepts, Methodologies, Tools, and Applications: Concepts, Methodologies, Tools, and Applications. p.Â 636. doi:10.4018/978-1-60566-060-8. ISBNÂ 9781605660615.

^ Meyer, Bertrand; Arnout, Karine (July 2006). "Componentization: The Visitor Example" (PDF). IEEE Computer. 39 (7): 23â30. CiteSeerXÂ 10.1.1.62.6082. doi:10.1109/MC.2006.227. S2CIDÂ 15328522.

^ Laakso, Sari A. (2003-09-16). "Collection of User Interface Design Patterns". University of Helsinki, Dept. of Computer Science. Retrieved 2008-01-31.

^ Heer, J.; Agrawala, M. (2006). "Software Design Patterns for Information Visualization". IEEE Transactions on Visualization and Computer Graphics. 12 (5): 853â60. CiteSeerXÂ 10.1.1.121.4534. doi:10.1109/TVCG.2006.178. PMIDÂ 17080809. S2CIDÂ 11634997.

^ Dougherty, Chad; Sayre, Kirk; Seacord, Robert C.; Svoboda, David; Togashi, Kazuya (2009). Secure Design Patterns (PDF). Software Engineering Institute.

^ Garfinkel, Simson L. (2005). Design Principles and Patterns for Computer Systems That Are Simultaneously Secure and Usable (Ph.D. thesis).

^ "Yahoo! Design Pattern Library". Archived from the original on 2008-02-29. Retrieved 2008-01-31.

^ "How to design your Business Model as a Lean Startup?". 2010-01-06. Retrieved 2010-01-06.

^ Pattern Languages of Programming, Conference proceedings (annual, 1994â) [1]

^ Jump up to: a b c McConnell, Steve (June 2004). "Design in Construction". Code Complete (2ndÂ ed.). Microsoft Press. p.Â 104. ISBNÂ 978-0-7356-1967-8. Table 5.1 Popular Design Patterns

^ Jump up to: a b 
Fowler, Martin (2002). Patterns of Enterprise Application Architecture. Addison-Wesley. ISBNÂ 978-0-321-12742-6.

^ 
C. Martin, Robert (2002). "28. Extension object". Agile Software Development, Principles, Patterns, and Practices. p.Â 408. ISBNÂ 978-0135974445.

^ 
Alur, Deepak; Crupi, John; Malks, Dan (2003). Core J2EE Patterns: Best Practices and Design Strategies. Prentice Hall. p.Â 166. ISBNÂ 978-0-13-142246-9.

^ 
Fowler, Martin (2002). Patterns of Enterprise Application Architecture. Addison-Wesley. p.Â 344. ISBNÂ 978-0-321-12742-6.

^ 
Bloch, Joshua (2008). "Item 37: Use marker interfaces to define types". Effective Java (SecondÂ ed.). Addison-Wesley. p.Â 179. ISBNÂ 978-0-321-35668-0.

^ "Twin â A Design Pattern for Modeling Multiple Inheritance" (PDF).

^ Schmidt, Douglas C.; Stal, Michael; Rohnert, Hans; Buschmann, Frank (2000). Pattern-Oriented Software Architecture, Volume 2: Patterns for Concurrent and Networked Objects. John Wiley & Sons. ISBNÂ 978-0-471-60695-6.

^ Binding Properties

^ Nagel, Christian; Evjen, Bill; Glynn, Jay; Watson, Karli; Skinner, Morgan (2008). "Event-based Asynchronous Pattern". Professional C# 2008. Wiley. pp.Â 570â571. ISBNÂ 978-0-470-19137-8.

^ Lock Pattern

^ Gabriel, Dick. "A Pattern Definition". Archived from the original on 2007-02-09. Retrieved 2007-03-06.

^ Fowler, Martin (2006-08-01). "Writing Software Patterns". Retrieved 2007-03-06.

^ Norvig, Peter (1998). Design Patterns in Dynamic Languages.

^ Hannemann, Jan; Kiczales, Gregor (2002). Design pattern implementation in Java and AspectJ. OOPSLA '02. doi:10.1145/582419.582436.{{cite conference}}:  CS1 maint: location (link)

^ Graham, Paul (2002). "Revenge of the Nerds". Retrieved 2012-08-11.

^ McConnell, Steve (2004). Code Complete: A Practical Handbook of Software Construction, 2nd Edition. p.Â 105.


Further reading[edit]
.mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li{margin-left:0;padding-left:3.2em;text-indent:-3.2em}.mw-parser-output .refbegin-hanging-indents ul,.mw-parser-output .refbegin-hanging-indents ul li{list-style:none}@media(max-width:720px){.mw-parser-output .refbegin-hanging-indents>ul>li{padding-left:1.6em;text-indent:-1.6em}}.mw-parser-output .refbegin-columns{margin-top:0.3em}.mw-parser-output .refbegin-columns ul{margin-top:0}.mw-parser-output .refbegin-columns li{page-break-inside:avoid;break-inside:avoid-column}
Alexander, Christopher; Ishikawa, Sara; Silverstein, Murray; Jacobson, Max; Fiksdahl-King, Ingrid; Angel, Shlomo (1977). A Pattern Language: Towns, Buildings, Construction. New York: Oxford University Press. ISBNÂ 978-0-19-501919-3.
Alur, Deepak; Crupi, John; Malks, Dan (May 2003). Core J2EE Patterns: Best Practices and Design Strategies (2ndÂ ed.). Prentice Hall. ISBNÂ 978-0-13-142246-9.
Beck, Kent (October 2007). Implementation Patterns. Addison-Wesley. ISBNÂ 978-0-321-41309-3.
Beck, Kent; Crocker, R.; Meszaros, G.; Coplien, J. O.; Dominick, L.; Paulisch, F.; Vlissides, J. (March 1996). Proceedings of the 18th International Conference on Software Engineering. pp.Â 25â30.
Borchers, Jan (2001). A Pattern Approach to Interaction Design. John Wiley & Sons. ISBNÂ 978-0-471-49828-5.
Coplien, James O.; Schmidt, Douglas C. (1995). Pattern Languages of Program Design. Addison-Wesley. ISBNÂ 978-0-201-60734-5.
Coplien, James O.; Vlissides, John M.; Kerth, Norman L. (1996). Pattern Languages of Program Design 2. Addison-Wesley. ISBNÂ 978-0-201-89527-8.
Eloranta, Veli-Pekka; Koskinen, Johannes; LeppÃ¤nen, Marko; Reijonen, Ville (2014). Designing Distributed Control Systems: A Pattern Language Approach. Wiley. ISBNÂ 978-1118694152.
Fowler, Martin (1997). Analysis Patterns: Reusable Object Models. Addison-Wesley. ISBNÂ 978-0-201-89542-1.
Fowler, Martin (2003). Patterns of Enterprise Application Architecture. Addison-Wesley. ISBNÂ 978-0-321-12742-6.
Freeman, Eric; Freeman, Elisabeth; Sierra, Kathy; Bates, Bert (2004). Head First Design Patterns. O'Reilly Media. ISBNÂ 978-0-596-00712-6.
Hohmann, Luke; Fowler, Martin; Kawasaki, Guy (2003). Beyond Software Architecture. Addison-Wesley. ISBNÂ 978-0-201-77594-5.
Gabriel, Richard (1996). Patterns of Software: Tales From The Software Community (PDF). Oxford University Press. p.Â 235. ISBNÂ 978-0-19-512123-0. Archived from the original (PDF) on 2003-08-01.
Gamma, Erich; Helm, Richard; Johnson, Ralph; Vlissides, John (1995). Design Patterns: Elements of Reusable Object-Oriented Software. Addison-Wesley. ISBNÂ 978-0-201-63361-0.
Hohpe, Gregor; Woolf, Bobby (2003). Enterprise Integration Patterns: Designing, Building, and Deploying Messaging Solutions. Addison-Wesley. ISBNÂ 978-0-321-20068-6.
Holub, Allen (2004). Holub on Patterns. Apress. ISBNÂ 978-1-59059-388-2.
Kircher, Michael; VÃ¶lter, Markus; Zdun, Uwe (2005). Remoting Patterns: Foundations of Enterprise, Internet and Realtime Distributed Object Middleware. John Wiley & Sons. ISBNÂ 978-0-470-85662-8.
Larman, Craig (2005). Applying UML and Patterns. Prentice Hall. ISBNÂ 978-0-13-148906-6.
Liskov, Barbara; Guttag, John (2000). Program Development in Java: Abstraction, Specification, and Object-Oriented Design. Addison-Wesley. ISBNÂ 978-0-201-65768-5.
Manolescu, Dragos; Voelter, Markus; Noble, James (2006). Pattern Languages of Program Design 5. Addison-Wesley. ISBNÂ 978-0-321-32194-7.
Marinescu, Floyd (2002). EJB Design Patterns: Advanced Patterns, Processes and Idioms. John Wiley & Sons. ISBNÂ 978-0-471-20831-0.
Martin, Robert Cecil; Riehle, Dirk; Buschmann, Frank (1997). Pattern Languages of Program Design 3. Addison-Wesley. ISBNÂ 978-0-201-31011-5.
Mattson, Timothy G; Sanders, Beverly A.; Massingill, Berna L. (2005). Patterns for Parallel Programming. Addison-Wesley. ISBNÂ 978-0-321-22811-6.
Shalloway, Alan; Trott, James R. (2001). Design Patterns Explained, Second Edition: A New Perspective on Object-Oriented Design. Addison-Wesley. ISBNÂ 978-0-321-24714-8.
Vlissides, John M. (1998). Pattern Hatching: Design Patterns Applied. Addison-Wesley. ISBNÂ 978-0-201-43293-0.
Weir, Charles; Noble, James (2000). Small Memory Software: Patterns for systems with limited memory. Addison-Wesley. ISBNÂ 978-0-201-59607-6. Archived from the original on 2007-06-17.

.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteSoftware design patternsGang of FourpatternsCreational
Abstract factory
Builder
Factory method
Prototype
Singleton
Structural
Adapter
Bridge
Composite
Decorator
Facade
Flyweight
Proxy
Behavioral
Chain of responsibility
Command
Interpreter
Iterator
Mediator
Memento
Observer
State
Strategy
Template method
Visitor
Concurrencypatterns
Active object
Balking
Binding properties
Double-checked locking
Event-based asynchronous
Guarded suspension
Join
Lock
Monitor
Proactor
Reactor
Read write lock
Scheduler
Thread pool
Thread-local storage
Architecturalpatterns
Front controller
Interceptor
MVC
ADR
ECS
n-tier
Specification
Publishâsubscribe
Naked objects
Service locator
Active record
Identity map
Data access object
Data transfer object
Inversion of control
Model 2
Otherpatterns
Blackboard
Business delegate
Composite entity
Dependency injection
Intercepting filter
Lazy loading
Mock object
Null object
Object pool
Servant
Twin
Type tunnel
Method chaining
Delegation
Books
Design Patterns
Enterprise Integration Patterns
People
Christopher Alexander
Erich Gamma
Ralph Johnson
John Vlissides
Grady Booch
Kent Beck
Ward Cunningham
Martin Fowler
Robert Martin
Jim Coplien
Douglas Schmidt
Linda Rising
Communities
The Hillside Group
The Portland Pattern Repository

Authority control General
Integrated Authority File (Germany)
National libraries
United States





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Software_design_pattern&oldid=1057854592"
		Categories: Software design patternsSoftware developmentHidden categories: CS1 errors: missing periodicalCS1 maint: locationArticles with short descriptionShort description is different from WikidataAll articles with unsourced statementsArticles with unsourced statements from August 2014Articles with GND identifiersArticles with LCCN identifiers
	
