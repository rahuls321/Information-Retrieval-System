
		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Apparatus used in hardware testing that carries out a series of tests automatically
Automatic test equipment or automated test equipment (ATE) is any apparatus that performs tests on a device, known as the device under test (DUT), equipment under test (EUT) or unit under test (UUT), using automation to quickly perform measurements and evaluate the test results. An ATE can be a simple computer-controlled digital multimeter, or a complicated system containing dozens of complex test instruments (real or simulated electronic test equipment) capable of automatically testing and diagnosing faults in sophisticated electronic packaged parts or on wafer testing, including system on chips and integrated circuits. 

  Keithley Instruments Series 4200 CVU
Contents

1 Where it is used

1.1 In the semiconductor industry


2 Components

2.1 Industrial PC
2.2 Mass interconnect
2.3 Example: Simple voltage measurement
2.4 Test parameter requirements vs test time


3 Handler or prober and device test adapter

3.1 Packaged part ATE with handlers
3.2 Silicon wafer ATE with probers
3.3 Multi-site


4 Programming ATE
5 Test data (STDF)
6 Diagnostics
7 Test equipment switching
8 Test equipment platforms

8.1 GPIB/IEEE-488
8.2 LAN eXtensions for Instrumentation (LXI)
8.3 VME eXtensions for Instrumentation (VXI)
8.4 PCI eXtensions for Instrumentation (PXI)
8.5 Universal Serial Bus (USB)
8.6 RS-232
8.7 JTAG/Boundary-scan IEEE Std 1149.1
8.8 Test script processors and a channel expansion bus


9 See also
10 References
11 External links



Where it is used[edit]
ATE is widely used in the electronic manufacturing industry to test electronic components and systems after being fabricated. ATE is also used to test avionics and the electronic modules in automobiles. It is used in military applications like radar and wireless communication.

In the semiconductor industry[edit]
Semiconductor ATE, named for testing semiconductor devices, can test a wide range of electronic devices and systems, from simple components (resistors, capacitors, and inductors) to integrated circuits (ICs), printed circuit boards (PCBs), and complex, completely assembled electronic systems. For this purpose, probe cards are used. ATE systems are designed to reduce the amount of test time needed to verify that a particular device works or to quickly find its faults before the part has a chance to be used in a final consumer product. To reduce manufacturing costs and improve yield, semiconductor devices should be tested after being fabricated to prevent defective devices ending up with the consumer.

Components[edit]
The semiconductor ATE architecture consists of master controller (usually a computer) that synchronizes one or more source and capture instruments (listed below). Historically, custom-designed controllers or relays were used by ATE systems. The Device Under Test (DUT) is physically connected to the ATE by another robotic machine called a handler or prober and through a customized Interface Test Adapter (ITA) or "fixture" that adapts the ATE's resources to the DUT.

Industrial PC[edit]
The industrial PC is nothing but a normal desktop computer packaged in 19-inch rack standards with sufficient PCI / PCIe slots for accommodating the Signal stimulator/sensing cards. This takes up the role of a controller in the ATE. Development of test applications and result storage is managed in this PC. Most modern semiconductor ATEs include multiple computer-controlled instruments to source or measure a wide range of parameters. The instruments may include device power supplies (DPS),[1][2] parametric measurement units (PMU), arbitrary waveform generators (AWG), digitizers, digital IOs, and utility supplies. The instruments  perform different measurements on the DUT, and the instruments are synchronized so that they source and measure waveforms at the proper times. Based on the requirement of response-time, real-time systems are also considered for stimulation and signal capturing.

Mass interconnect[edit]
The mass interconnect is a connector interface between test instruments (PXI, VXI, LXI, GPIB, SCXI, & PCI) and devices/units under test (D/UUT). This section acts as a nodal point for signals going in/out between ATE and D/UUT.

Example: Simple voltage measurement[edit]
For example, to measure a voltage of a particular semiconductor device, the Digital Signal Processing (DSP) instruments in the ATE measure the voltage directly and send the results to a computer for signal processing, where the desired value is computed. This example shows that conventional instruments, like an Ammeter, may not be used in many ATEs due to the limited number of measurements the instrument could make, and the time it would take to use the instruments to make the measurement. One key advantage to using DSP to measure the parameters is time. If we have to calculate the peak voltage of an electrical signal and other parameters of the signal, then we have to employ a peak detector instrument as well as other instruments to test the other parameters. If DSP-based instruments are used, however, then a sample of the signal is made and the other parameters can be computed from the single measurement.

Test parameter requirements vs test time[edit]
Not all devices are tested equally. Testing adds costs, so low-cost components are rarely tested completely, whereas medical or high costs components (where reliability is important) are frequently tested.
But testing the device for all parameters may or may not be required depending on the device functionality and end user. For example, if the device finds application in medical or life-saving products then many of its parameters must be tested, and some of the parameters must be guaranteed. But deciding on the parameters to be tested is a complex decision based on cost vs yield. If the device is a complex digital device, with thousands of gates, then test fault coverage has to be calculated. Here again, the decision is complex based on test economics, based on frequency, number and type of I/Os in the device and the end-use application...

Handler or prober and device test adapter[edit]
ATE can be used on packaged parts (typical IC 'chip') or directly on the Silicon Wafer. Packaged parts use a handler to place the device on a customized interface board, whereas silicon wafers are tested directly with high precision probes. The ATE systems interact with the handler or prober to test the DUT.

Packaged part ATE with handlers[edit]
ATE systems typically interface with an automated placement tool, called a "handler", that physically places the Device Under Test (DUT) on an Interface Test Adapter (ITA) so that it can be measured by the equipment. There may also be an Interface Test Adapter (ITA), a device just making electronic connections between the ATE and the Device Under Test (also called Unit Under Test or UUT), but also it might contain an additional circuitry to adapt signals between the ATE and the DUT and has physical facilities to mount the DUT. Finally, a socket is used to bridge the connection between the ITA and the DUT. A socket must survive the rigorous demands of a production floor, so they are usually replaced frequently.
Simple electrical interface diagram: ATE → ITA → DUT (package) ← Handler

Silicon wafer ATE with probers[edit]
Wafer-based ATEs typically use a device called a Prober that moves across a silicon wafer to test the device.
Simple electrical interface diagram: ATE → Prober → Wafer (DUT)

Multi-site[edit]
One way to improve test time is to test multiple devices at once. ATE systems can now support having multiple "sites" where the ATE resources are shared by each site. Some resources can be used in parallel, others must be serialized to each DUT.

Programming ATE[edit]
The ATE computer uses modern computer languages (like C, C++, Java, Python, LabVIEW or Smalltalk) with additional statements to control the ATE equipment through standard and proprietary application programming interfaces (API). Also some dedicated computer languages exists, like Abbreviated Test Language for All Systems (ATLAS). Automatic test equipment can also be automated using a test execution engine such as NI's TestStand.[3]
Sometimes automatic test pattern generation is used to help design the series of tests.

Test data (STDF)[edit]
Many ATE platforms used in the semiconductor industry output data using Standard Test Data Format (STDF)

Diagnostics[edit]
Automatic test equipment diagnostics is the part of an ATE test that determines the faulty components. ATE tests perform two basic functions. The first is to test whether or not the Device Under Test is working correctly. The second is when the DUT is not working correctly, to diagnose the reason. The diagnostic portion can be the most difficult and costly portion of the test. It is typical for ATE to reduce a failure to a cluster or ambiguity group of components. One method to help reduce these ambiguity groups is the addition of analog signature analysis testing to the ATE system. Diagnostics are often aided by the use of flying probe testing.

Test equipment switching[edit]
The addition of a high-speed switching system to a test system's configuration allows for faster, more cost-effective testing of multiple devices, and is designed to reduce both test errors and costs. Designing a test system's switching configuration requires an understanding of the signals to be switched and the tests to be performed, as well as the switching hardware form factors available.

Test equipment platforms[edit]
Several modular electronic instrumentation platforms are currently in common use for configuring automated electronic test and measurement systems. These systems are widely employed for incoming inspection, quality assurance, and production testing of electronic devices and subassemblies. Industry-standard communication interfaces link signal sources with measurement instruments in "rack-and-stack" or chassis-/mainframe-based systems, often under the control of a custom software application running on an external PC.

GPIB/IEEE-488[edit]
The General Purpose Interface Bus (GPIB) is an IEEE-488 (a standard created by the Institute of Electrical and Electronics Engineers) standard parallel interface used for attaching sensors and programmable instruments to a computer. GPIB is a digital 8-bit parallel communications interface capable of achieving data transfers of more than 8 Mbytes/s. It allows daisy-chaining up to 14 instruments to a system controller using a 24-pin connector. It is one of the most common I/O interfaces present in instruments and is designed specifically for instrument control applications. The IEEE-488 specifications standardized this bus and defined its electrical, mechanical, and functional specifications, while also defining its basic software communication rules. GPIB works best for applications in industrial settings that require a rugged connection for instrument control.
The original GPIB standard was developed in the late 1960s by Hewlett-Packard to connect and control the programmable instruments the company manufactured. The introduction of digital controllers and programmable test equipment created a need for a standard, high-speed interface for communication between instruments and controllers from various vendors. In 1975, the IEEE published ANSI/IEEE Standard 488-1975, IEEE Standard Digital Interface for Programmable Instrumentation, which contained the electrical, mechanical, and functional specifications of an interfacing system. This standard was subsequently revised in 1978 (IEEE-488.1) and 1990 (IEEE-488.2). The IEEE 488.2 specification includes the Standard Commands for Programmable Instrumentation (SCPI), which define specific commands that each instrument class must obey. SCPI ensures compatibility and configurability among these instruments.
The IEEE-488 bus has long been popular because it is simple to use and takes advantage of a large selection of programmable instruments and stimuli. Large systems, however, have the following limitations:

Driver fanout capacity limits the system to 14 devices plus a controller.
Cable length limits the controller-device distance to two meters per device or 20 meters total, whichever is less. This imposes transmission problems on systems spread out in a room or on systems that require remote measurements.
Primary addresses limit the system to 30 devices with primary addresses. Modern instruments rarely use secondary addresses so this puts a 30-device limit on system size.[4]
LAN eXtensions for Instrumentation (LXI)[edit]
The LXI Standard defines the communication protocols for instrumentation and data acquisition systems using Ethernet. These systems are based on small, modular instruments, using low-cost, open-standard LAN (Ethernet). LXI-compliant instruments offer the size and integration advantages of modular instruments without the cost and form factor constraints of card-cage architectures. Through the use of Ethernet communications, the LXI Standard allows for flexible packaging, high-speed I/O, and standardized use of LAN connectivity in a broad range of commercial, industrial, aerospace, and military applications. Every LXI-compliant instrument includes an Interchangeable Virtual Instrument (IVI) driver to simplify communication with non-LXI instruments, so LXI-compliant devices can communicate with devices that are not themselves LXI compliant (i.e., instruments that employ GPIB, VXI, PXI, etc.). This simplifies building and operating hybrid configurations of instruments.
LXI instruments sometimes employ scripting using embedded test script processors for configuring test and measurement applications. Script-based instruments provide architectural flexibility, improved performance, and lower cost for many applications. Scripting enhances the benefits of LXI instruments, and LXI offers features that both enable and enhance scripting. Although the current LXI standards for instrumentation do not require that instruments be programmable or implement scripting, several features in the LXI specification anticipate programmable instruments and provide useful functionality that enhances scripting's capabilities on LXI-compliant instruments.[5]

VME eXtensions for Instrumentation (VXI)[edit]
The VXI bus architecture is an open standard platform for automated test based on the VMEbus. Introduced in 1987, VXI uses all Eurocard form factors and adds trigger lines, a local bus, and other functions suited for measurement applications. VXI systems are based on a mainframe or chassis with up to 13 slots into which various VXI instrument modules can be installed.[6] The chassis also provides all the power supply and cooling requirements for the chassis and the instruments it contains. VXI bus modules are typically 6U in height.

PCI eXtensions for Instrumentation (PXI)[edit]
PXI is a peripheral bus specialized for data acquisition and real-time control systems. Introduced in 1997, PXI uses the CompactPCI 3U and 6U form factors and adds trigger lines, a local bus, and other functions suited for measurement applications. PXI hardware and software specifications are developed and maintained by the PXI Systems Alliance.[7] More than 50 manufacturers around the world produce PXI hardware.[8]

Universal Serial Bus (USB)[edit]
The USB connects peripheral devices, such as keyboards and mice, to PCs. The USB is a Plug and Play bus that can handle up to 127 devices on one port, and has a theoretical maximum throughput of 480 Mbit/s (high-speed USB defined by the USB 2.0 specification). Because USB ports are standard features of PCs, they are a natural evolution of conventional serial port technology. However, it is not widely used in building industrial test and measurement systems for a number of reasons; for example, USB cables are not industrial grade, are noise sensitive, can accidentally become detached, and the maximum distance between the controller and the device is 30 m. Like RS-232, USB is useful for applications in a laboratory setting that do not require a rugged bus connection.

RS-232[edit]
RS-232 is a specification for serial communication that is popular in analytical and scientific instruments, as well for controlling peripherals such as printers. Unlike GPIB, with the RS-232 interface, it is possible to connect and control only one device at a time. RS-232 is also a relatively slow interface with typical data rates of less than 20 kbytes/s. RS-232 is best suited for laboratory applications compatible with a slower, less rugged connection. It works on a ±24 Volts supply

JTAG/Boundary-scan IEEE Std 1149.1[edit]
JTAG/Boundary-scan can be implemented as a PCB-level or system-level interface bus for the purpose of controlling the pins of an IC and facilitating continuity (interconnection) tests on a test target (UUT) and also functional cluster tests on logic devices or groups of devices. It can also be used as a controlling interface for other instrumentation that can be embedded into the ICs themselves (see IEEE 1687) or instruments that are part of an external controllable test system.

Test script processors and a channel expansion bus[edit]
One of the most recently developed test system platforms employs instrumentation equipped with onboard test script processors combined with a high-speed bus. In this approach, one "master" instrument runs a test script (a small program) that controls the operation of the various "slave" instruments in the test system, to which it is linked via a high-speed LAN-based trigger synchronization and inter-unit communication bus. Scripting is writing programs in a scripting language to coordinate a sequence of actions.
This approach is optimized for small message transfers that are characteristic of test and measurement applications. With very little network overhead and a 100Mbit/sec data rate, it is significantly faster than GPIB and 100BaseT Ethernet in real applications.
The advantage of this platform is that all connected instruments behave as one tightly integrated multi-channel system, so users can scale their test system to fit their required channel counts cost-effectively. A system configured on this type of platform can stand alone as a complete measurement and automation solution, with the master unit controlling sourcing, measuring, pass/fail decisions, test sequence flow control, binning, and the component handler or prober. Support for dedicated trigger lines means that synchronous operations between multiple instruments equipped with onboard Test Script Processors that are linked by this high speed bus can be achieved without the need for additional trigger connections.[9]

See also[edit]
.mw-parser-output .div-col{margin-top:0.3em;column-width:30em}.mw-parser-output .div-col-small{font-size:90%}.mw-parser-output .div-col-rules{column-rule:1px solid #aaa}.mw-parser-output .div-col dl,.mw-parser-output .div-col ol,.mw-parser-output .div-col ul{margin-top:0}.mw-parser-output .div-col li,.mw-parser-output .div-col dd{page-break-inside:avoid;break-inside:avoid-column}
Electronic test equipment
GPIB / IEEE-488
LAN eXtensions for Instrumentation
M-Module
PXI
Test automation (testing of software)
Test execution engine (software for testing)
VMEbus
VXI

References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Jose Moreira, Hubert Werkmann (2010). An Engineer's Guide to Automated Testing of High-Speed Interfaces. Artech House. ISBN 9781607839842. Retrieved 2015-10-12.

^ Mark Baker (3 June 2003). Demystifying Mixed Signal Test Methods. Elsevier. ISBN 9780080491066. Retrieved 2015-10-12.

^ "What is TestStand?". National Instruments.

^ ICS Electronics. Extending the GPIB Bus Retrieved December 29, 2009.

^ Franklin, Paul and Todd A. Hayes. LXI Connection.Benefits of LXI and Scripting. July 2008. Retrieved January 5, 2010.

^ Hardware Mechanical Components VXI Chassis and Case Manufacturers. Retrieved December 30, 2009.

^ PXI Systems Alliance. Specifications. Retrieved December 30, 2009.

^ PXI Systems Alliance. Member Roster Archived 2010-09-05 at the Wayback Machine Retrieved December 30, 2009.

^ Cigoy, Dale. R&D Magazine.Smart Instruments Keep Up With Changing RD Needs Retrieved January 4, 2009.


External links[edit]
System Integration of an Open-Architecture Test System by Yuhai Ma, Advantest America Inc. (July 2006)
ATE automatic testing basics.
Impact of Cable Losses – application note defines and details the sources for cable loss in automatic tester systems (ATE).
GPIB 101A Tutorial About the GPIB Bus ICS Electronics (retrieved December 29, 2009).
List of books covering automatic test systems and applications (retrieved July 20, 2011).




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Automatic_test_equipment&oldid=1022013757"
		Categories: Automatic test equipmentHardware testingElectronic test equipmentNondestructive testingHidden categories: Webarchive template wayback linksArticles with short descriptionShort description is different from WikidataAC with 0 elements
	