
Title:
Haxe
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}Not to be confused with Hack (programming language).
Cross-platform programming language
.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}HaxeParadigmMulti-paradigmDeveloperHaxe FoundationFirstÂ appeared2006; 16Â years agoÂ (2006)Stable release4.2.4[1]Â 
   / 22 October 2021; 3 months agoÂ (22 October 2021)
Typing disciplineStatic, dynamic via annotations, nominalImplementation languageOCamlPlatformIA-32, x86-64, AArch64, armel, armhf, mips, mips64el, mipsel, ppc64el, s390xOSAndroid, iOS; Linux, macOS, WindowsLicenseGPL 2.0, library: MITFilename extensions.hx, .hxmlWebsitehaxe.org Influenced byEcmaScript, OCaml, Java, JavaScript, C++, PHP, C#, Python, Lua, ActionScript, NekoVM
Haxe is an open source[2] high-level cross-platform programming language and compiler that can produce applications and source code, for many different computing platforms from one code-base. It is free and open-source software, released under the MIT License. The compiler, written in OCaml, is released under the GNU General Public License (GPL) version 2.
Haxe includes a set of features and a standard library[3] supported across all platforms, like numeric data types, strings, arrays, maps, binary, reflection, math, HTTP, file system and common file formats. Haxe also includes platform-specific API's for each compiler target.[4] Kha, OpenFL and Heaps.io are popular Haxe frameworks that enable creating multi-platform content from one codebase.[5]
Haxe originated[6] with the idea of supporting client-side and server-side programming in one language, and simplifying the communication logic between them. Code written in the Haxe language can be compiled into JavaScript, C++, Java, PHP, C#, Python, Lua[7] and Node.js.[8] Haxe can also directly compile SWF, HashLink and NekoVM bytecode and also runs in interpreted mode.[9]
Haxe supports externs (definition files) that can contain type information of existing libraries to describe target-specific interaction in a type-safe manner, like C++ header files can describe the structure of existing object files. This enables to use the values defined in the files as if they were statically typed Haxe entities. Beside externs, other solutions exist to access each platform's native capabilities.
Many popular IDEs and source code editors have support available for Haxe development.[10] No particular development environment or tool set is officially recommended by the Haxe Foundation, although VS Code, IntelliJ IDEA and HaxeDevelop have most support for Haxe development. The core functionalities of syntax highlighting, code completion, refactoring, debugging, etc. are available to various degrees.

Contents

1 History
2 Compiler

2.1 Targets
2.2 Advantages of Haxe


3 Language

3.1 Type system
3.2 Modules and namespaces
3.3 Classes
3.4 Generics
3.5 Enumerated types
3.6 Anonymous types
3.7 Function types
3.8 Abstract types
3.9 Structural typing


4 Internal architecture

4.1 Compiler


5 See also
6 References
7 External links



History[edit]
Development of Haxe began in October 2005. The first beta version was released in February 2006. Haxe 1.0 was released in April 2006, with support for Adobe Flash, JavaScript, and NekoVM programs. Support for PHP was added in 2008, and C++ was added in 2009. More platforms such as C# and Java were added with a compiler overhaul in 2012.
Haxe was developed by Nicolas Cannasse and other contributors, and was originally named haXe[11] because it was short, simple, and "has an X inside", which the author asserts humorously is needed to make any new technology a success.[12]
Haxe is the successor to the open-source ActionScript 2 compiler MTASC,[13] also built by Nicolas Cannasse and is released under the GNU General Public License version 2 or later.

Compiler[edit]
The Haxe language can compile into bytecode that can be executed directly by the virtual machines it targets. It can compile to source code in C++, JavaScript, PHP, C#, Java, Python and Lua. Haxe also has an interpreter called eval.[14] This same interpreter is also used compile-time to run macros, which allow modification of the AST.
This strategy of compiling to multiple source code languages is inspired by the write once, run anywhere paradigm. It also allows the programmer to choose the best platform for the job. Typical Haxe programs run identically on all platforms, but developers can specify platform-specific code and use conditional compilation to prevent it from compiling on other platforms.
The Haxe compiler is an optimizing compiler, and uses field and function inlining, tail recursion elimination, constant folding, loop unrolling and dead code elimination (DCE) to optimize the run-time performance of compiled programs.[15] The Haxe compiler offers opt-in null-safety, it checks compile-time for nullable values.

Targets[edit]
In Haxe, supported platforms are known as "targets", which consist of the following modules:

The compiler-backends that are responsible for generating the respective code.
The run-time specific APIs that go beyond the core language support (platform-targets).
The following table documents platform and language support in Haxe. The Haxe language allows developers to gain access to many platform features, but Haxe is not a full featured engine, they might need frameworks that enable create content for certain platforms.


Haxe Compiler Targets[9]


Name

Tier

Output

Platform

Use

Since Haxe version


Flash/SWF

3

byte code

Flash: AVM2, Flash Player 9+, AIR

Desktop, browser, server

2005 (alpha)


Neko

3

byte code

NekoVM

Server, desktop, CLI

2005 (alpha)


JavaScript

1

source

JavaScript: HTML5, NodeJS, PhoneGap

Server, desktop, browser, mobile

2006 (beta)


ActionScript

â

source

ActionScript 3: AIR, Flex, Royale

Server, desktop, browser, mobile

2007 (1.12), removed since 2019 (4.0)


PHP

1

source

PHP: Zend Engine

Server

2008 (2.0) PHP 5; PHP 7 since 2019 (4.0)


C++

2

source

C++: Windows, Linux, macOS, Android, iOS, Palm, WebOS

Server, desktop, Mobile, CLI, game consoles

2009 (2.04); cppia added in 2014 (3.2)


C#

3

source

C#: .NET Framework, .NET Core, Mono

Server, desktop, mobile

2012 (2.10)


Java

3

source

Java: Java OpenJDK

Server, desktop

2012 (2.10)


Python

3

source

Python

CLI, web, desktop

2014 (3.2)


Lua

2

source

Lua

CLI, web, desktop, mobile

2016 (3.3)


HashLink

1

byte code

HashLink VM or HL/C (compile to C file)

Server, desktop, mobile, game consoles (C export)

2016 (3.4)


JVM

1

bytecode

JVM: HotSpot, OpenJ9

Server, desktop

2019 (4.0)


Eval

1

interpreter

Haxe interpreter

Prototyping, scripting

2019 (4.0)

Advantages of Haxe[edit]
Ability to target multiple platforms and devices using the same language
Ability to use strictly-typed code
Ability to use macros (syntax transformation) which can be done with Haxe language[16]
Added language features such as extension methods and functional programming
The run-time performance of Haxe programs is at comparable speed to handwritten sources.[17]
Language[edit]
Haxe is a general-purpose language supporting object-oriented programming, generic programming, and various functional programming constructs. Features such as iterations, exceptions, and code reflection are also built-in functions of the language and libraries. Unusual among programming languages, Haxe contains a type system which is both strong and dynamic. The compiler will check types implicitly using type inferencing and give compile-time errors, but it also enables the programmer to bypass type-checking and rely on the target platform's dynamic type-handling. All of the native target APIs can be used.

Type system[edit]
Haxe has a sophisticated and flexible type system. The type kinds it offers are classes, interfaces, function-method types, anonymous types, algebraic data types (called enum in Haxe), and abstract types. Parametric polymorphism is possible with classes, algebraic types and function types, giving the language support for generic programming based on type erasure. This includes support for variance in polymorphic functions, although not in type constructors.
The type system is static unless annotations for dynamic typing are present, for use with targets that support them. Type checking follows nominal typing with the exception of anonymous types where structural typing is used instead. Finally, type inference is supported, allowing for variable declarations without type annotations.

Modules and namespaces[edit]
All Haxe code is organized in modules, which are addressed using paths. In essence, each .hx file represents a module which may contain several types. For example, to create the type A in the package my.pack as shown, the folder structure should be my\pack and the file could be A.hx in the folder pack.

 // file my/pack/A.hx
package my.pack;

class A {}

In other modules, other types can be imported by putting import statements below the package definition, e.g. import my.pack.A;
A module can contain multiple types, such as the following. It is possible to import one type at a time from that module, using import my.pack2.A;. A type may be private, in which case only its containing module can access it.

package my.pack2;

typedef A = {a:String}
private typedef B = {b:String}

Classes[edit]
Classes (keyword class) in Haxe are similar to those in Java or TypeScript. Their fields can be either methods, variables, or properties, each static or per instance respectively. Haxe supports the accessors public and private, and more advanced methods for access control that are denoted using annotations. Methods and static constant variables can be inlined using the keyword inline. Fields can be marked as final to declare a constant that must be initialized immediately or in the constructor and cannot be written to, in case of function final will mark as non-overridable in subclasses.
Interfaces in Haxe are very similar to those in, for example, Java.

interface ICreature {
    public var birth:Date;
    public var name:String;

    public function age():Int;
}

class Fly implements ICreature {
    public var birth:Date;
    public var name:String;
	
    public function age():Int return Date.now().getFullYear() - birth.getFullYear();
}

Generics[edit]
Haxe supports generic programming. The following is an example of the identity function.

function identity<T>(arg:T):T {
	return arg;
}

Enumerated types[edit]
Enumerated types are an important feature of the language; they can have type parameters and be recursive.[18] They provide basic support for algebraic data types, allowing the inclusion of product types, in a fashion similar to Haskell and ML. A switch expression can apply pattern matching to an enum value, allowing for elegant solutions to complex programming problems:

enum Color {
	red;
	green;
	blue;
	rgb(r:Int, g:Int, b:Int);
}

class Colors {
	static function toInt(c:Color):Int {
		return switch c {
			case red: 0xFF0000;
			case green: 0x00FF00;
			case blue: 0x0000FF;
			case rgb(r, g, b): (r << 16) | (g << 8) | b;
		}
	}

	static function validCalls() {
		var redint = toInt(Color.red);
		var rgbint = toInt(Color.rgb(100, 100, 100));
	}
}

Examples of parametric enum types are the Haxe standard library types Option[19] and Either:[20]

enum Option<T> {
    Some(v:T);
    None;
}

enum Either<L, R> {
    Left(v:L);
    Right(v:R);
}

Haxe also supports generalized algebraic data types (GADTs).[21][22]

Anonymous types[edit]
Anonymous types are defined by denoting their structure explicitly, using a syntax that follows the mathematical record-based representation of a type. They can be used to implement structural typing for function arguments (see below), and can be given an alias with the keyword typedef:

typedef AliasForAnon = { a:Int, b:String, c:Float->Void };

Function types[edit]
Functions are first-class values in Haxe. Their type is denoted by using arrows between argument types, and between the argument type(s) and return type, as common in many functional languages. However, unlike in prominent examples like Haskell or the ML language family, not all functions are unary functions (functions with one argument only), and in Haxe, functions can't be partially applied per default. Thus, the following type signatures have different semantics than in the aforementioned languages. The type F1 is a function that takes a String as arguments and returns a value of type Float.
Types F1 andF2 denote the same type, except that F2 uses labelled parameter, which is useful for completion and documentation purposes.
Types F4 and F5 denote the same type. Both are binary functions that return a binary function of type F3. For F5 the syntax to declare a function type within a function type is used.

typedef F1 = String -> Float;
typedef F2 = (text:String) -> Float;

typedef F3 = (score:Int, text:String) -> Float;
typedef F4 = (score:Int, text:String) -> F3;
typedef F5 = (score:Int, text:String) -> ((score:Int, text:String) -> Float);

Abstract types[edit]
The latest addition to the Haxe type system is a concept termed abstract types. As used in Haxe, this refers to something different from a conventional abstract type. They are used to make conversions between types implicit, allowing reuse of existing types for specific purposes, like implementing types for units of measurement. This greatly reduces the risk of mixing up values of the same underlying type, but with different meanings (e.g., miles vs. km).
The following example assumes that the metric system is the default, while a conversion to miles is needed for legacy data. Haxe can automatically convert miles to kilometers, but not the reverse.

abstract Kilometer(Float) {
    public function new(v:Float) this = v;
}
 
abstract Mile(Float) {
    public function new(v:Float) this = v;
    @:to public inline function toKilometer():Kilometer return (new Kilometer (this / 0.62137));
}
 
class Test {
  static var km:Kilometer;
  static function main(){
    var one100Miles = new Mile(100);
    km = one100Miles;
 
    trace(km); // 160.935
  }
}

As the example shows, no explicit conversion is needed for the assignment "km = one100Miles;" to do the right thing.

Structural typing[edit]
In many functional programming languages, structural typing plays a major role. Haxe employs it in the presence of anonymous types, using the nominative typing of object-oriented programming, when only named types are involved. Anonymous types in Haxe are analogous to the implicit interfaces of the language Go as to typing. In contrast with Go interfaces, it is possible to construct a value using an anonymous type.

class FooBar {
	public var foo:Int;
	public var bar:String;

	public function new() {
		foo = 1;
		bar = "2";
	}

	function anyFooBar(v:{foo:Int, bar:String})
		trace(v.foo);

	static function test() {
		var fb = new FooBar();
		fb.anyFooBar(fb);
		fb.anyFooBar({foo: 123, bar: "456"});
	}
}

Internal architecture[edit]
.mw-parser-output .vanchor>:target~.vanchor-text{background-color:#b1d2ff}Compiler[edit]
The Haxe compiler is divided into one frontend and multiple backends. The frontend creates an abstract syntax tree (AST) from the source code, and performs type checking, macro expansion, and optimization on the AST. The various backends translate the processed AST into source code or generate bytecode, depending on their target.
The compiler is written in OCaml. It can be run in server-mode to provide code completion for integrated development environments (IDEs) and maintain a cache, to further speed compiling.[23]

See also[edit]
.mw-parser-output .portalbox{float:right;border:solid #aaa 1px;padding:0}.mw-parser-output .portalbox.tleft{margin:0.5em 1em 0.5em 0}.mw-parser-output .portalbox.tright{margin:0.5em 0 0.5em 1em}.mw-parser-output .portalbox>ul{display:table;box-sizing:border-box;padding:0.1em;max-width:175px;background:#f9f9f9;font-size:85%;line-height:110%;font-style:italic;font-weight:bold}.mw-parser-output .portalbox>ul>li{display:table-row}.mw-parser-output .portalbox>ul>li>span:first-child{display:table-cell;padding:0.2em;vertical-align:middle;text-align:center}.mw-parser-output .portalbox>ul>li>span:last-child{display:table-cell;padding:0.2em 0.2em 0.2em 0.3em;vertical-align:middle}

Free and open-source software portal
Comparison of IDE choices for Haxe programmers
Dart (programming language)
Nim (programming language)
Opa (programming language)
Clojure
CoffeeScript
TypeScript
Scala (programming language)
Vala (programming language)
Emscripten
OpenFL
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ https://github.com/HaxeFoundation/haxe/releases/tag/4.2.4.

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}"Open Source licence Haxe".

^ Introduction to the Haxe Standard Library, Haxe Docs

^ Target Specific APIs, Introduction to the Haxe Standard Library, Haxe Docs

^ Doucet, Lars (2014-06-24). "Dear Adobe: Support Haxe, save your Tools". Gamasutra.

^ "Haxe Interview". Io Programmo. 2009-04-01: 1â6. {{cite journal}}: Cite journal requires |journal= (help)

^ "Hello Lua! - Haxe".

^ "hxnodejs".

^ a b "Compiler Targets". Haxe. Retrieved 2021-11-05.

^ List of IDEs supporting Haxe, Haxe Foundation

^ "Nicolas' announcement of spelling change on Haxe official mail list".

^ "Haxe mailing list post on naming". Archived from the original on 2007-03-28.

^ MTASC Compiler, MTASC website

^ "Eval - The new Haxe macro interpreter".

^ "Compiler Features".

^ "Macros in Haxe".

^ Dyachenko, Vadim (2013-12-05). "On "You can't make good HTML5 games in Haxe"". Yellow After Life.

^ "Haxe reference detailing the use of enum". Archived from the original on 2012-05-11.

^ "haxe/Option.hx at development Â· HaxeFoundation/haxe". Github. 7 November 2021.

^ "haxe/Either.hx at development Â· HaxeFoundation/haxe". Github. 7 November 2021.

^ "Language Features". Haxe - The Cross-platform Toolkit. Haxe Foundation. Retrieved 30 April 2015.

^ "haxe/TestGADT.hx at development Â· HaxeFoundation/haxe". Github. 7 November 2021.

^ Server mode command-line: haxe --wait [host:]port


External links[edit]
Official website 
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteAdobe FlashFileformats
ActionScript (AS)
Action Message Format (AMF)
Flash Video (FLV)
Flash XML Graphics (FXG)
Local shared objects (LSOs)
MXML
Flash Movie (SWF)
Flash Code Library (SWC)
Software(list)Players
Adobe AIR
Adobe Flash Player
Gameswf
Gnash
Lightspark
Ruffle
Tamarin
Animationtools
Adobe Animate
Toon Boom
Moho
Vyond
Stencyl
Programmingtools
FlashDevelop
Powerflasher FDT
Apache Flex
Haxe (OpenFL)
CrossBridge
Adobe Scout
FlashFirebug
Libraries
Starling Framework
Away3D
Flare3D
Stage3D
PureMVC
Ming
List of Flex frameworks
Converters
Adobe Flash Media Live Encoder
SWFTools
swfmill
Google Swiffy
Adobe Wallaby
Server-side
Adobe Flash Media Server
Obsoletesoftware
Adobe Flash Builder
Adobe Flash Catalyst
Adobe Flash Lite
SWFAddress
SWFObject
MTASC
Scaleform GFx
SWiSH Max
Swift 3D
Papervision3D
Ajax Animator
Shumway
Swfdec
OpenLaszlo
Relatedtopics
Comparison of HTML5 and Flash
Thoughts on Flash
Flash animation
films
television
Protected Streaming
Real-Time Messaging Protocol
Real-Time Media Flow Protocol
Developers
FutureWave Software
Macromedia
Adobe Inc.

 Category

vteJavaScriptCode analysis
ESLint
JSHint
JSLint
Supersets
JS++
Objective-J
TypeScript
Transpilers
AtScript
Babel
ClojureScript
CoffeeScript
Dart
Elm
Emscripten
Google Closure Compiler
Google Web Toolkit
Haxe
LiveScript
Morfik
Nim
Opa
PureScript
Reason
WebSharper
Concepts
Client-side
JavaScript library
JavaScript syntax
Debuggers
Chrome DevTools
Firefox Inspector
Komodo IDE
Microsoft Edge DevTools
Opera DevTools
Safari Web Inspector
Doc generators
JSDoc
Editors (comparison)
Ace
Cloud9 IDE
Atom
CodeMirror
Brackets
Light Table
PhpStorm
Orion
Visual Studio
Visual Studio Express
Visual Studio Code
Visual Studio Team Services
Vim
Engines
Comparison of engines
DOM support
List of ECMAScript engines
Frameworks
Comparison of JavaScript frameworks
List of JavaScript libraries
Related technologies
Ajax
AssemblyScript
asm.js
Cascading Style Sheets
Document Object Model
HTML
HTML5
JSON
WebAssembly
WebAuthn
Package managers
npm
Module bundlers
Webpack
Server-side
Active Server Pages
CommonJS
Deno
JSGI
Node.js
Wakanda
Unit testing frameworks (list)
Jasmine
Jest
Mocha
QUnit
People
Douglas Crockford
Brendan Eich
John Resig





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Haxe&oldid=1064648789"
		Categories: Programming languagesObject-based programming languagesFunctional languagesMulti-paradigm programming languagesOCaml softwareProgramming languages created in 2005Software using the GPL licenseSource-to-source compilersPattern matching programming languagesStatically typed programming languagesHidden categories: CS1 errors: missing periodicalArticles with short descriptionShort description is different from Wikidata
	
