
Title:
Tree traversal
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}"Tree search" redirects here. Not to be confused with Search tree.
This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources:Â "Tree traversal"Â âÂ newsÂ Â· newspapersÂ Â· booksÂ Â· scholarÂ Â· JSTOR  (May 2009) (Learn how and when to remove this template message)
.mw-parser-output .sidebar{width:22em;float:right;clear:right;margin:0.5em 0 1em 1em;background:#f8f9fa;border:1px solid #aaa;padding:0.2em;text-align:center;line-height:1.4em;font-size:88%;border-collapse:collapse;display:table}body.skin-minerva .mw-parser-output .sidebar{display:table!important;float:right!important;margin:0.5em 0 1em 1em!important}.mw-parser-output .sidebar-subgroup{width:100%;margin:0;border-spacing:0}.mw-parser-output .sidebar-left{float:left;clear:left;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-none{float:none;clear:both;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-outer-title{padding:0 0.4em 0.2em;font-size:125%;line-height:1.2em;font-weight:bold}.mw-parser-output .sidebar-top-image{padding:0.4em}.mw-parser-output .sidebar-top-caption,.mw-parser-output .sidebar-pretitle-with-top-image,.mw-parser-output .sidebar-caption{padding:0.2em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-pretitle{padding:0.4em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-title,.mw-parser-output .sidebar-title-with-pretitle{padding:0.2em 0.8em;font-size:145%;line-height:1.2em}.mw-parser-output .sidebar-title-with-pretitle{padding:0.1em 0.4em}.mw-parser-output .sidebar-image{padding:0.2em 0.4em 0.4em}.mw-parser-output .sidebar-heading{padding:0.1em 0.4em}.mw-parser-output .sidebar-content{padding:0 0.5em 0.4em}.mw-parser-output .sidebar-content-with-subgroup{padding:0.1em 0.4em 0.2em}.mw-parser-output .sidebar-above,.mw-parser-output .sidebar-below{padding:0.3em 0.8em;font-weight:bold}.mw-parser-output .sidebar-collapse .sidebar-above,.mw-parser-output .sidebar-collapse .sidebar-below{border-top:1px solid #aaa;border-bottom:1px solid #aaa}.mw-parser-output .sidebar-navbar{text-align:right;font-size:115%;padding:0 0.4em 0.4em}.mw-parser-output .sidebar-list-title{padding:0 0.4em;text-align:left;font-weight:bold;line-height:1.6em;font-size:105%}.mw-parser-output .sidebar-list-title-c{padding:0 0.4em;text-align:center;margin:0 3.3em}@media(max-width:720px){body.mediawiki .mw-parser-output .sidebar{width:100%!important;clear:both;float:none!important;margin-left:0!important;margin-right:0!important}}Graph and treesearch algorithms
Î±âÎ²
A*
B*
Backtracking
Beam
BellmanâFord
Best-first
Bidirectional
BorÅ¯vka
Branch & bound
BFS
British Museum
D*
DFS
Dijkstra
Edmonds
FloydâWarshall
Fringe search
Hill climbing
IDA*
Iterative deepening
Johnson
Jump point
Kruskal
Lexicographic BFS
LPA*
Prim
SMA*

Listings
Graph algorithms
Search algorithms
List of graph algorithms

Related topics
Dynamic programming
Graph traversal
Tree traversal
Search games
Graph coloring
.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vte
In computer science, tree traversal (also known as tree search and walking the tree) is a form of graph traversal and refers to the process of visiting (e.g. retrieving, updating, or deleting) each node in a tree data structure, exactly once. Such traversals are classified by the order in which the nodes are visited. The following algorithms are described for a binary tree, but they may be generalized to other trees as well.

Contents

1 Types

1.1 Data structures for tree traversal
1.2 Depth-first search

1.2.1 Pre-order, NLR
1.2.2 Post-order, LRN
1.2.3 In-order, LNR
1.2.4 Reverse pre-order, NRL
1.2.5 Reverse post-order, RLN
1.2.6 Reverse in-order, RNL
1.2.7 Arbitrary trees


1.3 Breadth-first search
1.4 Other types


2 Applications
3 Implementations

3.1 Depth-first search

3.1.1 Pre-order
3.1.2 Post-order
3.1.3 In-order
3.1.4 Another variant of Pre-order
3.1.5 Advancing to the next or previous node
3.1.6 Morris in-order traversal using threading


3.2 Breadth-first search


4 Infinite trees
5 References
6 Sources
7 External links



Types[edit]
Unlike linked lists, one-dimensional arrays and other linear data structures, which are canonically traversed in linear order, trees may be traversed in multiple ways. They may be traversed in depth-first or breadth-first order. There are three common ways to traverse them in depth-first order: in-order, pre-order and post-order.[1] Beyond these basic traversals, various more complex or hybrid schemes are possible, such as depth-limited searches like iterative deepening depth-first search. The latter, as well as breadth-first search, can also be used to traverse infinite trees, see below.

Data structures for tree traversal[edit]
Traversing a tree involves iterating over all nodes in some manner. Because from a given node there is more than one possible next node (it is not a linear data structure), then, assuming sequential computation (not parallel), some nodes must be deferredâstored in some way for later visiting. This is often done via a stack (LIFO) or queue (FIFO). As a tree is a self-referential (recursively defined) data structure, traversal can be defined by recursion or, more subtly, corecursion, in a natural and clear fashion; in these cases the deferred nodes are stored implicitly in the call stack.
Depth-first search is easily implemented via a stack, including recursively (via the call stack), while breadth-first search is easily implemented via a queue, including corecursively.[2]:â45â61â

Depth-first search[edit]
Main article: Depth-first search
  Depth-first traversal (dotted path) of a binary tree:Pre-order (node visited at position red â): Â  Â  F, B, A, D, C, E, G, I, H;In-order (node visited at position green â): Â  Â  A, B, C, D, E, F, G, H, I;Post-order (node visited at position blue â): Â  Â  A, C, E, D, B, H, I, G, F.
In depth-first search (DFS), the search tree is deepened as much as possible before going to the next sibling.
To traverse binary trees with depth-first search, perform the following operations at each node:[3][4]

If the current node is empty then return.
Execute the following three operations in a certain order:[5]
N: Visit the current node.
L: Recursively traverse the current node's left subtree.
R: Recursively traverse the current node's right subtree.
There are three methods at which position of the traversal relative to the node (in the figure: red, green, or blue) the visit of the node shall take place. The choice of exactly one color determines exactly one visit of a node as described below. Visit at all three colors results in a threefold visit of the same node yielding the âall-orderâ sequentialisation:

F-B-A-A-A-B-D-C-C-C-D-E-E-E-D-B-F-G-G-âI-H-H-H-âI-âI-G-F
Pre-order, NLR[edit]
Visit the current node (in the figure: position red).
Recursively traverse the current node's left subtree.
Recursively traverse the current node's right subtree.
The pre-order traversal is a topologically sorted one, because a parent node is processed before any of its child nodes is done.

Post-order, LRN[edit]
Recursively traverse the current node's left subtree.
Recursively traverse the current node's right subtree.
Visit the current node (in the figure: position blue).
The trace of a traversal is called a sequentialisation of the tree. The traversal trace is a list of each visited node. No one sequentialisation according to pre-, in- or post-order describes the underlying tree uniquely. Given a tree with distinct elements, either pre-order or post-order paired with in-order is sufficient to describe the tree uniquely. However, pre-order with post-order leaves some ambiguity in the tree structure.[6]

In-order, LNR[edit]
Recursively traverse the current node's left subtree.
Visit the current node (in the figure: position green).
Recursively traverse the current node's right subtree.
In a binary search tree ordered such that in each node the key is greater than all keys in its left subtree and less than all keys in its right subtree, in-order traversal retrieves the keys in ascending sorted order.[7]

Reverse pre-order, NRL[edit]
Visit the current node.
Recursively traverse the current node's right subtree.
Recursively traverse the current node's left subtree.
Reverse post-order, RLN[edit]
Recursively traverse the current node's right subtree.
Recursively traverse the current node's left subtree.
Visit the current node.
Reverse in-order, RNL[edit]
Recursively traverse the current node's right subtree.
Visit the current node.
Recursively traverse the current node's left subtree.
In a binary search tree ordered such that in each node the key is greater than all keys in its left subtree and less than all keys in its right subtree, reverse in-order traversal retrieves the keys in descending sorted order.

Arbitrary trees[edit]
To traverse arbitrary trees (not necessarily binary trees) with depth-first search, perform the following operations at each node:

If the current node is empty then return.
Visit the current node for pre-order traversal.
For each i from 1 to the current node's number of subtrees â 1, or from the latter to the former for reverse traversal, do:
Recursively traverse the current node's i-th subtree.
Visit the current node for in-order traversal.
Recursively traverse the current node's last subtree.
Visit the current node for post-order traversal.
Depending on the problem at hand, pre-order, post-order, and especially one of the number of subtrees â 1 in-order operations may be optional. Also, in practice more than one of pre-order, post-order, and in-order operations may be required. For example, when inserting into a ternary tree, a pre-order operation is performed by comparing items. A post-order operation may be needed afterwards to re-balance the tree.

Breadth-first search[edit]
  Level-order: F, B, G, A, D, I, C, E, H.
Main article: Breadth-first search
In breadth-first search (BFS) or level-order search, the search tree is broadened as much as possible before going to the next depth.

Other types[edit]
There are also tree traversal algorithms that classify as neither depth-first search nor breadth-first search. One such algorithm is Monte Carlo tree search, which concentrates on analyzing the most promising moves, basing the expansion of the search tree on random sampling of the search space.

Applications[edit]
  Tree representing the arithmetic expression: A * (B â C) + (D + E)
Pre-order traversal can be used to make a prefix expression (Polish notation) from expression trees: traverse the expression tree pre-orderly. For example, traversing the depicted arithmetic expression in pre-order yields "+ * A â B C + D E".
Post-order traversal can generate a postfix representation (Reverse Polish notation) of a binary tree. Traversing the depicted arithmetic expression in post-order yields "A B C â * D E + +"; the latter can easily be transformed into machine code to evaluate the expression by a stack machine.
In-order traversal is very commonly used on binary search trees because it returns values from the underlying set in order, according to the comparator that set up the binary search tree. 
Post-order traversal while deleting or freeing nodes and values can delete or free an entire binary tree. Thereby the node is freed after freeing its children.
Also the duplication of a binary tree yields a post-order sequence of actions, because the pointer copy to the copy of a node is assigned to the corresponding child field N.child within the copy of the parent N immediately after returncopy  in the recursive procedure. This means that the parent cannot be finished before all children are finished.

Implementations[edit]
This section does not cite any sources. Please help improve this section by adding citations to reliable sources. Unsourced material may be challenged and removed.  (June 2013) (Learn how and when to remove this template message)
Depth-first search[edit]
Pre-order[edit]




procedure preorder(node)
    if node = null
        return
    visit(node)
    preorder(node.left)
    preorder(node.right) 



procedure iterativePreorder(node)
    if node = null
        return
    stack â empty stack
    stack.push(node)
    while not stack.isEmpty()
        node â stack.pop()
        visit(node)
        // right child is pushed first so that left is processed first
        if node.right â  null
            stack.push(node.right)
        if node.left â  null
            stack.push(node.left)




Post-order[edit]




procedure postorder(node)
    if node = null
        return
    postorder(node.left)
    postorder(node.right)
    visit(node)



procedure iterativePostorder(node)
    stack â empty stack
    lastNodeVisited â null
    while not stack.isEmpty() or node â  null
        if node â  null
            stack.push(node)
            node â node.left
        else
            peekNode â stack.peek()
            // if right child exists and traversing node
            // from left child, then move right
            if peekNode.right â  null and lastNodeVisited â  peekNode.right
                node â peekNode.right
            else
                visit(peekNode)
                lastNodeVisited â stack.pop()


In-order[edit]




procedure inorder(node)
    if node = null
        return
    inorder(node.left)
    visit(node)
    inorder(node.right)



procedure iterativeInorder(node)
    stack â empty stack
    while not stack.isEmpty() or node â  null
        if node â  null
            stack.push(node)
            node â node.left
        else
            node â stack.pop()
            visit(node)
            node â node.right


Another variant of Pre-order[edit]
If the tree is represented by an array (first index is 0), it is possible to calculate the index of the next element:[8][clarification needed]

procedure bubbleUp(array, i, leaf)
    k â 1
    i â (i - 1)/2
    while (leaf + 1)Â % (k * 2) â  k
        i â (i - 1)/2
        k â 2 * k
    return i

procedure preorder(array)
    i â 0
    while i â  array.size
        visit(array[i])
        if i = size - 1
            i â size
        else if i < size/2
            i â i * 2 + 1
        else
            leaf â i - size/2
            parent â bubble_up(array, i, leaf)
            i â parent * 2 + 2

Advancing to the next or previous node[edit]
The node to be started with may have been found in the binary search tree bst by means of a standard search function, which is shown here in an implementation without parent pointers, i.e. it uses a stack for holding the ancestor pointers.

procedure search(bst, key)
    // returns a (node, stack)
    node â bst.root
    stack â empty stack
    while node â  null
        stack.push(node)
        if key = node.key
            return (node, stack)
        if key < node.key
            node â node.left    
        else
            node â node.right
    return (null, empty stack)

The function inorderNext[2]:â60â returns an in-order-neighbor of node, either the in-order-successor (for dir=1) or the in-order-predecessor (for dir=0), and the updated stack, so that the binary search tree may be sequentially in-order-traversed and searched in the given direction dir further on.

procedure inorderNext(node, dir, stack)
    newnode â node.child[dir]
    if newnode â  null
        do
            node â newnode
            stack.push(node)
            newnode â node.child[1-dir]
        until newnode = null
        return (node, stack)
    // node does not have a dir-child:
    do
        if stack.isEmpty()
            return (null, empty stack)
        oldnode â node
        node â stack.pop()   // parent of oldnode
    until oldnode â  node.child[dir]
    // now oldnode = node.child[1-dir],
    // i.e. node = ancestor (and predecessor/successor) of original node
    return (node, stack)

Note that the function does not use keys, which means that the sequential structure is completely recorded by the binary search treeâs edges. For traversals without change of direction, the (amortised) average complexity is 
  
    
      
        
          
            O
          
        
        (
        1
        )
        ,
      
    
    {\displaystyle {\mathcal {O}}(1),}
  
 because a full traversal takes 
  
    
      
        2
        n
        â
        2
      
    
    {\displaystyle 2n-2}
  
 steps for a BST of size 
  
    
      
        n
        ,
      
    
    {\displaystyle n,}
  
 1 step for edge up and 1 for edge down. The worst-case complexity is 
  
    
      
        
          
            O
          
        
        (
        h
        )
      
    
    {\displaystyle {\mathcal {O}}(h)}
  
 with 
  
    
      
        h
      
    
    {\displaystyle h}
  
 as the height of the tree.
All the above implementations require stack space proportional to the height of the tree which is a call stack for the recursive and a parent (ancestor) stack for the iterative ones. In a poorly balanced tree, this can be considerable. With the iterative implementations we can remove the stack requirement by maintaining parent pointers in each node, or by threading the tree (next section).

Morris in-order traversal using threading[edit]
Main article: Threaded binary tree
A binary tree is threaded by making every left child pointer (that would otherwise be null) point to the in-order predecessor of the node (if it exists) and every right child pointer (that would otherwise be null) point to the in-order successor of the node (if it exists).
Advantages:

Avoids recursion, which uses a call stack and consumes memory and time.
The node keeps a record of its parent.
Disadvantages:

The tree is more complex.
We can make only one traversal at a time.
It is more prone to errors when both the children are not present and both values of nodes point to their ancestors.
Morris traversal is an implementation of in-order traversal that uses threading:[9]

Create links to the in-order successor.
Print the data using these links.
Revert the changes to restore original tree.
Breadth-first search[edit]
Also, listed below is pseudocode for a simple queue based level-order traversal, and will require space proportional to the maximum number of nodes at a given depth. This can be as much as half the total number of nodes. A more space-efficient approach for this type of traversal can be implemented using an iterative deepening depth-first search.

procedure levelorder(node)
    queue â empty queue
    queue.enqueue(node)
    while not queue.isEmpty()
        node â queue.dequeue()
        visit(node)
        if node.left â  null
            queue.enqueue(node.left)
        if node.right â  null
            queue.enqueue(node.right)

If the tree is represented by an array (first index is 0), it is sufficient iterating through all elements:

procedure levelorder(array)
    for i from 0 to array.size
        visit(array[i])

Infinite trees[edit]
While traversal is usually done for trees with a finite number of nodes (and hence finite depth and finite branching factor) it can also be done for infinite trees. This is of particular interest in functional programming (particularly with lazy evaluation), as infinite data structures can often be easily defined and worked with, though they are not (strictly) evaluated, as this would take infinite time. Some finite trees are too large to represent explicitly, such as the game tree for chess or go, and so it is useful to analyze them as if they were infinite.
A basic requirement for traversal is to visit every node eventually. For infinite trees, simple algorithms often fail this. For example, given a binary tree of infinite depth, a depth-first search will go down one side (by convention the left side) of the tree, never visiting the rest, and indeed an in-order or post-order traversal will never visit any nodes, as it has not reached a leaf (and in fact never will). By contrast, a breadth-first (level-order) traversal will traverse a binary tree of infinite depth without problem, and indeed will traverse any tree with bounded branching factor.
On the other hand, given a tree of depth 2, where the root has infinitely many children, and each of these children has two children, a depth-first search will visit all nodes, as once it exhausts the grandchildren (children of children of one node), it will move on to the next (assuming it is not post-order, in which case it never reaches the root). By contrast, a breadth-first search will never reach the grandchildren, as it seeks to exhaust the children first.
A more sophisticated analysis of running time can be given via infinite ordinal numbers; for example, the breadth-first search of the depth 2 tree above will take ÏÂ·2 steps: Ï for the first level, and then another Ï for the second level.
Thus, simple depth-first or breadth-first searches do not traverse every infinite tree, and are not efficient on very large trees. However, hybrid methods can traverse any (countably) infinite tree, essentially via a diagonal argument ("diagonal"âa combination of vertical and horizontalâcorresponds to a combination of depth and breadth).
Concretely, given the infinitely branching tree of infinite depth, label the root (), the children of the root (1), (2), â¦, the grandchildren (1, 1), (1, 2), â¦, (2, 1), (2, 2), â¦, and so on. The nodes are thus in a one-to-one correspondence with finite (possibly empty) sequences of positive numbers, which are countable and can be placed in order first by sum of entries, and then by lexicographic order within a given sum (only finitely many sequences sum to a given value, so all entries are reachedâformally there are a finite number of compositions of a given natural number, specifically 2nâ1 compositions of n â¥ 1), which gives a traversal. Explicitly:

()
(1)
(1, 1) (2)
(1, 1, 1) (1, 2) (2, 1) (3)
(1, 1, 1, 1) (1, 1, 2) (1, 2, 1) (1, 3) (2, 1, 1) (2, 2) (3, 1) (4)
etc.
This can be interpreted as mapping the infinite depth binary tree onto this tree and then applying breadth-first search: replace the "down" edges connecting a parent node to its second and later children with "right" edges from the first child to the second child, from the second child to the third child, etc. Thus at each step one can either go down (append a (, 1) to the end) or go right (add one to the last number) (except the root, which is extra and can only go down), which shows the correspondence between the infinite binary tree and the above numbering; the sum of the entries (minus one) corresponds to the distance from the root, which agrees with the 2nâ1 nodes at depth n â 1 in the infinite binary tree (2 corresponds to binary).

References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}"Lecture 8, Tree Traversal". Retrieved 2 May 2015.

^ Jump up to: a b Pfaff, Ben (2004). An Introduction to Binary Search Trees and Balanced Trees. Free Software Foundation, Inc.

^ Binary Tree Traversal Methods

^ "Preorder Traversal Algorithm". Retrieved 2 May 2015.

^ L before R means the (standard) counter-clockwise traversalâas in the figure.The execution of N before, between, or after L and R determines one of the described methods.If the traversal is taken the other way around (clockwise) then the traversal is called reversed. This is described in particular for reverse in-order, when the data are to be retrieved in descending order.

^ "Algorithms, Which combinations of pre-, post- and in-order sequentialisation are unique?, Computer Science Stack Exchange". Retrieved 2 May 2015.

^ Wittman, Todd. "Tree Traversal" (PDF). UCLA Math. Archived from the original (PDF) on February 13, 2015. Retrieved January 2, 2016. 

^ "constexpr tree structures". Fekir's Blog. 9 August 2021. Retrieved 2021-08-15.

^ Morris, Joseph M. (1979). "Traversing binary trees simply and cheaply". Information Processing Letters. 9 (5): 197â200. doi:10.1016/0020-0190(79)90068-1.


Sources[edit]
Dale, Nell. Lilly, Susan D. "Pascal Plus Data Structures". D. C. Heath and Company. Lexington, MA. 1995. Fourth Edition.
Drozdek, Adam. "Data Structures and Algorithms in C++". Brook/Cole. Pacific Grove, CA. 2001. Second edition.
"Tree Transversal" (math.northwestern.edu)
External links[edit]
Storing Hierarchical Data in a Database with traversal examples in PHP
Managing Hierarchical Data in MySQL
Working with Graphs in MySQL
Sample code for recursive tree traversal in Python.
See tree traversal implemented in various programming language on Rosetta Code
Tree traversal without recursion




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Tree_traversal&oldid=1063932011"
		Categories: Trees (data structures)Graph algorithmsRecursionIteration in programmingHidden categories: Articles needing additional references from May 2009All articles needing additional referencesArticles needing additional references from June 2013Wikipedia articles needing clarification from November 2021Articles with example pseudocode
	
