
Title:
Attribute-based access control
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Attribute-based access control (ABAC), also known as policy-based access control for IAM, defines an access control paradigm whereby access rights are granted to users through the use of policies which combine attributes together.[1] The policies can use any type of attributes (user attributes, resource attributes, object, environment attributes etc.). This model supports Boolean logic, in which rules contain "IF, THEN" statements about who is making the request, the resource, and the action. For example: IF the requester is a manager, THEN allow read/write access to sensitive data. The NIST framework introduces the main concepts of ABAC as its entities, i.e. PAP (Policy Administration Point), PEP (Policy Enforcement Point), PDP (Policy Decision Point) and PIP (Policy Information Point).[2][3]
Unlike role-based access control (RBAC), which employs pre-defined roles that carry a specific set of privileges associated with them and to which subjects are assigned, the key difference with ABAC is the concept of policies that express a complex Boolean rule set that can evaluate many different attributes. Attribute values can be set-valued or atomic-valued. Set-valued attributes contain more than one atomic value. Examples are role and project. Atomic-valued attributes contain only one atomic value. Examples are clearance and sensitivity. Attributes can be compared to static values or to one another, thus enabling relation-based access control.
Although the concept itself existed for many years, ABAC is considered a "next generation" authorization model because it provides dynamic, context-aware and risk-intelligent access control to resources allowing access control policies that include specific attributes from many different information systems to be defined to resolve an authorization and achieve an efficient regulatory compliance, allowing enterprises flexibility in their implementations based on their existing infrastructures. 
Attribute-based access control is sometimes referred to as policy-based access control (PBAC) or claims-based access control (CBAC), which is a Microsoft-specific term. The key standards that implement ABAC are XACML and ALFA (XACML).[4]

Contents

1 Dimensions of attribute-based access control
2 Components

2.1 Architecture
2.2 Attributes
2.3 Policies


3 Other models
4 Implementations
5 Applications

5.1 API and micro services security
5.2 Application security
5.3 Database security
5.4 Data security
5.5 Big data security
5.6 File server security


6 See also
7 References
8 External links



Dimensions of attribute-based access control[edit]
ABAC can be seen as:

Externalized authorization management[5]
Dynamic authorization management[6]
Policy-based access control
Fine-grained authorization
Components[edit]
Architecture[edit]
ABAC comes with a recommended architecture which is as follows:

The PEP or Policy Enforcement Point: it is responsible for protecting the apps & data you want to apply ABAC to. The PEP inspects the request and generates an authorization request from it which it sends to the PDP.
The PDP or Policy Decision Point is the brain of the architecture. This is the piece which evaluates incoming requests against policies it has been configured with. The PDP returns a Permit / Deny decision. The PDP may also use PIPs to retrieve missing metadata
The PIP or Policy Information Point bridges the PDP to external sources of attributes e.g. LDAP or databases.
Attributes[edit]
Attributes can be about anything and anyone. They tend to fall into 4 different categories:

Subject attributes: attributes that describe the user attempting the access e.g. age, clearance, department, role, job title...
Action attributes: attributes that describe the action being attempted e.g. read, delete, view, approve...
Object attributes: attributes that describe the object (or resource) being accessed e.g. the object type (medical record, bank account...), the department, the classification or sensitivity, the location...
Contextual (environment) attributes: attributes that deal with time, location or dynamic aspects of the access control scenario[7]
Policies[edit]
Policies are statements that bring together attributes to express what can happen and is not allowed. Policies in ABAC can be granting or denying policies. Policies can also be local or global and can be written in a way that they override other policies. Examples include:

A user can view a document if the document is in the same department as the user
A user can edit a document if they are the owner and if the document is in draft mode
Deny access before 9am
With ABAC you can have as many policies as you like that cater to many different scenarios and technologies.[7]

Other models[edit]
Historically, access control models have included mandatory access control (MAC), discretionary access control (DAC), and more recently role-based access control (RBAC). These access control models are user-centric and do not take into account additional parameters such as resource information, the relationship between the user (the requesting entity) and the resource, and dynamic information e.g. time of the day or user IP.
ABAC tries to address this by defining access control based on attributes which describe the requesting entity (the user), the targeted object or resource, the desired action (view, edit, delete...), and environmental or contextual information. This is why access control is said to be attribute-based.

Implementations[edit]
One standard that implements attribute- and policy-based access control is XACML, the eXtensible Access Control Markup Language. XACML defines an architecture, a policy language, and a request / response scheme. It does not handle attribute management (user attribute assignment, object attribute assignment, environment attribute assignment) which is left to traditional IAM tools, databases, and directories.
Companies, including every branch in the United States military, have started using ABAC. At a basic level, ABAC protects data with âIF/THEN/ANDâ rules rather than assign data to users. The US Department of Commerce has made this a mandatory practice and the adoption is spreading throughout several governmental and military agencies.[1][8]

Applications[edit]
The concept of ABAC can be applied at any level of the technology stack and an enterprise infrastructure. For example, ABAC can be used at the firewall, server, application, database, and data layer. The use of attributes bring additional context to evaluate the legitimacy of any request for access and inform the decision to grant or deny access. 
An important consideration when evaluating ABAC solutions is to understand its potential overhead on performance and its impact on the user experience. It is expected that the more granular the controls, the higher the overhead. 

API and micro services security[edit]
ABAC can be used to apply attribute-based, fine-grained authorization to the API methods or functions. For instance, a banking API may expose an approveTransaction(transId) method. ABAC can be used to secure the call. With ABAC, a policy author can write the following:

Policy: managers can approve transactions up to their approval limit
Attributes used: role, action ID, object type, amount, approval limit.
The flow would be as follows:

The user, Alice, calls the API method approveTransaction(123)
The API receives the call and authenticates the user.
An interceptor in the API calls out to the authorization engine (typically called a Policy Decision Point or PDP) and asks: Can Alice approve transaction 123?
The PDP retrieves the ABAC policy and necessary attributes.
The PDP reaches a decision e.g. Permit or Deny and returns it to the API interceptor
If the decision is Permit, the underlying API business logic is called. Otherwise the API returns an error or access denied.
Application security[edit]
One of the key benefits to ABAC is that the authorization policies and attributes can be defined in a technology neutral way. This means policies defined for APIs or databases can be reused in the application space. Common applications that can benefit from ABAC are:

content management systems
ERPs
home-grown applications
web applications
The same process and flow as the one described in the API section applies here too.

Database security[edit]
Security for databases has long been specific to the database vendors: Oracle VPD, IBM FGAC, and Microsoft RLS are all means to achieve fine-grained ABAC-like security.
An example would be:

Policy: managers can view transactions in their region
Reworked policy in a data-centric way: users with role == manager can do the action SELECT on table == TRANSACTIONS if user.region == transaction.region
Data security[edit]
Data security typically goes one step further than database security and applies control directly to the data element. This is often referred to as data-centric security. On traditional relational databases, ABAC policies can control access to data at the table, column, field, cell and sub-cell using logical controls with filtering conditions and masking based on attributes. Attributes can be data, user, session or tools based to deliver the greatest level of flexibility in dynamically granting/denying access to a specific data element. On big data, and distributed file systems such as Hadoop, ABAC applied at the data layer control access to folder, sub-folder, file, sub-file and other granular.

Big data security[edit]
Attribute-based access control can also be applied to Big Data systems like Hadoop. Policies similar to those used previously can be applied when retrieving data from data lakes.[9][10]

File server security[edit]
As of Windows Server 2012, Microsoft has implemented an ABAC approach to controlling access to files and folders. This is achieved through dynamic access control (DAC)[11] and Security Descriptor Definition Language (SDDL). SDDL can be seen as an ABAC language as it uses metadata of the user (claims) and of the file / folder to control access.

See also[edit]
.mw-parser-output .div-col{margin-top:0.3em;column-width:30em}.mw-parser-output .div-col-small{font-size:90%}.mw-parser-output .div-col-rules{column-rule:1px solid #aaa}.mw-parser-output .div-col dl,.mw-parser-output .div-col ol,.mw-parser-output .div-col ul{margin-top:0}.mw-parser-output .div-col li,.mw-parser-output .div-col dd{page-break-inside:avoid;break-inside:avoid-column}
Access control list
Context-based access control (CBAC)
Data-centric security
Discretionary access control (DAC)
Graph-based access control (GBAC)
Lattice-based access control (LBAC)
Transaction-based access control (TxBAC)
Mandatory access control (MAC)
Organisation-based access control (OrBAC)
Role-based access control (RBAC)
Rule-set-based access control (RSBAC)
Capability-based security
Location-based authentication
Risk-based authentication
Classified information
Federated identity
Identity driven networking
Identity management
Identity management system
Lightweight Directory Access Protocol
OAuth
PERMIS
Security Assertion Markup Language
Security token service
Single sign-on
User provisioning software
XACML
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Computer Security Division, Information Technology Laboratory (2016-05-24). "Attribute Based Access Control | CSRC | CSRC". CSRC | NIST. Retrieved 2021-11-25.

^ NIST, ABAC (2014). "Guide to Attribute Based Access Control (ABAC) Definition and Considerations" (PDF).{{cite web}}:  CS1 maint: url-status (link)

^ NIST (2016). "A Comparison of Attribute Based Access Control (ABAC) Standards for Data ServiceApplications" (PDF).{{cite web}}:  CS1 maint: url-status (link)

^ Silva, Edelberto Franco; Muchaluat-Saade, DÃ©bora Christina; Fernandes, Natalia Castro (2018-01-01). "ACROSS: A generic framework for attribute-based access control with distributed policies for virtual organizations". Future Generation Computer Systems. 78: 1â17. doi:10.1016/j.future.2017.07.049. ISSNÂ 0167-739X.

^ "Technology Overview for Externalized Authorization Management". www.gartner.com. Retrieved 2017-05-31.

^ "Leadership Compass: Dynamic Authorization Management - 71144". KuppingerCole. Retrieved 2020-07-14.

^ Jump up to: a b "Alternatives for Roles/Claims Access Control Systems". stackoverflow.com.

^ Coffey, Alisa (2019-03-28). "Attribute Based Access Control (ABAC) â Encryption on Steroids". Siemens PLM Community. Retrieved 2019-04-01.

^ "Dynamic, Fine-Grained Authorization Secures Big Data".

^ "First Fine-grained Data Access Control On Hadoop".

^ "Dynamic Access Control Overview (Windows 10) - Windows security".


External links[edit]
Role-Based Access Control vs. Attribute-Based Access Control â Explained
ATTRIBUTE BASED ACCESS CONTROL (ABAC) - OVERVIEW
Unified Attribute Based Access Control Model (ABAC) covering DAC, MAC and RBAC
Attribute Based Access Control Models (ABAC) and Implementation in Cloud Infrastructure as a Service
ABAC not RBAC: Welcome to the (IoT) World of Contextual Security, 2015, Lori MacVittie
Market Compass: Dynamic Authorization Management, 2020, Graham Williamson




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Attribute-based_access_control&oldid=1057168186"
		Categories: Access controlComputer access controlHidden categories: CS1 maint: url-status
	
