
Title:
Skip list
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Probabilistic data structure
.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}Skip listTypeListInvented1989Invented byW. PughTime complexity in big O notationAlgorithm

Average
Worst caseSpace


  
    
      
        
          
            O
          
        
        (
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(n)}
  


  
    
      
        
          
            O
          
        
        (
        n
        log
        â¡
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(n\log n)}
  
[1]Search


  
    
      
        
          
            O
          
        
        (
        log
        â¡
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(\log n)}
  


  
    
      
        
          
            O
          
        
        (
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(n)}
  
[1]Insert


  
    
      
        
          
            O
          
        
        (
        log
        â¡
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(\log n)}
  


  
    
      
        
          
            O
          
        
        (
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(n)}
  
Delete


  
    
      
        
          
            O
          
        
        (
        log
        â¡
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(\log n)}
  


  
    
      
        
          
            O
          
        
        (
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(n)}
  

.mw-parser-output .sidebar{width:22em;float:right;clear:right;margin:0.5em 0 1em 1em;background:#f8f9fa;border:1px solid #aaa;padding:0.2em;text-align:center;line-height:1.4em;font-size:88%;border-collapse:collapse;display:table}body.skin-minerva .mw-parser-output .sidebar{display:table!important;float:right!important;margin:0.5em 0 1em 1em!important}.mw-parser-output .sidebar-subgroup{width:100%;margin:0;border-spacing:0}.mw-parser-output .sidebar-left{float:left;clear:left;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-none{float:none;clear:both;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-outer-title{padding:0 0.4em 0.2em;font-size:125%;line-height:1.2em;font-weight:bold}.mw-parser-output .sidebar-top-image{padding:0.4em}.mw-parser-output .sidebar-top-caption,.mw-parser-output .sidebar-pretitle-with-top-image,.mw-parser-output .sidebar-caption{padding:0.2em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-pretitle{padding:0.4em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-title,.mw-parser-output .sidebar-title-with-pretitle{padding:0.2em 0.8em;font-size:145%;line-height:1.2em}.mw-parser-output .sidebar-title-with-pretitle{padding:0.1em 0.4em}.mw-parser-output .sidebar-image{padding:0.2em 0.4em 0.4em}.mw-parser-output .sidebar-heading{padding:0.1em 0.4em}.mw-parser-output .sidebar-content{padding:0 0.5em 0.4em}.mw-parser-output .sidebar-content-with-subgroup{padding:0.1em 0.4em 0.2em}.mw-parser-output .sidebar-above,.mw-parser-output .sidebar-below{padding:0.3em 0.8em;font-weight:bold}.mw-parser-output .sidebar-collapse .sidebar-above,.mw-parser-output .sidebar-collapse .sidebar-below{border-top:1px solid #aaa;border-bottom:1px solid #aaa}.mw-parser-output .sidebar-navbar{text-align:right;font-size:115%;padding:0 0.4em 0.4em}.mw-parser-output .sidebar-list-title{padding:0 0.4em;text-align:left;font-weight:bold;line-height:1.6em;font-size:105%}.mw-parser-output .sidebar-list-title-c{padding:0 0.4em;text-align:center;margin:0 3.3em}@media(max-width:720px){body.mediawiki .mw-parser-output .sidebar{width:100%!important;clear:both;float:none!important;margin-left:0!important;margin-right:0!important}}Part of a series onProbabilisticdata structures
Bloom filter
Countâmin sketch
Quotient filter
Skip list

Random trees
Random binary tree
Treap
Rapidly-exploring random tree

Related
Randomized algorithm
HyperLogLog
.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vte
In computer science, a skip list is a probabilistic data structure that allows 
  
    
      
        
          
            O
          
        
        (
        log
        â¡
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(\log n)}
  
 search complexity as well as 
  
    
      
        
          
            O
          
        
        (
        log
        â¡
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(\log n)}
  
 insertion complexity within an ordered sequence of 
  
    
      
        n
      
    
    {\displaystyle n}
  
 elements. Thus it can get the best features of a sorted array (for searching) while maintaining a linked list-like structure that allows insertion, which is not possible in an array. Fast search is made possible by maintaining a linked hierarchy of subsequences, with each successive subsequence skipping over fewer elements than the previous one (see the picture below on the right). Searching starts in the sparsest subsequence until two consecutive elements have been found, one smaller and one larger than or equal to the element searched for. Via the linked hierarchy, these two elements link to elements of the next sparsest subsequence, where searching is continued until finally we are searching in the full sequence. The elements that are skipped over may be chosen probabilistically[2] or deterministically,[3] with the former being more common.

Contents

1 Description

1.1 Implementation details
1.2 Indexable skiplist


2 History
3 Usages
4 See also
5 References
6 External links



Description[edit]
  A schematic picture of the skip list data structure. Each box with an arrow represents a pointer and a row is a linked list giving a sparse subsequence; the numbered boxes (in yellow) at the bottom represent the ordered data sequence. Searching proceeds downwards from the sparsest subsequence at the top until consecutive elements bracketing the search element are found.
A skip list is built in layers.  The bottom layer is an ordinary ordered linked list.  Each higher layer acts as an "express lane" for the lists below, where an element in layer 
  
    
      
        i
      
    
    {\displaystyle i}
  
 appears in layer 
  
    
      
        i
        +
        1
      
    
    {\displaystyle i+1}
  
 with some fixed probability 
  
    
      
        p
      
    
    {\displaystyle p}
  
 (two commonly used values for 
  
    
      
        p
      
    
    {\displaystyle p}
  
 are 
  
    
      
        1
        
          /
        
        2
      
    
    {\displaystyle 1/2}
  
 or 
  
    
      
        1
        
          /
        
        4
      
    
    {\displaystyle 1/4}
  
).  On average, each element appears in 
  
    
      
        1
        
          /
        
        (
        1
        â
        p
        )
      
    
    {\displaystyle 1/(1-p)}
  
 lists, and the tallest element (usually a special head element at the front of the skip list) appears in all the lists.  The skip list contains 
  
    
      
        
          log
          
            1
            
              /
            
            p
          
        
        â¡
        n
        
      
    
    {\displaystyle \log _{1/p}n\,}
  
 (i.e. logarithm base 
  
    
      
        1
        
          /
        
        p
      
    
    {\displaystyle 1/p}
  
 of 
  
    
      
        n
      
    
    {\displaystyle n}
  
) lists.
A search for a target element begins at the head element in the top list, and proceeds horizontally until the current element is greater than or equal to the target. If the current element is equal to the target, it has been found. If the current element is greater than the target, or the search reaches the end of the linked list, the procedure is repeated after returning to the previous element and dropping down vertically to the next lower list. The expected number of steps in each linked list is at most 
  
    
      
        1
        
          /
        
        p
      
    
    {\displaystyle 1/p}
  
, which can be seen by tracing the search path backwards from the target until reaching an element that appears in the next higher list or reaching the beginning of the current list.  Therefore, the total expected cost of a search is 
  
    
      
        
          
            
              1
              p
            
          
        
        
          log
          
            1
            
              /
            
            p
          
        
        â¡
        n
      
    
    {\displaystyle {\tfrac {1}{p}}\log _{1/p}n}
  
 which is 
  
    
      
        
          
            O
          
        
        (
        log
        â¡
        n
        )
        
      
    
    {\displaystyle {\mathcal {O}}(\log n)\,}
  
, when 
  
    
      
        p
      
    
    {\displaystyle p}
  
 is a constant. By choosing different values of 
  
    
      
        p
      
    
    {\displaystyle p}
  
, it is possible to trade search costs against storage costs.

Implementation details[edit]
  Inserting elements to skip list
The elements used for a skip list can contain more than one pointer since they can participate in more than one list.
Insertions and deletions are implemented much like the corresponding linked-list operations, except that "tall" elements must be inserted into or deleted from more than one linked list.

  
    
      
        
          
            O
          
        
        (
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(n)}
  
 operations, which force us to visit every node in ascending order (such as printing the entire list), provide the opportunity to perform a behind-the-scenes derandomization of the level structure of the skip-list in an optimal way, bringing the skip list to 
  
    
      
        
          
            O
          
        
        (
        log
        â¡
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(\log n)}
  
 search time. (Choose the level of the i'th finite node to be 1 plus the number of times we can repeatedly divide i by 2 before it becomes odd.  Also, i=0 for the negative infinity header as we have the usual special case of choosing the highest possible level for negative and/or positive infinite nodes.) However this also allows someone to know where all of the higher-than-level 1 nodes are and delete them.
Alternatively, we could make the level structure quasi-random in the following way:

make all nodes level 1
j â 1
while the number of nodes at level j > 1 do
    for each i'th node at level j do
        if i is odd and i is not the last node at level j
            randomly choose whether to promote it to level j+1
        else if i is even and node i-1 was not promoted
            promote it to level j+1
        end if
    repeat
    j â j + 1
repeat

Like the derandomized version, quasi-randomization is only done when there is some other reason to be running an 
  
    
      
        
          
            O
          
        
        (
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(n)}
  
 operation (which visits every node).
The advantage of this quasi-randomness is that it doesn't give away nearly as much level-structure related information to an adversarial user as the de-randomized one.  This is desirable because an adversarial user who is able to tell which nodes are not at the lowest level can pessimize performance by simply deleting higher-level nodes. (Bethea and Reiter however argue that nonetheless an adversary can use probabilistic and timing methods to force performance degradation.[4]) The search performance is still guaranteed to be logarithmic.
It would be tempting to make the following "optimization":  In the part which says "Next, for each ith...", forget about doing a coin-flip for each even-odd pair.  Just flip a coin once to decide whether to promote only the even ones or only the odd ones.  Instead of 
  
    
      
        
          
            O
          
        
        (
        n
        log
        â¡
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(n\log n)}
  
 coin flips, there would only be 
  
    
      
        
          
            O
          
        
        (
        log
        â¡
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(\log n)}
  
 of them.  Unfortunately, this gives the adversarial user a 50/50 chance of being correct upon guessing that all of the even numbered nodes (among the ones at level 1 or higher) are higher than level one.  This is despite the property that there is a very low probability of guessing that a particular node is at level N for some integer N.
A skip list does not provide the same absolute worst-case performance guarantees as more traditional balanced tree data structures, because it is always possible (though with very low probability[5]) that the coin-flips used to build the skip list will produce a badly balanced structure.  However, they work well in practice, and the randomized balancing scheme has been argued to be easier to implement than the deterministic balancing schemes used in balanced binary search trees.  Skip lists are also useful in parallel computing, where insertions can be done in different parts of the skip list in parallel without any global rebalancing of the data structure. Such parallelism can be especially advantageous for resource discovery in an ad-hoc wireless network because a randomized skip list can be made robust to the loss of any single node.[6]

Indexable skiplist[edit]
As described above, a skip list is capable of fast 
  
    
      
        
          
            O
          
        
        (
        log
        â¡
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(\log n)}
  
 insertion and removal of values from a sorted sequence, but it has only slow 
  
    
      
        
          
            O
          
        
        (
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(n)}
  
 lookups of values at a given position in the sequence (i.e. return the 500th value); however, with a minor modification the speed of random access indexed lookups can be improved to  
  
    
      
        
          
            O
          
        
        (
        log
        â¡
        n
        )
      
    
    {\displaystyle {\mathcal {O}}(\log n)}
  
.
For every link, also store the width of the link.  The width is defined as the number of bottom layer links being traversed by each of the higher layer "express lane" links.
For example, here are the widths of the links in the example at the top of the page:

   1                               10
 o---> o---------------------------------------------------------> o    Top level
   1           3              2                    5
 o---> o---------------> o---------> o---------------------------> o    Level 3
   1        2        1        2              3              2
 o---> o---------> o---> o---------> o---------------> o---------> o    Level 2
   1     1     1     1     1     1     1     1     1     1     1 
 o---> o---> o---> o---> o---> o---> o---> o---> o---> o---> o---> o    Bottom level
Head  1st   2nd   3rd   4th   5th   6th   7th   8th   9th   10th  NIL
      Node  Node  Node  Node  Node  Node  Node  Node  Node  Node

Notice that the width of a higher level link is the sum of the component links below it (i.e. the width 10 link spans the links of widths 3, 2 and 5 immediately below it).  Consequently, the sum of all widths is the same on every level (10 + 1 = 1 + 3 + 2 + 5 = 1 + 2 + 1 + 2 + 3 + 2).
To index the skip list and find the i'th value, traverse the skip list while counting down the widths of each traversed link.  Descend a level whenever the upcoming width would be too large.
For example, to find the node in the fifth position (Node 5), traverse a link of width 1 at the top level.  Now four more steps are needed but the next width on this level is ten which is too large, so drop one level.  Traverse one link of width 3.  Since another step of width 2 would be too far, drop down to the bottom level.  Now traverse the final link of width 1 to reach the target running total of 5 (1+3+1). 

function lookupByPositionIndex(i)
    node â head
    i â i + 1                           # don't count the head as a step
    for level from top to bottom do
        while i â¥ node.width[level] do # if next step is not too far
            i â i - node.width[level]  # subtract the current width
            node â node.next[level]    # traverse forward at the current level
        repeat
    repeat
    return node.value
end function

This method of implementing indexing is detailed in "A skip list cookbook" by William Pugh[7]

History[edit]
Skip lists were first described in 1989 by William Pugh.[8]
To quote the author:

.mw-parser-output .templatequote{overflow:hidden;margin:1em 0;padding:0 40px}.mw-parser-output .templatequote .templatequotecite{line-height:1.5em;text-align:left;padding-left:1.6em;margin-top:0}Skip lists are a probabilistic data structure that seem likely to supplant balanced trees as the implementation method of choice for many applications. Skip list algorithms have the same asymptotic expected time bounds as balanced trees and are simpler, faster and use less space.ââWilliam Pugh, Concurrent Maintenance of Skip Lists (1989)
Usages[edit]
List of applications and frameworks that use skip lists:

Apache Portable Runtime implements skip lists.[9]
MemSQL uses lock-free skip lists as its prime indexing structure for its database technology.
Cyrus IMAP server offers a "skiplist" backend DB implementation[10]
Lucene uses skip lists to search delta-encoded posting lists in logarithmic time.[citation needed]
The "QMap" key/value dictionary (up to Qt 4) template class of Qt is implemented with skip lists.[11]
Redis, an ANSI-C open-source persistent key/value store for Posix systems, uses skip lists in its implementation of ordered sets.[12]
"nessDB", a very fast key-value embedded Database Storage Engine (Using log-structured-merge (LSM) trees), uses skip lists for its memtable.[13]
"skipdb" is an open-source implementation of an ACID ordered key/value database, implemented with a skip list instead of a b-tree.[14]
ConcurrentSkipListSet and ConcurrentSkipListMap in the Java 1.6 API.[15] Used by Apache HBase.
Speed Tables are a fast key-value datastore for Tcl that use skiplists for indexes and lockless shared memory.
"leveldb" is a fast key-value storage library written at Google that provides an ordered mapping from string keys to string values[16]
Con Kolivas' MuQSS[17] Scheduler for the Linux kernel uses skip lists
SkiMap uses skip lists as base data structure to build a more complex 3D Sparse Grid for Robot Mapping systems.[18]
"IOWOW" is a persistent C11 key/value storage library that uses skip lists as its main data structure.[19]
Skip lists are used for efficient statistical computations of running medians (also known as moving medians).[20]
Skip lists are also used in distributed applications (where the nodes represent physical computers, and pointers represent network connections) and for implementing highly scalable concurrent priority queues with less lock contention,[21] or even  without locking,[22][23][24] as well as lock-free concurrent dictionaries.[25] There are also several US patents for using skip lists to implement (lockless) priority queues and concurrent dictionaries.[26]

See also[edit]
Bloom filter
Skip graph
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ Jump up to: a b .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Papadakis, Thomas (1993). Skip Lists and Probabilistic Analysis of Algorithms (PDF) (Ph.D.). University of Waterloo.

^ Pugh, W. (1990). "Skip lists: A probabilistic alternative to balanced trees" (PDF). Communications of the ACM. 33 (6): 668â676. doi:10.1145/78973.78977.

^ Munro, J. Ian; Papadakis, Thomas; Sedgewick, Robert (1992). "Deterministic skip lists" (PDF). Proceedings of the third annual ACM-SIAM symposium on Discrete algorithms (SODA '92). Orlando, Florida, USA: Society for Industrial and Applied Mathematics, Philadelphia, PA, USA. pp.Â 367â375. doi:10.1145/139404.139478.

^ Bethea, Darrell; Reiter, Michael K. (September 21â23, 2009). Data Structures with Unpredictable Timing (PDF). ESORICS 2009, 14th European Symposium on Research in Computer Security. Saint-Malo, France. pp. 456â471, Â§4 "Skip Lists". doi:10.1007/978-3-642-04444-1_28. ISBNÂ 978-3-642-04443-4.

^ Sen, Sandeep (1991). "Some observations on skip lists". Information Processing Letters. 39 (4): 173â176. doi:10.1016/0020-0190(91)90175-H.

^ Shah, Gauri (2003). Distributed Data Structures for Peer-to-Peer Systems (PDF) (Ph.D. thesis). Yale University.

^ 
William Pugh.
"A skip list cookbook".
1990.
Section 3.4 Linear List Operations .

^ Pugh, William (April 1989). Concurrent Maintenance of Skip Lists (PS, PDF) (Technical report). Dept. of Computer Science, U. Maryland. CS-TR-2222.

^ 
Apache Portable Runtime APR 1.6 documentation

^ 
Cyrus IMAP server.
skiplist source file

^ 
QMap

^ "Redis ordered set implementation".

^ 
nessDB

^ 
skipdb

^ 
ConcurrentSkipListSet and
ConcurrentSkipListMap

^ 
leveldb

^ "LKML: Con Kolivas: [ANNOUNCE] Multiple Queue Skiplist Scheduler version 0.120". lkml.org. Retrieved 2017-05-11.

^ Gregorio, Daniele De; Stefano, Luigi Di (2017). "SkiMap: An Efficient Mapping Framework for Robot Navigation". arXiv:1704.05832 [cs.CV].

^ 
IOWOW

^ 
Raymond Hettinger.
"Efficient running median using an indexable skiplist (Python)".
2009.

^ Shavit, N.; Lotan, I. (2000). "Skiplist-based concurrent priority queues" (PDF). Proceedings 14th International Parallel and Distributed Processing Symposium. IPDPS 2000. p.Â 263. CiteSeerXÂ 10.1.1.116.3489. doi:10.1109/IPDPS.2000.845994. ISBNÂ 978-0-7695-0574-9.

^ Sundell, H.; Tsigas, P. (2003). "Fast and lock-free concurrent priority queues for multi-thread systems". Proceedings International Parallel and Distributed Processing Symposium. p.Â 11. CiteSeerXÂ 10.1.1.113.4552. doi:10.1109/IPDPS.2003.1213189. ISBNÂ 978-0-7695-1926-5.

^ Fomitchev, Mikhail; Ruppert, Eric (2004). Lock-free linked lists and skip lists (PDF). Proc. Annual ACM Symp. on Principles of Distributed Computing (PODC). pp.Â 50â59. doi:10.1145/1011767.1011776. ISBNÂ 1581138024.

^ Bajpai, R.; Dhara, K. K.; Krishnaswamy, V. (2008). "QPID: A Distributed Priority Queue with Item Locality". 2008 IEEE International Symposium on Parallel and Distributed Processing with Applications. p.Â 215. doi:10.1109/ISPA.2008.90. ISBNÂ 978-0-7695-3471-8.

^ Sundell, H. K.; Tsigas, P. (2004). "Scalable and lock-free concurrent dictionaries" (PDF). Proceedings of the 2004 ACM symposium on Applied computing - SAC '04. p.Â 1438. doi:10.1145/967900.968188. ISBNÂ 978-1581138122.

^ .mw-parser-output .citation{word-wrap:break-word}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}US patent 7937378Â 


External links[edit]



Wikimedia Commons has media related to Skip list.

"Skip list" entry in the Dictionary of Algorithms and Data Structures
Skip Lists: A Linked List with Self-Balancing BST-Like Properties on MSDN in C# 2.0
Why Skip Lists?
Skip Lists lecture (MIT OpenCourseWare: Introduction to Algorithms) 
Open Data Structures - Chapter 4 - Skiplists, Pat Morin
Skip trees, an alternative data structure to skip lists in a concurrent approach
Skip tree graphs, a distributed version of skip trees
More on skip tree graphs, a distributed version of skip trees
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}vteWell-known data structuresTypes
Collection
Container
Abstract
Associative array
Multimap
Retrieval Data Structure
List
Stack
Queue
Double-ended queue
Priority queue
Double-ended priority queue
Set
Multiset
Disjoint-set
Arrays
Bit array
Circular buffer
Dynamic array
Hash table
Hashed array tree
Sparse matrix
Linked
Association list
Linked list
Skip list
Unrolled linked list
XOR linked list
Trees
B-tree
Binary search tree
AA tree
AVL tree
Redâblack tree
Self-balancing tree
Splay tree
Heap
Binary heap
Binomial heap
Fibonacci heap
R-tree
R* tree
R+ tree
Hilbert R-tree
Trie
Hash tree
Graphs
Binary decision diagram
Directed acyclic graph
Directed acyclic word graph

List of data structures





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Skip_list&oldid=1050381415"
		Categories: Computer-related introductions in 1989Linked listsProbabilistic data structuresHidden categories: Articles with short descriptionShort description is different from WikidataAll articles with unsourced statementsArticles with unsourced statements from June 2014Commons category link from Wikidata
	
