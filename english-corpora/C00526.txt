
Title:
C++23
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Computer programming language
.mw-parser-output .sidebar{width:22em;float:right;clear:right;margin:0.5em 0 1em 1em;background:#f8f9fa;border:1px solid #aaa;padding:0.2em;text-align:center;line-height:1.4em;font-size:88%;border-collapse:collapse;display:table}body.skin-minerva .mw-parser-output .sidebar{display:table!important;float:right!important;margin:0.5em 0 1em 1em!important}.mw-parser-output .sidebar-subgroup{width:100%;margin:0;border-spacing:0}.mw-parser-output .sidebar-left{float:left;clear:left;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-none{float:none;clear:both;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-outer-title{padding:0 0.4em 0.2em;font-size:125%;line-height:1.2em;font-weight:bold}.mw-parser-output .sidebar-top-image{padding:0.4em}.mw-parser-output .sidebar-top-caption,.mw-parser-output .sidebar-pretitle-with-top-image,.mw-parser-output .sidebar-caption{padding:0.2em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-pretitle{padding:0.4em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-title,.mw-parser-output .sidebar-title-with-pretitle{padding:0.2em 0.8em;font-size:145%;line-height:1.2em}.mw-parser-output .sidebar-title-with-pretitle{padding:0.1em 0.4em}.mw-parser-output .sidebar-image{padding:0.2em 0.4em 0.4em}.mw-parser-output .sidebar-heading{padding:0.1em 0.4em}.mw-parser-output .sidebar-content{padding:0 0.5em 0.4em}.mw-parser-output .sidebar-content-with-subgroup{padding:0.1em 0.4em 0.2em}.mw-parser-output .sidebar-above,.mw-parser-output .sidebar-below{padding:0.3em 0.8em;font-weight:bold}.mw-parser-output .sidebar-collapse .sidebar-above,.mw-parser-output .sidebar-collapse .sidebar-below{border-top:1px solid #aaa;border-bottom:1px solid #aaa}.mw-parser-output .sidebar-navbar{text-align:right;font-size:115%;padding:0 0.4em 0.4em}.mw-parser-output .sidebar-list-title{padding:0 0.4em;text-align:left;font-weight:bold;line-height:1.6em;font-size:105%}.mw-parser-output .sidebar-list-title-c{padding:0 0.4em;text-align:center;margin:0 3.3em}@media(max-width:720px){body.mediawiki .mw-parser-output .sidebar{width:100%!important;clear:both;float:none!important;margin-left:0!important;margin-right:0!important}}C++ language revisions
C++98
C++03
C++11
C++14
C++17
C++20
C++23
.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vte
C++23 is the informal name for the next version of the ISO/IEC 14882 standard for the C++ programming language that will follow C++20. The current draft is N4901.[1]
In February 2020, at the final meeting for C++20 in Prague, an overall plan for C++23 was adopted:[2][3] planned features for C++23 are library support for coroutines, a modular standard library, executors, and networking.
The first WG21 meeting focused on C++23 was intended to take place in Varna in early June 2020, but was cancelled due to the COVID-19 pandemic,[4][5] as was the November 2020 meeting in New York[6][5] and the February 2021 meeting in Kona, Hawaii.[6] It is unlikely that there will be any face-to-face meeting before 2022.[7]

New features[edit]
In the absence of face-to-face WG21 meetings, few new features have so far been added to the C++23 draft. But the following were added after the virtual WG21 meeting of 9 November 2020, where they were approved by straw polls:[7]

Literal suffixes for std::size_t and the corresponding signed type[8]
A member function contains for std::basic_string and std::basic_string_view, to check whether or not the string contains a given substring or character[9]
A stacktrace library (<stacktrace>), based on Boost.Stacktrace[10]
A type trait std::is_scoped_enum[11]
The header <stdatomic.h>, for interoperability with C atomics[12]
After the virtual WG21 meeting of 22 February 2021, following features are added where they were approved by straw polls:[13]

Repairing input range adaptors and counted_iterator.[14]
Removing unnecessary empty parameter list () from lambda expressions.[15]
Relax the requirements for time_point::clock.[16]
std::visit for classes that are derived from std::variant.[17]
Locks lock lockables.[18]
Conditionally borrowed ranges.[19]
std::to_underlying.[20]
After the Summer 2021 ISO C++ standards plenary virtual meeting of June 2021, new features and defect reports were approved by straw polls:[21]

Consteval if (if consteval).[22]
Narrowing contextual conversions to bool.[23]
Allowing duplicate attributes.[24]
std::span-based string-stream (<spanstream>).[25]
std::out_ptr() and std::inout_ptr().[26]
constexpr for std::optional, std::variant,[27] and std::type_info::operator==.[28]
Iterators pair constructors for std::stack (stack) and std::queue (queue).[29]
Few changes of the ranges library:
Generalized starts_with and ends_with for arbitrary ranges.[30]
Renamed split_view to lazy_split_view and new split_view.[31]
Relaxing the constraint on join_view.[32]
Removing default_initializable constraint from concept view.[33]
Range constructor for std::basic_string_view.[34]
Prohibiting std::basic_string and std::basic_string_view construction from nullptr.[35]
std::invoke_r.[36]
Improvements on std::format.[37]
Adding default arguments for std::pair's forwarding constructor.[38]
After the Autumn 2021 ISO C++ standards plenary virtual meeting of October 2021, new features and defect reports were approved by straw polls:[39]

Non-literal variables, labels, and gotos in constexpr functions, but still ill-formed to evaluate them at compile-time.[40]
Explicit this object parameter.[41]
Changes on character sets and encodings.[42][43]
New preprocessors: #elifdef and #elifndef.[44]
Allowing alias declarations in init-statement.[45]
Overloading multidimensional subscript operator (e.g. arr[1, 2]).[46]
Decay copy in language: auto(x) or auto{x}.[47]
Changes in text formatting library:
Fixing locale handling in chrono formatters.[48]
Use of forwarding references in format arguments to allow std::generator-like types.[49]
Addition of type alias std::pmr::stacktrace which is equivalent to std::basic_stacktrace<std::pmr::polymorphic_allocator>.[50]
Changes in ranges library:
Refined definition of a view.[51]
Replacing function template std::ranges::istream_view with alias templates std::ranges::istream_view, std::ranges::wistream_view, and customization point object std::views::istream.[52]
zip range adaptor family:[53]
zip_view
zip_transform_view
adjacent_view (and std::views::pairwise being equivalent to std::views::adjacent<2>)
adjacent_transform_view (and std::views::pairwise_transform being equivalent to std::views::adjacent_transform<2>)
std::move_only_function.[54]
Monadic operations for std::optional.[55]
Member function template std::basic_string::resize_and_overwrite.[56]
Printing volatile pointers (volatile T*).[57]
std::byteswap.[58]
Heterogeneous erasure overloads for associative containers.[59]
Every specialization of std::span and std::basic_string_view is trivially copyable.[60]
Adding conditional noexcept specifications to std::exchange.[61]
Revamped specification and use of integer-class types.[62]
Moving the deprecation of C headers to the main standard for interoperability with C.[63]
Removed feature[edit]
Garbage collection support.[64]
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}"Working Draft, Standard for Programming Language C++" (PDF). 2021-10-23.

^ DusÃ­kovÃ¡, Hana (2019-11-06). "N4817: 2020 Prague Meeting Invitation and Information" (PDF). Retrieved 2020-02-13.{{cite web}}:  CS1 maint: url-status (link)

^ Voutilainen, Ville (2019-11-25). "To boldly suggest an overall plan for C++23". www.open-std.org. Retrieved 2020-02-13.{{cite web}}:  CS1 maint: url-status (link)

^ "Evolving C++ remotely".

^ Jump up to: a b Sutter, Herb (29 July 2020). "Business Plan and Convener's Report: ISO/IEC JTC1/SC22/WG21 (C++)" (PDF).

^ Jump up to: a b "Upcoming Meetings, Past Meetings".

^ Jump up to: a b Ranns, Nina (2020-11-19). "WG21 2020-11 Virtual Meeting: Minutes of Meeting" (PDF).

^ JeanHeyd Meneide; Rein Halbersma (2019-11-24). "Literal Suffix for (signed) size_t".

^ Wim Leflere; Paul Fee (2020-06-13). "string contains function".

^ Alexey Gorgurov; Antony Polukhin (2020-09-16). "A Proposal to add stacktrace library".

^ Juan Alday (2020-10-12). "A proposal for a type trait to detect scoped enumerations" (PDF).

^ Hans-J. Boehm (2020-10-23). "P0943R6: Support C atomics in C++".

^ Ranns, Nina (2021-02-22). "WG21 2021-02 Virtual Meeting: Minutes of Meeting" (PDF).

^ Tim Song (2021-01-12). "Repairing input range adaptors and counted_iterator".

^ Alex Christensen; JF Bastien (2020-12-11). "P1102R2: Down with ()!".

^ Alexey Dmitriev; Howard Hinnant (2020-10-22). "Relax Requirements for time_point::clock".

^ Barry Revzin (2020-10-30). "Inheriting from std::variant".

^ Tim Song (2020-11-13). "Locks lock lockables".

^ Barry Revzin (2020-02-19). "Conditionally borrowed ranges".

^ JeanHeyd Meneide (2021-01-22). "std::to_underlying for enumerations".

^ Ranns, Nina (2021-06-07). "WG21 2021-06 Virtual MeetingMinutes of Meeting" (PDF).

^ Barry Revzin; Richard Smith; Andrew Sutton; Daveed Vandevoorde (2021-03-22). "if consteval".

^ Andrzej KrzemieÅski (2021-04-12). "Narrowing contextual conversions to bool".

^ Erich Keane (2020-07-02). "Allow Duplicate Attributes" (PDF).

^ Peter Sommerlad (2021-02-26). "A strstream replacement using span<charT> as buffer" (PDF).

^ JeanHeyd Meneide; Todor Buyukliev; Isabella Muerte (2021-04-15). "out_ptr - a scalable output pointer abstraction".

^ Barry Revzin (2021-02-11). "Missing constexpr in std::optional and std::variant".

^ Peter Dimov (2021-05-01). "Making std::type_info::operator== constexpr".

^ Corentin Jabot (2021-03-05). "Iterators pair constructors for stack and queue" (PDF).

^ Christopher Di Bella (2021-02-19). "starts_with and ends_with".

^ Barry Revzin (2021-03-05). "Superior String Splitting".

^ Tim Song (2021-05-06). "join_view should join all views of ranges".

^ Barry Revzin (2021-05-14). "Views should not be required to be default constructible".

^ Corentin Jabot (2021-03-17). "Range constructor forstd::string_view 2: Constrain Harder" (PDF).

^ Yuriy Chernyshov (2020-09-06). "A Proposal to Prohibit std::basic_string and std::basic_string_view construction from nullptr".

^ Zhihao Yuan (2020-04-29). "invoke_r".

^ Victor Zverovich (2021-02-05). "std::format improvements".

^ Logan R. Smith (2021-01-25). "Default Arguments for pair's Forwarding Constructor".

^ Ranns, Nina (2021-10-04). "WG21 2021-10 Virtual Meeting Minutes of Meeting" (PDF).

^ Ville Voutilainen (2021-07-12). "Non-literal variables (and labels and gotos) in constexpr functions".

^ GaÅ¡per AÅ¾man; Sy Brand; Ben Deane; Barry Revzin (2021-07-12). "Deducing this".

^ Corentin Jabot (2021-09-14). "Consistent character literal encoding" (PDF).

^ Jens Maurer (2021-09-21). "Character sets and encodings".

^ Melanie Blower (2021-04-30). "Add support for preprocessing directives elifdef and elifndef" (PDF).

^ Jens Maurer (2021-04-13). "Extend init-statement to allow alias-declaration".

^ Mark Hoemmen; Daisy Hollman; Corentin Jabot; Isabella Muerte; Christian Trott (2021-09-14). "Multidimensional subscript operator" (PDF).

^ Zhihao Yuan (2021-07-12). "auto(x): decay-copy in the language".

^ Victor Zverovich; Corentin Jabot (2021-09-11). "Fixing locale handling in chrono formatters".

^ Victor Zverovich (2021-09-24). "Add support for std::generator-like types to std::format".

^ Steve Downey (2021-06-14). "Add a pmr alias for std::stacktrace".

^ Barry Revzin; Tim Song (2021-08-15). "What is a view?".

^ Nicolai Josuttis (2021-09-24). "Fix istream_view" (PDF).

^ Tim Song (2021-06-11). "zip".

^ Matt Calabrese; Ryan McDougall (2021-07-09). "move_only_function".

^ Sy Brand (2021-04-27). "Monadic operations for std::optional".

^ Chris Kennelly; Mark Zeren (2021-09-14). "basic_string::resize_and_overwrite".

^ Bryce Adelstein Lelbach (2021-09-25). "Printing volatile Pointers".

^ Isabella Muerte; Corentin Jabot (2021-09-17). "Byteswapping for fun&&nuf".

^ Konstantin Boyarinov; Sergey Vinogradov; Ruslan Arutyunyan (2020-12-15). "Heterogeneous erasure overloads for associative containers".

^ Nevin Liber (2021-03-19). "Require span & basic_string_view to be TriviallyCopyable" (PDF).

^ Giuseppe D'Angelo (2021-06-28). "Add a conditional noexcept specification to std::exchange".

^ Tim Song (2021-08-06). "Cleaning up integer-class types".

^ Thomas KÃ¶ppe (2021-06-11). "Clarifying the status of the "C headers"".

^ JF Bastien; Alisdair Meredith (2021-04-16). "Removing Garbage Collection Support".


.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}hidevteC++
C++
C++98
C++03
C++11
C++14
C++17
C++20
C++23
Features
Classes
Exception handling
Function overloading
new and delete
Operator overloading
Operators
Templates
Standard Library
I/O Streams
Smart pointers
STL
Strings
Compilers
Comparison of C++ compilers
Borland C++
Borland Turbo C++
C++Builder
Clang
GCC
Intel C++ Compiler
Oracle Solaris Studio
Visual C++
Watcom C/C++
IDEs
Comparison of C IDEs
Anjuta
CLion
Code::Blocks
CodeLite
DevC++
Eclipse
Geany
Microsoft Visual Studio
NetBeans
KDevelop
Qt Creator
Superset languages
Objective-C++
C++/CLI
C++/CX
C++/WinRT
Ch
SYCL
Dialects
 Embedded C++
Relative toother languages
Compatibility of C and C++
Comparison of Java and C++
Comparison of ALGOL 68 and C++
Comparison of programming languages

 Category



.mw-parser-output .asbox{position:relative;overflow:hidden}.mw-parser-output .asbox table{background:transparent}.mw-parser-output .asbox p{margin:0}.mw-parser-output .asbox p+p{margin-top:0.25em}.mw-parser-output .asbox-body{font-style:italic}.mw-parser-output .asbox-note{font-size:smaller}.mw-parser-output .asbox .navbar{position:absolute;top:-0.75em;right:1em;display:none}This programming-language-related article is a stub. You can help Wikipedia by expanding it.vte




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=C%2B%2B23&oldid=1053602837"
		Categories: C++C++ programming language familyAlgol programming language familyHigh-level programming languagesStatically typed programming languagesProgramming language topic stubsHidden categories: CS1 maint: url-statusArticles with short descriptionShort description is different from WikidataAll stub articles
	
