
Title:
Computational thinking
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		This article is written like a personal reflection, personal essay, or argumentative essay that states a Wikipedia editor's personal feelings or presents an original argument about a topic. Please help improve it by rewriting it in an encyclopedic style.  (September 2018) (Learn how and when to remove this template message)

In education, computational thinking (CT) is a set of problem-solving methods that involve expressing problems and their solutions in ways that a computer could also execute.[1]  It involves automation of processes, but also using computing to explore, analyze, and understand processes (natural and artificial).[2][3]

Contents

1 History
2 Characteristics

2.1 Connection to the "four Cs"


3 In Kâ12 education
4 Center for Computational Thinking
5 Criticism
6 See also
7 References
8 Further reading



History[edit]
The history of computational thinking as a concept dates back at least to the 1950s but most ideas are much older.[4][2] Computational thinking involves ideas like abstraction, data representation, and logically organizing data, which are also prevalent in other kinds of thinking, such as scientific thinking, engineering thinking, systems thinking, design thinking, model-based thinking, and the like.[5] Neither the idea nor the term are recent: Preceded by terms like algorithmizing, procedural thinking, algorithmic thinking, and computational literacy[2] by computing pioneers like Alan Perlis and Donald Knuth, the term computational thinking was first used by Seymour Papert in 1980[6] and again in 1996.[7] Computational thinking can be used to algorithmically solve complicated problems of scale, and is often used to realize large improvements in efficiency.[8]
The phrase computational thinking was brought to the forefront of the computer science education community in 2006 as a result of a Communications of the ACM essay on the subject by Jeannette Wing. The essay suggested that thinking computationally was a fundamental skill for everyone, not just computer scientists, and argued for the importance of integrating computational ideas into other subjects in school.[9]  The essay also said that by learning computational thinking, children will be better in many everyday tasksâas examples, the essay gave packing one's backpack, finding one's lost mittens, and knowing when to stop renting and buying instead.  The continuum of computational thinking questions in education ranges from Kâ9 computing for children to professional and continuing education, where the challenge is how to communicate deep principles, maxims, and ways of thinking between experts.[2]
For the first ten years computational thinking was a US-centered movement, and still today that early focus is seen in the field's research.[10]  The field's most cited articles and most cited people were active in the early US CT wave, and the field's most active researcher networks are US-based.[10]  Dominated by US and European researchers, it is unclear to what extent can the field's predominantly Western body of research literature cater to the needs of students in other cultural groups.[10]

Characteristics[edit]
The characteristics that define computational thinking are decomposition, pattern recognition / data representation, generalization/abstraction, and algorithms.[11][12] By decomposing a problem, identifying the variables involved using data representation, and creating algorithms, a generic solution results. The generic solution is a generalization or abstraction that can be used to solve a multitude of variations of the initial problem.

  The "three As" Computational Thinking Process describes computational thinking as a set of three steps: abstraction, automation, and analysis.
Another characterization of computational thinking is the "three As" iterative process based on three stages:

Abstraction: Problem formulation;
Automation: Solution expression;
Analysis: Solution execution and evaluation.[13]
Connection to the "four Cs"[edit]
The four Cs of 21st century learning are communication, critical thinking, collaboration, and creativity. The fifth C could be computational thinking which entails the capability to resolve problems algorithmically and logically. It includes tools that produce models and visualize data.[14] Grover describes how computational thinking is applicable across subjects beyond science, technology, engineering, and mathematics (STEM) which include the social sciences and language arts. 
Since its inception, the 4 Cs have gradually gained acceptance as vital elements of many school syllabi. This development triggered a modification in platforms and directions such as inquiry, project-based, and more profound learning across all Kâ12 levels. Many countries have introduced computer thinking to all students. The United Kingdom has CT in its national curriculum since 2012. Singapore calls CT as "national capability". Other nations like Australia, China, Korea, and New Zealand embarked on massive efforts to introduce computational thinking in schools.[15] In the United States, President Barack Obama created this program, Computer Science for All to empower this generation of students in America with the proper computer science proficiency required to flourish in a digital economy.[16] Computational thinking means thinking or solving problems like computer scientists. CT refers to thought processes required in understanding problems and formulating solutions. CT involves logic, assessment, patterns, automation, and generalization. Career readiness can be integrated into learning and teaching environments in multiple ways.[17]

In Kâ12 education[edit]
Similar to Seymour Papert, Alan Perlis, and Marvin Minsky before, Jeannette Wing envisioned computational thinking becoming an essential part of every child's education.[9] However, integrating computational thinking into the Kâ12 curriculum and computer science education has faced several challenges including the agreement on the definition of computational thinking,[18][19] how to assess children's development in it,[5] and how to distinguish it from other similar "thinking" like systems thinking, design thinking, and engineering thinking.[5]  Currently, computational thinking is broadly defined as a set of cognitive skills and problem solving processes that include (but are not limited to) the following characteristics[19][20] (but there are arguments that few, if any, of them belong to computing specifically, instead of being principles in many fields of science and engineering[2])

Using abstractions and pattern recognition to represent the problem in new and different ways
Logically organizing and analyzing data
Breaking the problem down into smaller parts
Approaching the problem using programmatic thinking techniques such as iteration, symbolic representation, and logical operations
Reformulating the problem into a series of ordered steps (algorithmic thinking)
Identifying, analyzing, and implementing possible solutions with the goal of achieving the most efficient and effective combination of steps and resources
Generalizing this problem-solving process to a wide variety of problems
Current integration computational thinking into the Kâ12 curriculum comes in two forms: in computer science classes directly or through the use and measure of computational thinking techniques in other subjects. Teachers in Science, Technology, Engineering, and Mathematics (STEM) focused classrooms that include computational thinking, allow students to practice problem-solving skills such as trial and error.[21] Valerie Barr and Chris Stephenson describe computational thinking patterns across disciplines in a 2011 ACM Inroads article[18] However Conrad Wolfram has argued that computational thinking should be taught as a distinct subject.[22]
There are online institutions that provide a curriculum, and other related resources, to build and strengthen pre-college students with computational thinking, analysis and problem-solving.

Center for Computational Thinking[edit]
Carnegie Mellon University in Pittsburgh has a Center for Computational Thinking. The Center's major activity is conducting PROBEs or PROBlem-oriented Explorations. These PROBEs are experiments that apply novel computing concepts to problems to show the value of computational thinking. A PROBE experiment is generally a collaboration between a computer scientist and an expert in the field to be studied. The experiment typically runs for a year. In general, a PROBE will seek to find a solution for a broadly applicable problem and avoid narrowly focused issues. Some examples of PROBE experiments are optimal kidney transplant logistics and how to create drugs that do not breed drug-resistant viruses.[23]

Criticism[edit]
The concept of computational thinking has been criticized as too vague, as it's rarely made clear how it is different from other forms of thought.[4][24] The inclination among computer scientist to force computational solutions upon other fields has been called "computational chauvinism".[25] Some computer scientists worry about the promotion of computational thinking as a substitute for a broader computer science education, as computational thinking represents just one small part of the field.[26][5] Others worry that the emphasis on computational thinking encourages computer scientists to think too narrowly about the problems they can solve, thus avoiding the social, ethical and environmental implications of the technology they create.[27][4] In addition, as nearly all CT research is done in the US and Europe, it is not certain how well those educational ideas work in other cultural contexts.[10]
A 2019 paper argues that the term "computational thinking" (CT) should be used mainly as a shorthand to convey the educational value of computer science, hence the need of teaching it in school.[28] The strategic goal is to have computer science recognized in school as an autonomous scientific subject more than trying to identify "body of knowledge" or "assessment methods" for CT. Particularly important is to stress the fact that the scientific novelty associated with CT is the shift from the "problem solving" of mathematics to the "having problem solved" of computer science. Without the "effective agent", who automatically executes the instructions received to solve the problem, there would be no computer science, but just mathematics. Another criticism in the same paper is that focusing on "problem solving" is too narrow, since "solving a problem is just an instance of a situation where one wants to reach a specified goal". The paper therefore generalizes the original definitions by Cuny, Snyder, and Wing[29] and Aho[30] as follows: "Computational thinking is the thought processes involved in modeling a situation and specifying the ways an information-processing agent can effectively operate within it to reach an externally specified (set of) goal(s)."
Many definitions of CT describe it only at skill level because the momentum behind its growth comes from its promise to boost STEM education. And, the latest movement in STEM education is based on suggestions (by learning theories) that we teach students experts' habits of mind. So, whether it is computational thinking, scientific thinking, or engineering thinking, the motivation is the same and the challenge is also the same: teaching experts' habits of mind to novices is inherently problematic because of the prerequisite content knowledge and practice skills needed to engage them in the same thinking processes as the experts. Only when we link the experts' habits of mind to fundamental cognitive processes can we then narrow their skill-sets down to more basic competencies that can be taught to novices. There have been only a few studies that actually address the cognitive essence of CT. Among those, Yasar (Communications of ACM, Vol. 61, No. 7, July 2018) [31]  describes CT as thinking that is generated/facilitated by a computational device, be it biological or electronic. Accordingly, everyone employs CT, not just computer scientists, and it can be improved via education and experience. Yasar founded the first undergraduate degree program in computational science in 1998; an NSF-supported program that fueled the advancement in computational thinking education long before the seminal paper by Wing in 2006. In 2003, he testified before the US Congress about the virtue of a computational approach to STEM education. In his work, he describes not only the cognitive essence of CT, but he also links it to both scientific thinking and engineering thinking.

See also[edit]
Computer-based math
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Wing, Jeannette (2014). "Computational Thinking Benefits Society". 40th Anniversary Blog of Social Issues in Computing.

^ Jump up to: a b c d e Denning, P.J. and Tedre, M. Computational Thinking. The MIT Press, 2019.

^ Wing, Jeannette M (28 October 2008). "Computational thinking and thinking about computing". Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences. 366 (1881): 3717â3725. doi:10.1098/rsta.2008.0118. ISSNÂ 1364-503X. PMCÂ 2696102. PMIDÂ 18672462.

^ Jump up to: a b c Tedre, Matti; Denning, Peter (2016). "The Long Quest for Computational Thinking" (PDF). Proceedings of the 16th Koli Calling Conference on Computing Education Research.

^ Jump up to: a b c d Denning, Peter J.; Tedre, Matti (2019). Computational thinking. Cambridge. ISBNÂ 9780262353410. OCLCÂ 1082364202.

^ Papert, Seymour. Mindstorms: Children, computers, and powerful ideas. Basic Books, Inc., 1980.

^ Papert, Seymour (1996). "An exploration in the space of mathematics educations". International Journal of Computers for Mathematical Learning. 1. doi:10.1007/BF00191473. S2CIDÂ 46013234.

^ Computational thinking:
Repenning, A.; Webb, D.; Ioannidou, A. (2010). "Scalable game design and the development of a checklist for getting computational thinking into public schools". Proceedings of the 41st ACM technical symposium on Computer science education - SIGCSE '10. p.Â 265. doi:10.1145/1734263.1734357. ISBNÂ 9781450300063. S2CIDÂ 19128584.
Guzdial, Mark (2008). "Education: Paving the way for computational thinking" (PDF). Communications of the ACM. 51 (8): 25â27. doi:10.1145/1378704.1378713. S2CIDÂ 35737830. Archived from the original (PDF) on 3 March 2016. Retrieved 29 August 2015.
Wing, J. M. (2008). "Computational thinking and thinking about computing". Philosophical Transactions of the Royal Society A: Mathematical, Physical and Engineering Sciences. 366 (1881): 3717â3725. Bibcode:2008RSPTA.366.3717W. doi:10.1098/rsta.2008.0118. PMCÂ 2696102. PMIDÂ 18672462.
Center for Computational thinking at Carnegie Mellon cmu.edu8
Exploring Computational Thinking, Google.com
How to Teach Computational Thinking by Stephen Wolfram, Stephen Wolfram Blog, 7 September 2016.
Conrad Wolfram: Teaching kids real math with computers on YouTube, TED talk 15 November 2010
What is Computational Thinking? CS4FN at CS4FN
The Sacramento Regional CPATH Team has created a Think CT website with information on CT developed by this NSF-funded project. Archived 31 August 2011 at the Wayback Machine
A short introduction to Computational Thinking by the Open University Archived 25 February 2016 at the Wayback Machine

^ Jump up to: a b Wing, Jeanette M. (2006). "Computational thinking" (PDF). Communications of the ACM. 49 (3): 33â35. doi:10.1145/1118178.1118215. hdl:10818/29866. S2CIDÂ 1693513.

^ Jump up to: a b c d Saqr, Mohammed; Ng, Kwok; Oyelere, Solomon Sunday; Tedre, Matti (2 March 2021). "People, Ideas, Milestones: A Scientometric Study of Computational Thinking". ACM Transactions on Computing Education. 21 (3): 20:1â20:17. doi:10.1145/3445984.

^ "Introduction to computational thinking". BBC Bitesize. Retrieved 25 November 2015.

^ "Exploring Computational Thinking". Google for Education. Retrieved 25 November 2015.

^ Repenning, Alexander (4 September 2016). "Computational Thinking Tools". IEEE Symposium on Visual Languages and Human-Centric Computing. Retrieved 7 April 2021.{{cite news}}:  CS1 maint: url-status (link)

^ Grover, Shuchi (25 February 2018). "The 5th 'C' of 21st Century Skills? Try Computational Thinking (Not Coding)". EdSurge. Retrieved 25 February 2018.{{cite news}}:  CS1 maint: url-status (link)

^ "The 5th 'C' of 21st Century Skills? Try Computational Thinking (Not Coding) â EdSurge News". EdSurge. 2 February 2018. Retrieved 11 June 2018.

^ "CSforALL". csforall.org. Retrieved 11 June 2018.

^ "Future-forward: How to incorporate the 5th 'C' of 21st Century learning". eSchool News. 2 October 2017. Retrieved 11 June 2018.

^ Jump up to: a b Barr, Valerie; Stephenson, Chris (2011). "Bringing computational thinking to Kâ12: what is Involved and what is the role of the computer science education community?". ACM Inroads. 2. doi:10.1145/1929887.1929905. S2CIDÂ 207184749.

^ Jump up to: a b Grover, Shuchi; Pea, Roy (2013). "Computational Thinking in Kâ12 A Review of the State of the Field". Educational Researcher. 42. doi:10.3102/0013189x12463051. S2CIDÂ 145509282.

^ Stephenson, Chris; Valerie Barr (May 2011). "Defining Computational Thinking for Kâ12". CSTA Voice. 7 (2): 3â4. ISSNÂ 1555-2128. CT is a problem solving process...

^ Barr, David; Harrison, John; Leslie, Conery (1 March 2011). "Computational Thinking: A Digital Age Skill for Everyone". Learning & Leading with Technology. 38 (6): 20â23. ISSNÂ 0278-9175.

^ Wolfram, Conrad. "Computational thinking is the code to success". The Times Educational Supplement.

^ "PROBE Experiments". www.cs.cmu.edu.

^ Jones, Elizabeth. "The Trouble with Computational Thinking" (PDF). ACM. Retrieved 30 November 2016.

^ Denning, Peter J.; Tedre, Matti; Yongpradit, Pat (2 February 2017). "Misconceptions about computer science". Communications of the ACM. 60 (3): 31â33. doi:10.1145/3041047. S2CIDÂ 411880.

^ Denning, Peter J. (1 June 2009). "Beyond computational thinking". Communications of the ACM. 52 (6): 28. doi:10.1145/1516046.1516054. hdl:10945/35494. S2CIDÂ 215746950.

^ Easterbrook, Steve (2014). "From Computational Thinking to Systems Thinking: A conceptual toolkit for sustainability computing". Proceedings of the 2nd International Conference ICT for Sustainability. doi:10.2991/ict4s-14.2014.28. ISBNÂ 978-94-62520-22-6.

^ Nardelli, Enrico (February 2019). "Do we really need Computational Thinking?". Communications of the ACM. 62 (2): 32â35. doi:10.1145/3231587.

^ Wing, Jeannette M. (March 2011). "Research Notebook: Computational ThinkingâWhat and Why?". The LINK. The Magazine of Carnegie Mellon University's School of Computer Science. Carnegie Mellon University, School of Computer Science. Retrieved 1 March 2019.

^ Aho, Alfred V. (January 2011). "Computation and computational thinking". Ubiquity. 2011 (January). doi:10.1145/1922681.1922682.

^ Yasar, Osman (1 July 2018). "A New Perspective on Computational Thinking". Communications of the ACM. 61 (7): 33â39. doi:10.1145/3214354.


Further reading[edit]



The Wikibook A-level Computing has a page on the topic of: Introduction to principles of computation

.mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li{margin-left:0;padding-left:3.2em;text-indent:-3.2em}.mw-parser-output .refbegin-hanging-indents ul,.mw-parser-output .refbegin-hanging-indents ul li{list-style:none}@media(max-width:720px){.mw-parser-output .refbegin-hanging-indents>ul>li{padding-left:1.6em;text-indent:-1.6em}}.mw-parser-output .refbegin-columns{margin-top:0.3em}.mw-parser-output .refbegin-columns ul{margin-top:0}.mw-parser-output .refbegin-columns li{page-break-inside:avoid;break-inside:avoid-column}
Wang, Paul S. (2020). "Computational Thinking Blog". sofpower.
Denning, Peter J.; Tedre, Matti (2019). Computational Thinking. The MIT Press Essential Knowledge Series. Cambridge, MA: MIT Press. doi:10.7551/mitpress/11740.001.0001. ISBNÂ 9780262536561. OCLCÂ 1052902737.
National Research Council (2010). Report of a Workshop on the Scope and Nature of Computational Thinking. Committee for the Workshops on Computational Thinking. Washington, DC: National Academies Press. doi:10.17226/12840. ISBNÂ 9780309149570. OCLCÂ 520515477.
National Research Council (2011). Report of a Workshop on the Pedagogical Aspects of Computational Thinking. Committee for the Workshops on Computational Thinking. Washington, DC: National Academies Press. doi:10.17226/13170. ISBNÂ 9780309214742. OCLCÂ 747314143.
Riley, David D.; Hunt, Kenny A. (2014). Computational Thinking for the Modern Problem Solver. Chapman & Hall/CRC Textbooks in Computing. Boca Raton, FL: CRC Press. ISBNÂ 9781466587779. OCLCÂ 879630598.
Wang, Paul S. (2016). From Computing to Computational Thinking. Boca Raton, FL: CRC Press. doi:10.1201/9781315115320. ISBNÂ 978-1482217650. OCLCÂ 944534803.





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Computational_thinking&oldid=1062189331"
		Categories: Problem solving skillsComputational fields of studyTheories of deductionCognitionComputational scienceHidden categories: Webarchive template wayback linksCS1 maint: url-statusWikipedia articles with style issues from September 2018All articles with style issuesUse dmy dates from July 2020
	
