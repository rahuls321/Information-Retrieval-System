
Title:
Integer (computer science)
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Datum of integral data type
In computer science, an integer is a datum of integral data type, a data type that represents some range of mathematical integers. Integral data types may be of different sizes and may or may not be allowed to contain negative values. Integers are commonly represented in a computer as a group of binary digits (bits). The size of the grouping varies so the set of integer sizes available varies between different types of computers. Computer hardware nearly always provides a way to represent a processor register or memory address as an integer.

Contents

1 Value and representation
2 Common integral data types

2.1 Bytes and octets
2.2 Words
2.3 Short integer
2.4 Long integer
2.5 Long long


3 Syntax
4 See also
5 Notes
6 References



Value and representation[edit]
The value of an item with an integral type is the mathematical integer that it corresponds to. Integral types may be unsigned (capable of representing only non-negative integers) or signed (capable of representing negative integers as well).[1]
An integer value is typically specified in the source code of a program as a sequence of digits optionally prefixed with + or â. Some programming languages allow other notations, such as hexadecimal (base 16) or octal (base 8). Some programming languages also permit digit group separators.[2]
The internal representation of this datum is the way the value is stored in the computer's memory. Unlike mathematical integers, a typical datum in a computer has some minimal and maximum possible value.
The most common representation of a positive integer is a string of bits, using the binary numeral system. The order of the memory bytes storing the bits varies; see endianness. The width or precision of an integral type is the number of bits in its representation. An integral type with n bits can encode 2n numbers; for example an unsigned type typically represents the non-negative values 0 through 2nâ1. Other encodings of integer values to bit patterns are sometimes used, for example binary-coded decimal or Gray code, or as printed character codes such as ASCII.
There are four well-known ways to represent signed numbers in a binary computing system. The most common is two's complement, which allows a signed integral type with n bits to represent numbers from â2(nâ1) through 2(nâ1)â1. Two's complement arithmetic is convenient because there is a perfect one-to-one correspondence between representations and values (in particular, no separate +0 and â0), and because addition, subtraction and multiplication do not need to distinguish between signed and unsigned types. Other possibilities include offset binary, sign-magnitude, and ones' complement.
Some computer languages define integer sizes in a machine-independent way; others have varying definitions depending on the underlying processor word size. Not all language implementations define variables of all integer sizes, and defined sizes may not even be distinct in a particular implementation. An integer in one programming language may be a different size in a different language or on a different processor.

Common integral data types[edit]



Bits

Name

Range (assuming two's complement for signed)

Decimal digits

Uses

Implementations


C/C++

C#

Pascal and Delphi

Java

SQL[a]

FORTRAN

D

Rust


4

nibble, semioctet

Signed: From â8 to 7, from â(23) to 23Â âÂ 1

0.9

Binary-coded decimal, single decimal digit representation

N/A

N/A

N/A

N/A

N/A

N/A

N/A

N/A


Unsigned: From 0 to 15, which equals 24Â âÂ 1

1.2


8

byte, octet, i8, u8

Signed: From â128 to 127, from â(27) to 27Â âÂ 1

2.11

ASCII characters, code units in the UTF-8 character encoding

.mw-parser-output .monospaced{font-family:monospace,monospace}int8_t, signed char[b]

sbyte

Shortint

byte

tinyint

integer(1)

byte

i8


Unsigned: From 0 to 255, which equals 28Â âÂ 1

2.41

uint8_t, unsigned char[b]

byte

Byte

N/A

unsigned tinyint

N/A

ubyte

u8


16

halfword, word, short, i16, u16

Signed: From â32,768 to 32,767, from â(215) to 215Â âÂ 1

4.52

UCS-2 characters, code units in the UTF-16 character encoding

int16_t, short[b], int[b]

short

Smallint

short

smallint

integer(2)

short

i16


Unsigned: From 0 to 65,535, which equals 216Â âÂ 1

4.82

uint16_t, unsigned[b], unsigned int[b]

ushort

Word

char[c]

unsigned smallint

N/A

ushort

u16


32

word, long, doubleword, longword, int, i32, u32

Signed: From â2,147,483,648 to 2,147,483,647, from â(231) to 231Â âÂ 1

9.33

UTF-32 characters, true color with alpha, FourCC, pointers in 32-bit computing

int32_t, int[b], long[b]

int

LongInt; Integer[d]

int

int

integer(4)

int

i32


Unsigned: From 0 to 4,294,967,295, which equals 232Â âÂ 1

9.63

uint32_t, unsigned[b], unsigned int[b], unsigned long[b]

uint

LongWord; DWord; Cardinal[d]

N/A

unsigned int

N/A

uint

u32


64

word, doubleword, longword, long long, quad, quadword, qword, int64, i64, u64

Signed: From â9,223,372,036,854,775,808 to 9,223,372,036,854,775,807, from â(263) to 263Â âÂ 1

18.96

Time (milliseconds since the Unix epoch), pointers in 64-bit computing

int64_t, long[b], long long[b]

long

Int64

long

bigint

integer(8)

long

i64


Unsigned: From 0 to 18,446,744,073,709,551,615, which equals 264Â âÂ 1

19.27

uint64_t, unsigned long long[b]

ulong

UInt64; QWord

N/A

unsigned bigint

N/A

ulong

u64


128

octaword, double quadword, i128, u128

Signed: From â170,141,183,460,469,231,731,687,303,715,884,105,728 to 170,141,183,460,469,231,731,687,303,715,884,105,727, from â(2127) to 2127Â âÂ 1

38.23

Complex scientific calculations,
IPv6 addresses,
GUIDs


C: only available as non-standard compiler-specific extension

N/A

N/A

N/A

N/A

integer(16)

cent[e]

i128


Unsigned: From 0 to 340,282,366,920,938,463,463,374,607,431,768,211,455, which equals 2128Â âÂ 1

38.53

N/A

ucent[e]

u128


n

n-bit integer (general case)

Signed: â(2nâ1) to (2nâ1Â âÂ 1)

(nÂ âÂ 1) log10Â 2

Ada: range -2**(n-1)..2**(n-1)-1


Unsigned: 0 to (2n â 1)

n log10Â 2

Ada: range 0..2**n-1, mod 2**n; standard libraries' or third-party arbitrary arithmetic libraries' BigDecimal or Decimal classes in many languages such as Python, C++, etc.

Different CPUs support different integral data types. Typically, hardware will support both signed and unsigned types, but only a small, fixed set of widths.
The table above lists integral type widths that are supported in hardware by common processors. High level programming languages provide more possibilities. It is common to have a 'double width' integral type that has twice as many bits as the biggest hardware-supported type. Many languages also have bit-field types (a specified number of bits, usually constrained to be less than the maximum hardware-supported width) and range types (that can represent only the integers in a specified range).
Some languages, such as Lisp, Smalltalk, REXX, Haskell, Python, and Raku support arbitrary precision integers (also known as infinite precision integers or bignums). Other languages that do not support this concept as a top-level construct may have libraries available to represent very large numbers using arrays of smaller variables, such as Java's BigInteger class or Perl's "bigint" package.[5] These use as much of the computer's memory as is necessary to store the numbers; however, a computer has only a finite amount of storage, so they too can only represent a finite subset of the mathematical integers. These schemes support very large numbers, for example one kilobyte of memory could be used to store numbers up to 2466 decimal digits long.
A Boolean or Flag type is a type that can represent only two values: 0 and 1, usually identified with false and true respectively.  This type can be stored in memory using a single bit, but is often given a full byte for convenience of addressing and speed of access.
A four-bit quantity is known as a nibble (when eating, being smaller than a bite) or nybble (being a pun on the form of the word byte). One nibble corresponds to one digit in hexadecimal and holds one digit or a sign code in binary-coded decimal.

Bytes and octets[edit]
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}Main articles: Byte and Octet (computing)
The term byte initially meant 'the smallest addressable unit of memory'. In the past, 5-, 6-, 7-, 8-, and 9-bit bytes have all been used. There have also been computers that could address individual bits ('bit-addressed machine'), or that could only address 16- or 32-bit quantities ('word-addressed machine'). The term byte was usually not used at all in connection with bit- and word-addressed machines.
The term octet always refers to an 8-bit quantity. It is mostly used in the field of computer networking, where computers with different byte widths might have to communicate.
In modern usage byte almost invariably means eight bits, since all other sizes have fallen into disuse; thus byte has come to be synonymous with octet.

Words[edit]
Main article: Word (computer architecture)
The term 'word' is used for a small group of bits that are handled simultaneously by processors of a particular architecture. The size of a word is thus CPU-specific. Many different word sizes have been used, including 6-, 8-, 12-, 16-, 18-, 24-, 32-, 36-, 39-, 40-, 48-, 60-, and 64-bit. Since it is architectural, the size of a word is usually set by the first CPU in a family, rather than the characteristics of a later compatible CPU. The meanings of terms derived from word, such as longword, doubleword, quadword, and halfword, also vary with the CPU and OS.[6]
Practically all new desktop processors are capable of using 64-bit words, though embedded processors with 8- and 16-bit word size are still common. The 36-bit word length was common in the early days of computers.
One important cause of non-portability of software is the incorrect assumption that all computers have the same word size as the computer used by the programmer. For example, if a programmer using the C language incorrectly declares as int a variable that will be used to store values greater than 215â1, the program will fail on computers with 16-bit integers. That variable should have been declared as long, which has at least 32 bits on any computer. Programmers may also incorrectly assume that a pointer can be converted to an integer without loss of information, which may work on (some) 32-bit computers, but fail on 64-bit computers with 64-bit pointers and 32-bit integers. This issue is resolved by C99 in stdint.h in the form of intptr_t.

Short integer[edit]
A short integer can represent a whole number that may take less storage, while having a smaller range, compared with a standard integer on the same machine.
In C, it is denoted by short. It is required to be at least 16 bits, and is often smaller than a standard integer, but this is not required.[7][8] A conforming program can assume that it can safely store values between â(215â1)[9] and 215â1,[10] but it may not assume that the range isn't larger. In Java, a short is always a 16-bit integer. In the Windows API, the datatype SHORT is defined as a 16-bit signed integer on all machines.[6]


Common short integer sizes


Programming language

Data type name

Signedness

Size in bytes

Minimum value

Maximum value


C and C++

short

signed

2

â32,767[f]

+32,767


unsigned short

unsigned

2

0

65,535


C#

short

signed

2

â32,768

+32,767


ushort

unsigned

2

0

65,535


Java

short

signed

2

â32,768

+32,767

Long integer[edit]
A long integer can represent a whole integer whose range is greater than or equal to that of a standard integer on the same machine.
In C, it is denoted by long. It is required to be at least 32 bits, and may or may not be larger than a standard integer. A conforming program can assume that it can safely store values between â(231â1)[9] and 231â1,[10] but it may not assume that the range isn't larger.


Common long integer sizes


Programming language

Approval Type

Platforms

Data type name

Storage in bytes

Signed range

Unsigned range


C ISO/ANSI C99

International Standard

Unix,16/32-bit systems[6]Windows,16/32/64-bit systems[6]

long[g]

4(minimum requirement 4)

â2,147,483,647 to +2,147,483,647

0 to 4,294,967,295(minimum requirement)


C ISO/ANSI C99

International Standard

Unix,64-bit systems[6][8]

long[g]

8(minimum requirement 4)

â9,223,372,036,854,775,807 to +9,223,372,036,854,775,807

0 to 18,446,744,073,709,551,615


C++ ISO/ANSI

International Standard

Unix, Windows,16/32-bit system

long[g]

4 [12](minimum requirement 4)

â2,147,483,648 to +2,147,483,647

0 to 4,294,967,295(minimum requirement)


C++/CLI

International StandardECMA-372

Unix, Windows,16/32-bit systems

long[g]

4 [13](minimum requirement 4)

â2,147,483,648 to +2,147,483,647

0 to 4,294,967,295(minimum requirement)


VB

Company Standard

Windows

Long

4 [14]

â2,147,483,648 to +2,147,483,647

N/A


VBA

Company Standard

Windows, Mac OS X

Long

4 [15]

â2,147,483,648 to +2,147,483,647

N/A


SQL Server

Company Standard

Windows

BigInt

8

â9,223,372,036,854,775,808 to +9,223,372,036,854,775,807

0 to 18,446,744,073,709,551,615


C#/ VB.NET

ECMA International Standard

Microsoft .NET

long or Int64

8

â9,223,372,036,854,775,808 to +9,223,372,036,854,775,807

0 to 18,446,744,073,709,551,615


Java

International/Company Standard

Java platform

long

8

â9,223,372,036,854,775,808 to +9,223,372,036,854,775,807

N/A


Pascal

?

Windows, UNIX

int64

8

â9,223,372,036,854,775,808 to +9,223,372,036,854,775,807

0 to 18,446,744,073,709,551,615 (Qword type)

Long long[edit]
"long long" redirects here. Not to be confused with long or Long, Long, Long.
In the C99 version of the C programming language and the C++11 version of C++, a long long type is supported that has double the minimum capacity of the standard long. This type is not supported by compilers that require C code to be compliant with the previous C++ standard, C++03, because the long long type did not exist in C++03. For an ANSI/ISO compliant compiler, the minimum requirements for the specified ranges, that is, â(263â1)[9] to 263â1 for signed and 0 to 264â1 for unsigned,[10] must be fulfilled; however, extending this range is permitted.[16][17] This can be an issue when exchanging code and data between platforms, or doing direct hardware access. Thus, there are several sets of headers providing platform independent exact width types. The C standard library provides stdint.h; this was introduced in C99 and C++11.

Syntax[edit]
Literals for integers can be written as regular Arabic numerals, consisting of a sequence of digits and with negation indicated by a minus sign before the value. However, most programming languages disallow use of commas or spaces for digit grouping. Examples of integer literals are:

42
10000
-233000
There are several alternate methods for writing integer literals in many programming languages:

Most programming languages, especially those influenced by C, prefix an integer literal with 0X or 0x to represent a hexadecimal value, e.g. 0xDEADBEEF. Other languages may use a different notation, e.g. some assembly languages append an H or h to the end of a hexadecimal value.
Perl, Ruby, Java, Julia, D, Rust and Python (starting from version 3.6) allow embedded underscores for clarity, e.g. 10_000_000, and fixed-form Fortran ignores embedded spaces in integer literals.
In C and C++, a leading zero indicates an octal value, e.g. 0755. This was primarily intended to be used with Unix modes; however, it has been criticized because normal integers may also lead with zero.[18] As such, Python, Ruby, Haskell, and OCaml prefix octal values with 0O or 0o, following the layout used by hexadecimal values.
Several languages, including Java, C#, Scala, Python, Ruby, and OCaml, can represent binary values by prefixing a number with 0B or 0b.
See also[edit]
Arbitrary-precision arithmetic
Binary-coded decimal (BCD)
C data types
Integer overflow
Signed number representations
Notes[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^  Not all SQL dialects have unsigned datatypes.[3][4]

^ Jump up to: a b c d e f g h i j k l m n  The sizes of char, short, int, long and long long in C/C++ are dependent upon the implementation of the language.

^  Java does not directly support arithmetic on char types. The results must be cast back into char from an int.

^ Jump up to: a b  The sizes of Delphi's Integer and Cardinal are not guaranteed, varying from platform to platform; usually defined as LongInt and LongWord respectively.

^ Jump up to: a b  Reserved for future use. Not implemented yet. 

^ The ISO C standard allows implementations to reserve the value with sign bit 1 and all other bits 0 (for signâmagnitude and two's complement representation) or with all bits 1 (for ones' complement) for use as a "trap" value, used to indicate (for example) an overflow.[9]

^ Jump up to: a b c d The terms long and int are equivalent[11]


References[edit]


^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Cheever, Eric. "Representation of numbers". Swarthmore College. Retrieved 2011-09-11.

^ Madhusudhan Konda (2011-09-02). "A look at Java 7's new features - O'Reilly Radar". Radar.oreilly.com. Retrieved 2013-10-15.

^ "Sybase Adaptive Server Enterprise 15.5: Exact Numeric Datatypes".

^ "MySQL 5.6 Numeric Datatypes".

^ "BigInteger (Java Platform SE 6)". Oracle. Retrieved 2011-09-11.

^ Jump up to: a b c d e Fog, Agner (2010-02-16). "Calling conventions for different C++ compilers and operating systems: Chapter 3, Data Representation" (PDF). Retrieved 2010-08-30.

^ Giguere, Eric (1987-12-18). "The ANSI Standard: A Summary for the C Programmer". Retrieved 2010-09-04.

^ Jump up to: a b Meyers, Randy (2000-12-01). "The New C: Integers in C99, Part 1". drdobbs.com. Retrieved 2010-09-04.

^ Jump up to: a b c d "ISO/IEC 9899:201x" (PDF). open-std.org. section 6.2.6.2, paragraph 2. Retrieved 2016-06-20.

^ Jump up to: a b c "ISO/IEC 9899:201x" (PDF). open-std.org. section 5.2.4.2.1. Retrieved 2016-06-20.

^ "ISO/IEC 9899:201x" (PDF). open-std.org. Retrieved 2013-03-27.

^ "Fundamental types in C++". cppreference.com. Retrieved 5 December 2010.

^ "Chapter 8.6.2 on page 12" (PDF). ecma-international.org.

^ VB 6.0 help file

^ "The Integer, Long, and Byte Data Types (VBA)". microsoft.com. Retrieved 2006-12-19.

^ Giguere, Eric (December 18, 1987). "The ANSI Standard: A Summary for the C Programmer". Retrieved 2010-09-04.

^ "American National Standard Programming Language C specifies the syntax and semantics of programs written in the C programming language". Archived from the original on 2010-08-22. Retrieved 2010-09-04.

^ ECMAScript 6th Edition draft: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-literals-numeric-literals Archived 2013-12-16 at the Wayback Machine


.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteData typesUninterpreted
Bit
Byte
Trit
Tryte
Word
Bit array
Numeric
Arbitrary-precision or bignum
Complex
Decimal
Fixed point
Floating point
Reduced precision
Minifloat
Half precision
bfloat16
Single precision
Double precision
Quadruple precision
Octuple precision
Extended precision
Long double
Integer
signedness
Interval
Rational
Pointer
Address
physical
virtual
Reference
Text
Character
String
null-terminated
Composite
Algebraic data type
generalized
Array
Associative array
Class
Dependent
Equality
Inductive
Intersection
List
Object
metaobject
Option type
Product
Record or Struct
Refinement
Set
Union
tagged
Other
Boolean
Bottom type
Collection
Enumerated type
Exception
Function type
Opaque data type
Recursive data type
Semaphore
Stream
Top type
Type class
Unit type
Void
Relatedtopics
Abstract data type
Data structure
Generic
Kind
metaclass
Object type
Parametric polymorphism
Primitive data type
Protocol
interface
Subtyping
Type constructor
Type conversion
Type system
Type theory
Variable





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Integer_(computer_science)&oldid=1068959913"
		Categories: Data typesComputer arithmeticPrimitive typesComputer scienceHidden categories: Webarchive template wayback linksArticles with short descriptionShort description matches Wikidata
	
