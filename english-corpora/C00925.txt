
Title:
Marching cubes
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Computer graphics algorithm
  Head and cerebral structures (hidden) extracted from 150 MRI slices using marching-cubes (about 150,000 triangles)
Marching cubes is a computer graphics algorithm, published in the 1987 SIGGRAPH proceedings by Lorensen and Cline,[1] for extracting a polygonal mesh of an isosurface from a three-dimensional discrete scalar field (the elements of which are sometimes called voxels). The applications of this algorithm are mainly concerned with medical visualizations such as CT and MRI scan data images, and special effects or 3-D modelling with what is usually called metaballs or other metasurfaces. The marching cubes algorithm is meant to be used for 3-D, the 2-D version of this algorithm is called the marching squares algorithm.  

Contents

1 History
2 Algorithm
3 Sources
4 See also
5 External links



History[edit]
The algorithm was developed by William E. Lorensen (1946-2019) and Harvey E. Cline as a result of their research for General Electric. At General Electric they worked on a way to efficiently visualize data from CT and MRI devices.[2]
The premise of the algorithm is to divide the input volume into a discrete set of cubes. By assuming linear reconstruction filtering, each cube, which contains a piece of a given isosurface, can easily be identified because the sample values at the cube vertices must span the target isosurface value. For each cube containing a section of the isosurface, a triangular mesh that approximates the behavior of the trilinear interpolant in the interior cube is generated.
The first published version of the algorithm exploited rotational and reflective symmetry and also sign changes to build the table with 15 unique cases. However, due to the existence of ambiguities in the trilinear interpolant behavior in the cube faces and interior, the meshes extracted by the Marching Cubes presented discontinuities and topological issues. Given a cube of the grid, a face ambiguity occurs when its face vertices have alternating signs. That is, the vertices of one diagonal on this face are positive and the vertices on the other are negative. Observe that in this case, the signs of the face vertices are insufficient to determine the correct way to triangulate the isosurface. Similarly, an interior ambiguity occurs when the signs of the cube vertices are insufficient to determine the correct surface triangulation, i.e., when multiple triangulations are possible for the same cube configuration.
The popularity of the Marching Cubes and its widespread adoption resulted in several improvements in the algorithm to deal with the ambiguities and to correctly track the behavior of the interpolant. Durst[3] in 1988 was the first to note that the triangulation table proposed by Lorensen and Cline was incomplete, and that certain Marching Cubes cases allow multiple triangulations. Durst's 'additional reference' was to an earlier, more efficient  (see de Araujo[4]) isosurface polygonization algorithm by Wyvill, Wyvill and McPheeters.[5] Later, Nielson and Hamann[6] in 1991 observed the existence of ambiguities in the interpolant behavior on the face of the cube. They proposed a test called Asymptotic Decider to correctly track the interpolant on the faces of the cube. In fact, as observed by Natarajan[7] in 1994, this ambiguity problem also occurs inside the cube. In his work, the author proposed a disambiguation test based on the interpolant critical points, and added four new cases to the Marching Cubes triangulation table (subcases of the cases 3, 4, 6 and 7). At this point, even with all the improvements proposed to the algorithm and its triangulation table, the meshes generated by the Marching Cubes still had topological incoherencies.

The Marching Cubes 33, proposed by Chernyaev[8] in 1995, is one of the first isosurface extraction algorithms intended to preserve the topology of the trilinear interpolant. In his work, Chernyaev extends to 33 the number of cases in the triangulation lookup table. He then proposes a different approach to solve the interior ambiguities, which is based on the Asymptotic Decider. Later, in 2003, Nielson[9] proved that Chernyaev's lookup table is complete and can represent all the possible behaviors of the trilinear interpolant, and Lewiner et al.[10] proposed an implementation to the algorithm. Also in 2003 Lopes and Brodlie[11] extended the tests proposed by Natarajan.[7] In 2013, Custodio et al.[12] noted and corrected algorithmic inaccuracies that compromised the topological correctness of the mesh generated by the Marching Cubes 33 algorithm proposed by Chernyaev.[8]  The originally published 15 cube configurations
Algorithm[edit]
The algorithm proceeds through the scalar field, taking eight neighbor locations at a time (thus forming an imaginary cube), then determining the polygon(s) needed to represent the part of the isosurface that passes through this cube. The individual polygons are then fused into the desired surface.
This is done by creating an index to a precalculated array of 256 possible polygon configurations (28=256) within the cube, by treating each of the 8 scalar values as a bit in an 8-bit integer. If the scalar's value is higher than the iso-value (i.e., it is inside the surface) then the appropriate bit is set to one, while if it is lower (outside), it is set to zero. The final value, after all eight scalars are checked, is the actual index to the polygon indices array.
Finally each vertex of the generated polygons is placed on the appropriate position along the cube's edge by linearly interpolating the two scalar values that are connected by that edge.
The gradient of the scalar field at each grid point is also the normal vector of a hypothetical isosurface passing from that point. Therefore, these normals may be interpolated along the edges of each cube to find the normals of the generated vertices which are essential for shading the resulting mesh with some illumination model.

Sources[edit]

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Lorensen, William E.; Cline, Harvey E. (1 August 1987). "Marching cubes: A high resolution 3D surface construction algorithm". ACM SIGGRAPH Computer Graphics. 21 (4): 163â169. CiteSeerXÂ 10.1.1.545.613. doi:10.1145/37402.37422.

^ "System and method for the display of surface structures contained within the interior region of a solid body". 5 June 1985. {{cite journal}}: Cite journal requires |journal= (help)

^ DÃ¼rst, Martin J. (1988-10-01). "Letters: additional reference to marching cubes". ACM SIGGRAPH Computer Graphics. 22 (5): 243. doi:10.1145/378267.378271. ISSNÂ 0097-8930. S2CIDÂ 36741734.

^ de Araujo, Bruno; Lopes, Daniel; Jepp, Pauline; Jorge, Joaquim; Wyvill, Brian (2015). "A Survey on Implicit Surface Polygonization". ACM Computing Surveys. 47 (4): 60:1â60:39. doi:10.1145/2732197. S2CIDÂ 14395359.

^ Wyvill, Geoff; Wyvill, Brian; McPheeters, Craig (1986). "Data structures for soft objects". The Visual Computer. 2 (4): 227â234. doi:10.1007/BF01900346. S2CIDÂ 18993002.

^ Nielson, G.M.; Hamann, B. (1991). "The asymptotic decider: Resolving the ambiguity in marching cubes". Proceeding Visualization '91. pp.Â 83â91. doi:10.1109/visual.1991.175782. ISBNÂ 978-0818622458. S2CIDÂ 35739150.

^ Jump up to: a b Natarajan, B. K. (January 1994). "On generating topologically consistent isosurfaces from uniform samples". The Visual Computer. 11 (1): 52â62. doi:10.1007/bf01900699. ISSNÂ 0178-2789. S2CIDÂ 526698.

^ Jump up to: a b V., Chernyaev, E. (1995). Marching Cubes 33Â : construction of topologically correct isosurfacesÂ : presented at GRAPHICON '95, Saint-Petersburg, Russia, 03-07.07.1995. CERN. Computing and Networks Division. OCLCÂ 897851506.

^ Nielson, G.M. (2003). "On marching cubes". IEEE Transactions on Visualization and Computer Graphics. 9 (3): 283â297. doi:10.1109/TVCG.2003.1207437.

^ Lewiner, Thomas; Lopes, HÃ©lio; Vieira, AntÃ´nio Wilson; Tavares, Geovan (January 2003). "Efficient Implementation of Marching Cubes' Cases with Topological Guarantees". Journal of Graphics Tools. 8 (2): 1â15. doi:10.1080/10867651.2003.10487582. ISSNÂ 1086-7651. S2CIDÂ 6195034.

^ Lopes, A.; Brodlie, K. (2003). "Improving the robustness and accuracy of the marching cubes algorithm for isosurfacing" (PDF). IEEE Transactions on Visualization and Computer Graphics. 9: 16â29. doi:10.1109/tvcg.2003.1175094. hdl:10316/12925.

^ Custodio, Lis; Etiene, Tiago; Pesco, Sinesio; Silva, Claudio (November 2013). "Practical considerations on Marching Cubes 33 topological correctness". Computers & Graphics. 37 (7): 840â850. CiteSeerXÂ 10.1.1.361.3074. doi:10.1016/j.cag.2013.04.004. ISSNÂ 0097-8493.


See also[edit]
Image-based meshing
Marching tetrahedra
External links[edit]



Wikimedia Commons has media related to Marching cubes.

Lorensen, W. E.; Cline, Harvey E. (1987). "Marching cubes: A high resolution 3d surface construction algorithm". ACM Computer Graphics. 21 (4): 163â169. CiteSeerXÂ 10.1.1.545.613. doi:10.1145/37402.37422.
Nielson, G.M.; Hamann, B. (1991). "The asymptotic decider: Resolving the ambiguity in marching cubes". Proceeding Visualization '91. pp.Â 83â91. doi:10.1109/VISUAL.1991.175782. ISBNÂ 9780818622458. S2CIDÂ 35739150.
Montani, Claudio; Scateni, Riccardo; Scopigno, Roberto (1994). "A modified look-up table for implicit disambiguation of Marching cubes". The Visual Computer. 10 (6): 353â355. doi:10.1007/BF01900830. S2CIDÂ 31316542.
Nielson, G.M.; Junwon Sung (1997). "Interval volume tetrahedrization". Proceedings. Visualization '97 (Cat. No. 97CB36155). pp.Â 221â228. doi:10.1109/VISUAL.1997.663886. ISBNÂ 978-0-8186-8262-9.
Paul Bourke. "Overview and source code".
Matthew Ward. "GameDev overview".
"Introductory description with additional graphics".
"Marching Cubes".. Some of the early history of Marching Cubes.
Newman, Timothy S.; Yi, Hong (2006). "A survey of the marching cubes algorithm". Computers and Graphics. 30 (5): 854â879. CiteSeerXÂ 10.1.1.413.7458. doi:10.1016/j.cag.2006.07.021.
Stephan Diehl. "Specializing visualization algorithms" (PDF).
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}hide.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteMesh generationTypes of mesh
Polygon mesh
Triangle mesh
Volume mesh
Methods
Laplacian smoothing
Parallel mesh generation
Stretched grid method
Related
Chew's second algorithm
Image-based meshing
Marching cubes
Marching tetrahedra
Principles of Grid Generation
Regular grid
Ruppert's algorithm
Tessellation
Unstructured grid





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Marching_cubes&oldid=1042347690"
		Categories: Computer graphics algorithms3D computer graphicsMesh generationHidden categories: CS1 errors: missing periodicalArticles with short descriptionShort description matches WikidataCommons category link is on Wikidata
	
