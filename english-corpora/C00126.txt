
Title:
Huffman coding
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Technique to compress data
  Huffman tree generated from the exact frequencies of the text "this is an example of a huffman tree". The frequencies and codes of each character are below. Encoding the sentence with this code requires 135 (or 147) bits, as opposed to 288 (or 180) bits if 36 characters of 8 (or 5) bits were used. (This assumes that the code tree structure is known to the decoder and thus does not need to be counted as part of the transmitted information.)


Char
Freq
Code


space
7
111


a
4
010


e
4
000


f
3
1101


h
2
1010


i
2
1000


m
2
0111


n
2
0010


s
2
1011


t
2
0110


l
1
11001


o
1
00110


p
1
10011


r
1
11000


u
1
00111


x
1
10010

In computer science and information theory, a Huffman code is a particular type of optimal prefix code that is commonly used for lossless data compression. The process of finding or using such a code proceeds by means of Huffman coding, an algorithm developed by David A. Huffman while he was a Sc.D. student at MIT, and published in the 1952 paper "A Method for the Construction of Minimum-Redundancy Codes".[1]
The output from Huffman's algorithm can be viewed as a variable-length code table for encoding a source symbol (such as a character in a file).  The algorithm derives this table from the estimated probability or frequency of occurrence (weight) for each possible value of the source symbol.  As in other entropy encoding methods, more common symbols are generally represented using fewer bits than less common symbols.  Huffman's method can be efficiently implemented, finding a code in time linear to the number of input weights if these weights are sorted.[2]  However, although optimal among methods encoding symbols separately, Huffman coding is not always optimal among all compression methods - it is replaced with arithmetic coding[3] or asymmetric numeral systems[4] if better compression ratio is required.

Contents

1 History
2 Terminology
3 Problem definition

3.1 Informal description
3.2 Formalized description
3.3 Example


4 Basic technique

4.1 Compression
4.2 Decompression


5 Main properties

5.1 Optimality


6 Variations

6.1 n-ary Huffman coding
6.2 Adaptive Huffman coding
6.3 Huffman template algorithm
6.4 Length-limited Huffman coding/minimum variance Huffman coding
6.5 Huffman coding with unequal letter costs
6.6 Optimal alphabetic binary trees (HuâTucker coding)
6.7 The canonical Huffman code


7 Applications
8 References
9 Bibliography
10 External links



History[edit]
In 1951, David A. Huffman and his MIT information theory classmates were given the choice of a term paper or a final exam. The professor, Robert M. Fano, assigned a term paper on the problem of finding the most efficient binary code. Huffman, unable to prove any codes were the most efficient, was about to give up and start studying for the final when he hit upon the idea of using a frequency-sorted binary tree and quickly proved this method the most efficient.[5]
In doing so, Huffman outdid Fano, who had worked with information theory inventor Claude Shannon to develop a similar code.  Building the tree from the bottom up guaranteed optimality, unlike the top-down approach of ShannonâFano coding.

Terminology[edit]
Huffman coding uses a specific method for choosing the representation for each symbol, resulting in a prefix code (sometimes called "prefix-free codes", that is, the bit string representing some particular symbol is never a prefix of the bit string representing any other symbol).  Huffman coding is such a widespread method for creating prefix codes that the term "Huffman code" is widely used as a synonym for "prefix code" even when such a code is not produced by Huffman's algorithm.

Problem definition[edit]
This article needs additional citations for verification. Please help improve this article by adding citations to reliable sources. Unsourced material may be challenged and removed.Find sources:Â "Huffman coding"Â âÂ newsÂ Â· newspapersÂ Â· booksÂ Â· scholarÂ Â· JSTOR  (December 2021) (Learn how and when to remove this template message)
  Constructing a Huffman Tree
Informal description[edit]
Given
A set of symbols and their weights (usually proportional to probabilities).
Find
A prefix-free binary code (a set of codewords) with minimum expected codeword length (equivalently, a tree with minimum weighted path length from the root).
Formalized description[edit]
Input.
Alphabet 
  
    
      
        A
        =
        (
        
          a
          
            1
          
        
        ,
        
          a
          
            2
          
        
        ,
        â¦
        ,
        
          a
          
            n
          
        
        )
      
    
    {\displaystyle A=(a_{1},a_{2},\dots ,a_{n})}
  
, which is the symbol alphabet of size 
  
    
      
        n
      
    
    {\displaystyle n}
  
. 
Tuple 
  
    
      
        W
        =
        (
        
          w
          
            1
          
        
        ,
        
          w
          
            2
          
        
        ,
        â¦
        ,
        
          w
          
            n
          
        
        )
      
    
    {\displaystyle W=(w_{1},w_{2},\dots ,w_{n})}
  
, which is the tuple of the (positive) symbol weights (usually proportional to probabilities), i.e. 
  
    
      
        
          w
          
            i
          
        
        =
        weight
        â¡
        
          (
          
            a
            
              i
            
          
          )
        
        ,
        
        i
        â
        {
        1
        ,
        2
        ,
        â¦
        ,
        n
        }
      
    
    {\displaystyle w_{i}=\operatorname {weight} \left(a_{i}\right),\,i\in \{1,2,\dots ,n\}}
  
. 

Output.
Code 
  
    
      
        C
        
          (
          W
          )
        
        =
        (
        
          c
          
            1
          
        
        ,
        
          c
          
            2
          
        
        ,
        â¦
        ,
        
          c
          
            n
          
        
        )
      
    
    {\displaystyle C\left(W\right)=(c_{1},c_{2},\dots ,c_{n})}
  
, which is the tuple of (binary) codewords, where 
  
    
      
        
          c
          
            i
          
        
      
    
    {\displaystyle c_{i}}
  
 is the codeword for 
  
    
      
        
          a
          
            i
          
        
        ,
        
        i
        â
        {
        1
        ,
        2
        ,
        â¦
        ,
        n
        }
      
    
    {\displaystyle a_{i},\,i\in \{1,2,\dots ,n\}}
  
.

Goal.
Let 
  
    
      
        L
        
          (
          
            C
            
              (
              W
              )
            
          
          )
        
        =
        
          â
          
            i
            =
            1
          
          
            n
          
        
        
          
            w
            
              i
            
          
          length
          â¡
          
            (
            
              c
              
                i
              
            
            )
          
        
      
    
    {\textstyle L\left(C\left(W\right)\right)=\sum _{i=1}^{n}{w_{i}\operatorname {length} \left(c_{i}\right)}}
  
 be the weighted path length of code 
  
    
      
        C
      
    
    {\displaystyle C}
  
. Condition: 
  
    
      
        L
        
          (
          
            C
            
              (
              W
              )
            
          
          )
        
        â¤
        L
        
          (
          
            T
            
              (
              W
              )
            
          
          )
        
      
    
    {\displaystyle L\left(C\left(W\right)\right)\leq L\left(T\left(W\right)\right)}
  
 for any code 
  
    
      
        T
        
          (
          W
          )
        
      
    
    {\displaystyle T\left(W\right)}
  
.

Example[edit]
We give an example of the result of Huffman coding for a code with five characters and given weights. We will not verify that it minimizes L over all codes, but we will compute L and compare it to the Shannon entropy H of the given set of weights; the result is nearly optimal.



Input (A, W)

Symbol (ai)

a

b

c

d

e

Sum


Weights (wi)

0.10

0.15

0.30

0.16

0.29

= 1


Output C

Codewords (ci)

010

011

11

00

10

Â 


Codeword length (in bits)(li)

3

3

2

2

2


Contribution to weighted path length(li wi )

0.30

0.45

0.60

0.32

0.58

L(C) = 2.25


Optimality

Probability budget(2âli)

1/8

1/8

1/4

1/4

1/4

= 1.00


Information content (in bits)(âlog2 wi) â

3.32

2.74

1.74

2.64

1.79

Â 


Contribution to entropy(-wi log2 wi)

0.332

0.411

0.521

0.423

0.518

H(A) = 2.205

For any code that is biunique, meaning that the code is uniquely decodeable, the sum of the probability budgets across all symbols is always less than or equal to one. In this example, the sum is strictly equal to one; as a result, the code is termed a complete code. If this is not the case, one can always derive an equivalent code by adding extra symbols (with associated null probabilities), to make the code complete while keeping it biunique.
As defined by Shannon (1948), the information content h (in bits) of each symbol ai with non-null probability is


  
    
      
        h
        (
        
          a
          
            i
          
        
        )
        =
        
          log
          
            2
          
        
        â¡
        
          
            1
            
              w
              
                i
              
            
          
        
        .
      
    
    {\displaystyle h(a_{i})=\log _{2}{1 \over w_{i}}.}
  

The entropy H (in bits) is the weighted sum, across all symbols ai with non-zero probability wi, of the information content of each symbol:


  
    
      
        H
        (
        A
        )
        =
        
          â
          
            
              w
              
                i
              
            
            >
            0
          
        
        
          w
          
            i
          
        
        h
        (
        
          a
          
            i
          
        
        )
        =
        
          â
          
            
              w
              
                i
              
            
            >
            0
          
        
        
          w
          
            i
          
        
        
          log
          
            2
          
        
        â¡
        
          
            1
            
              w
              
                i
              
            
          
        
        =
        â
        
          â
          
            
              w
              
                i
              
            
            >
            0
          
        
        
          w
          
            i
          
        
        
          log
          
            2
          
        
        â¡
        
          
            w
            
              i
            
          
        
        .
      
    
    {\displaystyle H(A)=\sum _{w_{i}>0}w_{i}h(a_{i})=\sum _{w_{i}>0}w_{i}\log _{2}{1 \over w_{i}}=-\sum _{w_{i}>0}w_{i}\log _{2}{w_{i}}.}
  

(Note: A symbol with zero probability has zero contribution to the entropy, since 
  
    
      
        
          lim
          
            w
            â
            
              0
              
                +
              
            
          
        
        w
        
          log
          
            2
          
        
        â¡
        w
        =
        0
      
    
    {\displaystyle \lim _{w\to 0^{+}}w\log _{2}w=0}
  
 So for simplicity, symbols with zero probability can be left out of the formula above.)
As a consequence of Shannon's source coding theorem, the entropy is a measure of the smallest codeword length that is theoretically possible for the given alphabet with associated weights. In this example, the weighted average codeword length is 2.25 bits per symbol, only slightly larger than the calculated entropy of 2.205 bits per symbol. So not only is this code optimal in the sense that no other feasible code performs better, but it is very close to the theoretical limit established by Shannon.
In general, a Huffman code need not be unique.  Thus the set of Huffman codes for a given probability distribution is a non-empty subset of the codes minimizing 
  
    
      
        L
        (
        C
        )
      
    
    {\displaystyle L(C)}
  
 for that probability distribution.  (However, for each minimizing codeword length assignment, there exists at least one Huffman code with those lengths.)

Basic technique[edit]
Compression[edit]
  Visualisation of the use of Huffman coding to encode the message "A_DEAD_DAD_CEDED_A_BAD_BABE_A_BEADED_ABACA_BED". In steps 2 to 6, the letters are sorted by increasing frequency, and the least frequent two at each step are combined and reinserted into the list, and a partial tree is constructed. The final tree in step 6 is traversed to generate the dictionary in step 7. Step 8 uses it to encode the message.
  A source generates 4 different symbols 
  
    
      
        {
        
          a
          
            1
          
        
        ,
        
          a
          
            2
          
        
        ,
        
          a
          
            3
          
        
        ,
        
          a
          
            4
          
        
        }
      
    
    {\displaystyle \{a_{1},a_{2},a_{3},a_{4}\}}
  
 with probability 
  
    
      
        {
        0.4
        ;
        0.35
        ;
        0.2
        ;
        0.05
        }
      
    
    {\displaystyle \{0.4;0.35;0.2;0.05\}}
  
. A binary tree is generated from left to right taking the two least probable symbols and putting them together to form another equivalent symbol having a probability that equals the sum of the two symbols. The process is repeated until there is just one symbol. The tree can then be read backwards, from right to left, assigning different bits to different branches. The final Huffman code is:   Symbol Code   a1 0   a2 10   a3 110   a4 111   The standard way to represent a signal made of 4 symbols is by using 2 bits/symbol, but the entropy of the source is 1.74 bits/symbol. If this Huffman code is used to represent the signal, then the average length is lowered to 1.85 bits/symbol; it is still far from the theoretical limit because the probabilities of the symbols are different from negative powers of two.
The technique works by creating a binary tree of nodes. These can be stored in a regular array, the size of which depends on the number of symbols, 
  
    
      
        n
      
    
    {\displaystyle n}
  
. A node can be either a leaf node or an internal node. Initially, all nodes are leaf nodes, which contain the symbol itself, the weight (frequency of appearance) of the symbol and optionally, a link to a parent node which makes it easy to read the code (in reverse) starting from a leaf node. Internal nodes contain a weight, links to two child nodes and an optional link to a parent node. As a common convention, bit '0' represents following the left child and bit '1' represents following the right child. A finished tree has up to 
  
    
      
        n
      
    
    {\displaystyle n}
  
 leaf nodes and 
  
    
      
        n
        â
        1
      
    
    {\displaystyle n-1}
  
 internal nodes. A Huffman tree that omits unused symbols produces the most optimal code lengths.
The process begins with the leaf nodes containing the probabilities of the symbol they represent. Then, the process takes the two nodes with smallest probability, and creates a new internal node having these two nodes as children. The weight of the new node is set to the sum of the weight of the children. We then apply the process again, on the new internal node and on the remaining nodes (i.e., we exclude the two leaf nodes), we repeat this process until only one node remains, which is the root of the Huffman tree.
The simplest construction algorithm uses a priority queue where the node with lowest probability is given highest priority:

Create a leaf node for each symbol and add it to the priority queue.
While there is more than one node in the queue:
Remove the two nodes of highest priority (lowest probability) from the queue
Create a new internal node with these two nodes as children and with probability equal to the sum of the two nodes' probabilities.
Add the new node to the queue.
The remaining node is the root node and the tree is complete.
Since efficient priority queue data structures require O(log n) time per insertion, and a tree with n leaves has 2nâ1 nodes, this algorithm operates in O(n log n) time, where n is the number of symbols.
If the symbols are sorted by probability, there is a linear-time (O(n)) method to create a Huffman tree using two queues, the first one containing the initial weights (along with pointers to the associated leaves), and combined weights (along with pointers to the trees) being put in the back of the second queue. This assures that the lowest weight is always kept at the front of one of the two queues:

Start with as many leaves as there are symbols.
Enqueue all leaf nodes into the first queue (by probability in increasing order so that the least likely item is in the head of the queue).
While there is more than one node in the queues:
Dequeue the two nodes with the lowest weight by examining the fronts of both queues.
Create a new internal node, with the two just-removed nodes as children (either node can be either child) and the sum of their weights as the new weight.
Enqueue the new node into the rear of the second queue.
The remaining node is the root node; the tree has now been generated.
Once the Huffman tree has been generated, it is traversed to generate a dictionary which maps the symbols to binary codes as follows:

Start with current node set to the root.
If node is not a leaf node, label the edge to the left child as 0 and the edge to the right child as 1. Repeat the process at both the left child and the right child.
The final encoding of any symbol is then read by a concatenation of the labels on the edges along the path from the root node to the symbol.
In many cases, time complexity is not very important in the choice of algorithm here, since n here is the number of symbols in the alphabet, which is typically a very small number (compared to the length of the message to be encoded); whereas complexity analysis concerns the behavior when n grows to be very large.
It is generally beneficial to minimize the variance of codeword length. For example, a communication buffer receiving Huffman-encoded data may need to be larger to deal with especially long symbols if the tree is especially unbalanced. To minimize variance, simply break ties between queues by choosing the item in the first queue.   This modification will retain the mathematical optimality of the Huffman coding while both minimizing variance and minimizing the length of the longest character code.

Decompression[edit]
Generally speaking, the process of decompression is simply a matter of translating the stream of prefix codes to individual byte values, usually by traversing the Huffman tree node by node as each bit is read from the input stream (reaching a leaf node necessarily terminates the search for that particular byte value). Before this can take place, however, the Huffman tree must be somehow reconstructed. In the simplest case, where character frequencies are fairly predictable, the tree can be preconstructed (and even statistically adjusted on each compression cycle) and thus reused every time, at the expense of at least some measure of compression efficiency. Otherwise, the information to reconstruct the tree must be sent a priori. A naive approach might be to prepend the frequency count of each character to the compression stream. Unfortunately, the overhead in such a case could amount to several kilobytes, so this method has little practical use. If the data is compressed using canonical encoding, the compression model can be precisely reconstructed with just 
  
    
      
        B
        â
        
          2
          
            B
          
        
      
    
    {\displaystyle B\cdot 2^{B}}
  
 bits of information (where B is the number of bits per symbol). Another method is to simply prepend the Huffman tree, bit by bit, to the output stream. For example, assuming that the value of 0 represents a parent node and 1 a leaf node, whenever the latter is encountered the tree building routine simply reads the next 8 bits to determine the character value of that particular leaf. The process continues recursively until the last leaf node is reached; at that point, the Huffman tree will thus be faithfully reconstructed. The overhead using such a method ranges from roughly 2 to 320 bytes (assuming an 8-bit alphabet). Many other techniques are possible as well. In any case, since the compressed data can include unused "trailing bits" the decompressor must be able to determine when to stop producing output. This can be accomplished by either transmitting the length of the decompressed data along with the compression model or by defining a special code symbol to signify the end of input (the latter method can adversely affect code length optimality, however).

Main properties[edit]
The probabilities used can be generic ones for the application domain that are based on average experience, or they can be the actual frequencies found in the text being compressed.
This requires that a frequency table must be stored with the compressed text. See the Decompression section above for more information about the various techniques employed for this purpose.

Optimality[edit]
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}See also: Arithmetic coding Â§Â Huffman coding
Huffman's original algorithm is optimal for a symbol-by-symbol coding with a known input probability distribution, i.e., separately encoding unrelated symbols in such a data stream.  However, it is not optimal when the symbol-by-symbol restriction is dropped, or when the probability mass functions are unknown.  Also, if symbols are not independent and identically distributed, a single code may be insufficient for optimality.  Other methods such as arithmetic coding often have better compression capability.
Although both aforementioned methods can combine an arbitrary number of symbols for more efficient coding and generally adapt to the actual input statistics, arithmetic coding does so without significantly increasing its computational or algorithmic complexities (though the simplest version is slower and more complex than Huffman coding).  Such flexibility is especially useful when input probabilities are not precisely known or vary significantly within the stream.  However, Huffman coding is usually faster and arithmetic coding was historically a subject of some concern over patent issues.  Thus many technologies have historically avoided arithmetic coding in favor of Huffman and other prefix coding techniques.  As of mid-2010, the most commonly used techniques for this alternative to Huffman coding have passed into the public domain as the early patents have expired.
For a set of symbols with a uniform probability distribution and a number of members which is a power of two, Huffman coding is equivalent to simple binary block encoding, e.g., ASCII coding.  This reflects the fact that compression is not possible with such an input, no matter what the compression method, i.e., doing nothing to the data is the optimal thing to do.
Huffman coding is optimal among all methods in any case where each input symbol is a known independent and identically distributed random variable having a probability that is dyadic. Prefix codes, and thus Huffman coding in particular, tend to have inefficiency on small alphabets, where probabilities often fall between these optimal (dyadic) points. The worst case for Huffman coding can happen when the probability of the most likely symbol far exceeds 2â1 = 0.5, making the upper limit of inefficiency unbounded.
There are two related approaches for getting around this particular inefficiency while still using Huffman coding.  Combining a fixed number of symbols together ("blocking") often increases (and never decreases) compression.  As the size of the block approaches infinity,  Huffman coding theoretically approaches the entropy limit, i.e., optimal compression.[6]  However, blocking arbitrarily large groups of symbols is impractical, as the complexity of a Huffman code is linear in the number of possibilities to be encoded, a number that is exponential in the size of a block.  This limits the amount of blocking that is done in practice.
A practical alternative, in widespread use, is run-length encoding.  This technique adds one step in advance of entropy coding, specifically counting (runs) of repeated symbols, which are then encoded.  For the simple case of Bernoulli processes, Golomb coding is optimal among prefix codes for coding run length, a fact proved via the techniques of Huffman coding.[7]  A similar approach is taken by fax machines using modified Huffman coding.  However, run-length coding is not as adaptable to as many input types as other compression technologies.

Variations[edit]
Many variations of Huffman coding exist,[8] some of which use a Huffman-like algorithm, and others of which find optimal prefix codes (while, for example, putting different restrictions on the output). Note that, in the latter case, the method need not be Huffman-like, and, indeed, need not even be polynomial time.

n-ary Huffman coding[edit]
The n-ary Huffman algorithm uses the {0, 1,..., n â 1} alphabet to encode message and build an n-ary tree. This approach was considered by Huffman in his original paper. The same algorithm applies as for binary (
  
    
      
        n
        =
        2
      
    
    {\displaystyle n=2}
  
) codes, except that the n least probable symbols are taken together, instead of just the 2 least probable. Note that for n greater than 2, not all sets of source words can properly form an n-ary tree for Huffman coding. In these cases, additional 0-probability place holders must be added. This is because the tree must form an n to 1 contractor; for binary coding, this is a 2 to 1 contractor, and any sized set can form such a contractor.  If the number of source words is congruent to 1 modulo nâ1, then the set of source words will form a proper Huffman tree.

Adaptive Huffman coding[edit]
A variation called adaptive Huffman coding involves calculating the probabilities dynamically based on recent actual frequencies in the sequence of source symbols, and changing the coding tree structure to match the updated probability estimates. It is used rarely in practice, since the cost of updating the tree makes it slower than optimized adaptive arithmetic coding, which is more flexible and has better compression.

Huffman template algorithm[edit]
Most often, the weights used in implementations of Huffman coding represent numeric probabilities, but the algorithm given above does not require this; it requires only that the weights form a totally ordered commutative monoid, meaning a way to order weights and to add them. The Huffman template algorithm enables one to use any kind of weights (costs, frequencies, pairs of weights, non-numerical weights) and one of many combining methods (not just addition). Such algorithms can solve other minimization problems, such as minimizing 
  
    
      
        
          max
          
            i
          
        
        
          [
          
            
              w
              
                i
              
            
            +
            
              l
              e
              n
              g
              t
              h
            
            
              (
              
                c
                
                  i
                
              
              )
            
          
          ]
        
      
    
    {\displaystyle \max _{i}\left[w_{i}+\mathrm {length} \left(c_{i}\right)\right]}
  
, a problem first applied to circuit design.

Length-limited Huffman coding/minimum variance Huffman coding[edit]
Length-limited Huffman coding is a variant where the goal is still to achieve a minimum weighted path length, but there is an additional restriction that the length of each codeword must be less than a given constant. The package-merge algorithm solves this problem with a simple greedy approach very similar to that used by Huffman's algorithm. Its time complexity is 
  
    
      
        O
        (
        n
        L
        )
      
    
    {\displaystyle O(nL)}
  
, where 
  
    
      
        L
      
    
    {\displaystyle L}
  
 is the maximum length of a codeword. No algorithm is known to solve this problem in 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
  
 or 
  
    
      
        O
        (
        n
        log
        â¡
        n
        )
      
    
    {\displaystyle O(n\log n)}
  
 time, unlike the presorted and unsorted conventional Huffman problems, respectively.

Huffman coding with unequal letter costs[edit]
In the standard Huffman coding problem, it is assumed that each symbol in the set that the code words are constructed from has an equal cost to transmit: a code word whose length is N digits will always have a cost of N, no matter how many of those digits are 0s, how many are 1s, etc. When working under this assumption, minimizing the total cost of the message and minimizing the total number of digits are the same thing.
Huffman coding with unequal letter costs is the generalization without this assumption: the letters of the encoding alphabet may have non-uniform lengths, due to characteristics of the transmission medium. An example is the encoding alphabet of Morse code, where a 'dash' takes longer to send than a 'dot', and therefore the cost of a dash in transmission time is higher. The goal is still to minimize the weighted average codeword length, but it is no longer sufficient just to minimize the number of symbols used by the message. No algorithm is known to solve this in the same manner or with the same efficiency as conventional Huffman coding, though it has been solved by Karp whose solution has been refined for the case of integer costs by Golin.

Optimal alphabetic binary trees (HuâTucker coding)[edit]
In the standard Huffman coding problem, it is assumed that any codeword can correspond to any input symbol. In the alphabetic version, the alphabetic order of inputs and outputs must be identical. Thus, for example, 
  
    
      
        A
        =
        
          {
          
            a
            ,
            b
            ,
            c
          
          }
        
      
    
    {\displaystyle A=\left\{a,b,c\right\}}
  
 could not be assigned code 
  
    
      
        H
        
          (
          
            A
            ,
            C
          
          )
        
        =
        
          {
          
            00
            ,
            1
            ,
            01
          
          }
        
      
    
    {\displaystyle H\left(A,C\right)=\left\{00,1,01\right\}}
  
, but instead should be assigned either 
  
    
      
        H
        
          (
          
            A
            ,
            C
          
          )
        
        =
        
          {
          
            00
            ,
            01
            ,
            1
          
          }
        
      
    
    {\displaystyle H\left(A,C\right)=\left\{00,01,1\right\}}
  
 or 
  
    
      
        H
        
          (
          
            A
            ,
            C
          
          )
        
        =
        
          {
          
            0
            ,
            10
            ,
            11
          
          }
        
      
    
    {\displaystyle H\left(A,C\right)=\left\{0,10,11\right\}}
  
. This is also known as the HuâTucker problem, after T. C. Hu and Alan Tucker, the authors of the paper presenting the first 
  
    
      
        O
        (
        n
        log
        â¡
        n
        )
      
    
    {\displaystyle O(n\log n)}
  
-time solution to this optimal binary alphabetic problem,[9] which has some similarities to Huffman algorithm, but is not a variation of this algorithm. A later method, the GarsiaâWachs algorithm of Adriano Garsia and Michelle L. Wachs (1977), uses simpler logic to perform the same comparisons in the same total time bound. These optimal alphabetic binary trees are often used as binary search trees.[10]

The canonical Huffman code[edit]
Main article: Canonical Huffman code
If weights corresponding to the alphabetically ordered inputs are in numerical order, the Huffman code has the same lengths as the optimal alphabetic code, which can be found from calculating these lengths, rendering HuâTucker coding unnecessary. The code resulting from numerically (re-)ordered input is sometimes called the canonical Huffman code and is often the code used in practice, due to ease of encoding/decoding. The technique for finding this code is sometimes called HuffmanâShannonâFano coding, since it is optimal like Huffman coding, but alphabetic in weight probability, like ShannonâFano coding. The HuffmanâShannonâFano code corresponding to the example is 
  
    
      
        {
        000
        ,
        001
        ,
        01
        ,
        10
        ,
        11
        }
      
    
    {\displaystyle \{000,001,01,10,11\}}
  
, which, having the same codeword lengths as the original solution, is also optimal. But in canonical Huffman code, the result is 
  
    
      
        {
        110
        ,
        111
        ,
        00
        ,
        01
        ,
        10
        }
      
    
    {\displaystyle \{110,111,00,01,10\}}
  
.

Applications[edit]
Arithmetic coding and Huffman coding produce equivalent results â achieving entropy â when every symbol has a probability of the form 1/2k.  In other circumstances, arithmetic coding can offer better compression than Huffman coding because â intuitively â its "code words" can have effectively non-integer bit lengths, whereas code words in prefix codes such as Huffman codes can only have an integer number of bits. Therefore, a code word of length k only optimally matches a symbol of probability 1/2k and other probabilities are not represented optimally; whereas the code word length in arithmetic coding can be made to exactly match the true probability of the symbol.  This difference is especially striking for small alphabet sizes.[citation needed]
Prefix codes nevertheless remain in wide use because of their simplicity, high speed, and lack of patent coverage.  They are often used as a "back-end" to other compression methods.  Deflate (PKZIP's algorithm) and multimedia codecs such as JPEG and MP3 have a front-end model and quantization followed by the use of prefix codes; these are often called "Huffman codes" even though most applications use pre-defined variable-length codes rather than codes designed using Huffman's algorithm.

References[edit]



Wikimedia Commons has media related to Huffman coding.

.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Huffman, D. (1952). "A Method for the Construction of Minimum-Redundancy Codes" (PDF). Proceedings of the IRE. 40 (9): 1098â1101. doi:10.1109/JRPROC.1952.273898.

^ Van Leeuwen, Jan (1976). "On the construction of Huffman trees" (PDF). ICALP: 382â410. Retrieved 2014-02-20.

^ Ze-Nian Li; Mark S. Drew; Jiangchuan Liu (2014-04-09). Fundamentals of Multimedia. Springer Science & Business Media. ISBNÂ 978-3-319-05290-8.

^ J. Duda, K. Tahboub, N. J. Gadil, E. J. Delp, The use of asymmetric numeral systems as an accurate replacement for Huffman coding, Picture Coding Symposium, 2015.

^ Huffman, Ken (1991). "Profile: David A. Huffman: Encoding the "Neatness" of Ones and Zeroes". Scientific American: 54â58.

^ Gribov, Alexander (2017-04-10). "Optimal Compression of a Polyline with Segments and Arcs". arXiv:1604.07476 [cs.CG].

^ Gallager, R.G.; van Voorhis, D.C. (1975). "Optimal source codes for geometrically distributed integer alphabets". IEEE Transactions on Information Theory. 21 (2): 228â230. doi:10.1109/TIT.1975.1055357.

^ Abrahams, J. (1997-06-11).  Written at Arlington, VA, USA. Division of Mathematics, Computer & Information Sciences, Office of Naval Research (ONR). "Code and Parse Trees for Lossless Source Encoding". Compression and Complexity of Sequences 1997 Proceedings. Salerno: IEEE: 145â171. CiteSeerXÂ 10.1.1.589.4726. doi:10.1109/SEQUEN.1997.666911. ISBNÂ 0-8186-8132-2. S2CIDÂ 124587565.

^ Hu, T. C.; Tucker, A. C. (1971). "Optimal Computer Search Trees and Variable-Length Alphabetical Codes". SIAM Journal on Applied Mathematics. 21 (4): 514. doi:10.1137/0121057. JSTORÂ 2099603.

^ Knuth, Donald E. (1998), "Algorithm G (GarsiaâWachs algorithm for optimum binary trees)", The Art of Computer Programming, Vol. 3: Sorting and Searching (2ndÂ ed.), AddisonâWesley, pp.Â 451â453. See also History and bibliography, pp. 453â454.


Bibliography[edit]
Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest, and Clifford Stein. Introduction to Algorithms, Second Edition. MIT Press and McGraw-Hill, 2001. ISBNÂ 0-262-03293-7. Section 16.3, pp.Â 385â392.
External links[edit]
Huffman coding in various languages on Rosetta Code
Huffman codes (python implementation)
A visualization of Huffman coding
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}hide.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteData compression methodsLosslessEntropy type
Arithmetic
Asymmetric numeral systems
Golomb
Huffman
Adaptive
Canonical
Modified
Range
Shannon
ShannonâFano
ShannonâFanoâElias
Tunstall
Unary
Universal
Exp-Golomb
Fibonacci
Gamma
Levenshtein
Dictionary type
Byte pair encoding
LempelâZiv
842
Brotli
Deflate
LZ4
LZFSE
LZJB
LZMA
LZO
LZRW
LZS
LZSS
LZW
LZWL
LZX
Snappy
Zstandard
Other types
BWT
CTW
Delta
DMC
DPCM
LDCT
MTF
PAQ
PPM
RLE
LossyTransform type
Discrete cosine transform
DCT
MDCT
DST
FFT
Wavelet
Daubechies
DWT
SPIHT
Predictive type
DPCM
ADPCM
LPC
ACELP
CELP
LAR
LSP
WLPC
Motion
Compensation
Estimation
Vector
Psychoacoustic
AudioConcepts
Bit rate
ABR
CBR
VBR
Companding
Convolution
Dynamic range
Latency
NyquistâShannon theorem
Sampling
Sound quality
Speech coding
Sub-band coding
Codec parts
A-law
Î¼-law
DPCM
ADPCM
DM
FT
FFT
LPC
ACELP
CELP
LAR
LSP
WLPC
MDCT
Psychoacoustic model
ImageConcepts
Chroma subsampling
Coding tree unit
Color space
Compression artifact
Image resolution
Macroblock
Pixel
PSNR
Quantization
Standard test image
Methods
Chain code
DCT
Deflate
Fractal
KLT
LP
RLE
Wavelet
Daubechies
DWT
EZW
SPIHT
VideoConcepts
Bit rate
ABR
CBR
VBR
Display resolution
Frame
Frame rate
Frame types
Interlace
Video characteristics
Video quality
Codec parts
DCT
DPCM
Deblocking filter
Lapped transform
Motion
Compensation
Estimation
Vector
Wavelet
Daubechies
DWT
Theory
Entropy
Grammar
Information theory
Timeline
Kolmogorov complexity
Quantization
Rateâdistortion
Redundancy

 Compression formats
 Compression software (codecs)





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Huffman_coding&oldid=1068820330"
		Categories: Data compression1952 in computingLossless compression algorithmsBinary treesHidden categories: CS1 location testArticles with short descriptionShort description is different from WikidataUse dmy dates from May 2019Articles needing additional references from December 2021All articles needing additional referencesAll articles with unsourced statementsArticles with unsourced statements from December 2021Commons category link is on Wikidata
	
