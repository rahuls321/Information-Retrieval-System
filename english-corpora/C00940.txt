
Title:
Simula
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Early object-oriented programming language
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}This article is about the programming language. For the village in Estonia, see Simula, Estonia.
Not to be confused with Simulia.
.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}SimulaParadigmsMulti-paradigm: procedural, imperative, structured, object-orientedFamilyALGOLDesignedÂ byOle-Johan DahlDeveloperKristen NygaardFirstÂ appeared1962; 60Â years agoÂ (1962)Stable releaseSimula 67, Simula I
   
Typing disciplineStatic, nominativeScopeLexicalImplementation languageALGOL 60 (primarily; some components Simscript)OSUnix-like, Windows, z/OS, TOPS-10, MVSWebsitewww.simula67.infoInfluenced byALGOL 60, SimscriptInfluencedObject-oriented programming languages
Simula is the name of two simulation programming languages, Simula I and Simula 67, developed in the 1960s at the Norwegian Computing Center in Oslo, by Ole-Johan Dahl and Kristen Nygaard. Syntactically, it is an approximate superset of ALGOL 60,[1]:â1.3.1â and was also influenced by the design of Simscript.[2]
Simula 67 introduced objects,[1]:â2,â5.3â classes,[1]:â1.3.3,â2â inheritance and subclasses,[1]:â2.2.1â virtual procedures,[1]:â2.2.3â coroutines,[1]:â9.2â and discrete event simulation,[1]:â14.2â and featured garbage collection.[1]:â9.1â Other forms of subtyping (besides inheriting subclasses) were introduced in Simula derivatives.[citation needed]
Simula is considered the first object-oriented programming language. As its name suggests, the first Simula version by 1962 was designed for doing simulations; Simula 67 though was designed to be a general-purpose programming language[3] and provided the framework for many of the features of object-oriented languages today.
Simula has been used in a wide range of applications such as simulating very-large-scale integration (VLSI) designs, process modeling, communication protocols, algorithms, and other applications such as typesetting, computer graphics, and education. The influence of Simula is often understated, and Simula-type objects are reimplemented in C++, Object Pascal, Java, C#, and many other languages. Computer scientists such as Bjarne Stroustrup, creator of C++, and James Gosling, creator of Java, have acknowledged Simula as a major influence.[4]

Contents

1 History
2 Sample code

2.1 Minimal program
2.2 Classic Hello world
2.3 Classes, subclasses and virtual procedures
2.4 Call by name
2.5 Simulation


3 See also
4 Notes
5 Sources
6 Further reading
7 External links



History[edit]
The following account is based on Jan Rune Holmevik's historical essay.[5][6]
Kristen Nygaard started writing computer simulation programs in 1957. Nygaard saw a need for a better way to describe the heterogeneity and the operation of a system. To go further with his ideas on a formal computer language for describing a system, Nygaard realized that he needed someone with more computer programming skills than he had. Ole-Johan Dahl joined him on his work January 1962. The decision of linking the language up to ALGOL 60 was made shortly after. By May 1962, the main concepts for a simulation language were set. SIMULA I was born, a special purpose programming language for simulating discrete event systems.
Kristen Nygaard was invited to visit the EckertâMauchly Computer Corporation late May 1962 in connection with the marketing of their new UNIVAC 1107 computer. At that visit, Nygaard presented the ideas of Simula to Robert Bemer, the director of systems programming at Univac. Bemer was a great ALGOL fan and found the Simula project compelling. Bemer was also chairperson of a session at the second international conference on information processing hosted by International Federation for Information Processing (IFIP). He invited Nygaard, who presented the paper "SIMULA â An Extension of ALGOL to the Description of Discrete-Event Networks".
The Norwegian Computing Center got a UNIVAC 1107 in August 1963 at a considerable discount, on which Dahl implemented the SIMULA I under contract with UNIVAC. The implementation was based on the UNIVAC ALGOL 60 compiler. SIMULA I was fully operational on the UNIVAC 1107 by January 1965. In the following few years, Dahl and Nygaard spent a lot of time teaching Simula. Simula spread to several countries around the world and SIMULA I was later implemented on other computers including the Burroughs B5500 and the Russian Ural-16.
In 1966 C. A. R. Hoare introduced the concept of record class construct, which Dahl and Nygaard extended with the concept of prefixing and other features to meet their requirements for a generalized process concept. Dahl and Nygaard presented their paper on Class and Subclass declarations at the IFIP Working Conference on simulation languages in Oslo, May 1967. This paper became the first formal definition of Simula 67. In June 1967, a conference was held to standardize the language and initiate a number of implementations. Dahl proposed to unify the type and the class concept. This led to serious discussions, and the proposal was rejected by the board. Simula 67 was formally standardized on the first meeting of the Simula Standards Group (SSG) in February 1968.
Simula was influential in the development of Smalltalk and later object-oriented programming languages. It also helped inspire the actor model of concurrent computation although Simula only supports coroutines and not true concurrency.[7]
In the late sixties and the early seventies, there were four main implementations of Simula:

UNIVAC 1100 by Norwegian Computing Center (NCC)
System/360 and System/370 by NCC
CDC 3000 by University of Oslo's Joint Computer Installation at Kjeller
TOPS-10 by Swedish National Defence Research Institute (FOA)
These implementations were ported to a wide range of platforms. The TOPS-10 implemented the concept of public, protected, and private member variables and procedures, that later was integrated into Simula 87. Simula 87 is the latest standard and is ported to a wide range of platforms. There are mainly four implementations:

Simula AS
Lund Simula
GNU Cim[8]
Portable Simula Revisited[9]
In November 2001, Dahl and Nygaard were awarded the IEEE John von Neumann Medal by the Institute of Electrical and Electronics Engineers "For the introduction of the concepts underlying object-oriented programming through the design and implementation of SIMULA 67". In April 2002, they received the 2001 A. M. Turing Award by the Association for Computing Machinery (ACM), with the citation: "For ideas fundamental to the emergence of object oriented programming, through their design of the programming languages Simula I and Simula 67." Dahl and Nygaard died in June and August of that year, respectively, [10] before the ACM Turing Award Lecture[11] that was scheduled to be delivered at the November 2002 OOPSLA conference in Seattle.
Simula Research Laboratory is a research institute named after the Simula language, and Nygaard held a part-time position there from the opening in 2001. The new Computer Science building at the University of Oslo is named Ole Johan Dahl's House, in Dahl's honour, and the main auditorium is named Simula.

Sample code[edit]
Minimal program[edit]
The empty computer file is the minimal program in Simula, measured by the size of the source code. It consists of one thing only; a dummy statement.
However, the minimal program is more conveniently represented as an empty block:

Begin
End;

It begins executing and immediately terminates. The language lacks any return value from the program.

Classic Hello world[edit]
An example of a Hello world program in Simula:

Begin
   OutText ("Hello, World!");
   Outimage;
End;

Simula is case-insensitive.

Classes, subclasses and virtual procedures[edit]
A more realistic example with use of classes,[1]:â1.3.3,â2â subclasses[1]:â2.2.1â and virtual procedures:[1]:â2.2.3â

Begin
   Class Glyph;
      Virtual: Procedure print Is Procedure print;;
   Begin
   End;
   
   Glyph Class Char (c);
      Character c;
   Begin
      Procedure print;
        OutChar(c);
   End;
   
   Glyph Class Line (elements);
      Ref (Glyph) Array elements;
   Begin
      Procedure print;
      Begin
         Integer i;
         For i:= 1 Step 1 Until UpperBound (elements, 1) Do
            elements (i).print;
         OutImage;
      End;
   End;
   
   Ref (Glyph) rg;
   Ref (Glyph) Array rgs (1Â : 4);
   
   ! Main program;
   rgs (1):- New Char ('A');
   rgs (2):- New Char ('b');
   rgs (3):- New Char ('b');
   rgs (4):- New Char ('a');
   rg:- New Line (rgs);
   rg.print;
End;

The above example has one super class (Glyph) with two subclasses (Char and Line). There is one virtual procedure with two implementations. The execution starts by executing the main program. Simula lacks the concept of abstract classes, since classes with pure virtual procedures can be instantiated. This means that in the above example, all classes can be instantiated. Calling a pure virtual procedure will however produce a run-time error.

Call by name[edit]
Simula supports call by name[1]:â8.2.3â so the Jensen's Device can easily be implemented. However, the default transmission mode for simple parameter is call by value, contrary to ALGOL which used call by name. The source code for the Jensen's Device must therefore specify call by name for the parameters when compiled by a Simula compiler.
Another much simpler example is the summation function 
  
    
      
        â
      
    
    {\displaystyle \sum }
  
 which can be implemented as follows:

Real Procedure Sigma (k, m, n, u);
   Name k, u;
   Integer k, m, n; Real u;
Begin
   Real s;
   k:= m;
   While k <= n Do Begin s:= s + u; k:= k + 1; End;
   Sigma:= s;
End;

The above code uses call by name for the controlling variable (k) and the expression (u).
This allows the controlling variable to be used in the expression.
Note that the Simula standard allows for certain restrictions on the controlling variable
in a for loop. The above code therefore uses a while loop for maximum portability.
The following:

  
    
      
        Z
        =
        
          â
          
            i
            =
            1
          
          
            100
          
        
        
          
            1
            
              (
              i
              +
              a
              
                )
                
                  2
                
              
            
          
        
      
    
    {\displaystyle Z=\sum _{i=1}^{100}{1 \over (i+a)^{2}}}
  

can then be implemented as follows:

Z:= Sigma (i, 1, 100, 1 / (i + a) ** 2);

Simulation[edit]
Simula includes a simulation[1]:â14.2â package for doing discrete event simulations.  This simulation package is based on Simula's object-oriented features and its coroutine[1]:â9.2â concept.
Sam, Sally, and Andy are shopping for clothes. They must share one fitting room. Each one of them is browsing the store for about 12 minutes and then uses the fitting room exclusively for about three minutes, each following a normal distribution. A simulation of their fitting room experience is as follows:

Simulation Begin
   Class FittingRoom; Begin
      Ref (Head) door;
      Boolean inUse;
      Procedure request; Begin
         If inUse Then Begin
             Wait (door);
             door.First.Out;
         End;
         inUse:= True;
      End;
      Procedure leave; Begin
         inUse:= False;
         Activate door.First;
      End;
      door:- New Head;
   End;
   
   Procedure report (message); Text message; Begin
      OutFix (Time, 2, 0); OutText (": " & message); OutImage;
   End;
   
   Process Class Person (pname); Text pname; Begin
      While True Do Begin
         Hold (Normal (12, 4, u));
         report  (pname & " is requesting the fitting room");
         fittingroom1.request;
         report (pname & " has entered the fitting room");
         Hold (Normal (3, 1, u));
         fittingroom1.leave;
         report (pname & " has left the fitting room");
      End;
   End;
   
   Integer u;
   Ref (FittingRoom) fittingRoom1;
   
   fittingRoom1:- New FittingRoom;
   Activate New Person ("Sam");
   Activate New Person ("Sally");
   Activate New Person ("Andy");
   Hold (100);
End;

The main block is prefixed with Simulation for enabling simulation. The simulation package can be used on any block and simulations can even be nested when simulating someone doing simulations.
The fitting room object uses a queue (door) for getting access to the fitting room. When someone requests the fitting room and it's in use they must wait in this queue (Wait (door)). When someone leaves the fitting room the first one (if any) is released from the queue (Activate door.first) and accordingly removed from the door queue (door.First.Out).
Person is a subclass of Process and its activity is described using hold (time for browsing the store and time spent in the fitting room) and calls procedures in the fitting room object for requesting and leaving the fitting room.
The main program creates all the objects and activates all the person objects to put them into the event queue. The main program holds for 100 minutes of simulated time before the program terminates.

See also[edit]
BETA (programming language), a modern successor to Simula
Notes[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ Jump up to: a b c d e f g h i j k l m n .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Dahl, Ole-Johan; Myhrhaug, BjÃ¸rn; Nygaard, Kristen (1970). Common Base Language (PDF) (Report). Norwegian Computing Center. Archived from the original on 2013-12-25. Retrieved 17 November 2020.{{cite report}}:  CS1 maint: unfit URL (link)

^ Nygaard, Kristen (1978). "The Development of the Simula Languages" (PDF). The development of .. SIMULA I and SIMULA 67... were influenced by the design of SIMSCRIPT ...

^ Kristen Nygaard and Ole-Johan Dahl. 1978. The development of the SIMULA languages. History of programming languages. Association for Computing Machinery, New York, NY, USA, 439â480. DOI:https://doi.org/10.1145/800025.1198392

^ Wong, William. "Before C, What Did You Use?". Electronic Design. Retrieved 22 May 2017.

^ 
Holmevik, Jan Rune (1994). "Compiling Simula: A historical study of technological genesis" (PDF). IEEE Annals of the History of Computing. 16 (4): 25â37. doi:10.1109/85.329756. S2CIDÂ 18148999. Retrieved 12 May 2010.

^ Holmevik, Jan Rune. "Compiling Simula". Oslo, Norway: Institute for Studies in Research and Higher Education. Archived from the original on 20 April 2009. Retrieved 19 April 2017.

^ Lehrmann Madsen, Ole (2014). "Building Safe Concurrency Abstractions".  In Agha, Gul; Igarashi, Atsushi; Kobayashi, Naoki; Masuhara, Hidehiko; Matsuoka, Satoshi; Shibayama, Etsuya; Taura, Kenjiro (eds.). Concurrent Objects and Beyond. Lecture Notes in Computer Science. Vol.Â 8665. Berlin: Springer. p.Â 68. doi:10.1007/978-3-662-44471-9. ISBNÂ 978-3-662-44471-9. S2CIDÂ 1000741.

^ "GNU Cim".

^ "Portable Simula Revisited". GitHub. Retrieved 17 June 2019.

^ "ACM Ole-Johan Dahl and Kristen Nygaard - Obituary". Acm.org. Archived from the original on 19 July 2011. Retrieved 14 January 2012.

^ "ACM Turing Award Lectures". Informatik.uni-trier.de. Retrieved 14 January 2012.


Sources[edit]
Sylvester, Peter. "IBM System 360/370 Compiler and Historical Documentation" (The Simula Standard and other historical documentation).
Further reading[edit]
Pooley, Rob (1987), An Introduction to Programming in Simula, Alfred Waller Ltd, ISBNÂ 0632016116, archived from the original on 2004-09-19
External links[edit]
Official website
Portable Simula Revisited on GitHub
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteALGOL programmingImplementationsTechnicalstandards
ALGOL 58
ALGOL 60
ALGOL 68
Dialects
ABC ALGOL
ALCOR
ALGO
ALGOL 68C
ALGOL 68-R
ALGOL 68RS (ELLA)
ALGOL 68S
ALGOL N
ALGOL W
ALGOL X
Atlas Autocode (Edinburgh IMP)
Burroughs ALGOL
Coral 66
Dartmouth ALGOL 30
DASK ALGOL
DG/L
Elliott ALGOL
Executive Systems Problem Oriented Language (ESPOL) â New Executive Programming Language (NEWP)
FLACC
IMP
JOVIAL
Kidsgrove Algol
Mary
NELIAC
RTL/2
S-algol, PS-algol, Napier88
Simula
Small Machine ALGOL Like Language (SMALL)
SMIL ALGOL
Formalisms
Jensen's device
Van Wijngaarden grammar
CommunityOrganizationsProfessionalassociations
ALCOR Group
Association for Computing Machinery (ACM)
BSI Group
Euro-Asian Council for Standardization, Metrology and Certification (EASC)
International Federation for Information Processing (IFIP) IFIP Working Group 2.1
Society of Applied Mathematics and Mechanics (GAMM)
Business
Burroughs Corporation
Elliott Brothers
Regnecentralen
Education
Case Institute of Technology
University of Edinburgh
University of St Andrews
Manchester University
Massachusetts Institute of Technology (MIT)
Government
Royal Radar Establishment (RRE)
PeopleALGOL 58
John Backus
Friedrich L. Bauer
Hermann Bottenbruch
Charles Katz
Alan Perlis
Heinz Rutishauser
Klaus Samelson
Joseph Henry Wegstein
ALGOL 60
Backus^
Roland Carl Backhouse
Bauer^
Richard Bird
Stephen R. Bourne
Edsger W. Dijkstra
Andrey Ershov
Robert W. Floyd
Jeremy Gibbons
Julien Green
David Gries
Eric Hehner
Tony Hoare
JÃ¸rn Jensen
Katz^
Peter Landin
Tom Maibaum
Conor McBride
John McCarthy
Carroll Morgan
Peter Naur
Maurice Nivat
John E. L. Peck
Perlis^
Brian Randell
Rutishauser^
Samelson^
Jacob T. Schwartz
Micha Sharir
David Turner
Bernard Vauquois
Eiiti Wada
Wegstein^
Adriaan van Wijngaarden
Mike Woodger
Simula
Ole-Johan Dahl
Kristen Nygaard
ALGOL 68
Bauer^
Susan G. Bond
Bourne^
Robert Dewar
Dijkstra^
Gerhard Goos
Michael Guy
Hoare^
Cornelis H. A. Koster
Peter Landin
Charles H. Lindsey
Barry J. Mailloux
McCarthy^
Lambert Meertens
Naur^
Peck^
Willem van der Poel
Randell^
Douglas T. Ross
Samelson^
Michel Sintzoff
van Wijngaarden^
Niklaus Wirth
Woodger^
Philip Woodward
Nobuo Yoneda

Hal Abelson
John Barnes
Tony Brooker
Ron Morrison
Peter O'Hearn
John C. ReynoldsOther
ALGOL Bulletin
 Category: ALGOL  Category: ALGOL 60
^ = full name and link in prior ALGOL version above
vteProgramming languages
Comparison
Timeline
History

Ada
ALGOL
APL
Assembly
BASIC
C
C++
C#
COBOL
Erlang
Forth
Fortran
Go
Haskell
Java
JavaScript
Kotlin
Lisp
Lua
ML
Pascal
Perl
PHP
Prolog
Python
R
Ruby
Rust
SQL
Shell
Simula
Smalltalk
Swift
more...

 Category
 Lists: Alphabetical
Categorical
Generational
Non-English-based

Authority control General
Integrated Authority File (Germany)
National libraries
United States
Other
Faceted Application of Subject Terminology





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Simula&oldid=1054685873"
		Categories: ALGOL 60 dialectClass-based programming languagesNorwegian inventionsProgramming languages created in 1962Science and technology in NorwaySimulation programming languagesProgramming languagesHidden categories: CS1 maint: unfit URLArticles with short descriptionShort description is different from WikidataAll articles with unsourced statementsArticles with unsourced statements from December 2013Official website not in WikidataArticles with GND identifiersArticles with LCCN identifiersArticles with FAST identifiers
	
