
Title:
P versus NP problem
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Unsolved problem in computer science
.mw-parser-output .unsolved{margin:0 1em 1em;border:#ccc solid;padding:0.35em 0.35em 0.35em 2.2em;background-color:#eee;background-image:url("https://upload.wikimedia.org/wikipedia/commons/2/26/Question%2C_Web_Fundamentals.svg");background-position:top 50%left 0.35em;background-size:1.5em;background-repeat:no-repeat}@media(min-width:720px){.mw-parser-output .unsolved{float:right;max-width:25%}}.mw-parser-output .unsolved-label{font-weight:bold}.mw-parser-output .unsolved-body{margin:0.35em;font-style:italic}.mw-parser-output .unsolved-more{font-size:smaller}

Unsolved problem in computer science:
If the solution to a problem is easy to check for correctness, must the problem be easy to solve?
(more unsolved problems in computer science)



.mw-parser-output .sidebar{width:22em;float:right;clear:right;margin:0.5em 0 1em 1em;background:#f8f9fa;border:1px solid #aaa;padding:0.2em;text-align:center;line-height:1.4em;font-size:88%;border-collapse:collapse;display:table}body.skin-minerva .mw-parser-output .sidebar{display:table!important;float:right!important;margin:0.5em 0 1em 1em!important}.mw-parser-output .sidebar-subgroup{width:100%;margin:0;border-spacing:0}.mw-parser-output .sidebar-left{float:left;clear:left;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-none{float:none;clear:both;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-outer-title{padding:0 0.4em 0.2em;font-size:125%;line-height:1.2em;font-weight:bold}.mw-parser-output .sidebar-top-image{padding:0.4em}.mw-parser-output .sidebar-top-caption,.mw-parser-output .sidebar-pretitle-with-top-image,.mw-parser-output .sidebar-caption{padding:0.2em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-pretitle{padding:0.4em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-title,.mw-parser-output .sidebar-title-with-pretitle{padding:0.2em 0.8em;font-size:145%;line-height:1.2em}.mw-parser-output .sidebar-title-with-pretitle{padding:0.1em 0.4em}.mw-parser-output .sidebar-image{padding:0.2em 0.4em 0.4em}.mw-parser-output .sidebar-heading{padding:0.1em 0.4em}.mw-parser-output .sidebar-content{padding:0 0.5em 0.4em}.mw-parser-output .sidebar-content-with-subgroup{padding:0.1em 0.4em 0.2em}.mw-parser-output .sidebar-above,.mw-parser-output .sidebar-below{padding:0.3em 0.8em;font-weight:bold}.mw-parser-output .sidebar-collapse .sidebar-above,.mw-parser-output .sidebar-collapse .sidebar-below{border-top:1px solid #aaa;border-bottom:1px solid #aaa}.mw-parser-output .sidebar-navbar{text-align:right;font-size:115%;padding:0 0.4em 0.4em}.mw-parser-output .sidebar-list-title{padding:0 0.4em;text-align:left;font-weight:bold;line-height:1.6em;font-size:105%}.mw-parser-output .sidebar-list-title-c{padding:0 0.4em;text-align:center;margin:0 3.3em}@media(max-width:720px){body.mediawiki .mw-parser-output .sidebar{width:100%!important;clear:both;float:none!important;margin-left:0!important;margin-right:0!important}}Millennium Prize Problems
Birch and Swinnerton-Dyer conjecture
Hodge conjecture
NavierâStokes existence and smoothness
P versus NP problem
PoincarÃ© conjecture (solved)
Riemann hypothesis
YangâMills existence and mass gap
.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vte
The P versus NP problem is a major unsolved problem in computer science. It asks whether every problem whose solution can be quickly verified can also be solved quickly.
The informal term quickly, used above, means the existence of an algorithm solving the task that runs in polynomial time, such that the time to complete the task varies as a polynomial function on the size of the input to the algorithm (as opposed to, say, exponential time). The general class of questions for which some algorithm can provide an answer in polynomial time is "P" or "class P". For some questions, there is no known way to find an answer quickly, but if one is provided with information showing what the answer is, it is possible to verify the answer quickly. The class of questions for which an answer can be verified in polynomial time is NP, which stands for "nondeterministic polynomial time".[Note 1]
An answer to the P versus NP question would determine whether problems that can be verified in polynomial time can also be solved in polynomial time. If it turns out that PÂ â Â NP, which is widely believed, it would mean that there are problems in NP  that are harder to compute than to verify: they could not be solved in polynomial time, but the answer could be verified in polynomial time.
The problem is considered by many to be the most important open problem in computer science.[1] Aside from being an important problem in computational theory, a proof either way would have profound implications for mathematics, cryptography, algorithm research, artificial intelligence, game theory, multimedia processing, philosophy, economics and many other fields.[2]
It is one of the seven Millennium Prize Problems selected by the Clay Mathematics Institute, each of which carries a US$1,000,000 prize for the first correct solution.

Contents

1 Example
2 History
3 Context
4 NP-completeness
5 Harder problems
6 Problems in NP not known to be in P or NP-complete
7 Does P mean "easy"?
8 Reasons to believe P â  NP or P = NP
9 Consequences of solution

9.1 P = NP
9.2 P â  NP


10 Results about difficulty of proof
11 Claimed solutions
12 Logical characterizations
13 Polynomial-time algorithms
14 Formal definitions

14.1 P and NP

14.1.1 Example


14.2 NP-completeness


15 Popular culture
16 See also
17 Notes
18 References
19 Sources
20 Further reading
21 External links



Example[edit]
Consider Sudoku, a game where the player is given a partially filled-in grid of numbers and attempts to complete the grid following certain rules. Given an incomplete Sudoku grid, of any size, is there at least one legal solution?  Any proposed solution is easily verified, and the time to check a solution grows slowly (polynomially) as the grid gets bigger.  However, all known algorithms for finding solutions take, for difficult examples, time that grows exponentially as the grid gets bigger.  So, Sudoku is in NP (quickly checkable) but does not seem to be in P (quickly solvable).  Thousands of other problems seem similar, in that they are fast to check but slow to solve.  Researchers have shown that many of the problems in NP have the extra property that a fast solution to any one of them could be used to build a quick solution to any other problem in NP, a property called NP-completeness.  Decades of searching have not yielded a fast solution to any of these problems, so most scientists suspect that none of these problems can be solved quickly.  This, however, has never been proven.

History[edit]
The precise statement of the P versus NP problem was introduced in 1971 by Stephen Cook in his seminal paper "The complexity of theorem proving procedures"[3] (and independently by Leonid Levin in 1973[4]).
Although the P versus NP problem was formally defined in 1971, there were previous inklings of the problems involved, the difficulty of proof, and the potential consequences.  In 1955, mathematician John Nash wrote a letter to the NSA, where he speculated that cracking a sufficiently complex code would require time exponential in the length of the key.[5] If proved (and Nash was suitably skeptical) this would imply what is now called PÂ â Â NP, since a proposed key can easily be verified in polynomial time. Another mention of the underlying problem occurred in a 1956 letter written by Kurt GÃ¶del to John von Neumann.  GÃ¶del asked whether theorem-proving (now known to be co-NP-complete) could be solved in quadratic or linear time,[6] and pointed out one of the most important consequencesâthat if so, then the discovery of mathematical proofs could be automated.

Context[edit]
The relation between the complexity classes P and NP is studied in computational complexity theory, the part of the theory of computation dealing with the resources required during computation to solve a given problem. The most common resources are time (how many steps it takes to solve a problem) and space (how much memory it takes to solve a problem).
In such analysis, a model of the computer for which time must be analyzed is required. Typically such models assume that the computer is deterministic (given the computer's present state and any inputs, there is only one possible action that the computer might take) and sequential (it performs actions one after the other).
In this theory, the class P consists of all those decision problems (defined below) that can be solved on a deterministic sequential machine in an amount of time that is polynomial in the size of the input; the class NP consists of all those decision problems whose positive solutions can be verified in polynomial time given the right information, or equivalently, whose solution can be found in polynomial time on a non-deterministic machine.[7] Clearly, P â NP. Arguably, the biggest open question in theoretical computer science concerns the relationship between those two classes:

Is P equal to NP?
Since 2002, William Gasarch has conducted three polls of researchers concerning this and related questions.[8][9][10] Confidence that PÂ â Â NP has been increasing â in 2019, 88% believed PÂ â Â NP, as opposed to 83% in 2012 and 61% in 2002.  When restricted to experts, the 2019 answers became 99% believe PÂ â Â NP.[10] These polls do not imply anything about whether P=NP is true, as stated by Gasarch himself: â³This does not bring us any closer to solving P=?NP or to knowing when it will be solved, but it attempts to be an objective report on the subjective opinion of this era.â³

NP-completeness[edit]
  Euler diagram for P, NP, NP-complete, and NP-hard set of problems (excluding the empty language and its complement, which belong to P but are not NP-complete)
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}Main article: NP-completeness
To attack the P = NP question, the concept of NP-completeness is very useful. NP-complete problems are a set of problems to each of which any other NP-problem can be reduced in polynomial time and whose solution may still be verified in polynomial time. That is, any NP problem can be transformed into any of the NP-complete problems. Informally, an NP-complete problem is an NP problem that is at least as "tough" as any other problem in NP.
NP-hard problems are those at least as hard as NP problems; i.e., all NP problems can be reduced (in polynomial time) to them. NP-hard problems need not be in NP; i.e., they need not have solutions verifiable in polynomial time.
For instance, the Boolean satisfiability problem is NP-complete by the CookâLevin theorem, so any instance of any problem in NP can be transformed mechanically into an instance of the Boolean satisfiability problem in polynomial time. The Boolean satisfiability problem is one of many such NP-complete problems. If any NP-complete problem is in P, then it would follow that P = NP. However, many important problems have been shown to be NP-complete, and no fast algorithm for any of them is known.
Based on the definition alone it is not obvious that NP-complete problems exist; however, a trivial and contrived NP-complete problem can be formulated as follows: given a description of a Turing machine M guaranteed to halt in polynomial time, does there exist a polynomial-size input that M will accept?[11] It is in NP because (given an input) it is simple to check whether M accepts the input by simulating M; it is NP-complete because the verifier for any particular instance of a problem in NP can be encoded as a polynomial-time machine M that takes the solution to be verified as input. Then the question of whether the instance is a yes or no instance is determined by whether a valid input exists.
The first natural problem proven to be NP-complete was the Boolean satisfiability problem, also known as SAT. As noted above, this is the CookâLevin theorem; its proof that satisfiability is NP-complete contains technical details about Turing machines as they relate to the definition of NP. However, after this problem was proved to be NP-complete, proof by reduction provided a simpler way to show that many other problems are also NP-complete, including the game Sudoku discussed earlier. In this case, the proof shows that a solution of Sudoku in polynomial time could also be used to complete Latin squares in polynomial time.[12] This in turn gives a solution to the problem of partitioning tri-partite graphs into triangles,[13] which could then be used to find solutions for the special case of SAT known as 3-SAT,[14] which then provides a solution for general Boolean satisfiability.  So a polynomial-time solution to Sudoku leads, by a series of mechanical transformations, to a polynomial time solution of satisfiability, which in turn can be used to solve any other NP-problem in polynomial time.  Using transformations like this, a vast class of seemingly unrelated problems are all reducible to one another, and are in a sense "the same problem".

Harder problems[edit]
See also: Complexity class
Although it is unknown whether P = NP, problems outside of P are known. Just as the class P is defined in terms of polynomial running time, the class EXPTIME is the set of all decision problems that have exponential running time. In other words, any problem in EXPTIME is solvable by a deterministic Turing machine in O(2p(n)) time, where p(n) is a polynomial function of n. A decision problem is EXPTIME-complete if it is in EXPTIME, and every problem in EXPTIME has a polynomial-time many-one reduction to it. A number of problems are known to be EXPTIME-complete. Because it can be shown that P â  EXPTIME, these problems are outside P, and so require more than polynomial time. In fact, by the time hierarchy theorem, they cannot be solved in significantly less than exponential time. Examples include finding a perfect strategy for chess positions on an N Ã N board[15] and similar problems for other board games.[16]
The problem of deciding the truth of a statement in Presburger arithmetic requires even more time. Fischer and Rabin proved in 1974[17] that every algorithm that decides the truth of Presburger statements of length n has a runtime of at least 
  
    
      
        
          2
          
            
              2
              
                c
                n
              
            
          
        
      
    
    {\displaystyle 2^{2^{cn}}}
  
 for some constant c. Hence, the problem is known to need more than exponential run time. Even more difficult are the undecidable problems, such as the halting problem. They cannot be completely solved by any algorithm, in the sense that for any particular algorithm there is at least one input for which that algorithm will not produce the right answer; it will either produce the wrong answer, finish without giving a conclusive answer, or otherwise run forever without producing any answer at all.
It is also possible to consider questions other than decision problems.  One such class, consisting of counting problems, is called #P: whereas an NP problem asks "Are there any solutions?", the corresponding #P problem asks "How many solutions are there?"  Clearly, a #P problem must be at least as hard as the corresponding NP problem, since a count of solutions immediately tells if at least one solution exists, if the count is greater than zero. Surprisingly, some #P problems that are believed to be difficult correspond to easy (for example linear-time) P problems.[18] For these problems, it is very easy to tell whether solutions exist, but thought to be very hard to tell how many.  Many of these problems are #P-complete, and hence among the hardest problems in #P, since a polynomial time solution to any of them would allow a polynomial time solution to all other #P problems.

Problems in NP not known to be in P or NP-complete[edit]
Main article: NP-intermediate
In 1975, Richard E. Ladner showed that if P â  NP then there exist problems in NP that are neither in P nor NP-complete.[19] Such problems are called NP-intermediate problems. The graph isomorphism problem, the discrete logarithm problem and the integer factorization problem are examples of problems believed to be NP-intermediate. They are some of the very few NP problems not known to be in P or to be NP-complete.
The graph isomorphism problem is the computational problem of determining whether two finite graphs are isomorphic. An important unsolved problem in complexity theory is whether the graph isomorphism problem is in P, NP-complete, or NP-intermediate. The answer is not known, but it is believed that the problem is at least not NP-complete.[20] If graph isomorphism is NP-complete, the polynomial time hierarchy collapses to its second level.[21] Since it is widely believed that the polynomial hierarchy does not collapse to any finite level, it is believed that graph isomorphism is not NP-complete. The best algorithm for this problem, due to LÃ¡szlÃ³ Babai, runs in quasi-polynomial time.[22]
The integer factorization problem is the computational problem of determining the prime factorization of a given integer. Phrased as a decision problem, it is the problem of deciding whether the input has a factor less than k. No efficient integer factorization algorithm is known, and this fact forms the basis of several modern cryptographic systems, such as the RSA algorithm. The integer factorization problem is in NP and in co-NP (and even in UP and co-UP[23]). If the problem is NP-complete, the polynomial time hierarchy will collapse to its first level (i.e., NP = co-NP). The best known algorithm for integer factorization is the general number field sieve, which takes expected time


  
    
      
        O
        
          (
          
            exp
            â¡
            
              (
              
                
                  
                    (
                    
                      
                        
                          
                            
                              64
                              n
                            
                            9
                          
                        
                      
                      log
                      â¡
                      (
                      2
                      )
                    
                    )
                  
                  
                    
                      1
                      3
                    
                  
                
                
                  
                    (
                    
                      log
                      â¡
                      (
                      n
                      log
                      â¡
                      (
                      2
                      )
                      )
                    
                    )
                  
                  
                    
                      2
                      3
                    
                  
                
              
              )
            
          
          )
        
      
    
    {\displaystyle O\left(\exp \left(\left({\tfrac {64n}{9}}\log(2)\right)^{\frac {1}{3}}\left(\log(n\log(2))\right)^{\frac {2}{3}}\right)\right)}
  

to factor an n-bit integer. However, the best known quantum algorithm for this problem, Shor's algorithm, does run in polynomial time, although this does not indicate where the problem lies with respect to non-quantum complexity classes.

Does P mean "easy"?[edit]
  The graph shows the running time vs. problem size for a knapsack problem of a state-of-the-art, specialized algorithm. The quadratic fit suggests that the algorithmic complexity of the problem is O((log(n))2).[24]
All of the above discussion has assumed that P means "easy" and "not in P" means "difficult", an assumption known as Cobham's thesis. It is a common and reasonably accurate[citation needed] assumption in complexity theory; however, it has some caveats.
First, it is not always true in practice. A theoretical polynomial algorithm may have extremely large constant factors or exponents, thus rendering it impractical. For example, the problem of deciding whether a graph G contains H as a minor, where H is fixed, can be solved in a running time of O(n2),[25] where n is the number of vertices in G.  However, the big O notation hides a constant that depends superexponentially on H.  The constant is greater than 
  
    
      
        2
        ââ
        (
        2
        ââ
        (
        2
        ââ
        (
        h
        
          /
        
        2
        )
        )
        )
      
    
    {\displaystyle 2\uparrow \uparrow (2\uparrow \uparrow (2\uparrow \uparrow (h/2)))}
  
 (using Knuth's up-arrow notation), and where h is the number of vertices in H.[26]
On the other hand, even if a problem is shown to be NP-complete, and even if P â  NP, there may still be effective approaches to tackling the problem in practice. There are algorithms for many NP-complete problems, such as the knapsack problem, the traveling salesman problem and the Boolean satisfiability problem, that can solve to optimality many real-world instances in reasonable time. The empirical average-case complexity (time vs. problem size) of such algorithms can be surprisingly low.  An example is the simplex algorithm in linear programming, which works surprisingly well in practice; despite having exponential worst-case time complexity, it runs on par with the best known polynomial-time algorithms.[27]
Finally, there are types of computations which do not conform to the Turing machine model on which P and NP are defined, such as quantum computation and randomized algorithms.

Reasons to believe P â  NP or P = NP[edit]
Cook provides a restatement of the problem in THE P VERSUS NP PROBLEM as: Does P = NP ?.[28] According to polls,[8][29] most computer scientists believe that PÂ â Â NP. A key reason for this belief is that after decades of studying these problems no one has been able to find a polynomial-time algorithm for any of more than 3000 important known NP-complete problems (see List of NP-complete problems). These algorithms were sought long before the concept of NP-completeness was even defined (Karp's 21 NP-complete problems, among the first found, were all well-known existing problems at the time they were shown to be NP-complete). Furthermore, the result P = NP would imply many other startling results that are currently believed to be false, such as NP = co-NP and P = PH.
It is also intuitively argued that the existence of problems that are hard to solve but for which the solutions are easy to verify matches real-world experience.[30]

.mw-parser-output .templatequote{overflow:hidden;margin:1em 0;padding:0 40px}.mw-parser-output .templatequote .templatequotecite{line-height:1.5em;text-align:left;padding-left:1.6em;margin-top:0}If P = NP, then the world would be a profoundly different place than we usually assume it to be. There would be no special value in "creative leaps," no fundamental gap between solving a problem and recognizing the solution once it's found.ââScott Aaronson, UT Austin
On the other hand, some researchers believe that there is overconfidence in believing P â  NP and that researchers should explore proofs of P = NP as well. For example, in 2002 these statements were made:[8]

The main argument in favor of PÂ â Â NP is the total lack of fundamental progress in the area of exhaustive search. This is, in my opinion, a very weak argument. The space of algorithms is very large and we are only at the beginning of its exploration. [...] The resolution of Fermat's Last Theorem also shows that very simple questions may be settled only by very deep theories.ââMoshe Y. Vardi, Rice University
Being attached to a speculation is not a good guide to research planning. One should always try both directions of every problem. Prejudice has caused famous mathematicians to fail to solve famous problems whose solution was opposite to their expectations, even though they had developed all the methods required.ââAnil Nerode, Cornell University
Consequences of solution[edit]
One of the reasons the problem attracts so much attention is the consequences of the possible answers.  Either direction of resolution would advance theory enormously, and perhaps have huge practical consequences as well.

P = NP[edit]
A proof that P = NP could have stunning practical consequences if the proof leads to efficient methods for solving some of the important problems in NP.  The potential consequences, both positive and negative, arise since various NP-complete problems are fundamental in many fields.
It is also very possible that a proof would not lead to practical algorithms for NP-complete problems.  The formulation of the problem does not require that the bounding polynomial be small or even specifically known.  A non-constructive proof might show a solution exists without specifying either an algorithm to obtain it or a specific bound.  Even if the proof is constructive, showing an explicit bounding polynomial and algorithmic details, if the polynomial is not very low-order the algorithm might not be sufficiently efficient in practice. In this case the initial proof would be mainly of interest to theoreticians, but the knowledge that a polynomial time solutions are possible would surely spur research into better (and possibly practical) methods to achieve them.
An example of a field that could be upended by a solution showing P = NP is cryptography, which relies on certain problems being difficult. A constructive and efficient solution[Note 2] to an NP-complete problem such as 3-SAT would break most existing cryptosystems including:

Existing implementations of public-key cryptography,[31] a foundation for many modern security applications such as secure financial transactions over the Internet.
Symmetric ciphers such as AES or 3DES,[32] used for the encryption of communications data.
Cryptographic hashing, which underlies blockchain cryptocurrencies such as Bitcoin, and is used to authenticate software updates.  For these applications, the problem of finding a pre-image that hashes to a given value must be difficult in order to be useful, and ideally should require exponential time. However, if P = NP, then finding a pre-image M can be done in polynomial time, through reduction to SAT.[33]
These would need to be modified or replaced by information-theoretically secure solutions not inherently based on P-NP inequivalence.
On the other hand, there are enormous positive consequences that would follow from rendering tractable many currently mathematically intractable problems. For instance, many problems in operations research are NP-complete, such as some types of integer programming and the travelling salesman problem. Efficient solutions to these problems would have enormous implications for logistics. Many other important problems, such as some problems in protein structure prediction, are also NP-complete;[34] if these problems were efficiently solvable, it could spur considerable advances in life sciences and biotechnology.
But such changes may pale in significance compared to the revolution an efficient method for solving NP-complete problems would cause in mathematics itself. GÃ¶del, in his early thoughts on computational complexity, noted that a mechanical method that could solve any problem would revolutionize mathematics:[35][36]

If there really were a machine with Ï(n) â¼ k â n (or even â¼ k â n2), this would have consequences of the greatest importance. Namely, it would obviously mean that in spite of the undecidability of the Entscheidungsproblem, the mental work of a mathematician concerning Yes-or-No questions could be completely replaced by a machine. After all, one would simply have to choose the natural number n so large that when the machine does not deliver a result, it makes no sense to think more about the problem.
Similarly, Stephen Cook (assuming not only a proof, but a practically efficient algorithm) says[28]

...Â it would transform mathematics by allowing a computer to find a formal proof of any theorem which has a proof of a reasonable length, since formal proofs can easily be recognized in polynomial time. Example problems may well include all of the CMI prize problems.
Research mathematicians spend their careers trying to prove theorems, and some proofs have taken decades or even centuries to find after problems have been statedâfor instance, Fermat's Last Theorem took over three centuries to prove. A method that is guaranteed to find proofs to theorems, should one exist of a "reasonable" size, would essentially end this struggle.
Donald Knuth has stated that he has come to believe that P = NP, but is reserved about the impact of a possible proof:[37]

[...] if you imagine a number M that's finite but incredibly largeâlike say the number 10ââââ3 discussed in my paper on "coping with finiteness"âthen there's a humongous number of possible algorithms that do nM bitwise or addition or shift operations on n given bits, and it's really hard to believe that all of those algorithms fail.
My main point, however, is that I don't believe that the equality P = NP will turn out to be helpful even if it is proved, because such a proof will almost surely be nonconstructive.
  Diagram of complexity classes provided that PÂ â Â NP. The existence of problems within NP but outside both P and NP-complete, under that assumption, was established by Ladner's theorem.[19]
P â  NP[edit]
A proof that showed that P â  NP would lack the practical computational benefits of a proof that P = NP, but would nevertheless represent a very significant advance in computational complexity theory and provide guidance for future research. It would allow one to show in a formal way that many common problems cannot be solved efficiently, so that the attention of researchers can be focused on partial solutions or solutions to other problems. Due to widespread belief in P â  NP, much of this focusing of research has already taken place.[38]
Also P â  NP still leaves open the average-case complexity of hard problems in NP.  For example, it is possible that SAT requires exponential time in the worst case, but that almost all randomly selected instances of it are efficiently solvable. Russell Impagliazzo has described five hypothetical "worlds" that could result from different possible resolutions to the average-case complexity question.[39] These range from "Algorithmica", where P = NP and problems like SAT can be solved efficiently in all instances, to "Cryptomania", where P â  NP and generating hard instances of problems outside P is easy, with three intermediate possibilities reflecting different possible distributions of difficulty over instances of NP-hard problems.  The "world" where P â  NP but all problems in NP are tractable in the average case is called "Heuristica" in the paper. A Princeton University workshop in 2009 studied the status of the five worlds.[40]

Results about difficulty of proof[edit]
Although the P = NP problem itself remains open despite a million-dollar prize and a huge amount of dedicated research, efforts to solve the problem have led to several new techniques.  In particular, some of the most fruitful research related to the P = NP problem has been in showing that existing proof techniques are not powerful enough to answer the question, thus suggesting that novel technical approaches are required.
As additional evidence for the difficulty of the problem, essentially all known proof techniques in computational complexity theory fall into one of the following classifications, each of which is known to be insufficient to prove that P â  NP:




Classification

Definition


Relativizing proofs

Imagine a world where every algorithm is allowed to make queries to some fixed subroutine called an oracle (a black box which can answer a fixed set of questions in constant time, such as a black box that solves any given traveling salesman problem in 1 step), and the running time of the oracle is not counted against the running time of the algorithm. Most proofs (especially classical ones) apply uniformly in a world with oracles regardless of what the oracle does. These proofs are called relativizing. In 1975, Baker, Gill, and Solovay showed that P = NP with respect to some oracles, while P â  NP for other oracles.[41] Since relativizing proofs can only prove statements that are uniformly true with respect to all possible oracles, this showed that relativizing techniques cannot resolve P = NP.


Natural proofs

In 1993, Alexander Razborov and Steven Rudich defined a general class of proof techniques for circuit complexity lower bounds, called natural proofs.[42] At the time all previously known circuit lower bounds were natural, and circuit complexity was considered a very promising approach for resolving P = NP. However, Razborov and Rudich showed that, if one-way functions exist, then no natural proof method can distinguish between P and NP. Although one-way functions have never been formally proven to exist, most mathematicians believe that they do, and a proof of their existence would be a much stronger statement than P â  NP. Thus it is unlikely that natural proofs alone can resolve P = NP.


Algebrizing proofs

After the Baker-Gill-Solovay result, new non-relativizing proof techniques were successfully used to prove that IP = PSPACE. However, in 2008, Scott Aaronson and Avi Wigderson showed that the main technical tool used in the IP = PSPACE proof, known as arithmetization, was also insufficient to resolve P = NP.[43]

These barriers are another reason why NP-complete problems are useful: if a polynomial-time algorithm can be demonstrated for an NP-complete problem, this would solve the P = NP problem in a way not excluded by the above results.
These barriers have also led some computer scientists to suggest that the P versus NP problem may be independent of standard axiom systems like ZFC (cannot be proved or disproved within them). The interpretation of an independence result could be that either no polynomial-time algorithm exists for any NP-complete problem, and such a proof cannot be constructed in (e.g.) ZFC, or that polynomial-time algorithms for NP-complete problems may exist, but it is impossible to prove in ZFC that such algorithms are correct.[44] However, if it can be shown, using techniques of the sort that are currently known to be applicable, that the problem cannot be decided even with much weaker assumptions extending the Peano axioms (PA) for integer arithmetic, then there would necessarily exist nearly-polynomial-time algorithms for every problem in NP.[45] Therefore, if one believes (as most complexity theorists do) that not all problems in NP have efficient algorithms, it would follow that proofs of independence using those techniques cannot be possible. Additionally, this result implies that proving independence from PA or ZFC using currently known techniques is no easier than proving the existence of efficient algorithms for all problems in NP.

Claimed solutions [edit]
While the P versus NP problem is generally considered unsolved,[46] many amateur and some professional researchers have claimed solutions.  Gerhard J. Woeginger maintains a list that, as of 2016, contains 62 purported proofs of P = NP, 50 proofs of PÂ â Â NP, 2 proofs the problem is unprovable, and one proof that it is undecidable.[47] Some attempts at resolving P versus NP have received brief media attention,[48] though these attempts have since been refuted.

Logical characterizations[edit]
The P = NP problem can be restated in terms of expressible certain classes of logical statements, as a result of work in descriptive complexity.
Consider all languages of finite structures with a fixed signature including a linear order relation. Then, all such languages in P can be expressed in first-order logic with the addition of a suitable least fixed-point combinator. Effectively, this, in combination with the order, allows the definition of recursive functions. As long as the signature contains at least one predicate or function in addition to the distinguished order relation, so that the amount of space taken to store such finite structures is actually polynomial in the number of elements in the structure, this precisely characterizes P.
Similarly, NP is the set of languages expressible in existential second-order logicâthat is, second-order logic restricted to exclude universal quantification over relations, functions, and subsets. The languages in the polynomial hierarchy, PH, correspond to all of second-order logic. Thus, the question "is P a proper subset of NP" can be reformulated as "is existential second-order logic able to describe languages (of finite linearly ordered structures with nontrivial signature) that first-order logic with least fixed point cannot?".[49] The word "existential" can even be dropped from the previous characterization, since P = NP if and only if P = PH (as the former would establish that NP = co-NP, which in turn implies that NP = PH).

Polynomial-time algorithms[edit]
No algorithm for any NP-complete problem is known to run in polynomial time. However, there are algorithms known for NP-complete problems with the property that if P = NP, then the algorithm runs in polynomial time on accepting instances (although with enormous constants, making the algorithm impractical). However, these algorithms do not qualify as polynomial time because their running time on rejecting instances are not polynomial. The following algorithm, due to Levin (without any citation), is such an example below. It correctly accepts the NP-complete language SUBSET-SUM. It runs in polynomial time on inputs that are in SUBSET-SUM if and only if P = NP:

// Algorithm that accepts the NP-complete language SUBSET-SUM.
//
// this is a polynomial-time algorithm if and only if P = NP.
//
// "Polynomial-time" means it returns "yes" in polynomial time when
// the answer should be "yes", and runs forever when it is "no".
//
// Input: S = a finite set of integers
// Output: "yes" if any subset of S adds up to 0.
// Runs forever with no output otherwise.
// Note: "Program number M" is the program obtained by
// writing the integer M in binary, then
// considering that string of bits to be a
// program. Every possible program can be
// generated this way, though most do nothing
// because of syntax errors.
FOR K = 1...â
  FOR M = 1...K
    Run program number M for K steps with input S
    IF the program outputs a list of distinct integers
      AND the integers are all in S
      AND the integers sum to 0
    THEN
      OUTPUT "yes" and HALT

If, and only if, P = NP, then this is a polynomial-time algorithm accepting an NP-complete language. "Accepting" means it gives "yes" answers in polynomial time, but is allowed to run forever when the answer is "no" (also known as a semi-algorithm).
This algorithm is enormously impractical, even if P = NP. If the shortest program that can solve SUBSET-SUM in polynomial time is b bits long, the above algorithm will try at least 2b â 1 other programs first.

Formal definitions[edit]
P and NP[edit]
Conceptually speaking, a decision problem is a problem that takes as input some string w over an alphabet Î£, and outputs "yes" or "no". If there is an algorithm (say a Turing machine, or a computer program with unbounded memory) that can produce the correct answer for any input string of length n in at most cnk steps, where k and c are constants independent of the input string, then we say that the problem can be solved in polynomial time and we place it in the class P. Formally, P is defined as the set of all languages that can be decided by a deterministic polynomial-time Turing machine. That is,


  
    
      
        
          P
        
        =
        {
        L
        :
        L
        =
        L
        (
        M
        )
        
          Â for some deterministic polynomial-time Turing machineÂ 
        
        M
        }
      
    
    {\displaystyle \mathbf {P} =\{L:L=L(M){\text{ for some deterministic polynomial-time Turing machine }}M\}}
  

where


  
    
      
        L
        (
        M
        )
        =
        {
        w
        â
        
          Î£
          
            â
          
        
        :
        M
        
          Â acceptsÂ 
        
        w
        }
      
    
    {\displaystyle L(M)=\{w\in \Sigma ^{*}:M{\text{ accepts }}w\}}
  

and a deterministic polynomial-time Turing machine is a deterministic Turing machine M that satisfies the following two conditions:

M halts on all inputs w and
there exists 
  
    
      
        k
        â
        N
      
    
    {\displaystyle k\in N}
  
 such that 
  
    
      
        
          T
          
            M
          
        
        (
        n
        )
        â
        O
        (
        
          n
          
            k
          
        
        )
      
    
    {\displaystyle T_{M}(n)\in O(n^{k})}
  
, where O refers to the big O notation and

  
    
      
        
          T
          
            M
          
        
        (
        n
        )
        =
        max
        {
        
          t
          
            M
          
        
        (
        w
        )
        :
        w
        â
        
          Î£
          
            â
          
        
        ,
        
          |
        
        w
        
          |
        
        =
        n
        }
      
    
    {\displaystyle T_{M}(n)=\max\{t_{M}(w):w\in \Sigma ^{*},|w|=n\}}
  


  
    
      
        
          t
          
            M
          
        
        (
        w
        )
        =
        
          Â number of stepsÂ 
        
        M
        
          Â takes to halt on inputÂ 
        
        w
        .
      
    
    {\displaystyle t_{M}(w)={\text{ number of steps }}M{\text{ takes to halt on input }}w.}
  

NP can be defined similarly using nondeterministic Turing machines (the traditional way). However, a modern approach to define NP is to use the concept of certificate and verifier. Formally, NP is defined as the set of languages over a finite alphabet that have a verifier that runs in polynomial time, where the notion of "verifier" is defined as follows.
Let L be a language over a finite alphabet, Î£.
L â NP if, and only if, there exists a binary relation 
  
    
      
        R
        â
        
          Î£
          
            â
          
        
        Ã
        
          Î£
          
            â
          
        
      
    
    {\displaystyle R\subset \Sigma ^{*}\times \Sigma ^{*}}
  
 and a positive integer k such that the following two conditions are satisfied:

For all 
  
    
      
        x
        â
        
          Î£
          
            â
          
        
      
    
    {\displaystyle x\in \Sigma ^{*}}
  
, 
  
    
      
        x
        â
        L
        â
        â
        y
        â
        
          Î£
          
            â
          
        
      
    
    {\displaystyle x\in L\Leftrightarrow \exists y\in \Sigma ^{*}}
  
 such that (x, y) â R and 
  
    
      
        
          |
        
        y
        
          |
        
        â
        O
        (
        
          |
        
        x
        
          
            |
          
          
            k
          
        
        )
      
    
    {\displaystyle |y|\in O(|x|^{k})}
  
; and
the language 
  
    
      
        
          L
          
            R
          
        
        =
        {
        x
        #
        y
        :
        (
        x
        ,
        y
        )
        â
        R
        }
      
    
    {\displaystyle L_{R}=\{x\#y:(x,y)\in R\}}
  
 over 
  
    
      
        Î£
        âª
        {
        #
        }
      
    
    {\displaystyle \Sigma \cup \{\#\}}
  
 is decidable by a deterministic Turing machine in polynomial time.
A Turing machine that decides LR is called a verifier for L and a y such that (x, y) â R is called a certificate of membership of x in L.
In general, a verifier does not have to be polynomial-time. However, for L to be in NP, there must be a verifier that runs in polynomial time.

Example[edit]
Let


  
    
      
        
          C
          O
          M
          P
          O
          S
          I
          T
          E
        
        =
        
          {
          
            x
            â
            
              N
            
            â£
            x
            =
            p
            q
            
              Â for integersÂ 
            
            p
            ,
            q
            >
            1
          
          }
        
      
    
    {\displaystyle \mathrm {COMPOSITE} =\left\{x\in \mathbb {N} \mid x=pq{\text{ for integers }}p,q>1\right\}}
  


  
    
      
        R
        =
        
          {
          
            (
            x
            ,
            y
            )
            â
            
              N
            
            Ã
            
              N
            
            â£
            1
            <
            y
            â¤
            
              
                x
              
            
            
              Â andÂ 
            
            y
            
              Â dividesÂ 
            
            x
          
          }
        
        .
      
    
    {\displaystyle R=\left\{(x,y)\in \mathbb {N} \times \mathbb {N} \mid 1<y\leq {\sqrt {x}}{\text{ and }}y{\text{ divides }}x\right\}.}
  

Clearly, the question of whether a given x is a composite is equivalent to the question of whether x is a member of COMPOSITE. It can be shown that COMPOSITE â NP by verifying that it satisfies the above definition (if we identify natural numbers with their binary representations).
COMPOSITE also happens to be in P, a fact demonstrated by the invention of the AKS primality test.[50]

NP-completeness[edit]
Main article: NP-completeness
There are many equivalent ways of describing NP-completeness.
Let L be a language over a finite alphabet Î£.
L is NP-complete if, and only if, the following two conditions are satisfied:

L â NP; and
any L in NP is polynomial-time-reducible to L (written as 
  
    
      
        
          L
          â²
        
        
          â¤
          
            p
          
        
        L
      
    
    {\displaystyle L'\leq _{p}L}
  
), where 
  
    
      
        
          L
          â²
        
        
          â¤
          
            p
          
        
        L
      
    
    {\displaystyle L'\leq _{p}L}
  
 if, and only if, the following two conditions are satisfied:
There exists fÂ : Î£* â Î£* such that for all w in Î£* we have: 
  
    
      
        (
        w
        â
        
          L
          â²
        
        â
        f
        (
        w
        )
        â
        L
        )
      
    
    {\displaystyle (w\in L'\Leftrightarrow f(w)\in L)}
  
; and
there exists a polynomial-time Turing machine that halts with f(w) on its tape on any input w.
Alternatively, if L â NP, and there is another NP-complete problem that can be polynomial-time reduced to L, then L is NP-complete. This is a common way of proving some new problem is NP-complete.

Popular culture[edit]
The film Travelling Salesman, by director Timothy Lanzone, is the story of four mathematicians hired by the US government to solve the P versus NP problem.[51]
In the sixth episode of The Simpsons' seventh season "Treehouse of Horror VI", the equation P=NP is seen shortly after Homer accidentally stumbles into the "third dimension".[52][53]
In the second episode of season 2 of Elementary, "Solve for X" revolves around Sherlock and Watson investigating the murders of mathematicians who were attempting to solve P versus NP.[54][55]

See also[edit]
Game complexity
List of unsolved problems in mathematics
Unique games conjecture
Unsolved problems in computer science
Notes[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ A nondeterministic Turing machine can move to a state that is not determined by the previous state. Such a machine could solve an NP problem in polynomial time by falling into the correct answer state (by luck), then conventionally verifying it. Such machines are not practical for solving realistic problems but can be used as theoretical models.

^ Exactly how efficient a solution must be to pose a threat to cryptography depends on the details.  A solution of 
  
    
      
        O
        (
        
          N
          
            2
          
        
        )
      
    
    {\displaystyle O(N^{2})}
  
 with a reasonable constant term would be disastrous.  On the other hand, a solution that is 
  
    
      
        Î©
        (
        
          N
          
            4
          
        
        )
      
    
    {\displaystyle \Omega (N^{4})}
  
 in almost all cases would not pose an immediate practical danger.


References[edit]


^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Fortnow, Lance (2009). "The status of the P versus NP problem" (PDF). Communications of the ACM. 52 (9): 78â86. CiteSeerXÂ 10.1.1.156.767. doi:10.1145/1562164.1562186. S2CIDÂ 5969255. Archived from the original (PDF) on 24 February 2011. Retrieved 26 January 2010.

^ Fortnow, Lance (2013). The Golden Ticket: P, NP, and the Search for the Impossible. Princeton, NJ: Princeton University Press. ISBNÂ 9780691156491.

^ Cook, Stephen (1971). "The complexity of theorem proving procedures". Proceedings of the Third Annual ACM Symposium on Theory of Computing. pp.Â 151â158. doi:10.1145/800157.805047. ISBNÂ 9781450374644. S2CIDÂ 7573663.

^ L. A. Levin (1973). "Ð£Ð½Ð¸Ð²ÐµÑÑÐ°Ð»ÑÐ½ÑÐµ Ð·Ð°Ð´Ð°ÑÐ¸ Ð¿ÐµÑÐµÐ±Ð¾ÑÐ°" (in Russian). 9 (3) (Problems of Information TransmissionÂ ed.): 115â116. {{cite journal}}: Cite journal requires |journal= (help)

^ NSA (2012). "Letters from John Nash" (PDF).

^ Hartmanis, Juris. "GÃ¶del, von Neumann, and the P = NP problem" (PDF). Bulletin of the European Association for Theoretical Computer Science. 38: 101â107.

^ Sipser, Michael: Introduction to the Theory of Computation, Second Edition, International Edition, page 270. Thomson Course Technology, 2006. Definition 7.19 and Theorem 7.20.

^ Jump up to: a b c William I. Gasarch (June 2002). "The P=?NP poll" (PDF). SIGACT News. 33 (2): 34â47. CiteSeerXÂ 10.1.1.172.1005. doi:10.1145/564585.564599. S2CIDÂ 36828694.

^ William I. Gasarch. "The Second P=?NP poll" (PDF). SIGACT News. 74.

^ Jump up to: a b "Guest Column: The Third P =? NP Poll1" (PDF). Retrieved 25 May 2020.

^ Scott Aaronson. "PHYS771 Lecture 6: P, NP, and Friends". Retrieved 27 August 2007.

^ "MSc course: Foundations of Computer Science". www.cs.ox.ac.uk. Retrieved 25 May 2020.

^ Colbourn, Charles J. (1984). "The complexity of completing partial Latin squares". Discrete Applied Mathematics. 8 (1): 25â30. doi:10.1016/0166-218X(84)90075-1.

^ I. Holyer (1981). "The NP-completeness of some edge-partition problems". SIAM J. Comput. 10 (4): 713â717. doi:10.1137/0210054.

^ Aviezri Fraenkel and D. Lichtenstein (1981). "Computing a perfect strategy for n Ã n chess requires time exponential in n". Journal of Combinatorial Theory, Series A. 31 (2): 199â214. doi:10.1016/0097-3165(81)90016-9.

^ David Eppstein. "Computational Complexity of Games and Puzzles".

^ Fischer, Michael J.; Rabin, Michael O. (1974). "Super-Exponential Complexity of Presburger Arithmetic". Proceedings of the SIAM-AMS Symposium in Applied Mathematics. 7: 27â41. Archived from the original on 15 September 2006. Retrieved 15 October 2017.

^ Valiant, Leslie G. (1979). "The complexity of enumeration and reliability problems". SIAM Journal on Computing. 8 (3): 410â421. doi:10.1137/0208032.

^ Jump up to: a b R. E. Ladner "On the structure of polynomial time reducibility," Journal of the ACM 22, pp. 151â171, 1975. Corollary 1.1. ACM site.

^ Arvind, Vikraman; Kurur, Piyush P. (2006). "Graph isomorphism is in SPP". Information and Computation. 204 (5): 835â852. doi:10.1016/j.ic.2006.02.002.

^ SchÃ¶ning, Uwe (1988). "Graph isomorphism is in the low hierarchy". Journal of Computer and System Sciences. 37 (3): 312â323. doi:10.1016/0022-0000(88)90010-4.

^ Babai, LÃ¡szlÃ³ (2018). "Group, graphs, algorithms: the graph isomorphism problem". Proceedings of the International Congress of MathematiciansâRio de Janeiro 2018. Vol. IV. Invited lectures. World Sci. Publ., Hackensack, NJ. pp.Â 3319â3336. MRÂ 3966534.

^ Lance Fortnow. Computational Complexity Blog: Complexity Class of the Week: Factoring. 13 September 2002.

^ Pisinger, D. 2003. "Where are the hard knapsack problems?" Technical Report 2003/08, Department of Computer Science, University of Copenhagen, Copenhagen, Denmark

^ Kawarabayashi, K. I.; Kobayashi, Y.; Reed, B. (2012). "The disjoint paths problem in quadratic time". Journal of Combinatorial Theory, Series B. 102 (2): 424â435. doi:10.1016/j.jctb.2011.07.004.

^ Johnson, David S. (1987). "The NP-completeness column: An ongoing guide (edition 19)". Journal of Algorithms. 8 (2): 285â303. CiteSeerXÂ 10.1.1.114.3864. doi:10.1016/0196-6774(87)90043-5.

^ Gondzio, Jacek; Terlaky, TamÃ¡s (1996). "3 A computational view of interior point methods".  In J. E. Beasley (ed.). Advances in linear and integer programming. Oxford Lecture Series in Mathematics and its Applications. Vol.Â 4. New York: Oxford University Press. pp.Â 103â144. MRÂ 1438311. Postscript file at website of Gondzio and at McMaster University website of Terlaky.

^ Jump up to: a b Cook, Stephen (April 2000). "The P versus NP Problem" (PDF). Clay Mathematics Institute. Retrieved 18 October 2006. {{cite journal}}: Cite journal requires |journal= (help)

^ Rosenberger, Jack (May 2012). "P vs. NP poll results". Communications of the ACM. 55 (5): 10.

^ Scott Aaronson. "Reasons to believe"., point 9.

^ See Horie, S.; Watanabe, O. (1997). "Hard instance generation for SAT". Algorithms and Computation. Lecture Notes in Computer Science. Vol.Â 1350. Springer. pp.Â 22â31. arXiv:cs/9809117. Bibcode:1998cs........9117H. doi:10.1007/3-540-63890-3_4. ISBNÂ 978-3-540-63890-2. for a reduction of factoring to SAT.  A 512 bit factoring problem (8400 MIPS-years when factored) translates to a SAT problem of 63,652 variables and 406,860 clauses.

^ See, for example, Massacci, F. & Marraro, L. (2000). "Logical cryptanalysis as a SAT problem". Journal of Automated Reasoning. 24 (1): 165â203. CiteSeerXÂ 10.1.1.104.962. doi:10.1023/A:1006326723002. S2CIDÂ 3114247. in which an instance of DES is encoded as a SAT problem with 10336 variables and 61935 clauses.  A 3DES problem instance would be about 3 times this size.

^ De, Debapratim; Kumarasubramanian, Abishek; Venkatesan, Ramarathnam (2007). "Inversion attacks on secure hash functions using SAT solvers". Theory and Applications of Satisfiability Testing--SAT 2007. International Conference on Theory and Applications of Satisfiability Testing. Springer. pp.Â 377â382. doi:10.1007/978-3-540-72788-0_36.

^ Berger B, Leighton T (1998). "Protein folding in the hydrophobic-hydrophilic (HP) model is NP-complete". J. Comput. Biol. 5 (1): 27â40. CiteSeerXÂ 10.1.1.139.5547. doi:10.1089/cmb.1998.5.27. PMIDÂ 9541869.

^ History of this letter and its translation from Michael Sipser. "The History and Status of the P versus NP question" (PDF).

^ David S. Johnson (2012). "A Brief History of NP-Completeness, 1954â2012". CiteSeerXÂ 10.1.1.399.1480. {{cite journal}}: Cite journal requires |journal= (help) From pages 359â376 of Optimization Stories, M. GrÃ¶tschel (editor), a special issue of Â¨ Documenta Mathematica, published in August 2012 and distributed to attendees at the 21st International Symposium on Mathematical Programming in Berlin.

^ Knuth, Donald E. (20 May 2014). Twenty Questions for Donald Knuth. informit.com. InformIT. Retrieved 20 July 2014.

^ L. R. Foulds (October 1983). "The Heuristic Problem-Solving Approach". Journal of the Operational Research Society. 34 (10): 927â934. doi:10.2307/2580891. JSTORÂ 2580891.

^ R. Impagliazzo, "A personal view of average-case complexity," sct, pp.134, 10th Annual Structure in Complexity Theory Conference (SCT'95), 1995

^ "Tentative program for the workshop on "Complexity and Cryptography: Status of Impagliazzo's Worlds"". Archived from the original on 15 November 2013.

^ T. P. Baker; J. Gill; R. Solovay. (1975). "Relativizations of the P =? NP Question". SIAM Journal on Computing. 4 (4): 431â442. doi:10.1137/0204037.

^ Razborov, Alexander A.; Steven Rudich (1997). "Natural proofs". Journal of Computer and System Sciences. 55 (1): 24â35. doi:10.1006/jcss.1997.1494.

^ S. Aaronson & A. Wigderson (2008). Algebrization: A New Barrier in Complexity Theory (PDF). Proceedings of ACM STOC'2008. pp.Â 731â740. doi:10.1145/1374376.1374481.

^ Aaronson, Scott. "Is P Versus NP Formally Independent?" (PDF)..

^ Ben-David, Shai; Halevi, Shai (1992). "On the independence of P versus NP". Technical Report. 714. Technion. {{cite journal}}: Cite journal requires |journal= (help).

^ John Markoff (8 October 2009). "Prizes Aside, the P-NP Puzzler Has Consequences". The New York Times.

^ Gerhard J. Woeginger. "The P-versus-NP page". Retrieved 24 June 2018.

^ Markoff, John (16 August 2010). "Step 1: Post Elusive Proof. Step 2: Watch Fireworks". The New York Times. Retrieved 20 September 2010.

^ Elvira Mayordomo. "P versus NP" Archived 16 February 2012 at the Wayback Machine MonografÃ­as de la Real Academia de Ciencias de Zaragoza 26: 57â68 (2004).

^ Agrawal, Manindra; Kayal, Neeraj; Saxena, Nitin (2004). "PRIMES is in P" (PDF). Annals of Mathematics. 160 (2): 781â793. doi:10.4007/annals.2004.160.781. JSTORÂ 3597229.

^ Geere, Duncan (26 April 2012). "'Travelling Salesman' movie considers the repercussions if P equals NP". Wired UK. Retrieved 26 April 2012.

^ Hardesty, Larry. "Explained: P vs. NP".

^ Shadia, Ajam. "What is the P vs. NP problem? Why is it important?".

^ Gasarch, William (7 October 2013). "P vs NP is Elementary? Noâ P vs NP is ON Elementary". blog.computationalcomplexity.org. Retrieved 6 July 2018.

^ Kirkpatrick, Noel (4 October 2013). "Elementary Solve for X Review: Sines of Murder". TV.com. Retrieved 6 July 2018.


Sources[edit]
Rachel Crowell (28 May 2021). "The Top Unsolved Questions in Mathematics Remain Mostly Mysterious Just one of the seven Millennium Prize Problems named 21 years ago has been solved". www.scientificamerican.com. Retrieved 21 June 2021. This problem concerns the issue of whether questions that are easy to verify (a class of queries called NP) also have solutions that are easy to find (a class called P).
Hosch, William L (11 August 2009). "P versus NP problem mathematics". www.britannica.com (March 15, 2012 Gregersen, Smith; revised, updated). Indiana University Northwest (blogs.britannica.com/author/whosch/page/3/). Retrieved 20 June 2021.{{cite encyclopedia}}:  CS1 maint: location (link)
"P vs NP Problem". www.claymath.org (Cook, Levin). Retrieved 20 June 2021. Suppose that you are organizing housing accommodations for a group of four hundred university students. Space is limited and only one hundred of the students will receive places in the dormitory. To complicate matters, the Dean has provided you with a list of pairs of incompatible students, and requested that no pair from this list appear in your final choice. This is an example of what computer scientists call an NP-problem...
Further reading[edit]
Cormen, Thomas (2001). Introduction to Algorithms. Cambridge: MIT Press. ISBNÂ 978-0-262-03293-3.
Garey, Michael; Johnson, David (1979). Computers and Intractability: A Guide to the Theory of NP-Completeness. San Francisco: W. H. Freeman and Company. ISBNÂ 978-0-7167-1045-5.
Goldreich, Oded (2010). P, NP, and NP-Completeness. Cambridge: Cambridge University Press. ISBNÂ 978-0-521-12254-2. Online drafts
Immerman, N. (1987). "Languages that Capture Complexity Classes". SIAM Journal on Computing. 16 (4): 760â778. CiteSeerXÂ 10.1.1.75.3035. doi:10.1137/0216051.
Papadimitriou, Christos (1994). Computational Complexity. Boston: Addison-Wesley. ISBNÂ 978-0-201-53082-7.
External links[edit]
.mw-parser-output .sister-box{border:1px solid #aaa;padding:0;background:#f9f9f9}.mw-parser-output .sister-box>div{padding:0.75em 0;text-align:center}.mw-parser-output .sister-box>div>b{display:block}.mw-parser-output .sister-box>ul{border-top:1px solid #aaa;padding:0.75em 0;width:217px;margin:0 auto}.mw-parser-output .sister-box>ul>li{min-height:31px}.mw-parser-output .sister-logo{display:inline-block;width:31px;line-height:31px;vertical-align:middle;text-align:center}.mw-parser-output .sister-link{display:inline-block;margin-left:4px;width:182px;vertical-align:middle}.mw-parser-output .sister-bar{display:flex;justify-content:center;align-items:baseline;font-size:88%;background-color:#fdfdfd;border:1px solid #a2a9b1;clear:both;margin:1em 0 0;padding:0 2em}.mw-parser-output .sister-bar-header{margin:0 1em 0 0.5em;padding:0.2em 0;flex:0 0 auto;min-height:24px;line-height:22px}.mw-parser-output .sister-bar-content{display:flex;flex-flow:row wrap;flex:0 1 auto;align-items:baseline;padding:0.2em 0;column-gap:1em}.mw-parser-output .sister-bar-item{display:flex;align-items:baseline;margin:0.15em 0;min-height:24px;text-align:left}.mw-parser-output .sister-bar-logo{width:22px;line-height:22px;margin:0 0.2em;text-align:right}.mw-parser-output .sister-bar-link{margin:0 0.2em;text-align:left}@media screen and (max-width:960px){.mw-parser-output .sister-bar{display:flex;flex-flow:column wrap;font-size:88%;background-color:#fdfdfd;clear:both;margin:1em auto 0;padding:0 2em}.mw-parser-output .sister-bar-header{padding:0.2em 0;flex:0 1}.mw-parser-output .sister-bar-content{display:flex;flex-flow:row wrap;flex:1;align-items:baseline;padding:0.2em 0;border-top:1px solid #a2a9b1}.mw-parser-output .sister-bar-item{display:flex;align-items:baseline;flex:0 0 20em;min-width:20em;margin:0.15em 0;min-height:24px}}.mw-parser-output .navbox+link+.sister-bar{margin-top:-1px}.mw-parser-output .navbox+style+.sister-bar{margin-top:-1px}.mw-parser-output .portal-bar+link+.sister-bar{margin-top:-1px}.mw-parser-output .portal-bar+style+.sister-bar{margin-top:-1px}.mw-parser-output .sister-bar+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .sister-bar+.navbox-styles+.portal-bar{margin-top:-1px}


Wikiquote has quotations related to P versus NP problem

Fortnow, L.; Gasarch, W. "Computational complexity".
Aviad Rubinstein's Hardness of Approximation Between P and NP, winner of the ACM's 2017 Doctoral Dissertation Award.
"P vs. NP and the Computational Complexity Zoo". 26 August 2014. Archived from the original on 24 November 2021 â via YouTube.
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}hidevteImportant complexity classes (more)Considered feasible
DLOGTIME
AC0
ACC0
TC0
L
SL
RL
NL
NC
SC
CC
P
P-complete
ZPP
RP
BPP
BQP
APX
Suspected infeasible
UP
NP
NP-complete
NP-hard
co-NP
co-NP-complete
AM
QMA
PH
âP
PP
#P
#P-complete
IP
PSPACE
PSPACE-complete
Considered infeasible
EXPTIME
NEXPTIME
EXPSPACE
2-EXPTIME
ELEMENTARY
PR
R
RE
ALL
Class hierarchies
Polynomial hierarchy
Exponential hierarchy
Grzegorczyk hierarchy
Arithmetical hierarchy
Boolean hierarchy
Families of classes
DTIME
NTIME
DSPACE
NSPACE
Probabilistically checkable proof
Interactive proof system





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=P_versus_NP_problem&oldid=1067639544"
		Categories: 1956 in computingComputer-related introductions in 1956ConjecturesMathematical optimizationMillennium Prize ProblemsStructural complexity theoryUnsolved problems in computer scienceUnsolved problems in mathematicsHidden categories: CS1 errors: missing periodicalCS1 Russian-language sources (ru)Webarchive template wayback linksArticles with short descriptionShort description is different from WikidataWikipedia indefinitely move-protected pagesUse dmy dates from October 2020All articles with unsourced statementsArticles with unsourced statements from January 2021CS1 maint: locationPages using Sister project links with hidden wikidata
	
