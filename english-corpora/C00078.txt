
Title:
Turing completeness
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Ability of a computing system to simulate Turing machines
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}For the usage of this term in the theory of relative computability by oracle machines, see Turing reduction.

In computability theory, a system of data-manipulation rules (such as a computer's instruction set, a programming language, or a cellular automaton) is said to be Turing-complete or computationally universal if it can be used to simulate any Turing machine. This means that this system is able to recognize or decide other data-manipulation rule sets. Turing completeness is used as a way to express the power of such a data-manipulation rule set. Virtually all programming languages today are Turing-complete. The concept is named after English mathematician and computer scientist Alan Turing.
A related concept is that of Turing equivalenceÂ â  two computers P and Q are called equivalent if P can simulate Q and Q can simulate P. The ChurchâTuring thesis conjectures that any function whose values can be computed by an algorithm can be computed by a Turing machine, and therefore that if any real-world computer can simulate a Turing machine, it is Turing equivalent to a Turing machine. A universal Turing machine can be used to simulate any Turing machine and by extension the computational aspects of any possible real-world computer.[NB 1]
To show that something is Turing-complete, it is enough to show that it can be used to simulate some Turing-complete system. For example, an imperative language is Turing-complete if it has conditional branching (e.g., "if" and "goto" statements, or a "branch if zero" instruction; see one-instruction set computer) and the ability to change an arbitrary amount of memory (e.g., the ability to maintain an arbitrary number of data items). No physical system can have infinite memory, but if the limitation of finite memory is ignored, most programming languages are otherwise Turing-complete.

Contents

1 Non-mathematical usage
2 Formal definitions
3 History
4 Computability theory
5 Turing oracles
6 Digital physics
7 Examples

7.1 Unintentional Turing completeness


8 Non-Turing-complete languages

8.1 Data languages


9 See also
10 Notes
11 References
12 Further reading
13 External links



Non-mathematical usage[edit]
In colloquial usage, the terms "Turing-complete" and "Turing-equivalent" are used to mean that any real-world general-purpose computer or computer language can approximately simulate the computational aspects of any other real-world general-purpose computer or computer language.
Real computers constructed so far can be functionally analyzed like a single-tape Turing machine (the "tape" corresponding to their memory); thus the associated mathematics can apply by abstracting their operation far enough.  However, real computers have limited physical resources, so they are only linear bounded automaton complete.  In contrast, a universal computer is defined as a device with a Turing-complete instruction set, infinite memory, and infinite available time.

Formal definitions[edit]
In computability theory, several closely related terms are used to describe the computational power of a computational system (such as an abstract machine or programming language):

Turing completeness
A computational system that can compute every Turing-computable function is called Turing-complete (or Turing-powerful). Alternatively, such a system is one that can simulate a universal Turing machine.
Turing equivalence
A Turing-complete system is called Turing-equivalent if every function it can compute is also Turing-computable; i.e., it computes precisely the same class of functions as do Turing machines. Alternatively, a Turing-equivalent system is one that can simulate, and be simulated by, a universal Turing machine. (All known physically-implementable Turing-complete systems are Turing-equivalent, which adds support to the ChurchâTuring thesis.[citation needed])
(Computational) universality
A system is called universal with respect to a class of systems if it can compute every function computable by systems in that class (or can simulate each of those systems). Typically, the term universality is tacitly used with respect to a Turing-complete class of systems. The term "weakly universal" is sometimes used to distinguish a system (e.g. a cellular automaton) whose universality is achieved only by modifying the standard definition of Turing machine so as to include input streams with infinitely many 1s.
History[edit]
Turing completeness is significant in that every real-world design for a computing device can be simulated by a universal Turing machine. The ChurchâTuring thesis states that this is a law of mathematicsÂ â  that a universal Turing machine can, in principle, perform any calculation that any other programmable computer can. This says nothing about the effort needed to write the program, or the time it may take for the machine to perform the calculation, or any abilities the machine may possess that have nothing to do with computation.
Charles Babbage's analytical engine (1830s) would have been the first Turing-complete machine if it had been built at the time it was designed. Babbage appreciated that the machine was capable of great feats of calculation, including primitive logical reasoning, but he did not appreciate that no other machine could do better.[citation needed] From the 1830s until the 1940s, mechanical calculating machines such as adders and multipliers were built and improved, but they could not perform a conditional branch and therefore were not Turing-complete.
In the late 19th century, Leopold Kronecker formulated notions of computability, defining primitive recursive functions. These functions can be calculated by rote computation, but they are not enough to make a universal computer, because the instructions that compute them do not allow for an infinite loop. In the early 20th century, David Hilbert led a program to axiomatize all of mathematics with precise axioms and precise logical rules of deduction that could be performed by a machine. Soon it became clear that a small set of deduction rules are enough to produce the consequences of any set of axioms. These rules were proved by Kurt GÃ¶del in 1930 to be enough to produce every theorem.
The actual notion of computation was isolated soon after, starting with GÃ¶del's incompleteness theorem. This theorem showed that axiom systems were limited when reasoning about the computation that deduces their theorems. Church and Turing independently demonstrated that Hilbert's Entscheidungsproblem (decision problem) was unsolvable,[1] thus identifying the computational core of the incompleteness theorem. This work, along with GÃ¶del's work on general recursive functions, established that there are sets of simple instructions, which, when put together, are able to produce any computation. The work of GÃ¶del showed that the notion of computation is essentially unique.
In 1941 Konrad Zuse completed the Z3 computer. Zuse was not familiar with Turing's work on computability at the time. In particular, the Z3 lacked dedicated facilities for a conditional jump, thereby precluding it from being Turing complete. However, in 1998, it was shown by Rojas that the Z3 is capable of simulating conditional jumps, and therefore Turing complete in theory. To do this, its tape program would have to be long enough to execute every possible path through both sides of every branch.[2]

Computability theory[edit]
Computability theory uses models of computation to analyze problems and determine whether they are computable and under what circumstances. The first result of computability theory is that there exist problems for which it is impossible to predict what a (Turing-complete) system will do over an arbitrarily long time.
The classic example is the halting problem: create an algorithm that takes as input a program in some Turing-complete language and some data to be fed to that program, and determines whether the program, operating on the input, will eventually stop or will continue forever. It is trivial to create an algorithm that can do this for some inputs, but impossible to do this in general. For any characteristic of the program's eventual output, it is impossible to determine whether this characteristic will hold.
This impossibility poses problems when analyzing real-world computer programs. For example, one cannot write a tool that entirely protects programmers from writing infinite loops or protects users from supplying input that would cause infinite loops.
One can instead limit a program to executing only for a fixed period of time (timeout) or limit the power of flow-control instructions (for example, providing only loops that iterate over the items of an existing array). However, another theorem shows that there are problems solvable by Turing-complete languages that cannot be solved by any language with only finite looping abilities (i.e., any language guaranteeing that every program will eventually finish to a halt). So any such language is not Turing-complete. For example, a language in which programs are guaranteed to complete and halt cannot compute the computable function produced by Cantor's diagonal argument on all computable functions in that language.

Turing oracles[edit]
Main article: Oracle machine
A computer with access to an infinite tape of data may be more powerful than a Turing machine: for instance, the tape might contain the solution to the halting problem or some other Turing-undecidable problem. Such an infinite tape of data is called a Turing oracle. Even a Turing oracle with random data is not computable (with probability 1), since there are only countably many computations but uncountably many oracles. So a computer with a random Turing oracle can compute things that a Turing machine cannot.

Digital physics[edit]
See also: ChurchâTuring thesis Â§Â Philosophical implications
This section does not cite any sources. Please help improve this section by adding citations to reliable sources. Unsourced material may be challenged and removed.  (November 2017) (Learn how and when to remove this template message)
All known laws of physics have consequences that are computable by a series of approximations on a digital computer. A hypothesis called digital physics states that this is no accident because the universe itself is computable on a universal Turing machine. This would imply that no computer more powerful than a universal Turing machine can be built physically.

Examples[edit]
The computational systems (algebras, calculi) that are discussed as Turing-complete systems are those intended for studying theoretical computer science. They are intended to be as simple as possible, so that it would be easier to understand the limits of computation. Here are a few:

Automata theory
Formal grammar (language generators)
Formal language (language recognizers)
Lambda calculus
PostâTuring machines
Process calculus
Most programming languages (their abstract models, maybe with some particular constructs that assume finite memory omitted), conventional and unconventional, are Turing-complete. This includes:

All general-purpose languages in wide use.
Procedural programming languages such as C, Pascal.
Object-oriented languages such as Java, Smalltalk or C#.
Multi-paradigm languages such as Ada, C++, Common Lisp, Fortran, JavaScript, Object Pascal, Perl, Python, R.
Most languages using less common paradigms:
Functional languages such as Lisp and Haskell.
Logic programming languages such as Prolog.
General-purpose macro processor such as m4.
Declarative languages such as XSLT.[3]
VHDL and other hardware description languages.
TeX, a typesetting system.
Esoteric programming languages, a form of mathematical recreation in which programmers work out how to achieve basic programming constructs in an extremely difficult but mathematically Turing-equivalent language.
Some rewrite systems are Turing-complete.
Turing completeness is an abstract statement of ability, rather than a prescription of specific language features used to implement that ability. The features used to achieve Turing completeness can be quite different; Fortran systems would use loop constructs or possibly even goto statements to achieve repetition; Haskell and Prolog, lacking looping almost entirely, would use recursion. Most programming languages are describing computations on von Neumann architectures, which have memory (RAM and register) and a control unit. These two elements make this architecture Turing-complete. Even pure functional languages are Turing-complete.[4][NB 2]
Turing completeness in declarative SQL is implemented through recursive common table expressions.[5]  Unsurprisingly, procedural extensions to SQL (PLSQL, etc.) are also Turing-complete. This illustrates one reason why relatively powerful non-Turing-complete languages are rare: the more powerful the language is initially, the more complex are the tasks to which it is applied and the sooner its lack of completeness becomes perceived as a drawback, encouraging its extension until it is Turing-complete.
The untyped lambda calculus is Turing-complete, but many typed lambda calculi, including System F, are not. The value of typed systems is based in their ability to represent most typical computer programs while detecting more errors.
Rule 110 and Conway's Game of Life, both cellular automata, are Turing-complete.

Unintentional Turing completeness[edit]
Some games and other software are Turing-complete by accident, i.e. not by design.
Software:

Microsoft Excel[6]
Microsoft PowerPoint[7]
Video games:

Dwarf Fortress[8]
OpenTTD[citation needed]
Terraria[citation needed]
Minecraft[9][self-published source]
Minesweeper[10][self-published source]
LittleBigPlanet[9]
Baba is You[11][12]
Factorio[13]
Cities: Skylines[14]
Opus Magnum[15]
Portal 2[16][self-published source]
Geometry Dash[17]
Social media:

Habbo Hotel[18]
Card games:

Magic: The Gathering[9][19]
Zero-person games (simulations):

Conway's Game of Life[20][self-published source][21]
Computational languages:

C++ templates[22][23]
Computer hardware:

x86 MOV instruction[24]
Biology:

Chemical reaction networks[25][26][27][28] and enzyme-based DNA computers[29] have been shown to be Turing-equivalent
Non-Turing-complete languages[edit]
Many computational languages exist that are not Turing-complete. One such example is the set of regular languages, which are generated by regular expressions and which are recognized by finite automata. A more powerful but still not Turing-complete extension of finite automata is the category of pushdown automata and context-free grammars, which are commonly used to generate parse trees in an initial stage of program compiling. Further examples include some of the early versions of the pixel shader languages embedded in Direct3D and OpenGL extensions.[citation needed]
In total functional programming languages, such as Charity and Epigram, all functions are total and must terminate. Charity uses a type system and control constructs based on category theory, whereas Epigram uses dependent types. The LOOP language is designed so that it computes only the functions that are primitive recursive. All of these compute proper subsets of the total computable functions, since the full set of total computable functions is not computably enumerable. Also, since all functions in these languages are total, algorithms for recursively enumerable sets cannot be written in these languages, in contrast with Turing machines.
Although (untyped) lambda calculus is Turing-complete, simply typed lambda calculus is not.

Data languages[edit]
The notion of Turing completeness does not apply to languages such as XML, HTML, JSON, and YAML, because they are typically used to represent structured data, not describe computation. These are sometimes referred to as markup languages, or more properly as "container languages" or "data description languages".[citation needed]

See also[edit]
.mw-parser-output .div-col{margin-top:0.3em;column-width:30em}.mw-parser-output .div-col-small{font-size:90%}.mw-parser-output .div-col-rules{column-rule:1px solid #aaa}.mw-parser-output .div-col dl,.mw-parser-output .div-col ol,.mw-parser-output .div-col ul{margin-top:0}.mw-parser-output .div-col li,.mw-parser-output .div-col dd{page-break-inside:avoid;break-inside:avoid-column}
AI-completeness
Algorithmic information theory
Chomsky hierarchy
ChurchâTuring thesis
Computability theory
Inner loop
Loop (computing)
Machine that always halts
Rice's theorem
smn theorem
Structured program theorem
Turing tarpit

Notes[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ A UTM cannot simulate non-computational aspects such as I/O.

^ The following book provides an introduction for computation models: .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Rauber, Thomas; RÃ¼nger, Gudula (2013). Parallel programming: for multicore and cluster systems (2ndÂ ed.). Springer. ISBNÂ 9783642378010.


References[edit]


^ Hodges, Andrew (1992) [1983], Alan Turing: The Enigma, London: Burnett Books, p.Â 111, ISBNÂ 0-04-510060-8

^ Rojas, Raul (1998). "How to make Zuse's Z3 a universal computer". Annals of the History of Computing. 20 (3): 51â54. doi:10.1109/85.707574.

^ Lyons, Bob (30 March 2001). "Universal Turing Machine in XSLT". B2B Integration Solutions from Unidex. Archived from the original on 17 July 2011. Retrieved 5 July 2010.

^ Boyer, Robert S.; Moore, J. Strother (May 1983). A Mechanical Proof of the Turing Completeness of Pure Lisp (PDF) (Technical report). Institute for Computing Science, University of Texas at Austin. 37. Archived (PDF) from the original on 22 September 2017.

^ Dfetter; Breinbaas (8 August 2011). "Cyclic Tag System". PostgreSQL wiki. Retrieved 10 September 2014.

^ "Announcing LAMBDA: Turn Excel formulas into custom functions". TECHCOMMUNITY.MICROSOFT.COM. 3 December 2020. Retrieved 8 December 2020.

^ Wildenhain, Tom (9 April 2020). "On Turing Completeness of MS PowerPoint" (PDF).[self-published source]

^ Cedotal, Andrew (16 April 2010). "Man Uses World's Most Difficult Computer Game to Create â¦ A Working Turing Machine". The Mary Sue. Archived from the original on 27 June 2015. Retrieved 2 June 2015.

^ a b c Zwinkau, Andreas (20 October 2013). "Accidentally Turing-Complete". Andreas Zwinkau. Archived from the original on 5 June 2015. Retrieved 2 June 2015.[self-published source]

^ Kaye, Richard (31 May 2007). "Infinite versions of minesweeper are Turing complete" (PDF). Richard Kaye's Minesweeper Pages. Archived (PDF) from the original on 2 February 2017. Retrieved 14 March 2017.

^ "BABA IS TURING COMPLETE: A sketch of a proof (v2)". 25 March 2019. Retrieved 2 June 2020.

^ "Matthew Rodriguez's (@mattar0d) tweet of a video showing an implementation of Cellular Automaton Rule 110 in Baba Is You". 25 March 2019. Retrieved 2 June 2020.

^ "I made a programmable Turing-complete computer in Factorio". Reddit. 31 January 2016. Retrieved 2 February 2020.

^ Plunkett, Luke (16 July 2019). "Cities: Skylines Map Becomes A Poop-Powered Computer". Kotaku. Retrieved 16 July 2019.

^ Caldwell, Brendan (20 November 2017). "Opus Magnum player makes an alchemical computer". Rock Paper Shotgun. Retrieved 23 September 2019.

^ Tatum, Alexander (16 July 2019). "3-digit binary calculator". Steam. Retrieved 1 July 2019.

^ things people made with my GD programming language, archived from the original on 11 December 2021, retrieved 18 October 2021

^ "Habbo's Twitter thread on the implementation of a Turing machine inside the game". 9 November 2020. Retrieved 11 November 2020.

^ Alex Churchill; Stella Biderman; Austin Herrick (2019). "Magic: The Gathering is Turing Complete". arXiv:1904.09828 [cs.AI].

^ Rendell, Paul (12 January 2005). "A Turing Machine in Conway's Game of Life". Rendell-Attic. Archived from the original on 8 July 2009. Retrieved 22 June 2009.

^ Calcyman; Johnston, Nathaniel (16 June 2009). "Spartan universal computer-constructor". LifeWiki. Retrieved 22 June 2009.

^ Meyers, Scott (Scott Douglas) (2005). Effective C++Â : 55 specific ways to improve your programs and designs (3rdÂ ed.). Upper Saddle River, NJ: Addison-Wesley. ISBNÂ 0321334876. OCLCÂ 60425273.

^ See History of TMP on Wikibooks.

^ Dolan, Stephen. "mov is Turing-complete" (PDF). stedolan.net. Retrieved 9 May 2019.

^ Shah, Shalin; Wee, Jasmine; Song, Tianqi; Ceze, Luis; Strauss, Karin; Chen, Yuan-Jyue; Reif, John (4 May 2020). "Using Strand Displacing Polymerase To Program Chemical Reaction Networks". Journal of the American Chemical Society. 142 (21): 9587â9593. doi:10.1021/jacs.0c02240. ISSNÂ 0002-7863. PMIDÂ 32364723. S2CIDÂ 218504535.

^ Chen, Yuan-Jyue; Dalchau, Neil; Srinivas, Niranjan; Phillips, Andrew; Cardelli, Luca; Soloveichik, David; Seelig, Georg (October 2013). "Programmable chemical controllers made from DNA". Nature Nanotechnology. 8 (10): 755â762. Bibcode:2013NatNa...8..755C. doi:10.1038/nnano.2013.189. ISSNÂ 1748-3395. PMCÂ 4150546. PMIDÂ 24077029.

^ Srinivas, Niranjan; Parkin, James; Seelig, Georg; Winfree, Erik; Soloveichik, David (15 December 2017). "Enzyme-free nucleic acid dynamical systems". Science. 358 (6369): eaal2052. doi:10.1126/science.aal2052. ISSNÂ 0036-8075. PMIDÂ 29242317.

^ Soloveichik, David; Seelig, Georg; Winfree, Erik (23 March 2010). "DNA as a universal substrate for chemical kinetics". Proceedings of the National Academy of Sciences. 107 (12): 5393â5398. Bibcode:2010PNAS..107.5393S. doi:10.1073/pnas.0909380107. ISSNÂ 0027-8424. PMCÂ 2851759. PMIDÂ 20203007.

^ Shapiro, Ehud (7 December 1999). "A Mechanical Turing Machine: Blueprint for a Biomolecular Computer". Interface Focus. Weizmann Institute of Science. 2 (4): 497â503. doi:10.1098/rsfs.2011.0118. PMCÂ 3363030. PMIDÂ 22649583. Archived from the original on 3 January 2009. Retrieved 13 August 2009.


Further reading[edit]
.mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li{margin-left:0;padding-left:3.2em;text-indent:-3.2em}.mw-parser-output .refbegin-hanging-indents ul,.mw-parser-output .refbegin-hanging-indents ul li{list-style:none}@media(max-width:720px){.mw-parser-output .refbegin-hanging-indents>ul>li{padding-left:1.6em;text-indent:-1.6em}}.mw-parser-output .refbegin-columns{margin-top:0.3em}.mw-parser-output .refbegin-columns ul{margin-top:0}.mw-parser-output .refbegin-columns li{page-break-inside:avoid;break-inside:avoid-column}
Brainerd, W. S.; Landweber, L. H. (1974). Theory of Computation. Wiley. ISBNÂ 0-471-09585-0.
Giles, Jim (24 October 2007). "Simplest 'universal computer' wins student $25,000". New Scientist.
Herken, Rolf, ed. (1995). The Universal Turing Machine: A Half-Century Survey. Springer Verlag. ISBNÂ 3-211-82637-8.
Turing, A. M. (1936). "On Computable Numbers, with an Application to the Entscheidungsproblem" (PDF). Proceedings of the London Mathematical Society. 2. 42: 230â265. doi:10.1112/plms/s2-42.1.230.
Turing, A. M. (1938). "On Computable Numbers, with an Application to the Entscheidungsproblem: A correction". Proceedings of the London Mathematical Society. 2. 43: 544â546. doi:10.1112/plms/s2-43.6.544.

External links[edit]
"Turing Complete". wiki.c2.com.
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteAlan Turing
Turing machine
Turing test
Turing completeness
Turing's proof
Turing (microarchitecture)
Turing degree





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Turing_completeness&oldid=1069191175"
		Categories: Theory of computationTuring machineProgramming language theoryHidden categories: Articles with short descriptionShort description is different from WikidataUse dmy dates from November 2017All articles with unsourced statementsArticles with unsourced statements from March 2021Articles with unsourced statements from December 2021Articles containing German-language textArticles needing additional references from November 2017All articles needing additional referencesArticles with unsourced statements from August 2019Articles with unsourced statements from November 2020All articles with self-published sourcesArticles with self-published sources from November 2017Articles with self-published sources from October 2020Articles with unsourced statements from December 2010Articles with unsourced statements from November 2017
	
