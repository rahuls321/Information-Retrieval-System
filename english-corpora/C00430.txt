
Title:
Logo (programming language)
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Computer programming language
.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}LogoCreativity in playful activities based on the use of the LogoParadigmsMulti-paradigm: functional, educational, procedural, reflectiveFamilyLispDesignedÂ byWally Feurzeig, Seymour Papert, Cynthia SolomonDeveloperBolt, Beranek and NewmanFirstÂ appeared1967; 55Â years agoÂ (1967)Typing disciplinedynamicMajor implementationsUCBLogo, many othersDialectsStarLogo, NetLogo and AppleLogoInfluenced byLispInfluencedAgentSheets, NetLogo, Smalltalk, Etoys, Scratch, Microsoft Small Basic, KTurtle, REBOL, Boxer
  Symmetry around a point can be obtained using only a few instructions, allowing users to draw hypotrochoids like the one shown here.
Logo is an educational programming language, designed in 1967 by Wally Feurzeig, Seymour Papert, and Cynthia Solomon.[1] Logo is not an acronym: the name was coined by Feurzeig while he was at Bolt, Beranek and Newman,[2] and derives from the Greek logos, meaning word or thought.
A general-purpose language, Logo is widely known for its use of turtle graphics, in which commands for movement and drawing produced line or vector graphics, either on screen or with a small robot termed a turtle. The language was conceived to teach concepts of programming related to Lisp and only later to enable what Papert called "body-syntonic reasoning", where students could understand, predict, and reason about the turtle's motion by imagining what they would do if they were the turtle. There are substantial differences among the many dialects of Logo, and the situation is confused by the regular appearance of turtle graphics programs that are named Logo.
Logo is a multi-paradigm adaptation and dialect of Lisp, a functional programming language.[3] There is no standard Logo, but UCBLogo has the best facilities for handling lists, files, I/O, and recursion in scripts, and can be used to teach all computer science concepts, as UC Berkeley lecturer Brian Harvey did in his Computer Science Logo Style trilogy.[4]
Logo is usually an interpreted language, although compiled Logo dialects (such as Lhogho and Liogo) have been developed. Logo is not case-sensitive but retains the case used for formatting purposes.

Contents

1 History
2 Turtle and graphics
3 Implementations

3.1 First released in 1980s
3.2 First released 1990s
3.3 First released from 2000 onwards


4 Influence
5 See also
6 References
7 Further reading
8 External links

8.1 Further information and examples
8.2 Online interpreters





History[edit]
Logo was created in 1967 at Bolt, Beranek and Newman (BBN), a Cambridge, Massachusetts research firm, by Wally Feurzeig, Cynthia Solomon, and Seymour Papert.[5] Its intellectual roots are in artificial intelligence, mathematical logic and developmental psychology. The first four years of Logo research, development and teaching work was done at BBN. The first implementation of Logo, called Ghost, was written in LISP on a PDP-1. The goal was to create a mathematical land where children could play with words and sentences.[6] Modeled on LISP, the design goals of Logo included accessible power[clarification needed]  and informative error messages. The use of virtual Turtles allowed for immediate visual feedback and debugging of graphic programming.
The first working Logo turtle robot was created in 1969. A display turtle preceded the physical floor turtle. Modern Logo has not changed very much from the basic concepts predating the first turtle. The first turtle was a tethered floor roamer, not radio-controlled or wireless. At BBN Paul Wexelblat developed a turtle named Irving that had touch sensors and could move forwards, backwards, rotate, and ding its bell. The earliest year-long school users of Logo were in 1968â69 at Muzzey Jr. High in Lexington, Massachusetts. The virtual and physical turtles were first used by fifth-graders at the Bridge School in the same city in 1970â71.

Turtle and graphics[edit]
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}See also: Turtle graphics
  Animated gif with turtle in MSWLogo (Cardioid)[7]
Logo's most-known feature is the turtle (derived originally from a robot of the same name),[5] an on-screen "cursor" that showed output from commands for movement and small retractable pen, together producing line graphics. It has traditionally been displayed either as a triangle or a turtle icon (though it can be represented by any icon). Turtle graphics were added to the Logo language by Seymour Papert in the late 1960s to support Papert's version of the turtle robot, a simple robot controlled from the user's workstation that is designed to carry out the drawing functions assigned to it using a small retractable pen set into or attached to the robot's body.
As a practical matter, the use of turtle geometry instead of a more traditional model mimics the actual movement logic of the turtle robot. The turtle moves with commands that are relative to its own position, LEFT 90 means spin left by 90 degrees. Some Logo implementations, particularly those that allow the use of concurrency and multiple turtles, support collision detection and allow the user to redefine the appearance of the turtle cursor, essentially allowing the Logo turtles to function as sprites.
Multiple turtles are supported by MSWLogo, as well as 3D graphics. Input from COM ports and LPT ports are also allowed by MSWLogo through windows GUI. Interrupts can be triggered via keyboard and mouse events. Simple GIF animations may also be produced on MSWLogo version 6.5 with the gifsave command.
Turtle geometry is also sometimes used in environments other than Logo as an alternative to a strictly coordinate-addressed graphics system. For instance, the idea of turtle graphics is also useful in Lindenmayer system for generating fractals.

Implementations[edit]
 

Further information: UCBLogo
"Apple Logo" redirects here. For the logo of Apple Inc., see Apple logo.
  IBM LCSI Logo welcome screen
  Source code and output in IBM LCSI Logo running in DOSBox
Some modern derivatives of Logo allow thousands of independently moving turtles. There are two popular implementations: Massachusetts Institute of Technology's StarLogo and Northwestern University Center for Connected Learning's (CCL) NetLogo. They allow exploring emergent phenomena and come with many experiments in social studies, biology, physics, and other areas. NetLogo is widely used in agent-based simulation in the biological and social sciences.
Although there is no agreed-upon standard, there is a broad consensus on core aspects of the language. In March 2020, there were counted 308                                                                                                                                                                                                                                                       implementations and dialects of Logo, each with its own strengths.[8] Most of those 308 are no longer in wide use, but many are still under development. Commercial implementations widely used in schools include MicroWorlds Logo and Imagine Logo.
Legacy and current implementations include:

First released in 1980s[edit]
Apple Logo for the Apple II Plus and Apple Logo Writer for the Apple IIe, developed by Logo Computer Systems, Inc. (LCSI), were the most broadly used and prevalent early implementations of Logo that peaked in the early to mid-1980s.
Aquarius LOGO was released in 1982 on cartridge by Mattel for the Aquarius home computer.
Atari Logo was released on cartridge by Atari for the Atari 8-bit family.
Color Logo was released in 1983 on cartridge (26-2722) and disk (26-2721) by Tandy for the TRS-80 Color Computer.
Commodore Logo was released, with the subtitle "A Language for Learning", by Commodore Electronics. It was based on MIT Logo and enhanced by Terrapin, Inc. The Commodore 64 version (C64105) was released on diskette in 1983; the Plus/4 version (T263001) was released on cartridge in 1984.[9][10]
ExperLogo was released in 1985 on floppy by Expertelligence Inc. for the Macintosh 128K.
Hot-Logo was released in the mid-1980s by EPCOM for the MSX 8-bit computers with its own set of commands in Brazilian Portuguese.
TI Logo (for the TI 99/4A computer) was used in primary schools, emphasizing Logo's usefulness in teaching computing fundamentals to novice programmers.
Sprite Logo, also developed by Logo Computer Systems Inc., had ten turtles that could run as independent processes. It ran on Apple II computers, with the aid of a Sprite Card inserted in one of the computer's slots.
IBM marketed their own version of Logo (P/N 6024076), developed jointly by Logo Computer Systems, Inc. (LCSI), for their then-new IBM PC.
ObjectLOGO is a variant of Logo with object-oriented programming extensions and lexical scoping. Version 2.7 was sold by Digitool, Inc.[11]  It is no longer being developed or supported, and does not run on versions of the Mac operating system later than version 7.5.[12]
Dr. Logo was developed by Digital Research and distributed in computers including the IBM PCjr,[13] Atari ST and the Amstrad CPC.[14][15][16]
Acornsoft Logo was released in 1985. It is a commercial implementation of Logo for the 8-bit BBC Micro and Acorn Electron computers.[17] It was developed for Acorn Computers as a full implementation of Logo. It features multiple screen turtles and four-channel sound. It was provided on two 16kB ROMs, with utilities and drivers as accompanying software.[18]
First released 1990s[edit]
In February 1990, Electron User published Timothy Grantham's simple implementation of Logo for the Acorn Electron under the article "Talking Turtle".[19]
aUCBLogo a rewrite and enhancement of UCBLogo.
LibreLogo is an extension to some versions of LibreOffice. Released in 2012, it is written in Python. It allows vector graphics to be written in Writer.
Lego Logo is a version of Logo that can manipulate robotic Lego bricks attached to a computer.[20] It was implemented on the Apple II computing platform and was used in American and other grade schools in the late 1980s and early 1990s.[21] Lego Logo is a precursor to Scratch.[22]
UCBLogo, also known as Berkeley Logo, is a free, cross-platform implementation of standard Logo last released in 2009. George Mills at MIT used UCBLogo as the basis for MSWLogo which is more refined and also free. Jim Muller wrote a book, The Great Logo Adventure, which was a complete Logo manual and which used MSWLogo as the demonstration language.[23] MSWLogo has evolved into FMSLogo.
First released from 2000 onwards[edit]
Logo3D is a tridimensional version of Logo and can be found at Logo (programming language) on SourceForge.
POOL is a dialect of Logo with object-oriented extensions, implemented in 2014. POOL programs are compiled and run in the graphical IDE on Microsoft Windows. A simplified, cross-platform environment is available for systems supporting .NET Framework.
QLogo is an open-source and cross-platform rewrite of UCBLogo with nearly full UCB compatibility that uses hardware-accelerated graphics.
Lynx is an online version of Logo developed by Logo Computer Systems Inc. It can run a large number of turtles, supports animation, parallel processes, colour and collision detection.
LogoMor is an open-source online 3D Logo interpreter based on JavaScript and p5.js. It supports 3D drawings, animations, multimedia, 3D models and various tools. It also includes a fully-featured code editor based on CodeMirror
LbyM is an open-source online Logo interpreter based on JavaScript, created and actively developed (as of 2021) for Sonoma State University's Learning by Making program.[24] It features traditional Logo programming, connectivity with a customized microcontroller and integration with a modern code editor.
Influence[edit]
Logo was a primary influence on the Smalltalk programming language. It is also the main influence on the Etoys educational programming environment and language, which is essentially a Logo variant written in Squeak (itself a variant of Smalltalk). Logo influenced the procedure/method model in AgentSheets and AgentCubes to program agents similar to the notion of a turtle in Logo. Logo provided the underlying language for Boxer. Boxer was developed at University of California, Berkeley and MIT and is based on a literacy model, making it easier to use for nontechnical people.[citation needed]
KTurtle is a variation of Logo implemented at Qt for the KDE environment loosely based on Logo.[25]
Two more results of Logo's influence are Kojo, a variant of Scala, and Scratch, a visual, drag-and-drop language which runs in a web browser.

See also[edit]
AgentCubes
AgentSheets
UCBLogo
MSWLogo
MicroWorlds
StarLogo
NetLogo
LibreLogo, a turtle graphics language lacking full UCB compatibility
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Abelson, Hal; Goodman, Nat; Rudolph, Lee (December 1974). "Logo Manual". Artificial Intelligence Lab, Massachusetts Institute of Technology. hdl:1721.1/6226. Archived from the original on September 11, 2016. Retrieved August 28, 2016.

^ Goldenberg, E. Paul (August 1982). "Logo â A Cultural Glossary". Byte. p.Â 218. Retrieved 19 October 2013.

^ CSLS Vol 1, Preface .pxvi, Harvey 1997

^ Computer Science Logo Style, Brian Harvey, MIT Press (3 volumes) ISBNÂ 0-262-58148-5, ISBNÂ 0-262-58149-3, ISBNÂ 0-262-58150-7. Available online Archived 2013-07-04 at the Wayback Machine

^ Jump up to: a b "Logo Foundation". el.media.mit.edu. Archived from the original on 2011-07-21. Retrieved 2011-04-07.

^ "logothings". logothings.wikispaces.com. Archived from the original on 2011-12-07.

^ Pietrocola, Giorgio (2005). "Tartapelago". Maecla.

^ "The Logo Tree Project" (PDF). elica.net. Archived from the original (PDF) on 2009-03-06. Retrieved 2020-03-25.

^ Brain, Jim; Zimmerman, Bo (2017-10-30). "Canonical List of Commodore Products". Archived from the original on 2017-12-20. Retrieved 2017-12-03.

^ "Logo â Software Details". Plus/4 World. Archived from the original on 2017-12-04. Retrieved 2017-12-03.

^ Object Logo Archived 2008-04-30 at the Wayback Machine page on the Digitool website (accessed 4 March 2008)

^ Object Logo ordering page on the Digitool website (accessed 4 March 2008)

^ "DRI ships 128K version of Dr. Logo" (PDF). Micro Notes - Technical information on Digital Research products. Vol.Â 2, no.Â 2. Pacific Grove, CA, USA: Digital Research, Inc. May 1984. p.Â 4. NWS-106-002. Archived (PDF) from the original on 2020-02-11. Retrieved 2020-02-11. [â¦] Dr. Logo first appeared on the retail market in fall of 1983 for the IBM PC and climbed to the top of the Softsel Hot List. The retail release included SpeedStart CP/M, an abridged version of CP/M that boots automatically when the system is turned on. [â¦] [1]

^ Digital Research's DR Logo

^ Amstrad CPC 6128 - Computing History

^ Manual Amstrad PCW 8256/8512

^ Field, Graham (1985). LOGO on the BBC computer and Acorn Electron. Macmillan. ISBNÂ 0-333-39566-2.

^ Radburn, Derek. "Four Logos for the BBC Micro". The Micro User Education Special. The Micro User. Retrieved February 20, 2012.

^ "Talking Turtle". February 1990. pp.Â 20â21. Archived from the original on 28 March 2017.

^ Resnick, Mitchel (July 1993). "Behavior Construction Kits". Communications of the ACM. 36 (7). Retrieved 5 January 2022.

^ "The Laboratory Schools LEGO-LOGO Project". University of Chicago Laboratory Schools. Archived from the original on 20 July 2011.

^ Bull, G.; Garofalo, J.; Hguyen, N. (2020), "Thinking about computational thinking: Origins of computational thinking in educational computing", Journal of Digital Learning in Teacher Education, 36 (1): 6â18, doi:10.1080/21532974.2019.1694381, S2CIDÂ 214563715

^ Muller, Jim (November 2001). "MSWLogo, An Educational programming language". Retrieved 5 January 2022.

^ "Learning by Making Â¦ Make@SSU". Retrieved 8 January 2022.

^ "The KDE Education Project â KTurtle". edu.kde.org. Archived from the original on 2006-08-27.


Further reading[edit]
.mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li{margin-left:0;padding-left:3.2em;text-indent:-3.2em}.mw-parser-output .refbegin-hanging-indents ul,.mw-parser-output .refbegin-hanging-indents ul li{list-style:none}@media(max-width:720px){.mw-parser-output .refbegin-hanging-indents>ul>li{padding-left:1.6em;text-indent:-1.6em}}.mw-parser-output .refbegin-columns{margin-top:0.3em}.mw-parser-output .refbegin-columns ul{margin-top:0}.mw-parser-output .refbegin-columns li{page-break-inside:avoid;break-inside:avoid-column}
To Artificial Intelligence (1976) Early AI textbook where Logo is used extensively. (Using the Edinburgh University dialect, AI2LOGO)
Turtle Geometry Abelson and diSessa
Children Designers, Idit Harel Caperton, Ablex Publishing Corporation ISBNÂ 0893917885. Available online
Learning With Logo, Daniel Watt, McGraw Hill, ISBNÂ 0-07-068570-3. Available Through Amazon
Teaching With Logo: Building Blocks For Learning, Molly Watt and Daniel Watt, Addison Wesley (now Pearson) 1986, ISBNÂ 0-201-08112-1 Available through Amazon
"Logo" (PDF). Byte. Vol.Â 7, no.Â 8. McGraw-Hill. 1982. (Byte magazine special 1982 issue featuring multiple Logo articles).

External links[edit]



Wikimedia Commons has media related to Logo (programming language).




Wikibooks has a book on the topic of: Logo Programming

Further information and examples[edit]
XLogo4Schools is a revised version of XLogo
Atari Logo Reference manual  Complete guide and reference for Atari's LCSI Logo.
DR Logo at CPCWiki
turtleSpaces is an OpenGL re-implementation and broad extension of Apple (LCSI) Logo II intended for making 3D models, animations and games. It is currently available for Windows, macOS and Linux.
Online interpreters[edit]
Logo Interpreter
papert: logo in your browser
Online PHP-based Logo Interpreter
MachineLab TurtleSphere (MaLT) Online LOGO Interprepter with 3D graphics using three.js javascript library.
Vlad Tudor's Free Online Logo Interpreter using HTML5, CSS3 and JQuery
TurtleAcademy (Learn Logo for free)
XLogoOnline uses a subset of the XLogo dialect.
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}show.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteLogo programming languageClassic
Acornsoft Logo
Atari Logo
MSWLogo
FMSLogo
UCBLogo
MicroWorlds
MicroWorlds JR
Extensions
Lego Logo
StarLogo
NetLogo
With object extensions
ObjectLOGO
ExperLogo
Other variants, extensions
ARLOGO
LibreLogo
People
Hal Abelson
Denison Bollay
Wally Feurzeig
Brian Harvey
Seymour Papert
Mitchel Resnick
Cynthia Solomon
 Category
showvteLisp programming languageFeatures
Automatic storage management
Conditionals
Dynamic typing
Higher-order functions
Linked lists
M-expressions (deprecated)
Readâevalâprint loop
Recursion
S-expressions
Self-hosting compiler
Tree data structures
Object systems
Common Lisp Object System (CLOS)
CommonLoops
Flavors
ImplementationsStandardizedCommonLisp
Allegro Common Lisp
Armed Bear Common Lisp (ABCL)
CLISP
Clozure CL
CMU Common Lisp (CMUCL)
Corman Common Lisp
Embeddable Common Lisp (ECL)
GNU Common Lisp (GCL)
LispWorks
Macintosh Common Lisp
Mocl
Movitz
Poplog
Steel Bank Common Lisp (SBCL)
Symbolics Common Lisp
Scheme
History
Bigloo
Chez Scheme
Chicken
Gambit
Game Oriented Assembly Lisp (GOAL)
Ikarus
JScheme
Kawa
Larceny
MIT/GNU Scheme
MultiLisp
Pocket Scheme
Racket
RScheme
Scheme 48
SCM
SIOD
T
TinyScheme
ISLISP
OpenLisp
UnstandardizedLogo
MSWLogo
NetLogo
StarLogo
UCBLogo

Arc
AutoLISP
BBN LISP
Clojure
Dylan (Apple, history)
Emacs Lisp
EuLisp
Franz Lisp, PC-LISP
Hy
Interlisp
Knowledge Engineering Environment
*Lisp
LeLisp
LFE
Lisp Machine Lisp
Maclisp
MDL
MLisp
newLISP
NIL
PC-LISP
Picolisp
Portable Standard Lisp
RPL
S-1 Lisp
SKILL
Spice Lisp
ZetalispOperating system
Common Lisp Interface Manager, McCLIM
Genera
Scsh
Hardware
Lisp machine
TI Explorer
Space-cadet keyboard
Communityof practiceTechnical standards
Scheme Requests for Implementation
Common Lisp HyperSpec
X3J13
EducationBooks
Common Lisp the Language
How to Design Programs (HTDP)
On Lisp
Practical Common Lisp
Structure and Interpretation of Computer Programs (SICP)
Curriculum
ProgramByDesign
OrganizationsBusiness
Apple Computer
Bolt, Beranek and Newman
Harlequin
Lucid Inc.
Symbolics
Xanalys
Education
Massachusetts Institute of Technology (MIT)
MIT Computer Science and Artificial Intelligence Laboratory (CSAIL)
Stanford Artificial Intelligence Laboratory
University of California, Berkeley
People
Edmund Berkeley
Daniel G. Bobrow
William Clinger
R. Kent Dybvig
Matthias Felleisen
Robert Bruce Findler
Matthew Flatt
Phyllis Fox
Paul Graham
Richard Greenblatt
Timothy P. Hart
Louis Hodes
Mike Levin
David Luckham
John McCarthy
Robert Tappan Morris
Joel Moses
David Park
Steve Russell
Richard Stallman
Common Lisp
Scott Fahlman
Richard P. Gabriel
Philip Greenspun (10th rule)
David A. Moon
Kent Pitman
Guy L. Steele Jr.
Daniel Weinreb
Scheme
Matthias Felleisen
Shriram Krishnamurthi
Guy L. Steele Jr.
Gerald Jay Sussman
Julie Sussman
Logo
Hal Abelson
Denison Bollay
Wally Feurzeig
Brian Harvey
Seymour Papert
Mitchel Resnick
Cynthia Solomon

 Category
 Category
 List

showAuthority control General
Integrated Authority File (Germany)
National libraries
United States





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Logo_(programming_language)&oldid=1065868894"
		Categories: 1967 in roboticsDynamically typed programming languagesDomain-specific programming languagesEducational programming languagesFree educational softwareFunctional languagesLisp programming language familyLogo programming language familyProgramming languagesProgramming languages created in 1967Robot programming languagesHidden categories: Webarchive template wayback linksArticles with short descriptionShort description matches WikidataWikipedia articles needing clarification from March 2008All articles with unsourced statementsArticles with unsourced statements from September 2015Commons category link from WikidataArticles with GND identifiersArticles with LCCN identifiers
	
