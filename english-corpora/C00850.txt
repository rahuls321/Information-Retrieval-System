
Title:
Interval tree
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		In computer science, an interval tree is a tree data structure to hold intervals. Specifically, it allows one to efficiently find all intervals that overlap with any given interval or point. It is often used for windowing queries,[1] for instance, to find all roads on a computerized map inside a rectangular viewport, or to find all visible elements inside a three-dimensional scene. A similar data structure is the segment tree.
The trivial solution is to visit each interval and test whether it intersects the given point or interval, which requires 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
  
 time, where 
  
    
      
        n
      
    
    {\displaystyle n}
  
 is the number of intervals in the collection. Since a query may return all intervals, for example if the query is a large interval intersecting all intervals in the collection, this is asymptotically optimal; however, we can do better by considering output-sensitive algorithms, where the runtime is expressed in terms of 
  
    
      
        m
      
    
    {\displaystyle m}
  
, the number of intervals produced by the query. Interval trees have a query time of 
  
    
      
        O
        (
        log
        â¡
        n
        +
        m
        )
      
    
    {\displaystyle O(\log n+m)}
  
 and an initial creation time of 
  
    
      
        O
        (
        n
        log
        â¡
        n
        )
      
    
    {\displaystyle O(n\log n)}
  
, while limiting memory consumption to 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
  
. After creation, interval trees may be dynamic, allowing efficient insertion and deletion of an interval in 
  
    
      
        O
        (
        log
        â¡
        n
        )
      
    
    {\displaystyle O(\log n)}
  
 time. If the endpoints of intervals are within a small integer range (e.g., in the range 
  
    
      
        [
        1
        ,
        â¦
        ,
        O
        (
        n
        )
        ]
      
    
    {\displaystyle [1,\ldots ,O(n)]}
  
), faster and in fact optimal data structures exist[2][3] with preprocessing time 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
  
 and query time 
  
    
      
        O
        (
        1
        +
        m
        )
      
    
    {\displaystyle O(1+m)}
  
 for reporting 
  
    
      
        m
      
    
    {\displaystyle m}
  
 intervals containing a given query point (see[2] for a very simple one).

Contents

1 Naive approach
2 Centered interval tree

2.1 Construction
2.2 Intersecting

2.2.1 With a point
2.2.2 With an interval


2.3 Higher dimensions
2.4 Deletion
2.5 Balancing


3 Augmented tree

3.1 Membership queries
3.2 Java example: Adding a new interval to the tree
3.3 Java example: Searching a point or an interval in the tree
3.4 Higher dimensions


4 Medial- or length-oriented tree

4.1 Overlap test
4.2 Adding interval
4.3 Searching for all overlapping intervals


5 References
6 External links



Naive approach[edit]
In a simple case, the intervals do not overlap and they can be inserted into a simple binary search tree and queried in 
  
    
      
        O
        (
        log
        â¡
        n
        )
      
    
    {\displaystyle O(\log n)}
  
 time. However, with arbitrarily overlapping intervals, there is no way to compare two intervals for insertion into the tree since orderings sorted by the beginning points or the ending points may be different. A naive approach might be to build two parallel trees, one ordered by the beginning point, and one ordered by the ending point of each interval. This allows discarding half of each tree in 
  
    
      
        O
        (
        log
        â¡
        n
        )
      
    
    {\displaystyle O(\log n)}
  
 time, but the results must be merged, requiring 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
  
 time. This gives us queries in 
  
    
      
        O
        (
        n
        +
        log
        â¡
        n
        )
        =
        O
        (
        n
        )
      
    
    {\displaystyle O(n+\log n)=O(n)}
  
, which is no better than brute-force.
Interval trees solve this problem. This article describes two alternative designs for an interval tree, dubbed the centered interval tree and the augmented tree.

Centered interval tree[edit]
Queries require 
  
    
      
        O
        (
        log
        â¡
        n
        +
        m
        )
      
    
    {\displaystyle O(\log n+m)}
  
 time, with 
  
    
      
        n
      
    
    {\displaystyle n}
  
 being the total number of intervals and 
  
    
      
        m
      
    
    {\displaystyle m}
  
 being the number of reported results. Construction requires 
  
    
      
        O
        (
        n
        log
        â¡
        n
        )
      
    
    {\displaystyle O(n\log n)}
  
 time, and storage requires 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
  
 space.

Construction[edit]
Given a set of 
  
    
      
        n
      
    
    {\displaystyle n}
  
 intervals on the number line, we want to construct a data structure so that we can efficiently retrieve all intervals overlapping another interval or point.
We start by taking the entire range of all the intervals and dividing it in half at 
  
    
      
        
          x
          
            
              center
            
          
        
      
    
    {\displaystyle x_{\textrm {center}}}
  
 (in practice,   
  
    
      
        
          x
          
            
              center
            
          
        
      
    
    {\displaystyle x_{\textrm {center}}}
  
 should be picked to keep the tree relatively balanced). This gives three sets of intervals, those completely to the left of   
  
    
      
        
          x
          
            
              center
            
          
        
      
    
    {\displaystyle x_{\textrm {center}}}
  
 which we'll call 
  
    
      
        
          S
          
            
              left
            
          
        
      
    
    {\displaystyle S_{\textrm {left}}}
  
, those completely to the right of   
  
    
      
        
          x
          
            
              center
            
          
        
      
    
    {\displaystyle x_{\textrm {center}}}
  
 which we'll call  
  
    
      
        
          S
          
            
              right
            
          
        
      
    
    {\displaystyle S_{\textrm {right}}}
  
, and those overlapping   
  
    
      
        
          x
          
            
              center
            
          
        
      
    
    {\displaystyle x_{\textrm {center}}}
  
 which we'll call  
  
    
      
        
          S
          
            
              center
            
          
        
      
    
    {\displaystyle S_{\textrm {center}}}
  
.
The intervals in  
  
    
      
        
          S
          
            
              left
            
          
        
      
    
    {\displaystyle S_{\textrm {left}}}
  
 and  
  
    
      
        
          S
          
            
              right
            
          
        
      
    
    {\displaystyle S_{\textrm {right}}}
  
 are recursively divided in the same manner until there are no intervals left.
The intervals in 
  
    
      
        
          S
          
            
              center
            
          
        
      
    
    {\displaystyle S_{\textrm {center}}}
  
 that overlap the center point are stored in a separate data structure linked to the node in the interval tree. This data structure consists of two lists, one containing all the intervals sorted by their beginning points, and another containing all the intervals sorted by their ending points.
The result is a binary tree with each node storing:

A center point
A pointer to another node containing all intervals completely to the left of the center point
A pointer to another node containing all intervals completely to the right of the center point
All intervals overlapping the center point sorted by their beginning point
All intervals overlapping the center point sorted by their ending point
Intersecting[edit]
Given the data structure constructed above, we receive queries consisting of ranges or points, and return all the ranges in the original set overlapping this input.

With a point[edit]
The task is to find all intervals in the tree that overlap a given point 
  
    
      
        x
      
    
    {\displaystyle x}
  
. The tree is walked with a similar recursive algorithm as would be used to traverse a traditional binary tree, but with extra logic to support searching the intervals overlapping the "center" point at each node.
For each tree node, 
  
    
      
        x
      
    
    {\displaystyle x}
  
 is compared to  
  
    
      
        
          x
          
            
              center
            
          
        
      
    
    {\displaystyle x_{\textrm {center}}}
  
, the midpoint used in node construction above.  If 
  
    
      
        x
      
    
    {\displaystyle x}
  
 is less than  
  
    
      
        
          x
          
            
              center
            
          
        
      
    
    {\displaystyle x_{\textrm {center}}}
  
, the leftmost set of intervals,  
  
    
      
        
          S
          
            
              left
            
          
        
      
    
    {\displaystyle S_{\textrm {left}}}
  
, is considered. If 
  
    
      
        x
      
    
    {\displaystyle x}
  
 is greater than  
  
    
      
        
          x
          
            
              center
            
          
        
      
    
    {\displaystyle x_{\textrm {center}}}
  
, the rightmost set of intervals,  
  
    
      
        
          S
          
            
              right
            
          
        
      
    
    {\displaystyle S_{\textrm {right}}}
  
, is considered.

  All intervals in  
  
    
      
        
          S
          
            
              center
            
          
        
      
    
    {\displaystyle S_{\textrm {center}}}
  
 that begin before 
  
    
      
        x
      
    
    {\displaystyle x}
  
 must overlap 
  
    
      
        x
      
    
    {\displaystyle x}
  
 if 
  
    
      
        x
      
    
    {\displaystyle x}
  
 is less than  
  
    
      
        
          x
          
            
              center
            
          
        
      
    
    {\displaystyle x_{\textrm {center}}}
  
.Similarly, the same technique also applies in checking a given interval. If a given interval ends at  y and y is less than  
  
    
      
        
          x
          
            
              center
            
          
        
      
    
    {\displaystyle x_{\textrm {center}}}
  
, all intervals in  
  
    
      
        
          S
          
            
              center
            
          
        
      
    
    {\displaystyle S_{\textrm {center}}}
  
 that begin before y must also overlap the given interval.
As each node is processed as we traverse the tree from the root to a leaf, the ranges in its  
  
    
      
        
          S
          
            
              center
            
          
        
      
    
    {\displaystyle S_{\textrm {center}}}
  
 are processed. If 
  
    
      
        x
      
    
    {\displaystyle x}
  
 is less than  
  
    
      
        
          x
          
            
              center
            
          
        
      
    
    {\displaystyle x_{\textrm {center}}}
  
, we know that all intervals in  
  
    
      
        
          S
          
            
              center
            
          
        
      
    
    {\displaystyle S_{\textrm {center}}}
  
 end after 
  
    
      
        x
      
    
    {\displaystyle x}
  
, or they could not also overlap  
  
    
      
        
          x
          
            
              center
            
          
        
      
    
    {\displaystyle x_{\textrm {center}}}
  
. Therefore, we need only find those intervals in  
  
    
      
        
          S
          
            
              center
            
          
        
      
    
    {\displaystyle S_{\textrm {center}}}
  
 that begin before 
  
    
      
        x
      
    
    {\displaystyle x}
  
. We can consult the lists of  
  
    
      
        
          S
          
            
              center
            
          
        
      
    
    {\displaystyle S_{\textrm {center}}}
  
 that have already been constructed. Since we only care about the interval beginnings in this scenario, we can consult the list sorted by beginnings. Suppose we find the closest number no greater than 
  
    
      
        x
      
    
    {\displaystyle x}
  
 in this list. All ranges from the beginning of the list to that found point overlap 
  
    
      
        x
      
    
    {\displaystyle x}
  
 because they begin before 
  
    
      
        x
      
    
    {\displaystyle x}
  
 and end after 
  
    
      
        x
      
    
    {\displaystyle x}
  
 (as we know because they overlap  
  
    
      
        
          x
          
            
              center
            
          
        
      
    
    {\displaystyle x_{\textrm {center}}}
  
 which is larger than 
  
    
      
        x
      
    
    {\displaystyle x}
  
). Thus, we can simply start enumerating intervals in the list until the startpoint value exceeds 
  
    
      
        x
      
    
    {\displaystyle x}
  
.
Likewise, if 
  
    
      
        x
      
    
    {\displaystyle x}
  
 is greater than  
  
    
      
        
          x
          
            
              center
            
          
        
      
    
    {\displaystyle x_{\textrm {center}}}
  
, we know that all intervals in  
  
    
      
        
          S
          
            
              center
            
          
        
      
    
    {\displaystyle S_{\textrm {center}}}
  
 must begin before 
  
    
      
        x
      
    
    {\displaystyle x}
  
, so we find those intervals that end after 
  
    
      
        x
      
    
    {\displaystyle x}
  
 using the list sorted by interval endings.
If 
  
    
      
        x
      
    
    {\displaystyle x}
  
 exactly matches  
  
    
      
        
          x
          
            
              center
            
          
        
      
    
    {\displaystyle x_{\textrm {center}}}
  
, all intervals in  
  
    
      
        
          S
          
            
              center
            
          
        
      
    
    {\displaystyle S_{\textrm {center}}}
  
 can be added to the results without further processing and tree traversal can be stopped.

With an interval[edit]
For a result interval 
  
    
      
        r
      
    
    {\displaystyle r}
  
 to intersect our query interval 
  
    
      
        q
      
    
    {\displaystyle q}
  
 one of the following must hold:

the start and/or end point of 
  
    
      
        r
      
    
    {\displaystyle r}
  
 is in 
  
    
      
        q
      
    
    {\displaystyle q}
  
; or

  
    
      
        r
      
    
    {\displaystyle r}
  
 completely encloses 
  
    
      
        q
      
    
    {\displaystyle q}
  
.
This article may be confusing or unclear to readers. Please help clarify the article. There might be a discussion about this on the talk page.  (February 2020) (Learn how and when to remove this template message)
We first find all intervals with start and/or end points inside 
  
    
      
        q
      
    
    {\displaystyle q}
  
 using a separately-constructed tree. In the one-dimensional case, we can use a search tree containing all the start and end points in the interval set, each with a pointer to its corresponding interval. A binary search in 
  
    
      
        O
        (
        log
        â¡
        n
        )
      
    
    {\displaystyle O(\log n)}
  
 time for the start and end of 
  
    
      
        q
      
    
    {\displaystyle q}
  
 reveals the minimum and maximum points to consider. Each point within this range references an interval that overlaps 
  
    
      
        q
      
    
    {\displaystyle q}
  
 and is added to the result list. Care must be taken to avoid duplicates, since an interval might both begin and end within 
  
    
      
        q
      
    
    {\displaystyle q}
  
. This can be done using a binary flag on each interval to mark whether or not it has been added to the result set.
Finally, we must find intervals that enclose 
  
    
      
        q
      
    
    {\displaystyle q}
  
. To find these, we pick any point inside 
  
    
      
        q
      
    
    {\displaystyle q}
  
 and use the algorithm above to find all intervals intersecting that point (again, being careful to remove duplicates).

Higher dimensions[edit]
The interval tree data structure can be generalized to a higher dimension 
  
    
      
        N
      
    
    {\displaystyle N}
  
 with identical query and construction time and 
  
    
      
        O
        (
        n
        log
        â¡
        n
        )
      
    
    {\displaystyle O(n\log n)}
  
 space.
First, a range tree in 
  
    
      
        N
      
    
    {\displaystyle N}
  
 dimensions is constructed that allows efficient retrieval of all intervals with beginning and end points inside the query region 
  
    
      
        R
      
    
    {\displaystyle R}
  
. Once the corresponding ranges are found, the only thing that is left are those ranges that enclose the region in some dimension. To find these overlaps,  
  
    
      
        N
      
    
    {\displaystyle N}
  
 interval trees are created, and one axis intersecting 
  
    
      
        R
      
    
    {\displaystyle R}
  
 is queried for each. For example, in two dimensions, the bottom of the square  
  
    
      
        R
      
    
    {\displaystyle R}
  
 (or any other horizontal line intersecting 
  
    
      
        R
      
    
    {\displaystyle R}
  
) would be queried against the interval tree constructed for the horizontal axis. Likewise, the left (or any other vertical line intersecting 
  
    
      
        R
      
    
    {\displaystyle R}
  
) would be queried against the interval tree constructed on the vertical axis.
Each interval tree also needs an addition for higher dimensions. At each node we traverse in the tree, 
  
    
      
        x
      
    
    {\displaystyle x}
  
 is compared with  
  
    
      
        
          S
          
            
              center
            
          
        
      
    
    {\displaystyle S_{\textrm {center}}}
  
 to find overlaps. Instead of two sorted lists of points as was used in the one-dimensional case, a range tree is constructed. This allows efficient retrieval of all points in  
  
    
      
        
          S
          
            
              center
            
          
        
      
    
    {\displaystyle S_{\textrm {center}}}
  
 that overlap region 
  
    
      
        R
      
    
    {\displaystyle R}
  
.

Deletion[edit]
If after deleting an interval from the tree, the node containing that interval contains no more intervals, that node may be deleted from the tree. This is more complex than a normal binary tree deletion operation.
An interval may overlap the center point of several nodes in the tree. Since each node stores the intervals that overlap it, with all intervals completely to the left of its center point in the left subtree, similarly for the right subtree, it follows that each interval is stored in the node closest to the root from the set of nodes whose center point it overlaps.
Normal deletion operations in a binary tree (for the case where the node being deleted has two children) involve promoting a node further from the leaf to the position of the node being deleted (usually the leftmost child of the right subtree, or the rightmost child of the left subtree).

  Deleting a node with two children from a binary search tree using the in-order predecessor (rightmost node in the left subtree, labelled 6).
As a result of this promotion, some nodes that were above the promoted node will become its descendants; it is necessary to search these nodes for intervals that also overlap the promoted node, and move those intervals into the promoted node. As a consequence, this may result in new empty nodes, which must be deleted, following the same algorithm again.

Balancing[edit]
The same issues that affect deletion also affect rotation operations; rotation must preserve the invariant that nodes are stored as close to the root as possible.

Augmented tree[edit]
  An augmented tree with low value as the key and maximum high as the extra annotation.For example, when testing if the given interval [40 ,60) overlaps the intervals in the tree shown above, we see that it does not overlap the interval [20, 36) in the root, but since the root's low value (20) is less than the sought high value (60), we must search the right subtree.  The left subtree's maximum high of 41 exceeds the sought low value (40), so we must search the left subtree as well.  However, both descendants of the [3, 41) node have maximum highs less than 40, so the left subtree search ends there and it is not necessary to search them.
Another way to represent intervals is described in Cormen et al. (2009, Section 14.3: Interval trees, pp.Â 348â354).
Both insertion and deletion require 
  
    
      
        O
        (
        log
        â¡
        n
        )
      
    
    {\displaystyle O(\log n)}
  
 time, with 
  
    
      
        n
      
    
    {\displaystyle n}
  
 being the total number of intervals in the tree prior to the insertion or deletion operation.
An augmented tree can be built from a simple ordered tree, for example a binary search tree or self-balancing binary search tree, ordered by the 'low' values of the intervals. An extra annotation is then added to every node, recording the maximum upper value among all the intervals from this node down. Maintaining this attribute involves updating all ancestors of the node from the bottom up whenever a node is added or deleted. This takes only O(h) steps per node addition or removal, where h is the height of the node added or removed in the tree. If there are any tree rotations during insertion and deletion, the affected nodes may need updating as well.
Now, it is known that two intervals 
  
    
      
        A
      
    
    {\displaystyle A}
  
 and 
  
    
      
        B
      
    
    {\displaystyle B}
  
 overlap only when both 
  
    
      
        
          A
          
            
              low
            
          
        
        â¤
        
          B
          
            
              high
            
          
        
      
    
    {\displaystyle A_{\textrm {low}}\leq B_{\textrm {high}}}
  
 and 
  
    
      
        
          A
          
            
              high
            
          
        
        â¥
        
          B
          
            
              low
            
          
        
      
    
    {\displaystyle A_{\textrm {high}}\geq B_{\textrm {low}}}
  
. When searching the trees for nodes overlapping with a given interval, you can immediately skip:

all nodes to the right of nodes whose low value is past the end of the given interval.
all nodes that have their maximum high value below the start of the given interval.
Membership queries[edit]
Some performance may be gained if the tree avoids unnecessary traversals. These can occur when adding intervals that already exist or removing intervals that don't exist.
A total order can be defined on the intervals by ordering them first by their lower bounds and then by their upper bounds. Then, a membership check can be performed in 
  
    
      
        O
        (
        log
        â¡
        n
        )
      
    
    {\displaystyle O(\log n)}
  
 time, versus the 
  
    
      
        O
        (
        k
        +
        log
        â¡
        n
        )
      
    
    {\displaystyle O(k+\log n)}
  
 time required to find duplicates if 
  
    
      
        k
      
    
    {\displaystyle k}
  
 intervals overlap the interval to be inserted or removed. This solution has the advantage of not requiring any additional structures. The change is strictly algorithmic. The disadvantage is that membership queries take 
  
    
      
        O
        (
        log
        â¡
        n
        )
      
    
    {\displaystyle O(\log n)}
  
 time.
Alternately, at the rate of 
  
    
      
        O
        (
        n
        )
      
    
    {\displaystyle O(n)}
  
 memory, membership queries in expected constant time can be implemented with a hash table, updated in lockstep with the interval tree. This may not necessarily double the total memory requirement, if the intervals are stored by reference rather than by value.

Java example: Adding a new interval to the tree[edit]
The key of each node is the interval itself, hence nodes are ordered first by low value and finally by high value, and the value of each node is the end point of the interval:

 public void add(Interval i) {
     put(i, i.getEnd());
 }

Java example: Searching a point or an interval in the tree[edit]
To search for an interval, one walks the tree, using the key (n.getKey()) and high value (n.getValue()) to omit any branches that cannot overlap the query. The simplest case is a point query:

 // Search for all intervals containing "p", starting with the
 // node "n" and adding matching intervals to the list "result"
 public void search(IntervalNode n, Point p, List<Interval> result) {
     // Don't search nodes that don't exist
     if (n == null)
         return;

     // If p is to the right of the rightmost point of any interval
     // in this node and all children, there won't be any matches.
     if (p.compareTo(n.getValue()) > 0)
         return;

     // Search left children
     search(n.getLeft(), p, result);

     // Check this node
     if (n.getKey().contains(p))
         result.add(n.getKey());

     // If p is to the left of the start of this interval,
     // then it can't be in any child to the right.
     if (p.compareTo(n.getKey().getStart()) < 0)
         return;

     // Otherwise, search right children
     search(n.getRight(), p, result);
 }

where

a.compareTo(b) returns a negative value if a < b
a.compareTo(b) returns zero if a = b
a.compareTo(b) returns a positive value if a > b
The code to search for an interval is similar, except for the check in the middle:

 // Check this node
 if (n.getKey().overlapsWith(i))
     result.add (n.getKey());

overlapsWith() is defined as:

 public boolean overlapsWith(Interval other) {
     return start.compareTo(other.getEnd()) <= 0 &&
            end.compareTo(other.getStart()) >= 0;
 }

Higher dimensions[edit]
Augmented trees can be extended to higher dimensions by cycling through the dimensions at each level of the tree. For example, for two dimensions, the odd levels of the tree might contain ranges for the x-coordinate, while the even levels contain ranges for the y-coordinate. This approach effectively converts the data structure from an augmented binary tree to an augmented kd-tree, thus significantly complicating the balancing algorithms for insertions and deletions.
A simpler solution is to use nested interval trees. First, create a tree using the ranges for the y-coordinate. Now, for each node in the tree, add another interval tree on the x-ranges, for all elements whose y-range is the same as that node's y-range.
The advantage of this solution is that it can be extended to an arbitrary number of dimensions using the same code base.
At first, the additional cost of the nested trees might seem prohibitive, but this is usually not so. As with the non-nested solution earlier, one node is needed per x-coordinate, yielding the same number of nodes for both solutions. The only additional overhead is that of the nested tree structures, one per vertical interval. This structure is usually of negligible size, consisting only of a pointer to the root node, and possibly the number of nodes and the depth of the tree.

Medial- or length-oriented tree[edit]
This section does not cite any sources. Please help improve this section by adding citations to reliable sources. Unsourced material may be challenged and removed.  (October 2016) (Learn how and when to remove this template message)
A medial- or length-oriented tree is similar to an augmented tree, but symmetrical, with the binary search tree ordered by the medial points of the intervals. There is a maximum-oriented binary heap in every node, ordered by the length of the interval (or half of the length). Also we store the minimum and maximum possible value of the subtree in each node (thus the symmetry).

Overlap test[edit]
Using only start and end values of two intervals 
  
    
      
        
          (
          
            
              a
              
                i
              
            
            ,
            
              b
              
                i
              
            
          
          )
        
      
    
    {\displaystyle \left(a_{i},b_{i}\right)}
  
, for 
  
    
      
        i
        =
        0
        ,
        1
      
    
    {\displaystyle i=0,1}
  
, the overlap test can be performed as follows:

  
    
      
        
          a
          
            0
          
        
        <
        
          b
          
            1
          
        
      
    
    {\displaystyle a_{0}<b_{1}}
  
 and 
  
    
      
        
          a
          
            1
          
        
        >
        
          b
          
            0
          
        
      
    
    {\displaystyle a_{1}>b_{0}}
  

This can be simplified using the sum and difference:

  
    
      
        
          s
          
            i
          
        
        =
        
          a
          
            i
          
        
        +
        
          b
          
            i
          
        
      
    
    {\displaystyle s_{i}=a_{i}+b_{i}}
  


  
    
      
        
          d
          
            i
          
        
        =
        
          b
          
            i
          
        
        â
        
          a
          
            i
          
        
      
    
    {\displaystyle d_{i}=b_{i}-a_{i}}
  

Which reduces the overlap test to:

  
    
      
        
          |
          
            
              s
              
                1
              
            
            â
            
              s
              
                0
              
            
          
          |
        
        <
        
          d
          
            0
          
        
        +
        
          d
          
            1
          
        
      
    
    {\displaystyle \left|s_{1}-s_{0}\right|<d_{0}+d_{1}}
  


Adding interval[edit]
Adding new intervals to the tree is the same as for a binary search tree using the medial value as the key. We push 
  
    
      
        
          d
          
            i
          
        
      
    
    {\displaystyle d_{i}}
  
 onto the binary heap associated with the node, and update the minimum and maximum possible values associated with all higher nodes.

Searching for all overlapping intervals[edit]
Let's use 
  
    
      
        
          a
          
            q
          
        
        ,
        
          b
          
            q
          
        
        ,
        
          m
          
            q
          
        
        ,
        
          d
          
            q
          
        
      
    
    {\displaystyle a_{q},b_{q},m_{q},d_{q}}
  
 for the query interval, and 
  
    
      
        
          M
          
            n
          
        
      
    
    {\displaystyle M_{n}}
  
 for the key of a node (compared to 
  
    
      
        
          m
          
            i
          
        
      
    
    {\displaystyle m_{i}}
  
 of intervals)
Starting with root node, in each node, first we check if it is possible that our query interval overlaps with the node subtree using minimum and maximum values of node (if it is not, we don't continue for this node).
Then we calculate 
  
    
      
        min
        
          {
          
            d
            
              i
            
          
          }
        
      
    
    {\displaystyle \min \left\{d_{i}\right\}}
  
 for intervals inside this node (not its children) to overlap with query interval (knowing 
  
    
      
        
          m
          
            i
          
        
        =
        
          M
          
            n
          
        
      
    
    {\displaystyle m_{i}=M_{n}}
  
):

  
    
      
        min
        
          {
          
            d
            
              i
            
          
          }
        
        =
        
          |
          
            
              m
              
                q
              
            
            â
            
              M
              
                n
              
            
          
          |
        
        â
        
          d
          
            q
          
        
      
    
    {\displaystyle \min \left\{d_{i}\right\}=\left|m_{q}-M_{n}\right|-d_{q}}
  

and perform a query on its binary heap for the 
  
    
      
        
          d
          
            i
          
        
      
    
    {\displaystyle d_{i}}
  
's bigger than 
  
    
      
        min
        
          {
          
            d
            
              i
            
          
          }
        
      
    
    {\displaystyle \min \left\{d_{i}\right\}}
  

Then we pass through both left and right children of the node, doing the same thing.
In the worst-case, we have to scan all nodes of the binary search tree, but since binary heap query is optimum, this is acceptable (a 2- dimensional problem can not be optimum in both dimensions)
This algorithm is expected to be faster than a traditional interval tree (augmented tree) for search operations. Adding elements is a little slower in practice, though the order of growth is the same.

References[edit]

^ https://personal.us.es/almar/cg/08windowing.pdf

^ Jump up to: a b Jens M. Schmidt. Interval Stabbing Problems in Small Integer Ranges. DOI. ISAAC'09, 2009

^ Range Queries#Semigroup operators


Mark de Berg, Marc van Kreveld, Mark Overmars, and Otfried Schwarzkopf. Computational Geometry, Second Revised Edition. Springer-Verlag 2000. Section 10.1: Interval Trees, pp.Â 212â217.
.mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Cormen, Thomas H.; Leiserson, Charles E.; Rivest, Ronald L.; Stein, Clifford (2009), Introduction to Algorithms (3rdÂ ed.), MIT Press and McGraw-Hill, ISBNÂ 978-0-262-03384-8
Franco P. Preparata and Michael Ian Shamos. Computational Geometry: An Introduction. Springer-Verlag, 1985
External links[edit]
CGALÂ : Computational Geometry Algorithms Library in C++ contains a robust implementation of Range Trees
Boost.Icl offers C++ implementations of interval sets and maps.
IntervalTree (Python) - a centered interval tree with AVL balancing, compatible with tagged intervals
Interval Tree (C#) - an augmented interval tree, with AVL balancing
Interval Tree (Ruby) - a centered interval tree, immutable, compatible with tagged intervals
IntervalTree (Java) - an augmented interval tree, with AVL balancing, supporting overlap, find, Collection interface, id-associated intervals
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}hide.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteTree data structuresSearch trees(dynamic sets/associative arrays)
2â3
2â3â4
AA
(a,b)
AVL
B
B+
B*
Bx
(Optimal)Â Binary search
Dancing
HTree
Interval
Order statistic
(Left-leaning)Â Redâblack
Scapegoat
Splay
T
Treap
UB
Weight-balanced
Heaps
Binary
Binomial
Brodal
Fibonacci
Leftist
Pairing
Skew
van Emde Boas
Weak
Tries
Ctrie
C-trie (compressed ADT)
Hash
Radix
Suffix
Ternary search
X-fast
Y-fast
Spatial data partitioning trees
Ball
BK
BSP
Cartesian
Hilbert R
k-d (implicit k-d)
M
Metric
MVP
Octree
Priority R
Quad
R
R+
R*
Segment
VP
X
Other trees
Cover
Exponential
Fenwick
Finger
Fractal tree index
Fusion
Hash calendar
iDistance
K-ary
Left-child right-sibling
Link/cut
Log-structured merge
Merkle
PQ
Range
SPQR
Top





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Interval_tree&oldid=1064194260"
		Categories: Search treesHidden categories: Wikipedia articles needing clarification from February 2020All Wikipedia articles needing clarificationArticles needing additional references from October 2016All articles needing additional references
	
