
Title:
No free lunch theorem
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		If an algorithm does well on some problems, then it pays for that on other problems
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}This article is about mathematical folklore. For treatment of the mathematics, see No free lunch in search and optimization.
In mathematical folklore, the "no free lunch" (NFL) theorem (sometimes pluralized) of David Wolpert and William Macready appears in the 1997 "No Free Lunch Theorems for Optimization".[1] Wolpert had previously derived no free lunch theorems for machine learning (statistical inference).[2]
In 2005, Wolpert and Macready themselves indicated that the first theorem in their paper "state[s] that any two optimization algorithms are equivalent when their performance is averaged across all possible problems".[3]
The "no free lunch" (NFL) theorem is an easily stated and easily understood consequence of theorems Wolpert and Macready actually prove. It is weaker than the proven theorems, and thus does not encapsulate them. Various investigators have extended the work of Wolpert and Macready substantively. See No free lunch in search and optimization for treatment of the research area.
While some scholars argue that NFL conveys important insight, others argue that NFL is of little relevance to machine learning research.[4][5]

Contents

1 Example
2 Origin
3 Motivation
4 Implications
5 See also
6 Notes
7 External links



Example[edit]
Posit a toy universe that exists for exactly two days and on each day contains exactly one object, a square or a triangle. The universe has exactly four possible histories:

(square, triangle): the universe contains a square on day 1, and a triangle on day 2
(square, square)
(triangle, triangle)
(triangle, square)
Any prediction strategy that succeeds for history #2, by predicting a square on day 2 if there is a square on day 1, will fail on history #1, and vice versa. If all histories are equally likely, then any prediction strategy will score the same, with the same accuracy rate of 0.5.[6]

Origin[edit]
Wolpert and Macready give two NFL theorems that are closely related to the folkloric theorem. In their paper, they state:

.mw-parser-output .templatequote{overflow:hidden;margin:1em 0;padding:0 40px}.mw-parser-output .templatequote .templatequotecite{line-height:1.5em;text-align:left;padding-left:1.6em;margin-top:0}We have dubbed the associated results NFL theorems because they demonstrate that if an algorithm performs well on a certain class of problems then it necessarily pays for that with degraded performance on the set of all remaining problems.[1] 
The first theorem hypothesizes objective functions that do not change while optimization is in progress, and the second hypothesizes objective functions that may change.[1]

.mw-parser-output .block-indent{padding-left:3em;padding-right:0;overflow:hidden}Theorem 1: For any algorithms a1 and a2, at iteration step m

  
    
      
        
          â
          
            f
          
        
        P
        (
        
          d
          
            m
          
          
            y
          
        
        â£
        f
        ,
        m
        ,
        
          a
          
            1
          
        
        )
        =
        
          â
          
            f
          
        
        P
        (
        
          d
          
            m
          
          
            y
          
        
        â£
        f
        ,
        m
        ,
        
          a
          
            2
          
        
        )
        ,
      
    
    {\displaystyle \sum _{f}P(d_{m}^{y}\mid f,m,a_{1})=\sum _{f}P(d_{m}^{y}\mid f,m,a_{2}),}
  

where 
  
    
      
        
          d
          
            m
          
          
            y
          
        
      
    
    {\displaystyle d_{m}^{y}}
  
 denotes the ordered set of size 
  
    
      
        m
      
    
    {\displaystyle m}
  
 of the cost values 
  
    
      
        y
      
    
    {\displaystyle y}
  
 associated to input values 
  
    
      
        x
        â
        X
      
    
    {\displaystyle x\in X}
  
, 
  
    
      
        f
        :
        X
        â
        Y
      
    
    {\displaystyle f:X\rightarrow Y}
  
 is the function being optimized and 
  
    
      
        P
        (
        
          d
          
            m
          
          
            y
          
        
        â£
        f
        ,
        m
        ,
        a
        )
      
    
    {\displaystyle P(d_{m}^{y}\mid f,m,a)}
  
 is the conditional probability of obtaining a given sequence of cost values from algorithm 
  
    
      
        a
      
    
    {\displaystyle a}
  
 run 
  
    
      
        m
      
    
    {\displaystyle m}
  
 times on function 
  
    
      
        f
      
    
    {\displaystyle f}
  
.
The theorem can be equivalently formulated as follows:

Theorem 1: Given a finite set 
  
    
      
        V
      
    
    {\displaystyle V}
  
 and a finite set 
  
    
      
        S
      
    
    {\displaystyle S}
  
 of real numbers, assume that 
  
    
      
        f
        :
        V
        â
        S
      
    
    {\displaystyle f:V\to S}
  
 is chosen at random according to uniform distribution on the set 
  
    
      
        
          S
          
            V
          
        
      
    
    {\displaystyle S^{V}}
  
 of all possible functions from 
  
    
      
        V
      
    
    {\displaystyle V}
  
 to 
  
    
      
        S
      
    
    {\displaystyle S}
  
. For the problem of optimizing 
  
    
      
        f
      
    
    {\displaystyle f}
  
 over the set 
  
    
      
        V
      
    
    {\displaystyle V}
  
, then no algorithm performs better than blind search.
Here, blind search means that at each step of the algorithm, the element 
  
    
      
        v
        â
        V
      
    
    {\displaystyle v\in V}
  
 is chosen at random with uniform probability distribution from the elements of 
  
    
      
        V
      
    
    {\displaystyle V}
  
 that have not been chosen previously.
In essence, this says that when all functions f are equally likely, the probability of observing an arbitrary sequence of m values in the course of optimization does not depend upon the algorithm. In the analytic framework of Wolpert and Macready, performance is a function of the sequence of observed values (and not e.g. of wall-clock time), so it follows easily that all algorithms have identically distributed performance when objective functions are drawn uniformly at random, and also that all algorithms have identical mean performance. But identical mean performance of all algorithms does not imply Theorem 1, and thus the folkloric theorem is not equivalent to the original theorem.
Theorem 2 establishes a similar, but "more subtle", NFL result for time-varying objective functions.[1]

Motivation[edit]
The NFL theorems were explicitly not motivated by the question of what can be inferred (in the case of NFL for machine learning) or found (in the case of NFL for search) when the "environment is uniform random". Rather uniform randomness was used as a tool, to compare the number of environments for which algorithm A outperforms algorithm B to the number of environments for which B outperforms A. NFL tells us that (appropriately weighted)[clarification needed] there are just as many environments in both of those sets.
This is true for many definitions of what precisely an "environment" is. In particular, there are just as many prior distributions (appropriately weighted) in which learning algorithm A beats B (on average) as vice versa.[citation needed] This statement about sets of priors is what is most important about NFL, not the fact that any two algorithms perform equally for the single, specific prior distribution that assigns equal probability to all environments.
While the NFL is important to understand the fundamental limitation for a set of problems, it does not state anything about each particular instance of a problem that can arise in practice. That is, the NFL states what is contained in its mathematical statements and it is nothing more than that. For example, it applies to the situations where the algorithm is fixed a priori and a worst-case problem for the fixed algorithm is chosen a posteriori. Therefore, if we have a "good" problem in practice or if we can choose a "good" learning algorithm for a given particular problem instance, then the NFL does not mention any limitation about this particular problem instance. Though the NFL might seem contradictory to results from other papers suggesting generalization of learning algorithms or search heuristics, it is important to understand the difference between the exact mathematical logic of the NFL and its intuitive interpretation.[7]

Implications[edit]
Further information: Problem of induction
To illustrate one of the counter-intuitive implications of NFL, suppose we fix two supervised learning algorithms, C and D. We then sample a target function f to produce a set of input-output pairs, d. How should we choose whether to train C or D on d, in order to make predictions for what output would be associated with a point lying outside of d?
It is common in almost of all science and statistics to answer this question â to choose between C and D â by running cross-validation on d with those two algorithms. In other words, to decide whether to generalize from d with either C or D, we see which of them has better out-of-sample performance when tested within d.
Since C and D are fixed, this use of cross-validation to choose between them is itself an algorithm, i.e., a way of generalizing from an arbitrary dataset. Call this algorithm A. (Arguably, A is a simplified model of the scientific method itself.)
We could also use anti-cross-validation to make our choice. In other words, we could choose between C and D based on which has worse out-of-sample performance within d. Again, since C and D are fixed, this use of anti-cross-validation is itself an algorithm. Call that algorithm B.
NFL tells us (loosely speaking) that B must beat A on just as many target functions (and associated datasets d) as A beats B. In this very specific sense, the scientific method will lose to the "anti" scientific method just as readily as it wins.[8]
NFL only applies if the target function is chosen from a uniform distribution of all possible functions. If this is not the case, and certain target functions are more likely to be chosen than others, then A may perform better than B overall. The contribution of NFL is that it tells us choosing an appropriate algorithm requires making assumptions about the kinds of target functions the algorithm is being used for. With no assumptions, no "meta-algorithm", such as the scientific method, performs better than random choice.
While some scholars argue that NFL conveys important insight, others argue that NFL is of little relevance to machine learning research.[4][5] If Occam's razor is correct, for example if sequences of lower Kolmogorov complexity are more probable than sequences of higher complexity, then (as is observed in real life) some algorithms, such as cross-validation, perform better on average on practical problems (when compared with random choice or with anti-cross-validation).[9]

See also[edit]
Milton Friedman
No Free Lunch (organization)
Robert Heinlein
There ain't no such thing as a free lunch
Notes[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ Jump up to: a b c d Wolpert, D.H., Macready, W.G. (1997), "No Free Lunch Theorems for Optimization", IEEE Transactions on Evolutionary Computation 1, 67.

^ Wolpert, David (1996), "The Lack of A Priori Distinctions between Learning Algorithms", Neural Computation, pp. 1341â1390.  Archived 2016-12-20 at the Wayback Machine

^ Wolpert, D.H., and Macready, W.G. (2005) "Coevolutionary free lunches", IEEE Transactions on Evolutionary Computation, 9(6): 721â735

^ Jump up to: a b Whitley, Darrell, and Jean Paul Watson. "Complexity theory and the no free lunch theorem." In Search Methodologies, pp. 317â339. Springer, Boston, MA, 2005.

^ Jump up to: a b Giraud-Carrier, Christophe, and Foster Provost. "Toward a justification of meta-learning: Is the no free lunch theorem a show-stopper." In Proceedings of the ICML-2005 Workshop on Meta-learning, pp. 12â19. 2005.

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Forster, Malcolm R. (1999). Minds and Machines. 9 (4): 543â564. doi:10.1023/A:1008304819398. {{cite journal}}: Missing or empty |title= (help)

^ Kawaguchi, K., Kaelbling, L.P, and Bengio, Y.(2017) "Generalization in deep learning", https://arxiv.org/abs/1710.05468

^ Wolpert, D.H. (2013) "What the no free lunch theorems really mean", Ubiquity, Volume 2013, December 2013, doi:10.1145/2555235.2555237

^ Lattimore, Tor, and Marcus Hutter. "No free lunch versus Occamâs razor in supervised learning." In Algorithmic Probability and Friends. Bayesian Prediction and Artificial Intelligence, pp. 223â235. Springer, Berlin, Heidelberg, 2013.


External links[edit]
No Free Lunch Theorems
Graphics illustrating the theorem




<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=No_free_lunch_theorem&oldid=1064096705"
		Categories: Scientific folklorePhilosophy of mathematicsMathematical theoremsHidden categories: Webarchive template wayback linksCS1 errors: missing titleArticles with short descriptionShort description is different from WikidataWikipedia articles needing clarification from May 2018All articles with unsourced statementsArticles with unsourced statements from May 2018
	
