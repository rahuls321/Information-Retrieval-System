
Title:
Coding conventions
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		This article includes a list of general references, but it remains largely unverified because it lacks sufficient corresponding inline citations. Please help to improve this article by introducing more precise citations.  (April 2021) (Learn how and when to remove this template message)
Standards and guidelines for writing code
.mw-parser-output .sidebar{width:22em;float:right;clear:right;margin:0.5em 0 1em 1em;background:#f8f9fa;border:1px solid #aaa;padding:0.2em;text-align:center;line-height:1.4em;font-size:88%;border-collapse:collapse;display:table}body.skin-minerva .mw-parser-output .sidebar{display:table!important;float:right!important;margin:0.5em 0 1em 1em!important}.mw-parser-output .sidebar-subgroup{width:100%;margin:0;border-spacing:0}.mw-parser-output .sidebar-left{float:left;clear:left;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-none{float:none;clear:both;margin:0.5em 1em 1em 0}.mw-parser-output .sidebar-outer-title{padding:0 0.4em 0.2em;font-size:125%;line-height:1.2em;font-weight:bold}.mw-parser-output .sidebar-top-image{padding:0.4em}.mw-parser-output .sidebar-top-caption,.mw-parser-output .sidebar-pretitle-with-top-image,.mw-parser-output .sidebar-caption{padding:0.2em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-pretitle{padding:0.4em 0.4em 0;line-height:1.2em}.mw-parser-output .sidebar-title,.mw-parser-output .sidebar-title-with-pretitle{padding:0.2em 0.8em;font-size:145%;line-height:1.2em}.mw-parser-output .sidebar-title-with-pretitle{padding:0.1em 0.4em}.mw-parser-output .sidebar-image{padding:0.2em 0.4em 0.4em}.mw-parser-output .sidebar-heading{padding:0.1em 0.4em}.mw-parser-output .sidebar-content{padding:0 0.5em 0.4em}.mw-parser-output .sidebar-content-with-subgroup{padding:0.1em 0.4em 0.2em}.mw-parser-output .sidebar-above,.mw-parser-output .sidebar-below{padding:0.3em 0.8em;font-weight:bold}.mw-parser-output .sidebar-collapse .sidebar-above,.mw-parser-output .sidebar-collapse .sidebar-below{border-top:1px solid #aaa;border-bottom:1px solid #aaa}.mw-parser-output .sidebar-navbar{text-align:right;font-size:115%;padding:0 0.4em 0.4em}.mw-parser-output .sidebar-list-title{padding:0 0.4em;text-align:left;font-weight:bold;line-height:1.6em;font-size:105%}.mw-parser-output .sidebar-list-title-c{padding:0 0.4em;text-align:center;margin:0 3.3em}@media(max-width:720px){body.mediawiki .mw-parser-output .sidebar{width:100%!important;clear:both;float:none!important;margin-left:0!important;margin-right:0!important}}Part of a series onSoftware development
Core activities
Processes
Requirements
Design
Construction
Testing
Debugging
Deployment
Maintenance

Paradigms and models
Software engineering
Agile
Cleanroom
Incremental
Prototyping
Spiral
V model
Waterfall

Methodologies and frameworks
ASD
DevOps
DAD
DSDM
FDD
IID
Kanban
Lean SD
LeSS
MDD
MSF
PSP
RAD
RUP
SAFe
Scrum
SEMAT
TSP
OpenUP
UP
XP

Supporting disciplines
Configuration management
Documentation
Software quality assurance
Project management
User experience

Practices
ATDD
BDD
CCO
CI
CD
DDD
PP
SBE
Stand-up
TDD

Tools
Compiler
Debugger
Profiler
GUI designer
Modeling
IDE
Build automation
Release automation
Infrastructure as code
Testing

Standards and Bodies of Knowledge
BABOK
CMMI
IEEE standards
ISO 9001
ISO/IEC standards
PMBOK
SWEBOK
ITIL
IREB

Glossaries
Artificial intelligence
Computer science
Electrical and electronics engineering

Outlines
Outline of software development
.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vte
Coding conventions are a set of guidelines for a specific programming language that recommend programming style, practices, and methods for each aspect of a program written in that language. These conventions usually cover file organization, indentation, comments, declarations, statements, white space, naming conventions, programming practices, programming principles, programming rules of thumb, architectural best practices, etc. These are guidelines for software structural quality. Software programmers are highly recommended to follow these guidelines to help improve the readability of their source code and make software maintenance easier. Coding conventions are only applicable to the human maintainers and peer reviewers of a software project. Conventions may be formalized in a documented set of rules that an entire team or company follows,[1] or may be as informal as the habitual coding practices of an individual. Coding conventions are not enforced by compilers.

Contents

1 Software maintenance

1.1 Quality

1.1.1 Coding standards
1.1.2 Reduction of complexity


1.2 Refactoring


2 Task automation
3 Language factors
4 Common conventions
5 See also
6 References
7 List of coding standards

7.1 Coding conventions for languages
7.2 Coding conventions for projects





Software maintenance[edit]
Reducing the cost of software maintenance is the most often cited reason for following coding conventions. In their introduction to code conventions for the Java programming language, Sun Microsystems provides the following rationale:[2]


Code conventions are important to programmers for a number of reasons:

40%â80% of the lifetime cost of a piece of software goes to maintenance.[3]
Hardly any software is maintained for its whole life by the original author.
Code conventions improve the readability of the software, allowing engineers to understand new code more quickly and thoroughly.
If you ship your source code as a product, you need to make sure it is as well packaged and clean as any other product you create.

Quality[edit]
Software peer review frequently involves reading source code. This type of peer review is primarily a defect detection activity. By definition, only the original author of a piece of code has read the source file before the code is submitted for review.  Code that is written using consistent guidelines is easier for other reviewers to understand and assimilate, improving the efficacy of the defect detection process.
Even for the original author, consistently coded software eases maintainability. There is no guarantee that an individual will remember the precise rationale for why a particular piece of code was written in a certain way long after the code was originally written.  Coding conventions can help. Consistent use of whitespace improves readability and reduces the time it takes to understand the software.

Coding standards[edit]
Where coding conventions have been specifically designed to produce high-quality code, and have then been formally adopted, they then become coding standards. Specific styles, irrespective of whether they are commonly adopted, do not automatically produce good quality code.

Reduction of complexity[edit]
Complexity is a factor going against security.[4]
The management of complexity includes the following basic principle: minimize the amount of code written during the project development. This prevents unnecessary work which prevents unnecessary cost, both upfront and downstream. This is simply because if there is less code, it is less work not only to create the application, but also to maintain it. 
Complexity is managed both at the design stage (how the project is architectured) and at the development stage (by having simpler code). If the coding is kept basic and simple then the complexity will be minimised. Very often this is keeping the coding as 'physical' as possible - coding in a manner that is very direct and not highly abstract. This produces optimal code that is easy to read and follow. Complexity can also be avoided simply by not using complicated tools for simple jobs. 
The more complex the code is the more likely it is to be buggy, the more difficult the bugs are to find and the more likely there are to be hidden bugs.

Refactoring[edit]
Refactoring refers to a software maintenance activity where source code is modified to improve readability or improve its structure.  Software is often refactored to bring it into conformance with a team's stated coding standards after its initial release.  Any change that does not alter the behavior of the software can be considered refactoring.  Common refactoring activities are changing variable names, renaming methods, moving methods or whole classes and breaking large methods (or functions) into smaller ones.
Agile software development methodologies plan for regular (or even continuous) refactoring making it an integral part of the team software development process.[5]

Task automation[edit]
Coding conventions allow programmers to have simple scripts or programs whose job is to process source code for some purpose other than compiling it into an executable. It is common practice to count the software size (Source lines of code) to track current project progress or establish a baseline for future project estimates.
Consistent coding standards can, in turn, make the measurements more consistent.  Special tags within source code comments are often used to process documentation, two notable examples are javadoc and doxygen.  The tools specify the use of a set of tags, but their use within a project is determined by convention.
Coding conventions simplify writing new software whose job is to process existing software.  Use of static code analysis has grown consistently since the 1950s.  Some of the growth of this class of development tools stems from increased maturity and sophistication of the practitioners themselves (and the modern focus on safety and security), but also from the nature of the languages themselves.

Language factors[edit]
All software practitioners must grapple with the problem of organizing and managing a large number of sometimes complex instructions.  For all but the smallest software projects, source code (instructions) are partitioned into separate files and frequently among many directories.  It was natural for programmers to collect closely related functions (behaviors) in the same file and to collect related files into directories.  As software development shifted from purely procedural programming (such as found in FORTRAN) towards more object-oriented constructs (such as found in C++), it became the practice to write the code for a single (public) class in a single file (the 'one class per file' convention).[6][7]
Java has gone one step further - the Java compiler returns an error if it finds more than one public class per file.
A convention in one language may be a requirement in another.  Language conventions also affect individual source files. Each compiler (or interpreter) used to process source code is unique. The rules a compiler applies to the source creates implicit standards. For example, Python code is much more consistently indented than, say Perl, because whitespace (indentation) is actually significant to the interpreter. Python does not use the brace syntax Perl uses to delimit functions.  Changes in indentation serve as the delimiters.[8][9]  Tcl, which uses a brace syntax similar to Perl or C/C++ to delimit functions, does not allow the following, which seems fairly reasonable to a C programmer:

 set i = 0
 while {$i < 10} 
 {
    puts "$i squared = [expr $i*$i]"
    incr i
 }
 
The reason is that in Tcl, curly braces are not used only to delimit functions as in C or Java.  More 
generally, curly braces are used to group words together into a single argument.[10][11]
In Tcl, the word while takes two arguments, a condition and an action. In the example above, while is missing its second argument, its action (because the Tcl also uses the newline character to delimit the end of a command).

Common conventions[edit]
There are a large number of coding conventions; see Coding Style for numerous examples and discussion. Common coding conventions may cover the following areas:

Comment conventions
Indent style conventions
Line length conventions
Naming conventions
Programming practices
Programming principles
Programming style conventions
Coding standards include the CERT C Coding Standard, MISRA C, High Integrity C++, see list below.

See also[edit]
Comparison of programming languages (syntax)
Hungarian Notation
Indent style
List of tools for static code analysis
List of software development philosophies
MISRA
Programming style
Software metrics
Software quality
The Power of 10 Rules
References[edit]

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}"EditorConfig helps developers define and maintain consistent coding styles between different editors and IDEs". EditorConfig.

^ 
"Code Conventions for the Java Programming LanguageÂ : Why Have Code Conventions". Sun Microsystems, Inc. 1999-04-20.

^ Robert L. Glass: Facts and Fallacies of Software Engineering; Addison Wesley, 2003.

^ 
Tom Gillis.
"Complexity is the enemy of security".

^ 
Jeffries, Ron (2001-11-08). "What is Extreme Programming?Â : Design Improvement". XP Magazine. Archived from the original on 2006-12-15.

^ 
Hoff, Todd (2007-01-09). "C++ Coding StandardÂ : Naming Class Files".

^ FIFE coding standards

^ 
van Rossum, Guido (2006-09-19).  Fred L. Drake, Jr (ed.). "Python TutorialÂ : First Steps Towards Programming". Python Software Foundation. Archived from the original on 2008-09-28. Retrieved 2014-08-17.

^ 
Raymond, Eric (2000-05-01). "Why Python?". Linux Journal.

^ 
Tcl Developer Xchange. "Summary of Tcl language syntax". ActiveState.

^ 
Staplin, George Peter (2006-07-16). "Why can I not start a new line before a brace group". 'the Tcler's Wiki'.


List of coding standards[edit]



Wikibooks has a book on the topic of: Ada Style Guide



Wikibooks has a book on the topic of: Computer Programming/Coding Style
	 
Coding conventions for languages[edit]
ActionScript: Flex SDK coding conventions and best practices
Ada: Ada 95 Quality and Style Guide: Guidelines for Professional Programmers
Ada: Guide for the use of the Ada programming language in high integrity systems (ISO/IEC TR 15942:2000)
Ada: NASA Flight Software Branch â Ada Coding Standard
Ada: ESA Ada Coding Standard - BSSC(98)3 Issue 1 October 1998
Ada: European Space Agency's Software engineering and standardisation
C: CERT C Coding Standard CERT C Coding Standard (SEI)
C: Embedded C Coding Standard (Barr Group)
C: Firmware Development Standard (Jack Ganssle)
C: MISRA C
C: TIOBE C Standard[1]
C++: C++ Core Guidelines (Bjarne Stroustrup, Herb Sutter)
C++: Quantum Leaps C/C++ Coding Standard
C++: C++ Programming/Programming Languages/C++/Code/Style Conventions
C++: GeoSoft's C++ Programming Style Guidelines
C++: Google's C++ Style Guide
C++: High Integrity C++
C++: MISRA C++
C++: Philips Healthcare C++ Coding Standard[2]
C/C++: C/C++ Coding Guidelines from devolo
C#: C# Coding Conventions (C# Programming Guide)
C#: Design Guidelines for Developing Class Libraries
C#: Brad Abrams
C#: Philips Healthcare or Philips Healthcare C# Coding Standard[3]
D: The D Style
Dart: The Dart Style Guide
Erlang: Erlang Programming Rules and Conventions
Flex: Code conventions for the Flex SDK
Java: Ambysoft's Coding Standards for Java
Java: Code Conventions for the Java Programming Language (Not actively maintained. Latest version: 1999-APR-20.)
Java: GeoSoft's Java Programming Style Guidelines
Java: Java Coding Standards at Curlie
Java: TIOBE Java Standard[4]
Java: SoftwareMonkey's coding conventions for Java and other brace-syntax languages
JavaScript: Code Conventions for the JavaScript Programming Language
Lisp: Riastradh's Lisp Style Rules
MATLAB: Neurobat Coding Conventions for MATLAB Archived 2014-10-14 at the Wayback Machine
Object Pascal: Object Pascal Style Guide
Perl: Perl Style Guide
PHP::PEAR: PHP::PEAR Coding Standards
PHP::FIG: PHP Framework Interop Group
PL/I: PL/I Style Guide
Python: Style Guide for Python Code
Ruby: The Unofficial Ruby Usage Guide
Ruby: GitHub Ruby style guide
Shell: Google's Shell Style Guide
Coding conventions for projects[edit]
Apache Developers' C Language Style Guide
Drupal PHP Coding Standards
GNU Coding Standards
"GNAT Coding Style: A Guide for GNAT Developers". GCC online documentation. Free Software Foundation. Retrieved 2009-01-19. (PDF)
Linux Kernel Coding Style (or Documentation/CodingStyle in the Linux Kernel source tree)
Mozilla Coding Style Guide
Mono: Programming style for Mono
OpenBSD Kernel source file style guide (KNF)
Road Intranet's C++ Guidelines
Style guides for Google-originated open-source projects
The NetBSD source code style guide (formerly known as the BSD Kernel Normal Form)
Zend Framework Coding Standards
ZeroMQ C Language Style for Scalability (CLASS)

^ "TIOBE - C Coding Standard". tics.tiobe.com. Retrieved 2021-03-11.

^ "C++ Coding Standard". tics.tiobe.com. Retrieved 2021-03-11.

^ "C# Coding Standard". tics.tiobe.com. Retrieved 2021-03-11.

^ "TIOBE - Java Coding Standard". tics.tiobe.com. Retrieved 2021-03-11.






<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Coding_conventions&oldid=1049302162"
		Categories: Source codeSoftware engineeringHidden categories: Articles lacking in-text citations from April 2021All articles lacking in-text citationsArticles with short descriptionShort description matches WikidataArticles with Curlie linksWebarchive template wayback links
	
