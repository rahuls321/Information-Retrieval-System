
Title:
Syntactic sugar
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Programming language syntax designed for ease of use
In computer science, syntactic sugar is syntax within a programming language that is designed to make things easier to read or to express. It makes the language "sweeter" for human use: things can be expressed more clearly, more concisely, or in an alternative style that some may prefer.
For example, many programming languages provide special syntax for referencing and updating array elements. Abstractly, an array reference is a procedure of two arguments: an array and a subscript vector, which could be expressed as get_array(Array, vector(i,j)). Instead, many languages provide syntax such as Array[i,j]. Similarly an array element update is a procedure consisting of three arguments, for example set_array(Array, vector(i,j), value), but many languages provide syntax such as Array[i,j] = value.
A construct in a language is syntactic sugar if it can be removed from the language without any effect on what the language can do: functionality and expressive power will remain the same.
Language processors, including compilers and static analyzers, often expand sugared constructs into more fundamental constructs before processing, a process sometimes called "desugaring".

Contents

1 Origins
2 Notable examples
3 Criticism
4 Derivative terms

4.1 Syntactic salt
4.2 Syntactic saccharin
4.3 Sugared types


5 Notes
6 References



Origins[edit]
The term syntactic sugar was coined by Peter J. Landin in 1964 to describe the surface syntax of a simple ALGOL-like programming language which was defined semantically in terms of the applicative expressions of lambda calculus,[1][2] centered on lexically replacing Î» with "where".
Later programming languages, such as CLU, ML and Scheme, extended the term to refer to syntax within a language which could be defined in terms of a language core of essential constructs; the convenient, higher-level features could be "desugared" and decomposed into that subset.[3] This is, in fact, the usual mathematical practice of building up from primitives.
Building on Landin's distinction between essential language constructs and syntactic sugar, in 1991, Matthias Felleisen proposed a codification of "expressive power" to align with "widely held beliefs" in the literature. He defined "more expressive" to mean that without the language constructs in question, a program would have to be completely reorganized.[4]

Notable examples[edit]
In COBOL, many of the intermediate keywords are syntactic sugar that may optionally be omitted. For example, the sentence MOVE A B. and the sentence MOVE A TO B. perform exactly the same function, but the second makes the action to be performed clearer.
Augmented assignment or compound assignment operators: For example, aÂ +=Â b is equivalent to a = a + b in C and similar languages, assuming a has no side effects such as if a is a regular variable.[5][6] Some languages, such as Python[7] may allow overloading augmented assignment operators, so they may behave differently than standard ones.
In Perl, unless (condition) {...}  is syntactic sugar for if (not condition) {...}. Additionally, any statement can be followed by a condition, so statement if condition is equivalent to if (condition) {statement}, but the former is more naturally formatted on a single line.
In the C language, the a[i] notation is syntactic sugar for *(a + i).[8] Likewise, the a->x notation is syntactic sugar for accessing members using the dereference operator (*a).x.
The using statement in C# ensures that certain objects are disposed of correctly. The compiler expands the statement into a try-finally block.[9]
The C# language allows variables to be declared as var x = expr, which allows the compiler to infer the type of x from the expression expr, instead of requiring an explicit type declaration. Similarly, C++ allows auto x = expr since C++11 and Java allows var x = expr since Java 11.
Python list comprehensions (such as [x*x for x in range(10)] for a list of squares) and decorators (such as @staticmethod).
In Haskell, a string, denoted in quotation marks, is semantically equivalent to a list of characters.
In the tidyverse collection of R packages, the pipe, denoted by %>%, declares that the data (or output of the function) preceding the pipe will serve as the first argument for the function following the pipe.[10] So, xÂ %>% f(y) is equivalent to f(x,y).
In SQL, JOIN is equivalent to INNER JOIN, the latter clarifying that the join statement is specifically an inner join operation as opposed to an outer join operation.
Method calling in OOP languages in the form of myObject.myMethod(parameter1, parameter2, parameter3) is syntactic sugar for calling a global function as myMethod(myObject, parameter1, parameter2, parameter3). The reference to the object is passed as a hidden argument, usually accessible from within the method as this.
Parameters called by reference is a syntax sugar for technically passing a pointer to the parameter, but syntactically handling it as the variable itself, to avoid constant de-referencing of pointer in the code inside the function.
In Java, an import declaration enables the compiler to find classes that are not otherwise specified with fully qualified names. For example import javax.swing.*; allows the programmer to reference a Swing object such as javax.swing.JButton using the shorter name JButton.
Criticism[edit]
Some programmers feel that these syntax usability features are either unimportant or outright frivolous. Notably, special syntactic forms make a language less uniform and its specification more complex, and may cause problems as programs become large and complex. This view is particularly widespread in the Lisp community, as Lisp has very simple and regular syntax, and the surface syntax can easily be modified.[11]
For example, Alan Perlis once quipped in "Epigrams on Programming", in a reference to bracket-delimited languages, that "Syntactic sugar causes cancer of the semi-colons".[12]

Derivative terms[edit]
Syntactic salt[edit]
The metaphor has been extended by coining the term syntactic salt, which indicates a feature designed to make it harder to write bad code.[13] Specifically, syntactic salt is a hoop that programmers must jump through just to prove that they know what is going on, rather than to express a program action. For example, in Java and Pascal assigning a float value to a variable declared as an int without additional syntax explicitly stating that intention will result in a compile error, while C and C++ will automatically truncate any floats assigned to an int. However this is not syntax, but semantics.
In C#, when hiding an inherited class member, a compiler warning is issued unless the new keyword is used to specify that the hiding is intentional.[14] To avoid potential bugs owing to the similarity of the switch statement syntax with that of C or C++, C# requires a break for each non-empty case label of a switch (unless goto, return, or throw is used) even though it does not allow implicit fall-through.[15] (Using goto and specifying the subsequent label produces a C/C++-like fall-through.)
Syntactic salt may defeat its purpose by making the code unreadable and thus worsen its qualityÂ â in extreme cases, the essential part of the code may be shorter than the overhead introduced to satisfy language requirements.
An alternative to syntactic salt is generating compiler warnings when there is high probability that the code is a result of a mistakeÂ â a practice common in modern C/C++ compilers.

Syntactic saccharin[edit]
Other extensions are syntactic saccharin and syntactic syrup, meaning gratuitous syntax that does not make programming any easier.[16][17][18][19]

Sugared types[edit]
Data types with core syntactic support are said to be "sugared types."[20][21][22] Common examples include quote-delimited strings, curly braces for object and record types, and square brackets for arrays.

Notes[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Landin, Peter J. (1964). "The mechanical evaluation of expressions" (PDF). The Computer Journal. Computer Journal. 6 (4): 308â320. doi:10.1093/comjnl/6.4.308. Retrieved 21 July 2014.

^ Abelson & Sussman 1996, Chapter 1, footnote 11.

^ Barbara Liskov, "A History of CLU", MIT Laboratory for Computer Science Technical Report 561 (1993)

^ Felleisen, Matthias (December 1991). "On the Expressive Power of Programming Languages". Science of Computer Programming. Springer-Verlag. 17 (1â3): 35â75. doi:10.1016/0167-6423(91)90036-W. Retrieved 19 July 2014.

^ "C Compound Assignment". msdn.microsoft.com. Microsoft. Retrieved 20 June 2016. However, the compound-assignment expression is not equivalent to the expanded version because the compound-assignment expression evaluates expression1 only once, while the expanded version evaluates expression1 twice: in the addition operation and in the assignment operation.

^ Garavaglia, Emilio (26 July 2015). "Why are shortcuts like x += y considered good practice?". stackexchange.com. Retrieved 20 June 2016. optimization can [be done] if 'finding x' has no side effects

^ "Python Data model". docs.python.org. 21 December 2020.

^ Raymond, Eric S. (11 October 1996). The New Hacker's Dictionary â 3rd Edition. MIT Press. p.Â 432. ISBNÂ 978-0-262-68092-9. Retrieved 5 August 2012.

^ "using Statement (C# Reference)". Retrieved 16 September 2014.

^ "magrittr: Vignette". Retrieved 24 December 2018.

^ Abelson & Sussman 1996, Chapter 1, footnote 11.

^ Perlis 1982, Epigram #3.

^ "The Jargon File - syntactic salt". 2003-06-12. Archived from the original on 2003-06-12. Retrieved 2018-03-19.

^ "new Modifier (C# Reference)". microsoft.com. Microsoft. Retrieved 3 August 2015.

^ "switch (C# Reference)". microsoft.com. Microsoft. Retrieved 3 August 2015.

^ "syntactic sugar". catb.org. Retrieved 3 August 2015.

^ Boiten, Eerke A.; MÃ¶ller, Bernhard (2002-06-26). Mathematics of Program Construction. ISBNÂ 9783540438571. Retrieved 3 August 2015.

^ Dean, Thomas (2004). Talking with Computers: Explorations in the Science and Technology of Computing. Cambridge University Press. p.Â 115. ISBNÂ 9780521542043.

^ Harrison, William; Sheard, Tim (July 8â10, 2002). "Fine control of demand in Haskell" (PDF). Mathematics of Program Construction: 6th International Conference, MPC 2002, Dagstuhl Castle, Germany, July 8â10, 2002. Proceedings. International Conference on Mathematics of Program Construction. Dagstuhl Castle, Germany: Springer Berlin Heidelberg. p.Â 93. doi:10.1007/3-540-45442-X_6. S2CIDÂ 10059915. Archived from the original (PDF) on March 31, 2017.

^ Chugh, Ravi (2013). Nested Refinement Types for JavaScript (PhD). UC San Diego.

^ "C Language LLVM Documentation". clang.llvm.org. Retrieved 30 June 2020.

^ "The Secret Life of Types in Swift". medium.com/@slavapestov. Retrieved 30 June 2020.


References[edit]
.mw-parser-output .refbegin{font-size:90%;margin-bottom:0.5em}.mw-parser-output .refbegin-hanging-indents>ul{margin-left:0}.mw-parser-output .refbegin-hanging-indents>ul>li{margin-left:0;padding-left:3.2em;text-indent:-3.2em}.mw-parser-output .refbegin-hanging-indents ul,.mw-parser-output .refbegin-hanging-indents ul li{list-style:none}@media(max-width:720px){.mw-parser-output .refbegin-hanging-indents>ul>li{padding-left:1.6em;text-indent:-1.6em}}.mw-parser-output .refbegin-columns{margin-top:0.3em}.mw-parser-output .refbegin-columns ul{margin-top:0}.mw-parser-output .refbegin-columns li{page-break-inside:avoid;break-inside:avoid-column}
Abelson, Harold; Sussman, Gerald Jay; Sussman, Julie (1996) [1984]. Structure and Interpretation of Computer Programs. Cambridge, MA: MIT Press. ISBNÂ 0-262-51087-1.
Landin, Peter J. (FebruaryâMarch 1965). "A Correspondence Between ALGOL 60 and Church's Lambda-Notation: Parts I and II". Communications of the ACM. 8 (2.3): 89â101, 158â165. doi:10.1145/363744.363749. S2CIDÂ 6505810.
Landin, Peter J. (March 1965). "Programming Without Imperatives â An Example". UNIVAC Systems Programming Research.
Landin, Peter J. (July 1965). "Getting Rid of Labels". UNIVAC Systems Programming Research.
Landin, Peter J. (August 1965). "A Generalization of Jumps and Labels". UNIVAC Systems Programming Research., reprinted in "Higher-Order and Symbolic Computation". 11. 1998: 125â143. CiteSeerXÂ 10.1.1.85.2610. {{cite journal}}: Cite journal requires |journal= (help)
Perlis, A. J. (September 1982). "Epigrams on programming". ACM SIGPLAN Notices. New York, NY, USA: Association for Computing Machinery. 17 (9): 7â13. doi:10.1145/947955.1083808. S2CIDÂ 20512767. Archived from the original on January 17, 1999.





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Syntactic_sugar&oldid=1049942163"
		Categories: Programming language syntaxComputer jargonSource codeProgramming language designHidden categories: Articles with short descriptionShort description is different from WikidataCS1 errors: missing periodical
	
