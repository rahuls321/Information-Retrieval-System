
Title:
Julia (programming language)
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		High-performance dynamic programming language


.mw-parser-output .infobox-subbox{padding:0;border:none;margin:-3px;width:auto;min-width:100%;font-size:100%;clear:none;float:none;background-color:transparent}.mw-parser-output .infobox-3cols-child{margin:auto}.mw-parser-output .infobox .navbar{font-size:100%}body.skin-minerva .mw-parser-output .infobox-header,body.skin-minerva .mw-parser-output .infobox-subheader,body.skin-minerva .mw-parser-output .infobox-above,body.skin-minerva .mw-parser-output .infobox-title,body.skin-minerva .mw-parser-output .infobox-image,body.skin-minerva .mw-parser-output .infobox-full-data,body.skin-minerva .mw-parser-output .infobox-below{text-align:center}JuliaParadigmMulti-paradigm: multiple dispatch (primary paradigm), procedural, functional, meta, multistaged[1]DesignedÂ byJeff Bezanson, Alan Edelman, Stefan Karpinski, Viral B. ShahDeveloperJeff Bezanson, Stefan Karpinski, Viral B. Shah, and other contributors[2][3]FirstÂ appeared2012; 10Â years agoÂ (2012)[4]Stable release1.7.1[5]Â 
   /    22 December 2021; 41 days agoÂ (22 December 2021)Preview release1.8.0-DEV with daily updates[6] and 1.7.2[7] and 1.6.6[8] being worked on
   
Typing disciplineDynamic,[9] strong,[10] nominative, parametric, optionalImplementation languageJulia, C, C++, Scheme, LLVM[11]PlatformTierÂ 1: x86-64, IA-32; CUDA 10.1+[12]/Nvidia GPUs (for Linux and Windows) TierÂ 2: 64-bit ARM, 32-bit Windows (64-bit is tier 1) TierÂ 3: 32-bit ARM, PowerPC, AMD (ROCm) GPUs. Also supports oneAPI/Intel's GPUs and Google's TPUs,[13] and has web browser support (for JavaScript and WebAssembly),[14] and can work in Android. For more details see .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}"supported platforms".OSLinux, macOS, Windows and  FreeBSDLicenseMIT (core),[2] GPL v2;[11][15] a makefile option omits GPL libraries[16]Filename extensions.jlWebsiteJuliaLang.orgInfluenced by
C[4]
Dylan[17]
Lisp[4]
Lua[18]
Mathematica[4] (strictly its Wolfram Language[19][20])
MATLAB[4]
Perl[18]
Python[18]
R[4]
Ruby[18]
Scheme[21]

Julia is a high-level, high-performance, dynamic programming language. While it is a general-purpose language and can be used to write any application, many of its features are well suited for numerical analysis and computational science.[22][23][24][25]
Distinctive aspects of Julia's design include a type system with parametric polymorphism in a dynamic programming language; with multiple dispatch as its core programming paradigm. Julia supports concurrent, (composable) parallel and distributed computing (with or without using MPI[26] or the built-in corresponding[clarification needed][27] to "OpenMP-style" threads[28]), and direct calling of C and Fortran libraries without glue code. Julia uses a just-in-time (JIT) compiler that is referred to as "just-ahead-of-time" (JAOT) in the Julia community, as Julia compiles all code (by default) to machine code before running it.[29][30]
Julia is garbage-collected,[31] uses eager evaluation, and includes efficient libraries for floating-point calculations, linear algebra, random number generation, and regular expression matching. Many libraries are available, including some (e.g., for fast Fourier transforms) that were previously bundled with Julia and are now separate.[32]
Several development tools support coding in Julia, such as integrated development environments (e.g. Microsoft's Visual Studio Code, with extensions available adding Julia support to IDEs, e.g. providing debugging and linting[33] support); with integrated tools, e.g. a profiler (and flame graph support available[34][35] for the built-in one), debugger,[36] and the Rebugger.jl package "supports repeated-execution debugging"[a] and more.[38]

Contents

1 History

1.1 Notable uses
1.2 JuliaCon
1.3 Julia community
1.4 Sponsors
1.5 Julia Computing company


2 Language features
3 Interaction

3.1 Use with other languages


4 Package system
5 Implementation

5.1 Current and future platforms


6 See also
7 Notes
8 References
9 Further reading
10 External links



History[edit]
Work on Julia was started in 2009, by Jeff Bezanson, Stefan Karpinski, Viral B. Shah, and Alan Edelman, who set out to create a free language that was both high-level and fast. On 14 February 2012, the team launched a website with a blog post explaining the language's mission.[39] In an interview with InfoWorld in April 2012, Karpinski said of the name "Julia": "There's no good reason, really. It just seemed like a pretty name."[24] Bezanson said he chose the name on the recommendation of a friend,[40] then years later wrote:

.mw-parser-output .templatequote{overflow:hidden;margin:1em 0;padding:0 40px}.mw-parser-output .templatequote .templatequotecite{line-height:1.5em;text-align:left;padding-left:1.6em;margin-top:0}Maybe julia stands for âJeffâs uncommon lisp is automatedâ?[41]
Since the 2012 launch, the Julia community has grown, and as of 2020 "Julia has been downloaded by users at more than 10,000 companies and is used at more than 1,500 universities"[42] with over 35 million downloads as of JanuaryÂ 2022[update],[43] and the Julia package ecosystem has over 11.8 million lines of code (including docs and tests).[44] The JuliaCon academic conference for Julia users and developers has been held annually since 2014 with JuliaCon2020 welcoming over 28,900 unique viewers,[45] and then JuliaCon2021 breaking all previous records (with more than 300 JuliaCon2021 presentations available for free on YouTube, up from 162 the year before), and 43,000 unique viewers during the conference.[46]
Version 0.3 was released in August 2014, version 0.6 in June 2017.[47] Both Julia 0.7[48] and version 1.0 were released on 8 August 2018. Work on Julia 0.7 was a "huge undertaking" (e.g., because of an "entirely new optimizer"), and some changes were made to semantics, e.g. the iteration interface was simplified;[49] and the syntax changed a little (with the syntax now stable, and same for 1.x and 0.7).
Julia 1.0.0 was released on 8 August 2018. Bugfix releases are expected roughly monthly for supported versions, at the time Julia 1.0.1 up to 1.0.5 followed that schedule. Julia 1.1 was released in January 2019 with, e.g., a new "exception stack" language feature. Julia 1.2 was released in August 2019, and it has e.g. some built-in support for web browsers (for testing if running in JavaScript VM).[50] Julia 1.3 added e.g. composable multi-threaded parallelism and a binary artifacts system for Julia packages.[51]
Julia 1.4 allowed better syntax for array indexing to handle e.g. 0-based arrays, with A[begin+1] for the second element of array A.[52] The memory model was also changed.[53] Minor release 1.4.2 fixed e.g. a Zlib issue, doubling decompression speed.[54]
Julia 1.5 released in August 2020 added record and replay debugging support,[55] for Mozilla's rr tool.  It's a big release, with changed behavior in the REPL (soft scope), same as used in Jupyter, but fully compatible for non-REPL code. Most of the thread API was marked as stable, and with this release "arbitrary immutable objectsâregardless of whether they have fields that reference mutable objects or notâcan now be stack allocated",[56] reducing heap allocations, e.g. views are no longer allocating.  All versions have worked on performance, but especially work on Julia 1.5 targeted so-called "time-to-first-plot" performance, in general, the speed of compilation itself (as opposed to performance of the generated code), and adds tools for developers to improve package loading.[57] Julia 1.6 also improves such performance even more.
Packages that work in Julia 1.0.x should work in 1.1.x or newer, enabled by the forward compatible syntax guarantee. A notable exception was foreign language interface libraries like JavaCall.jl (for JVM languages like Java or Scala) and Rcall.jl (R language) due to some threading-related changes (at a time when all of the threading-functionality in Julia was marked experimental).[58]  The issue was especially complicated for Java's JVM, as it has some special expectations around how the stack address space is used. A workaround called JULIA_ALWAYS_COPY_STACKS was posted for Julia 1.3.0, while a full fix for Java is pending and has no set due date.[59] In addition, JVM versions since Java 11 do not exhibit this problem.[60]
Julia 1.6 was the largest release since 1.0, faster on many fronts, e.g. introduced parallel precompilation and faster loading of packages, in some cases "50x speedup in load times for large trees of binary artifacts".[61]
Julia 1.6.4 was released on 19 November 2021, and it and 1.7.0 fixes a security issue. As of version 1.7 Julia development is back to time-based releases.[62]
Julia 1.7.0 was released on 30 November 2021, with many changes, e.g. a new faster random-number generator (meaning users get a different stream of random numbers, unless they opt into using the older one, that is still also provided). Most users should use the latest point-release, currently 1.7.1. After 1.7 was released, 1.6 turned into the new long-term support (LTS) release, and only the most conservative users should use that release. No older release is currently supported, while at least one package, Cxx.jl, requires an older unsupported (1.3) release, which still works, and is still available, along with other old releases at the official Julia site. Julia 1.8 is the next milestone, due 15 February 2022[63] and the milestone for 2.0 currently has no set due date.[64]

Notable uses[edit]
Julia has attracted some high-profile users, from investment manager BlackRock, which uses it for time-series analytics, to the British insurer Aviva, which uses it for risk calculations. Since 2015, the Federal Reserve Bank of New York has used Julia to make models of the United States economy (including estimating COVID-19 shocks in 2021[65]), noting that the language made model estimation "about 10 times faster" than its previous MATLAB implementation. Julia's co-founders established Julia Computing in 2015 to provide paid support, training, and consulting services to clients, though Julia remains free to use. At the 2017 JuliaCon[66] conference, Jeffrey Regier, Keno Fischer and others announced[67] that the Celeste project[68] used Julia to achieve "peak performance of 1.54Â petaFLOPS using 1.3 million threads"[69] on 9300  Knights Landing (KNL) nodes of the Cori II (Cray XC40) supercomputer (then 6th fastest computer in the world).[70] Julia thus joins C, C++, and Fortran as high-level languages in which petaFLOPS computations have been achieved.
Three of the Julia co-creators are the recipients of the 2019 James H. Wilkinson Prize for Numerical Software (awarded every four years) "for the creation of Julia, an innovative environment for the creation of high-performance tools that enable the analysis and solution of computational science problems."[71] Also, Alan Edelman, professor of applied mathematics at MIT, has been selected to receive the 2019 IEEE Computer Society Sidney Fernbach Award "for outstanding breakthroughs in high-performance computing, linear algebra, and computational science and for contributions to the Julia programming language."[72]
In 2019, Julia Computing announced "the availability of the Julia programming language as a pre-packaged container on the NVIDIA GPU Cloud (NGC) container registry"[73] and a blog post at Nvidia's site states "Easily Deploy Julia on x86 and Arm [..] Julia offers a package for a comprehensive HPC ecosystem covering machine learning, data science, various scientific domains and visualization."[74]
Additionally, "Julia was selected by the Climate Modeling Alliance as the sole implementation language for their next generation global climate model. This multi-million dollar project aims to build an earth-scale climate model providing insight into the effects and challenges of climate change."[73]
Julia is used by NASA, e.g. for modeling spacecraft separation dynamics (15,000 times faster than before with Simulink/MATLAB[75])[76][77][78] and the Brazilian INPE for space mission planning and satellite simulation.[79] Another effort is working on an embedded project to control a satellite in space using Julia for attitude control.[citation needed]

JuliaCon[edit]
Since 2014,[80] the Julia Community has hosted an annual Julia Conference focused on developers and users. The first JuliaCon took place in Chicago and kickstarted the annual occurrence of the conference. Since 2014, the conference has taken place across a number of locations including MIT[81] and the University of Maryland, Baltimore.[82] The event audience has grown from a few dozen people to over 28,900 unique attendees[83] during JuliaCon 2020, which took place virtually. JuliaCon 2021 will take place virtually between July 28th and 30th 2021[84] with keynote addresses from Jan Vitek,[85] Xiaoye Sherry Li, and Soumith Chintala.[86]

Julia community[edit]
The Julia community[87] has a presence across multiple platforms: Twitter,[88] LinkedIn,[89] Facebook,[90] Slack,[91] Zulip,[92] Discord,[93] Discourse,[94] Stack Overflow,[95] YouTube,[96] and more.[97] Since May 2017, the Julia Language has employed a community manager; first Alex Arslan[98] who served until the end of 2019 and currently Logan Kilpatrick.[99]

Sponsors[edit]
The Julia language became a NumFOCUS fiscally sponsored project in 2014 in an effort to ensure the project's long-term sustainability.[100] Dr. Jeremy Kepner at MIT Lincoln Laboratory was the founding sponsor of the Julia project in its early days. In addition, funds from the Gordon and Betty Moore Foundation, the Alfred P. Sloan Foundation, Intel, and agencies such as NSF, DARPA, NIH, NASA, and FAA have been essential to the development of Julia.[101] Mozilla, the maker of Firefox web browser, with its research grants for H1 2019, sponsored "a member of the official Julia team" for the project "Bringing Julia to the Browser",[102] meaning to Firefox  and other web browsers.[103][104][105][106] The Julia Language is also supported by individual donors on GitHub.[107]

Julia Computing company[edit]
Julia Computing, Inc. was founded in 2015 by Viral B. Shah, Deepak Vinchhi, Alan Edelman, Jeff Bezanson, Stefan Karpinski and Keno Fischer.[108]
In June 2017, Julia Computing raised US$4.6Â million in seed funding from General Catalyst and Founder Collective,[109] the same month was "granted $910,000 by the Alfred P. Sloan Foundation to support open-source Julia development, including $160,000 to promote diversity in the Julia community",[110] and in December 2019 the company got $1.1Â million funding from the US government to "develop a neural component machine learning tool to reduce the total energy consumption of heating, ventilation, and air conditioning (HVAC) systems in buildings".[111] In July 2021, Julia Computing announced they raised a $24 million Series A led by Dorilton Ventures,[112] which also owns Formula 1 team Williams Racing, that partnered with Julia Computing. Williams' Commercial Director said: "Investing in companies building best-in-class cloud technology is a strategic focus for Dorilton and Julia's versatile platform, with revolutionary capabilities in simulation and modelling, is hugely relevant to our business. We look forward to embedding Julia Computing in the world's most technologically advanced sport".[113]

Language features[edit]
Julia is a general-purpose programming language,[114] while also originally designed for numerical/technical computing.
It is also useful for low-level systems programming,[115] as a specification language,[116] and for web programming[117] at both server[118][119] and client[120][14] side.
According to the official website, the main features of the language are:

Multiple dispatch: providing ability to define function behavior across many combinations of argument types
Dynamic type system: types for documentation, optimization, and dispatch
Performance approaching that of statically-typed languages like C
A built-in package manager
Lisp-like macros and other metaprogramming facilities
Call C functions directly: no wrappers or special APIs
Ability to interface with other languages, e.g. Python with PyCall,[b] R with RCall, and Java/Scala with JavaCall
Powerful shell-like abilities to manage other processes
Designed for parallel and distributed computing
Coroutines: lightweight green threading
User-defined types are as fast and compact as built-ins
Automatic generation of efficient, specialized code for different argument types
Elegant and extensible conversions and promotions for numeric and other types
Efficient support for Unicode, including but not limited to UTF-8
Multiple dispatch (also termed multimethods in Lisp) is a generalization of single dispatchÂ â  the polymorphic mechanism used in common object-oriented programming (OOP) languagesÂ â  that uses inheritance. In Julia, all concrete types are subtypes of abstract types, directly or indirectly subtypes of the Any type, which is the top of the type hierarchy. Concrete types can not themselves be subtyped the way they can in other languages; composition is used instead (see also inheritance vs subtyping).
By default, the Julia runtime must be pre-installed as user-provided source code is run. Alternatively, a standalone executable that needs no Julia source code can be built with PackageCompiler.jl.[124]
Julia's syntactic macros (used for metaprogramming), like Lisp macros, are more powerful than text-substitution macros used in the preprocessor of some other languages such as C, because they work at the level of abstract syntax trees (ASTs). Julia's macro system is hygienic, but also supports deliberate capture when desired (like for anaphoric macros) using the esc construct.
Julia draws significant inspiration from various dialects of Lisp, including Scheme and Common Lisp, and it shares many features with Dylan, also a multiple-dispatch-oriented dynamic language (which features an ALGOL-like free-form infix syntax rather than a Lisp-like prefix syntax, while in Julia "everything"[125] is an expression), and with Fortress, another numerical programming language (which features multiple dispatch and a sophisticated parametric type system). While Common Lisp Object System (CLOS) adds multiple dispatch to Common Lisp, not all functions are generic functions.
In Julia, Dylan, and Fortress, extensibility is the default, and the system's built-in functions are all generic and extensible. In Dylan, multiple dispatch is as fundamental as it is in Julia: all user-defined functions and even basic built-in operations like + are generic. Dylan's type system, however, does not fully support parametric types, which are more typical of the ML lineage of languages. By default, CLOS does not allow for dispatch on Common Lisp's parametric types; such extended dispatch semantics can only be added as an extension through the CLOS Metaobject Protocol. By convergent design, Fortress also features multiple dispatch on parametric types; unlike Julia, however, Fortress is statically rather than dynamically typed, with separate compiling and executing phases. The language features are summarized in the following table:




Language
Type system
Generic functions
Parametric types


Julia
Dynamic
Default
Yes


Common Lisp
Dynamic
Opt-in
Yes (but no dispatch)


Dylan
Dynamic
Default
Partial (no dispatch)


Fortress
Static
Default
Yes

An example of the extensibility of Julia, the Unitful.jl package adds support for units of measure to the language.

Interaction[edit]
The Julia official distribution includes an interactive command-line readâevalâprint loop (REPL),[126] with a searchable history, tab completion, and dedicated help and shell modes,[127] which can be used to experiment and test code quickly.[128] The following fragment represents a sample session example where strings are concatenated automatically by println:[129]

julia> p(x) = 2x^2 + 1; f(x, y) = 1 + 2p(x)y
julia> println("Hello world!", " I'm on cloud ", f(0, 4), " as Julia supports recognizable syntax!")
Hello world! I'm on cloud 9 as Julia supports recognizable syntax!

The REPL gives user access to the system shell and to help mode, by pressing ; or ? after the prompt (preceding each command), respectively. It also keeps the history of commands, including between sessions.[130] Code that can be tested inside the Julia's interactive section or saved into a file with a .jl extension and run from the command line by typing:[125]

 $ julia <filename>

Julia is supported by Jupyter, an online interactive "notebooks" environment,[131] and Pluto.jl, a "reactive notebook" (where notebooks are saved as pure Julia files), a possible replacement for the former kind.[132]

Use with other languages[edit]
Julia is in practice interoperable with many languages (e.g. majority of top 10â20 languages in popular use). Julia's ccall keyword is used to call C-exported or Fortran shared library functions individually, and packages to allow calling other languages e.g. Python, R, MATLAB, Java or Scala.[133] And packages for other languages, e.g. Python (or R or Ruby), i.e. pyjulia, to call to Julia.
Julia has support for Unicode 13.0[134] (or the latest Unicode 14.0 as of Julia 1.8-DEV) with UTF-8 used for strings (by default) and for Julia source code (only allowing legal UTF-8 in the latest version), meaning also allowing as an option common math symbols for many operators, such as â for the in operator.
Julia has packages supporting markup languages such as HTML (and also for HTTP), XML, JSON and BSON, and for databases and web use in general.

Package system[edit]
Julia has a built-in package manager and includes a default registry system.[135] Packages are most often distributed as source code hosted on GitHub, though alternatives can also be used just as well. Packages can also be installed as binaries, using artifacts.[136] Julia's package manager is used to query and compile packages, as well as managing environments. Federated package registries are supported, allowing registries other than the official to be added locally.[137]

Implementation[edit]
Julia's core is implemented in Julia and C, together with C++ for the LLVM dependency. The parsing and code-lowering are implemented in FemtoLisp, a Scheme dialect.[138] The LLVM compiler infrastructure project is used as the back end for generation of 64-bit or 32-bit optimized machine code depending on the platform Julia runs on. With some exceptions (e.g., PCRE), the standard library is implemented in Julia. The most notable aspect of Julia's implementation is its speed, which is often within a factor of two relative to fully optimized C code (and thus often an order of magnitude faster than Python or R).[139][140][141] Development of Julia began in 2009 and an open-source version was publicized in February 2012.[4][142]

Current and future platforms[edit]
While Julia has tier 1 macOS support, meaning for Intel-based Macs, the new Apple M1-based Macs only have tier 3 (experimental) support, with full support being worked on (neither does Windows on ARM).[143] However, Julia is claimed to work[144] "ok" on M1 Macs (at reduced performance) through the (automatic) use of Rosetta 2 (that needs to emulate Julia). Work on native full-speed M1 support (i.e. without emulation) is mostly done, and many programs may work if such a build of Julia is used, since all but one Julia tests pass (except for "Too many open files").
Since Julia uses JIT, Julia generates native machine code directly, before a function is first run (i.e. a different approach than compiling to bytecode, that you distribute by default, to be run on a virtual machine (VM), as with e.g. Java/JVM; then translated from the bytecode while running, as done by Dalvik on older versions of Android).
Julia has four support tiers.[145] All IA-32 processors completely implementing the i686 subarchitecture are supported and 64-bit x86-64 (aka amd64), i.e. all less than about a decade old are supported. ARMv8 (AArch64) processors are supported on second tier, and ARMv7 and ARMv6 (AArch32) are supported with some caveats (lower tier) for Julia 1.0.x and also had official executables for later versions, while 32-bit ARM support was later downgraded to tier 3 (however, unofficial binaries are available for Julia 1.5.1[146]).[147] CUDA (i.e. Nvidia GPUs; implementing PTX) has tier 1 support, with the help of an external package. There are also additionally packages supporting other accelerators, such as Google's TPUs,[148] and some Intel (integrated) GPUs, through oneAPI.jl,[149] and AMD's GPUs have support with e.g. OpenCL; and experimental support for the AMD ROCm stack.[150] Julia's downloads page provides executables (and source) for all the officially supported platforms.
On some platforms, Julia may need to be compiled from source code (e.g., the original Raspberry Pi), with specific build options, which has been done and unofficial pre-built binaries (and build instructions) are available.[151][152] Julia has been built 
on several ARM platforms. PowerPC (64-bit) has tier 3 support, meaning it "may or may not build".
Julia is now supported in Raspbian[153] while support is better for newer Pis, e.g., those with ARMv7 or newer; the Julia support is promoted by the Raspberry Pi Foundation.[154]
There is also support for web browsers/JavaScript through JSExpr.jl;[120] and the alternative language of web browsers, WebAssembly, has minimal support[14] for several upcoming external Julia projects.
Julia can compile to ARM; thus, in theory, Android apps can be made with the NDK, but for now Julia has been made to run under Android only indirectly, i.e. with a Ubuntu chroot on Android.[155]

See also[edit]
Comparison of numerical-analysis software
Comparison of statistical packages
Differentiable programming
Notes[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^  [With Rebugger.jl] you can:
test different modifications to the code or arguments as many times as you want; you are never forced to exit âdebug modeâ and save your file
run the same chosen block of code repeatedly (perhaps trying out different ways of fixing a bug) without needing to repeat any of the âsetupâ work that might have been necessary to get to some deeply nested method in the original call stack.[37]

^ For calling Python 3 (the older default to call Python 2, is also still supported)[121][122]  and calling in the other direction, from Python to Julia, is also supported with pyjulia.[123]


References[edit]


^ "Smoothing data with Julia's @generated functions". 5 November 2015. Retrieved 9 December 2015. Julia's generated functions are closely related to the multistaged programming (MSP) paradigm popularized by Taha and Sheard, which generalizes the compile time/run time stages of program execution by allowing for multiple stages of delayed code execution.

^ Jump up to: a b "LICENSE.md". GitHub. September 2017.

^ "Contributors to JuliaLang/julia". GitHub.

^ Jump up to: a b c d e f g "Why We Created Julia". Julia website. February 2012. Retrieved 7 February 2013.

^ https://github.com/JuliaLang/julia/releases/tag/v1.7.1; publication date: 23 December 2021; retrieved: 4 January 2022.

^ "Set VERSION to 1.8.0-DEV, move 1.7 NEWS to HISTORY by KristofferC Â· Pull Request #41122 Â· JuliaLang/julia". GitHub. Retrieved 15 November 2021.

^ "[release-1.7] Set VERSION to 1.7.2 prerelease by ararslan Â· Pull Request #43528 Â· JuliaLang/julia". GitHub. Retrieved 3 January 2022.

^ "[release-1.6] Set VERSION to 1.6.6 prerelease by ararslan Â· Pull Request #43495 Â· JuliaLang/julia". GitHub. Retrieved 3 January 2022.

^ Engheim, Erik (17 November 2017). "Dynamically Typed Languages Are Not What You Think". Medium. Retrieved 27 January 2021.

^ Engheim, Erik (17 November 2017). "Dynamically Typed Languages Are Not What You Think". Medium. Retrieved 27 January 2022.

^ Jump up to: a b "Julia". Julia. NumFocus project. Retrieved 9 December 2016. Julia's Base library, largely written in Julia itself, also integrates mature, best-of-breed open source C and Fortran libraries for ...

^ "NVIDIA CUDA â JuliaGPU". juliagpu.org. Retrieved 17 January 2022. we have shown the performance to approach and even sometimes exceed that of CUDA C on a selection of applications from the Rodinia benchmark suite

^ "External Method Tables by Keno Â· Pull Request #39697 Â· JuliaLang/julia". GitHub. Retrieved 9 June 2021.

^ Jump up to: a b c Fischer, Keno (22 July 2019). "Running julia on wasm". GitHub. Retrieved 25 July 2019.

^ "Non-GPL Julia?". Groups.google.com. Retrieved 31 May 2017.

^ "Introduce USE_GPL_LIBS Makefile flag to build Julia without GPL libraries". GitHub. Note that this commit does not remove GPL utilities such as git and busybox that are included in the Julia binary installers on Mac and Windows. It allows building from source with no GPL library dependencies.

^ Stokel-Walker, Chris. "Julia: The Goldilocks language". Increment. Stripe. Retrieved 23 August 2020.

^ Jump up to: a b c d "Home Â· The Julia Language". docs.julialang.org. Retrieved 15 August 2018.

^ "Programming Language Network". GitHub. Retrieved 6 December 2016.

^ "What Should We Call the Language of Mathematica?âStephen Wolfram Writings". writings.stephenwolfram.com. Retrieved 24 June 2021.

^ "JuliaCon 2016". JuliaCon. Retrieved 6 December 2016. He has co-designed the programming language Scheme, which has greatly influenced the design of Julia

^ Bryant, Avi (15 October 2012). "Matlab, R, and Julia: Languages for data analysis". O'Reilly Strata. Archived from the original on 26 April 2014.

^ Singh, Vicky (23 August 2015). "Julia Programming Language â A True Python Alternative". Technotification.

^ Jump up to: a b Krill, Paul (18 April 2012). "New Julia language seeks to be the C for scientists". InfoWorld.

^ Finley, Klint (3 February 2014). "Out in the Open: Man Creates One Programming Language to Rule Them All". Wired.

^ "GitHub - JuliaParallel/MPI.jl: MPI wrappers for Julia". Parallel Julia. Retrieved 22 September 2019.

^ "Questions about getting started with parallel computing". JuliaLang. 16 June 2019. Retrieved 8 October 2019.

^ "Julia and Concurrency". JuliaLang. 24 June 2019. Retrieved 22 September 2019.

^ Fischer, Keno; Nash, Jameson. "Growing a Compiler - Getting to Machine Learning from a General Purpose Compiler". Julia Computing Blog. Retrieved 11 April 2019.

^ "Creating a sysimage". PackageCompiler Documentation.

^ "Suspending Garbage Collection for Performance...good idea or bad idea?". Groups.google.com. Retrieved 31 May 2017.

^ now available with using FFTW in current versions (That dependency, is one of many which, was moved out of the standard library to a package because it is GPL licensed, and thus is not included in Julia 1.0 by default.) "Remove the FFTW bindings from Base by ararslan Â· Pull Request #21956 Â· JuliaLang/julia". GitHub. Retrieved 1 March 2018.

^ "ANN: linter-julia plugin for Atom / Juno". JuliaLang. 15 February 2017. Retrieved 10 April 2019.

^ Holy, Tim (13 September 2019). "GitHub - timholy/ProfileView.jl: Visualization of Julia profiling data". GitHub. Retrieved 22 September 2019.

^ Gregg, Brendan (20 September 2019). "GitHub - brendangregg/FlameGraph: Stack trace visualizer". GitHub. Retrieved 22 September 2019.

^ "A Julia interpreter and debugger". julialang.org. Retrieved 10 April 2019.

^ "[ANN] Rebugger: interactive debugging for Julia 0.7/1.0". JuliaLang. 21 August 2018. Retrieved 10 April 2019.

^ "Home Â· Rebugger.jl". timholy.github.io. Retrieved 10 April 2019.

^ Jeff Bezanson, Stefan Karpinski, Viral Shah, Alan Edelman. "Why We Created Julia". JuliaLang.org. Retrieved 5 June 2017.{{cite web}}:  CS1 maint: uses authors parameter (link)

^ Torre, Charles. "Stefan Karpinski and Jeff Bezanson on Julia". Channel 9. MSDN. Retrieved 4 December 2018.

^ Bezanson, Jeff (2 April 2021). "CAS Benchmarks". discourse.julialang.org. Julia. Retrieved 2 April 2021.

^ "Newsletter August 2020 â Julia Computing". 14 August 2020. Archived from the original on 21 September 2020. Retrieved 2 September 2021.

^ "Newsletter January 2022 - Julia Growth Statistics - Julia Computing". juliacomputing.com. Retrieved 26 January 2022.

^ "Newsletter August 2021 - Julia Computing". juliacomputing.com. Retrieved 2 September 2021.

^ "JuliaCon 2020 Wrap-up". julialang.org. 11 August 2020. Retrieved 20 December 2020.

^ "JuliaCon 2021 Highlights". julialang.org. Retrieved 6 September 2021.

^ "Julia 0.6 Release Announcement".

^ "What is Julia 0.7? How does it relate to 1.0?". JuliaLang. 26 March 2018. Retrieved 17 October 2018.

^ Davies, Eric. "Writing Iterators in Julia 0.7". julialang.org. Retrieved 5 August 2018.

^ "Sys.isjsvm([os])". The Julia Language. 20 August 2019. Retrieved 20 August 2019. Predicate for testing if Julia is running in a JavaScript VM (JSVM), including e.g. a WebAssembly JavaScript embedding in a web browser.

^ Bezanson, Jeff; Karpinski, Stefan; Shah, Viral; Edelman, Alan. "The Julia Language". julialang.org. Retrieved 13 December 2019.

^ "support a[begin] for a[firstindex(a)] by stevengj Â· Pull Request #33946 Â· JuliaLang/julia". GitHub. Retrieved 7 April 2020.

^ quinnj. "For structs with all isbits or isbitsunion fields, allow them to be stored inline in arrays  Â· Pull Request #32448 Â· JuliaLang/julia". GitHub. Retrieved 7 April 2020. I still keep running into problems that this causes internally because it was a breaking change that changes assumptions made by some users and inference/codegen.

^ "Bump Zlib BB release to 'v1.2.11+10' which enables '-O3' optimisation by giordano Â· Pull Request #35979 Â· JuliaLang/julia". GitHub. Retrieved 25 May 2020.

^ Fischer, Keno (2 May 2020). "Coming in Julia 1.5: Time Traveling (Linux) Bug Reporting". julialang.org. Retrieved 5 May 2020. Overhead for recording of single threaded processes is generally below 2x, most often between 2% and 50% (lower for purely numerical calculations, higher for workloads that interact with the OS). Recording multiple threads or processes that share memory (as opposed to using kernel-based message passing) is harder. [..] As expected, the threads test is the worst offender with about 600% overhead.

^ Jeff Bezanson, Stefan Karpinski, Viral Shah, Alan Edelman etÂ al. "The Julia Language". julialang.org. Retrieved 14 August 2020. There are some size-based limits to which structs can be stack allocated, but they are unlikely to be exceeded in practice.{{cite web}}:  CS1 maint: uses authors parameter (link)

^ Jeff Bezanson, Stefan Karpinski, Viral Shah, Alan Edelman etÂ al. "The Julia Language". julialang.org. Retrieved 16 September 2020.{{cite web}}:  CS1 maint: uses authors parameter (link)

^ "Fix for C stack checking issues on 1.1 by simonbyrne Â· Pull Request #293 Â· JuliaInterop/RCall.jl". GitHub. Retrieved 10 August 2019.

^ "JVM fails to load in 1.1 (JavaCall.jl) Â· Issue #31104 Â· JuliaLang/julia". GitHub. Retrieved 18 August 2019. JeffBezanson modified the milestones: 1.3, 1.4

^ "StackOverflowError in 'JavaCall.init' for Julia 1.1.0 Â· Issue #96 Â· JuliaInterop/JavaCall.jl". GitHub. Retrieved 21 October 2019.

^ Jeff Bezanson, Stefan Karpinski, Viral Shah, Alan Edelman etÂ al. "Julia 1.6 Highlights". julialang.org. Retrieved 26 March 2021.{{cite web}}:  CS1 maint: uses authors parameter (link)

^ "Upgrade to OpenBLAS 0.3.13 Â· Pull Request #39216 Â· JuliaLang/julia". GitHub. Retrieved 26 April 2021. Given that 1.7 is not too far away (timed releases going forward)

^ "Milestones - JuliaLang/julia". GitHub. Retrieved 17 January 2022.

^ "The future of Julia, 1.6, 1.7-rc1, 1.8, 1.9, 1.10 and 2.0 and LTS". JuliaLang. 14 September 2021. Retrieved 17 January 2022. I suspect at some point 1.x work will slow down a bit and weâll get some more capacity to stop and think about 2.0 kinds of changes, but that time just hasnât happened yet.

^ "Release v1.3.0 Â· FRBNY-DSGE/DSGE.jl". GitHub. Retrieved 3 January 2022. New subspecs of Model1002 for estimating the DSGE with COVID-19 shocks

^ "JuliaCon 2017". juliacon.org. Retrieved 4 June 2017.

^ Fisher, Keno. "The Celeste Project". juliacon.org. Retrieved 24 June 2017.

^ Regier, Jeffrey; Pamnany, Kiran; Giordano, Ryan; Thomas, Rollin; Schlegel, David; McAulife, Jon; Prabat (2016). "Learning an Astronomical Catalog of the Visible Universe through Scalable Bayesian Inference". arXiv:1611.03404 [cs.DC].

^ Claster, Andrew (12 September 2017). "Julia Joins Petaflop Club". Julia Computing (Press release). Celeste is written entirely in Julia, and the Celeste team loaded an aggregate of 178 terabytes of image data to produce the most accurate catalog of 188 million astronomical objects in just 14.6 minutes [..] a performance improvement of 1,000x in single-threaded execution.

^ Shah, Viral B. (15 November 2017). "Viral B. Shah on Twitter". Retrieved 15 September 2019. @KenoFischer is speaking on Celeste in the @Intel theatre at @Supercomputing. 0.65M cores, 56 TB of data, Cori - world's 6th largest supercomputer.

^ "Julia language co-creators win James H. Wilkinson Prize for Numerical Software". MIT News. Retrieved 22 January 2019.

^ "Alan Edelman of MIT Recognized with Prestigious 2019 IEEE Computer Society Sidney Fernbach Award | IEEE Computer Society" (Press release). 1 October 2019. Retrieved 9 October 2019.

^ Jump up to: a b "Julia Computing Brings Support for NVIDIA GPU Computing on Arm Powered Servers - Julia Computing". juliacomputing.com (Press release). Retrieved 2 September 2021.

^ Patel, Chintan (19 November 2019). "NVIDIA Expands Support for Arm with HPC, AI, Visualization Containers on NGC | NVIDIA Blog". The Official NVIDIA Blog. Retrieved 3 December 2019.

^ "ModelingToolkit, Modelica, and Modia: The Composable Modeling Future in Julia". Stochastic Lifestyle. 19 April 2021. Retrieved 6 September 2021. NASA Launch Services Program who saw a 15,000x acceleration by moving from Simulink to ModelingToolkit.jl

^ Modeling Spacecraft Separation Dynamics in Julia - Jonathan Diegelman, retrieved 6 September 2021

^ Circuitscape/Circuitscape.jl, Circuitscape, 25 February 2020, retrieved 26 May 2020

^ "Conservation through Coding: 5 Questions with Viral Shah | Science Mission Directorate". science.nasa.gov. Retrieved 26 May 2020.

^ JuliaSpace/SatelliteToolbox.jl, JuliaSpace, 20 May 2020, retrieved 26 May 2020

^ "JuliaCon 2014". juliacon.org. Retrieved 20 June 2021.

^ "JuliaCon 2016 at MIT". mit.edu. Retrieved 20 June 2021.

^ "JuliaCon 2019 at UMB". technical.ly. 23 July 2019. Retrieved 20 June 2021.

^ "JuliaCon 2020 wrap up". julialang.org. Retrieved 20 June 2021.

^ "JuliaCon 2021". Juliacon.org. Retrieved 20 June 2021.

^ "Jan Vitek Homepage". janvitek.org. Retrieved 20 June 2021.

^ "Soumith Chintala Homepage". soumith.ch. Retrieved 20 June 2021.

^ "Julia Community". julialang.org. Retrieved 5 July 2021.

^ "Julia Twitter". twitter.com. Retrieved 5 July 2021.

^ "Julia Language on LinkedIn". Linkedin.com. Retrieved 5 July 2021.

^ "Julia Language on Facebook". Facebook.com. Retrieved 5 July 2021.

^ "Julia Language on Slack". julialang.org. Retrieved 5 July 2021.

^ "Julia Language on Zulip". zulipchat.com. Retrieved 5 July 2021.

^ "Julia Language on Discord". discord.com. Retrieved 5 July 2021.

^ "Julia Language on Discourse". julialang.org. Retrieved 5 July 2021.

^ "Julia Language on Stack Overflow". stackoverflow.com. Retrieved 5 July 2021.

^ "Julia Language on YouTube". youtube.com. Retrieved 5 July 2021.

^ "Julia Language other Channels". julialang.org. Retrieved 5 July 2021.

^ "Alex Arslan joins the Julia Language as Community Manager". julialang.org. 16 May 2017. Retrieved 5 July 2021.

^ "Logan Kilpatrick joins the Julia Language as Community Manager". julialang.org. 27 February 2020. Retrieved 5 July 2021.

^ "Julia: NumFOCUS Sponsored Project since 2014". numfocus.org. Retrieved 29 September 2020.

^ "The Julia Language". julialang.org. Retrieved 22 September 2019.

^ Cimpanu, Catalin. "Mozilla is funding a way to support Julia in Firefox". ZDNet. Retrieved 22 September 2019.

^ "Julia in Iodide". alpha.iodide.io. Retrieved 22 September 2019.

^ "Language plugins - Iodide Documentation". iodide-project.github.io. Retrieved 22 September 2019.

^ "Mozilla Research Grants 2019H1". Mozilla. Retrieved 22 September 2019. running language interpreters in WebAssembly. To further increase access to leading data science tools, weâre looking for someone to port R or Julia to WebAssembly and to attempt to provide a level 3 language plugin for Iodide: automatic conversion of data basic types between R/Julia and Javascript, and the ability to share class instances between R/Julia and Javascript.

^ "Literate scientific computing and communication for the web: iodide-project/iodide". iodide. 20 September 2019. Retrieved 22 September 2019. We envision a future workflow that allows you to do your data munging in Python, fit a quick model in R or JAGS, solve some differential equations in Julia, and then display your results with a live interactive d3+JavaScript visualizationÂ ... and all that within within a single, portable, sharable, and hackable file.

^ "Sponsor the Julia Language". github.com. Retrieved 5 June 2021.

^ "About Us â Julia Computing". juliacomputing.com. Retrieved 12 September 2017.

^ "Julia Computing Raises $4.6M in Seed Funding". Archived from the original on 10 May 2019.

^ "Julia Computing Awarded $910,000 Grant by Alfred P. Sloan Foundation, Including $160,000 for STEM Diversity". juliacomputing.com. 26 June 2017. Retrieved 28 July 2020.

^ "DIFFERENTIATEâDesign Intelligence Fostering Formidable Energy Reduction (and) Enabling Novel Totally Impactful Advanced Technology Enhancements" (PDF).

^ "Julia Computing raises $24 mln in funding round led by Dorilton Ventures". Reuters. 19 July 2021.

^ "Williams welcomes Julia Computing as Dorilton Ventures partner". www.williamsf1.com (Press release). Retrieved 2 September 2021.

^ "The Julia Language" (official website). General Purpose [..] Julia lets you write UIs, statically compile your code, or even deploy it on a webserver.

^ Green, Todd (10 August 2018). "Low-Level Systems Programming in High-Level Julia". Archived from the original on 5 November 2018. Retrieved 5 November 2018.

^ Moss, Robert (26 June 2015). "Using Julia as a Specification Language for the Next-Generation Airborne Collision Avoidance System" (PDF). Archived from the original on 1 July 2015. Retrieved 29 June 2015. Airborne collision avoidance system

^ "Announcing Dash for Julia". plotly (Press release). 26 October 2020. Retrieved 2 September 2021.

^ Anaya, Richard (28 April 2019). "How to create a multi-threaded HTTP server in Julia". Medium. Retrieved 25 July 2019. In summary, even though Julia lacks a multi-threaded server solution currently out of box, we can easily take advantage of its process distribution features and a highly popular load balancing tech to get full CPU utilization for HTTP handling.

^ Anthoff, David (1 June 2019). "Node.js installation for julia". GitHub. Retrieved 25 July 2019.

^ Jump up to: a b "Translate Julia to JavaScript". JuliaGizmos. 7 July 2019. Retrieved 25 July 2019.

^ "PyCall.jl". stevengj. github.com. 7 November 2021.

^ "Using PyCall in julia on Ubuntu with python3". julia-users at Google Groups. to import modules (e.g., python3-numpy)

^ "python interface to julia". GitHub. 6 November 2021.

^ "GitHub - JuliaLang/PackageCompiler.jl: Compile your Julia Package". The Julia Language. 14 February 2019. Retrieved 15 February 2019.

^ Jump up to: a b "Learn Julia in Y Minutes". Learnxinyminutes.com. Retrieved 31 May 2017.

^ "The Julia REPL Â· The Julia Language". docs.julialang.org. Retrieved 22 September 2019.

^ "Introducing Julia/The REPL - Wikibooks, open books for an open world". en.wikibooks.org. Retrieved 22 September 2019. you can install the Julia package OhMyREPL.jl (github.com/KristofferC/OhMyREPL.jl) which lets you customize the REPL's appearance and behaviour {{cite web}}: External link in |quote= (help)

^ "Getting Started Â· The Julia Language". docs.julialang.org. Retrieved 15 August 2018.

^ See also: docs.julialang.org/en/v1/manual/strings/ for string interpolation and the string(greet, ", ", whom, ".\n") example for preferred ways to concatenate strings.  Julia has the println and print functions, but also a @printf macro (i.e., not in function form) to eliminate run-time overhead of formatting (unlike the same function in C).

^ "Julia Documentation". JuliaLang.org. Retrieved 18 November 2014.

^ "Project Jupyter".

^ Boudreau, Emmett (16 October 2020). "Could Pluto Be A Real Jupyter Replacement?". Medium. Retrieved 8 December 2020.

^ "Julia and Spark, Better Together". juliacomputing.com. 2 June 2020. Retrieved 14 July 2020.

^ "Unicode 13 support by stevengj Â· Pull Request #179 Â· JuliaStrings/utf8proc". GitHub. Retrieved 29 March 2020.

^ "JuliaRegistries / General". GitHub. Retrieved 30 April 2020.

^ "Pkg.jl - Artifacts". Retrieved 4 June 2020.

^ "Pkg.jl - Registries". Retrieved 30 April 2020.

^ Bezanson, Jeff (6 June 2019). "JeffBezanson/femtolisp". GitHub. Retrieved 16 June 2019.

^ "Julia: A Fast Dynamic Language for Technical Computing" (PDF). 2012.

^ "How To Make Python Run As Fast As Julia". 2015.

^ "Basic Comparison of Python, Julia, R, Matlab and IDL". 2015. Archived from the original on 27 November 2017.

^ Gibbs, Mark (9 January 2013). "Pure and Julia are cool languages worth checking out". Network World (column). Retrieved 7 February 2013.

^ "Darwin/ARM64 tracking issue Â· Issue #36617 Â· JuliaLang/julia". GitHub. Retrieved 8 December 2020.

^ Carlton, Sam (8 December 2020), ThatGuySam/doesitarm, retrieved 8 December 2020

^ "Julia Downloads". julialang.org. Retrieved 17 May 2019.

^ "Bring Julia code to embedded hardware (ARM)". JuliaLang. 23 January 2019. Retrieved 30 March 2021.

^ "julia/arm.md". The Julia Language. 29 November 2019. Retrieved 29 November 2019. A list of known issues for ARM is available. {{cite web}}: External link in |quote= (help)

^ "Julia on TPUs". JuliaTPU. 26 November 2019. Retrieved 29 November 2019.

^ "Introducing: oneAPI.jl â JuliaGPU". juliagpu.org. Retrieved 6 September 2021.

^ "AMD ROCm Â· JuliaGPU". juliagpu.org. Retrieved 20 April 2020.

^ 262588213843476. "Build Julia for RaspberryPi Zero". Gist. Retrieved 14 August 2020.{{cite web}}:  CS1 maint: numeric names: authors list (link)

^ "JuliaBerry: Julia on the Raspberry Pi". juliaberry.github.io. Retrieved 14 August 2020.

^ "Julia available in Raspbian on the Raspberry Pi". Julia works on all the Pi variants, we recommend using the Pi 3.

^ "Julia language for Raspberry Pi". Raspberry Pi Foundation. 12 May 2017.

^ "Using Julia on Android?". JuliaLang. 27 September 2019. Retrieved 2 October 2019.


Further reading[edit]
Nagar, Sandeep (2017). Beginning Julia Programming: For Engineers and Scientists. Springer. ISBNÂ 9781484231715.
Bezanson, J; Edelman, A; Karpinski, S; Shah, V. B (2017). "Julia: A fresh approach to numerical computing". SIAM Review. 59 (1): 65â98. arXiv:1411.1607. CiteSeerXÂ 10.1.1.760.8894. doi:10.1137/141000671. S2CIDÂ 13026838.
Joshi, Anshul (2016). Julia for Data Science ï¼ Explore the world of data science from scratch with Julia by your side. Packt. ISBNÂ 9781783553860.
External links[edit]



Wikibooks has a book on the topic of: Introducing Julia

Official website
julia on GitHub
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteProgramming languages
Comparison
Timeline
History

Ada
ALGOL
APL
Assembly
BASIC
C
C++
C#
COBOL
Erlang
Forth
Fortran
Go
Haskell
Java
JavaScript
Kotlin
Lisp
Lua
ML
Pascal
Perl
PHP
Prolog
Python
R
Ruby
Rust
SQL
Shell
Simula
Smalltalk
Swift
more...

 Category
 Lists: Alphabetical
Categorical
Generational
Non-English-based

vteFree and open-source softwareGeneral
Alternative terms for free software
Comparison of open-source and closed-source software
Comparison of source-code-hosting facilities
Free software
Free software project directories
Gratis versus libre
Long-term support
Open-source software
Open-source software development
Outline
Timeline
Softwarepackages
Audio
Bioinformatics
Codecs
Configuration management
Drivers
Graphics
Wireless
Geophysics
Health
Mathematics
Office Suites
Operating systems
Programming languages
Routing
Television
Video games
Web applications
E-commerce
Android apps
iOS apps
Commercial
Trademarked
Formerly proprietary
Formerly open-source
Community
Free software movement
History
Open-source-software movement
Events
Organisations
Free Software Movement of India
Free Software Foundation
Licenses
AFL
Apache
APSL
Artistic
Beerware
BSD
Creative Commons
CDDL
EPL
Free Software Foundation
GNU GPL
GNU LGPL
ISC
MIT
MPL
Python
Python Software Foundation License
Shared Source Initiative
Sleepycat
Unlicense
WTFPL
zlib
Types and standards
Comparison of licenses
Contributor License Agreement
Copyleft
Debian Free Software Guidelines
Definition of Free Cultural Works
Free license
The Free Software Definition
The Open Source Definition
Open-source license
Permissive software license
Public domain
Viral license

Challenges
Digital rights management
Hardware restrictions
License proliferation
Mozilla software rebranding
Proprietary device drivers
Proprietary firmware
Proprietary software
SCO/Linux controversies
Software patents
Software security
Trusted Computing
Related topics
Forking
GNU Manifesto
Microsoft Open Specification Promise
Open-core model
Open-source hardware
Shared Source Initiative
Source-available software
The Cathedral and the Bazaar
Revolution OS

 Portal
 Category

vteNumerical-analysis softwareFree
Advanced Simulation Library
ADMB
Chapel
Euler
Fortress
FreeFem++
FreeMat
Genius
Gmsh
GNU Octave
gretl
Julia
Jupyter (Julia, Python, R; IPython)
MFEM
OpenFOAM
Python
R
SageMath
Salome
ScicosLab
Scilab
X10
Weka
Proprietary
DADiSP
FEATool Multiphysics
GAUSS
LabVIEW
Maple
Mathcad
Mathematica
MATLAB
Speakeasy
VisSim

Comparison

vteMathematical optimization softwareData formats
Mathematica
MPS
nl
sol
Modeling tools
AIMMS
AMPL
APMonitor
ECLiPSe-CLP
GEKKO
GAMS
GNU MathProg
JuMP
LINDO
OPL
Mathematica
OptimJ
PuLP
Pyomo
TOMLAB
Xpress Mosel
ZIMPL
LP, MILPâ solvers
APOPTâ
ANTIGONEâ
Artelys Knitroâ
BCPâ
CLP
CBCâ
CPLEXâ
FortMPâ
GCGâ
GLOPâ
GLPK/GLPSOLâ
LINDOâ
Lp_solve
LOQO
Mathematica
MINOS
MINTOâ
MOSEKâ
NAG
SCIPâ
SoPlex
Octeract Engineâ
SYMPHONYâ
Xpress Optimizerâ
QP, MIQPâ solvers
APOPTâ
ANTIGONEâ
Artelys Knitroâ
CBCâ
CLP
CPLEXâ
FortMPâ
IPOPT
LINDOâ
Mathematica
MINOS
MOSEKâ
NAG
Octeract Engineâ
SCIPâ
Xpress Optimizerâ
QCP, MIQCPâ solvers
APOPTâ
ANTIGONEâ
Artelys Knitroâ
CPLEXâ
IPOPT
LINDOâ
Mathematica
MINOS
MOSEKâ
NAG
SCIPâ
Octeract Engineâ
Xpress Optimizerâ
Xpress NonLinearâ
SOCP, MISOCPâ solvers
Artelys Knitroâ
CPLEXâ
LINDOâ
LOQO
Mathematica
MOSEKâ
NAG
SCIPâ
Xpress Optimizerâ
SDP, MISDPâ solvers
Mathematica
MOSEK
NAG
NLP, MINLPâ solvers
AOAâ
APOPTâ
ANTIGONEâ
Artelys Knitroâ
BARONâ
Couenneâ
Galahad library
IPOPT
LINDOâ
LOQO
MIDACOâ
MINOS
NAG
NLPQLP
NPSOL
SCIPâ
SNOPTâ
Octeract Engineâ
WORHP
Xpress NonLinearâ
GO solvers
ANTIGONEâ
BARON
Couenneâ
Mathematica
LINDO
 SCIP
Octeract Engine
CP solvers
Artelys Kalis
Comet
CPLEX CP Optimizer
Gecode
Mathematica
JaCoP
Xpress Kalis
Metaheuristic solvers
OptaPlanner

List of optimization software
Comparison of optimization software

vteStatistical softwarePublic domain
Dataplot
Epi Info
CSPro
X-12-ARIMA
Open-source
ADMB
DAP
gretl
JASP
JAGS
JMulTi
Julia
Jupyter (Julia, Python, R)
GNU Octave
OpenBUGS
Orange
PSPP
Python (statsmodels, PyMC3, IPython, IDLE)
R (RStudio)
SageMath
SimFiT
SOFA Statistics
Stan
XLispStat
Freeware
BV4.1
CumFreq
SegReg
XploRe
WinBUGS
CommercialCross-platform
Data Desk
GAUSS
GraphPad InStat
GraphPad Prism
IBM SPSS Statistics
IBM SPSS Modeler
JMP
Maple
Mathcad
Mathematica
MATLAB
OxMetrics
RATS
Revolution Analytics
SAS
SmartPLS
Stata
StatView
SUDAAN
S-PLUS
TSP
World Programming System (WPS)
Windows only
BMDP
EViews
GenStat
LIMDEP
LISREL
MedCalc
Microfit
Minitab
MLwiN
NCSS
SHAZAM
SigmaStat
Statistica
StatsDirect
StatXact
SYSTAT
The Unscrambler
UNISTAT
Excel add-ons
Analyse-it
UNISTAT for Excel
XLfit
RExcel

Category
Comparison

vteDifferentiable computingGeneral
Differentiable programming
Neural Turing machine
Differentiable neural computer
Automatic differentiation
Neuromorphic engineering
Cable theory
Pattern recognition
Computational learning theory
Tensor calculus
Concepts
Gradient descent
SGD
Clustering
Regression
Overfitting
Adversary
Attention
Convolution
Loss functions
Backpropagation
Normalization
Activation
Softmax
Sigmoid
Rectifier
Regularization
Datasets
Augmentation
Programming languages
Python
Julia
Application
Machine learning
Artificial neural network
Deep learning
Scientific computing
Artificial Intelligence
Hardware
IPU
TPU
VPU
Memristor
SpiNNaker
Software library
TensorFlow
PyTorch
Keras
Theano
ImplementationAudio-visual
AlexNet
WaveNet
Human image synthesis
HWR
OCR
Speech synthesis
Speech recognition
Facial recognition
AlphaFold
DALL-E
Verbal
Word2vec
Transformer
BERT
NMT
Project Debater
Watson
GPT-2
GPT-3
Decisional
AlphaGo
AlphaZero
Q-learning
SARSA
OpenAI Five
Self-driving car
MuZero
Action selection
Robot control
People
Alex Graves
Ian Goodfellow
Yoshua Bengio
Geoffrey Hinton
Yann LeCun
Andrew Ng
Demis Hassabis
David Silver
Fei-Fei Li
Organizations
DeepMind
OpenAI
MIT CSAIL
Mila
Google Brain
FAIR

 Portals
Computer programming
Technology
 Category
Artificial neural networks
Machine learning

Authority control National libraries
United States
Other
Faceted Application of Subject Terminology





<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Julia_(programming_language)&oldid=1068350733"
		Categories: 2012 softwareArray programming languagesComputational notebookCross-platform softwareData mining and machine learning softwareData-centric programming languagesDynamically typed programming languagesFree compilers and interpretersFree computer librariesFree data analysis softwareFree data visualization softwareFree software programmed in CFree software programmed in JuliaFree software projectsFree statistical softwareFunctional languagesHigh-level programming languagesHomoiconic programming languagesLisp programming language familyMulti-paradigm programming languagesNumerical analysis software for LinuxNumerical analysis software for MacOSNumerical analysis software for WindowsNumerical librariesNumerical linear algebraNumerical programming languagesObject-oriented programming languagesParallel computingProcedural programming languagesProgramming languagesProgramming languages created in 2012Software using the MIT licenseStatistical programming languagesText-oriented programming languagesProgramming languages supporting units of measureHidden categories: CS1 maint: uses authors parameterCS1 errors: external linksCS1 maint: numeric names: authors listArticles with short descriptionShort description matches WikidataUse dmy dates from October 2015Official website different in Wikidata and WikipediaWikipedia articles needing clarification from July 2020Articles containing potentially dated statements from January 2022All articles containing potentially dated statementsAll articles with unsourced statementsArticles with unsourced statements from March 2021Articles with LCCN identifiersArticles with FAST identifiersArticles with example Julia code
	
