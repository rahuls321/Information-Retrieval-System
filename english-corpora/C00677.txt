
Title:
Adversarial machine learning
Text:

		From Wikipedia, the free encyclopedia
		
		
		
		
		Jump to navigation
		Jump to search
		Research field that lies at the intersection of machine learning and computer security
.mw-parser-output .hatnote{font-style:italic}.mw-parser-output div.hatnote{padding-left:1.6em;margin-bottom:0.5em}.mw-parser-output .hatnote i{font-style:normal}.mw-parser-output .hatnote+link+.hatnote{margin-top:-0.5em}Not to be confused with Generative adversarial network.
Adversarial machine learning is a machine learning technique that attempts to exploit models by taking advantage of obtainable model information and using it to create malicious attacks.[1][2][3] The most common reason is to cause a malfunction in a machine learning model.
Most machine learning techniques were designed to work on specific problem sets in which the training and test data are generated from the same statistical distribution (IID). When those models are applied to the real world, adversaries may supply data that violates that statistical assumption. This data may be arranged to exploit specific vulnerabilities and compromise the results.[3][4] The four most common adversarial machine learning strategies are evasion, poisoning, model stealing (extraction), and inference.[5]

Contents

1 History

1.1 Examples


2 Attack modalities

2.1 Taxonomy
2.2 Strategies

2.2.1 Evasion
2.2.2 Poisoning
2.2.3 Model stealing
2.2.4 Inference




3 Specific attack types

3.1 Adversarial examples

3.1.1 Black Box Attacks

3.1.1.1 Square Attack
3.1.1.2 HopSkipJump Attack


3.1.2 White Box Attacks

3.1.2.1 Fast Gradient Sign Method (FGSM)
3.1.2.2 Carlini & Wagner (C&W)






4 Defenses

4.1 Mechanisms


5 See also
6 References
7 External links



History[edit]
In Understand (story) (1991), the main character, who over the course of the story transforms into a self-improving intelligence, falls prey to an adversarial sample leading to his annihilation. In Snow Crash (1992), the author offered scenarios of technology that was vulnerable to an adversarial attack. In Zero History (2010), a character dons a t-shirt decorated in a way that renders him invisible to electronic surveillance.[6]
In 2004, Nilesh Dalvi and others noted that linear classifiers used in spam filters could be defeated by simple "evasion attacks" as spammers inserted "good words" into their spam emails. (Around 2007, some spammers added random noise to fuzz words within "image spam" in order to defeat OCR-based filters.) In 2006, Marco Barreno and others published "Can Machine Learning Be Secure?", outlining a broad taxonomy of attacks. As late as 2013 many researchers continued to hope that non-linear classifiers (such as support vector machines and neural networks) might be robust to adversaries, until Battista Biggio and others demonstrated the first gradient-based attacks on such machine-learning models (2012[7]-2013[8]). In 2012, deep neural networks began to dominate computer vision problems; starting in 2014, Christian Szegedy and others demonstrated that deep neural networks could be fooled by adversaries, again using a gradient-based attack to craft adversarial perturbations.[9][10]
Recently, it was observed that adversarial attacks are harder to produce in the practical world due to the different environmental constraints that cancel out the effect of noises.[11][12] For example, any small rotation or slight illumination on an adversarial image can destroy the adversariality. In addition, researchers such as Google Brain's Nicholas Frosst point out that it is much easier to make self-driving cars miss stop signs by physically removing the sign itself, rather than creating adversarial examples.[13] Frosst also believe that the adversarial machine learning community incorrectly assumes models trained on a certain data distribution will also perform well on a completely different data distribution. He suggests that a new approach to machine learning should be explored, and is currently working on a unique neural network that has characteristics more similar to human perception than state of the art approaches.[13]
While adversarial machine learning continues to be heavily rooted in academia, large tech companies such as Google, Microsoft, and IBM have begun curating documentation and open source code bases to allow others to concretely assess the robustness of machine learning models and minimize the risk of adversarial attacks.[14][5][15]

Examples[edit]
Examples include attacks in spam filtering, where spam messages are obfuscated through the misspelling of "bad" words or the insertion of "good" words;[16][17] attacks in computer security, such as obfuscating malware code within network packets or to mislead signature detection; attacks in biometric recognition where fake biometric traits may be exploited to impersonate a legitimate user;[18] or to compromise users' template galleries that adapt to updated traits over time.
Researchers showed that by changing only one-pixel it was possible to fool deep learning algorithms.[19] Others 3-D printed a toy turtle with a texture engineered to make Google's object detection AI classify it as a rifle regardless of the angle from which the turtle was viewed.[20] Creating the turtle required only low-cost commercially available 3-D printing technology.[21]
A machine-tweaked image of a dog was shown to look like a cat to both computers and humans.[22] A 2019 study reported that humans can guess how machines will classify adversarial images.[23] Researchers discovered methods for perturbing the appearance of a stop sign such that an autonomous vehicle classified it as a merge or speed limit sign.[3][24][25]
McAfee attacked Tesla's former Mobileye system, fooling it into driving 50Â mph over the speed limit, simply by adding a two-inch strip of black tape to a speed limit sign.[26][27]
Adversarial patterns on glasses or clothing designed to deceive facial-recognition systems or license-plate readers, have led to a niche industry of "stealth streetwear".[28]
An adversarial attack on a neural network can allow an attacker to inject algorithms into the target system.[29] Researchers can also create adversarial audio inputs to disguise commands to intelligent assistants in benign-seeming audio;[30] a parallel literature explores human perception of such stimuli.[31][32]
Clustering algorithms are used in security applications. Malware and computer virus analysis aims to identify malware families, and to generate specific detection signatures.[33][34]

Attack modalities[edit]
Taxonomy[edit]
Attacks against (supervised) machine learning algorithms have been categorized along three primary axes:[35] influence on the classifier, the security violation and their specificity.

Classifier influence: An attack can influence the classifier by disrupting the classification phase. This may be preceded by an exploration phase to identify vulnerabilities. The attacker's capabilities might be restricted by the presence of data manipulation constraints.[36]
Security violation: An attack can supply malicious data that gets classified as legitimate. Malicious data supplied during training can cause legitimate data to be rejected after training.
Specificity: A targeted attack attempts to allow a specific intrusion/disruption. Alternatively, an indiscriminate attack creates general mayhem.
This taxonomy has been extended into a more comprehensive threat model that allows explicit assumptions about the adversary's goal, knowledge of the attacked system, capability of manipulating the input data/system components, and on attack strategy.[37][38] This taxonomy has further been extended to include dimensions for defense strategies against adversarial attacks.[39]

Strategies[edit]
Below are some of the most commonly encountered attack scenarios:

Evasion[edit]
Evasion attacks[8][37][38][40] are the most prevalent type of attack. For instance, spammers and hackers often attempt to evade detection by obfuscating the content of spam emails and malware. Samples are modified to evade detection; that is, to be classified as legitimate. This does not involve influence over the training data. A clear example of evasion is image-based spam in which the spam content is embedded within an attached image to evade textual analysis by anti-spam filters. Another example of evasion is given by spoofing attacks against biometric verification systems.[18]
Evasion attacks can be generally split into two different categories: black box attacks and white box attacks.[5]

Poisoning[edit]
Poisoning is adversarial contamination of training data. Machine learning systems can be re-trained using data collected during operations. For instance, intrusion detection systems (IDSs) are often re-trained using such data. An attacker may poison this data by injecting malicious samples during operation that subsequently disrupt retraining.[37][38][35][41][42][43]

Model stealing[edit]
Model stealing (also called model extraction) involves an adversary probing a black box machine learning system in order to either reconstruct the model or extract the data it was trained on.[44][45]  This can cause issues when either the training data or the model itself is sensitive and confidential. For example, model stealing could be used to extract a proprietary stock trading model which the adversary could then use for their own financial benefit.

Inference[edit]
Inference attacks, leverages overgeneralization on training data, a common weakness of supervised machine learning models, in order to identify data used during model training.[46] For attackers, this can be done even without knowledge or access to a target model's parameters, raising security concerns for models trained on sensitive data, including but not limited to medical records and/or personally identifiable information. With the emergence of transfer learning and public accessibility of many state of the art machine learning models, tech companies are increasingly drawn to create models based on public ones, giving attackers freely accessible information to the structure and type of model being used.[46] However, membership inference relies heavily on overfitting resulting from poor machine learning practices, meaning a model that generalizes well to the real distribution of data should theoretically be more secure to membership inference attacks.[46]

Specific attack types[edit]
There are a large variety of different adversarial attacks that can be used against machine learning systems. Many of these work on both deep learning systems as well as traditional machine learning models such as SVMs[7] and  linear regression.[47] A high level sample of these attack types include:

Adversarial Examples[48]
Trojan Attacks / Backdoor Attacks[49]
Model Inversion[50]
Membership Inference [51]
Adversarial examples[edit]
An adversarial example refers to specially crafted input which is design to look "normal" to humans but causes misclassification to a machine learning model.  Often, a form of specially designed "noise"  is used to elicit the misclassifications. Below are some current techniques for generating adversarial examples in the literature (by no means an exhaustive list).

Gradient-based evasion attack[8]
Fast Gradient Sign Method (FGSM)[52]
Projected Gradient Descent (PGD)[53]
Carlini and Wagner (C&W) attack[54]
Adversarial patch attack[55]
Black Box Attacks[edit]
Black box attacks in adversarial machine learning assumes that the adversary can only get outputs for provided inputs and has no knowledge of the model structure or parameters.[5][56] In this case, the adversarial example is generated either using a model created from scratch, or without any model at all (excluding the ability to query the original model). In either case, the objective of these attacks are to create adversarial examples that are able to transfer to the black box model in question.[57]

Square Attack[edit]
The Square Attack was introduced in 2020 as a black box evasion adversarial attack based on querying classification scores without the need of gradient information.[58] As a score based black box attack, this adversarial approach is able to query probability distributions across model output classes, but has no other access to the model itself. According to the paper's authors, the proposed Square Attack required less queries than when compared to state of the art score based black box attacks at the time.[58]
To describe the function objective, the attack defines the classifier as 
  
    
      
        f
        :
        [
        0
        ,
        1
        
          ]
          
            d
          
        
        â
        
          
            R
          
          
            K
          
        
      
    
    {\textstyle f:[0,1]^{d}\rightarrow \mathbb {R} ^{K}}
  
, with 
  
    
      
        d
      
    
    {\textstyle d}
  
 representing the dimensions of the input and 
  
    
      
        K
      
    
    {\textstyle K}
  
 as the total number of output classes. 
  
    
      
        
          f
          
            k
          
        
        (
        x
        )
      
    
    {\textstyle f_{k}(x)}
  
 returns the score (or a probability between 0 and 1) that the input 
  
    
      
        x
      
    
    {\textstyle x}
  
 belongs to class 
  
    
      
        k
      
    
    {\textstyle k}
  
, which allows the classifier's class output for any input 
  
    
      
        x
      
    
    {\textstyle x}
  
 to be defined as 
  
    
      
        a
        r
        g
        m
        a
        
          x
          
            k
            =
            1
            ,
            .
            .
            .
            ,
            K
          
        
        
          f
          
            k
          
        
        (
        x
        )
      
    
    {\textstyle argmax_{k=1,...,K}f_{k}(x)}
  
. The goal of this attack is as followed:[58]

  
    
      
        a
        r
        g
        m
        a
        
          x
          
            k
            =
            1
            ,
            .
            .
            .
            ,
            K
          
        
        
          f
          
            k
          
        
        (
        
          
            
              x
              ^
            
          
        
        )
        â 
        y
        ,
        
          |
        
        
          |
        
        
          
            
              x
              ^
            
          
        
        â
        x
        
          |
        
        
          
            |
          
          
            p
          
        
        â¤
        Ïµ
        
          Â andÂ 
        
        
          
            
              x
              ^
            
          
        
        â
        [
        0
        ,
        1
        
          ]
          
            d
          
        
      
    
    {\displaystyle argmax_{k=1,...,K}f_{k}({\hat {x}})\neq y,||{\hat {x}}-x||_{p}\leq \epsilon {\text{ and }}{\hat {x}}\in [0,1]^{d}}
  
[58]
In other words, finding some perturbed adversarial example 
  
    
      
        
          
            
              x
              ^
            
          
        
      
    
    {\textstyle {\hat {x}}}
  
 such that the classifier incorrectly classifies it to some other class under the constraint that 
  
    
      
        
          
            
              x
              ^
            
          
        
      
    
    {\textstyle {\hat {x}}}
  
 and 
  
    
      
        x
      
    
    {\textstyle x}
  
 are similar. The paper then defines loss 
  
    
      
        L
      
    
    {\textstyle L}
  
 as 
  
    
      
        L
        (
        f
        (
        
          
            
              x
              ^
            
          
        
        )
        ,
        y
        )
        =
        
          f
          
            y
          
        
        (
        
          
            
              x
              ^
            
          
        
        )
        â
        
          max
          
            k
            â 
            y
          
        
        
          f
          
            k
          
        
        (
        
          
            
              x
              ^
            
          
        
        )
      
    
    {\textstyle L(f({\hat {x}}),y)=f_{y}({\hat {x}})-\max _{k\neq y}f_{k}({\hat {x}})}
  
 and proposes the solution to finding adversarial example 
  
    
      
        
          
            
              x
              ^
            
          
        
      
    
    {\textstyle {\hat {x}}}
  
 as solving the below constrained optimization problem:[58]

  
    
      
        
          min
          
            
              
                
                  x
                  ^
                
              
            
            â
            [
            0
            ,
            1
            
              ]
              
                d
              
            
          
        
        L
        (
        f
        (
        
          
            
              x
              ^
            
          
        
        )
        ,
        y
        )
        ,
        
          Â s.t.Â 
        
        
          |
        
        
          |
        
        
          
            
              x
              ^
            
          
        
        â
        x
        
          |
        
        
          
            |
          
          
            p
          
        
        â¤
        Ïµ
      
    
    {\displaystyle \min _{{\hat {x}}\in [0,1]^{d}}L(f({\hat {x}}),y),{\text{ s.t. }}||{\hat {x}}-x||_{p}\leq \epsilon }
  
[58]
The result in theory is an adversarial example that is highly confident in the incorrect class but is also very similar to the original image. To find such example, Square Attack utilizes the iterative random search technique to randomly perturb the image in hopes of improving the objective function. In each step, the algorithm perturbs only a small square section of pixels, hence the name Square Attack, which terminates as soon as an adversarial example is found in order to improve query efficiency. Finally, since the attack algorithm uses scores and not gradient information, the authors of the paper indicate that this approach is not affected by gradient masking, a common technique formerly used to prevent evasion attacks.[58]

HopSkipJump Attack[edit]
This black box attack was also proposed as a query efficient attack, but one that relies solely on access to any input's predicted output class. In other words, the HopSkipJump attack does not require the ability to calculate gradients or access to score values like the Square Attack, and will require just the model's class prediction output (for any given input). The proposed attack is split into two different settings, targeted and untargeted, but both are built from the general idea of adding minimal perturbations that leads to a different model output. In the targeted setting, the goal is to cause the model to misclassify the perturbed image to a specific target label (that is not the original label). In the untargeted setting, the goal is to cause the model to misclassify the perturbed image to any label that is not the original label. The attack objectives for both are as follows where 
  
    
      
        x
      
    
    {\textstyle x}
  
 is the original image, 
  
    
      
        
          x
          
            â²
          
        
      
    
    {\textstyle x^{\prime }}
  
 is the adversarial image, 
  
    
      
        d
      
    
    {\textstyle d}
  
 is a distance function between images, 
  
    
      
        
          c
          
            â
          
        
      
    
    {\textstyle c^{*}}
  
 is the target label, and 
  
    
      
        C
      
    
    {\textstyle C}
  
 is the model's classification class label function:

  
    
      
        
          
            Targeted:
          
        
        
          min
          
            
              x
              
                â²
              
            
          
        
        d
        (
        
          x
          
            â²
          
        
        ,
        x
        )
        
          Â subject toÂ 
        
        C
        (
        
          x
          
            â²
          
        
        )
        =
        
          c
          
            â
          
        
      
    
    {\displaystyle {\textbf {Targeted:}}\min _{x^{\prime }}d(x^{\prime },x){\text{ subject to }}C(x^{\prime })=c^{*}}
  
[59]

  
    
      
        
          
            Untargeted:
          
        
        
          min
          
            
              x
              
                â²
              
            
          
        
        d
        (
        
          x
          
            â²
          
        
        ,
        x
        )
        
          Â subject toÂ 
        
        C
        (
        
          x
          
            â²
          
        
        )
        â 
        C
        (
        x
        )
      
    
    {\displaystyle {\textbf {Untargeted:}}\min _{x^{\prime }}d(x^{\prime },x){\text{ subject to }}C(x^{\prime })\neq C(x)}
  
[59]
To solve this problem, the attack proposes the following boundary function 
  
    
      
        S
      
    
    {\textstyle S}
  
 for both the untargeted and targeted setting:

  
    
      
        S
        (
        
          x
          
            â²
          
        
        )
        :=
        
          
            {
            
              
                
                  m
                  a
                  
                    x
                    
                      c
                      â 
                      C
                      (
                      x
                      )
                    
                  
                  
                    F
                    (
                    
                      x
                      
                        â²
                      
                    
                    
                      )
                      
                        c
                      
                    
                  
                  â
                  F
                  (
                  
                    x
                    
                      â²
                    
                  
                  
                    )
                    
                      C
                      (
                      x
                      )
                    
                  
                  ,
                
                
                  
                    (Untargeted)
                  
                
              
              
                
                  F
                  (
                  
                    x
                    
                      â²
                    
                  
                  
                    )
                    
                      
                        c
                        
                          â
                        
                      
                    
                  
                  â
                  m
                  a
                  
                    x
                    
                      c
                      â 
                      
                        c
                        
                          â
                        
                      
                    
                  
                  
                    F
                    (
                    
                      x
                      
                        â²
                      
                    
                    
                      )
                      
                        c
                      
                    
                  
                  ,
                
                
                  
                    (Targeted)
                  
                
              
            
            
          
        
      
    
    {\displaystyle S(x^{\prime }):={\begin{cases}max_{c\neq C(x)}{F(x^{\prime })_{c}}-F(x^{\prime })_{C(x)},&{\text{(Untargeted)}}\\F(x^{\prime })_{c^{*}}-max_{c\neq c^{*}}{F(x^{\prime })_{c}},&{\text{(Targeted)}}\end{cases}}}
  
[59]
This can be further simplified to better visualize the boundary between different potential adversarial examples:

  
    
      
        S
        (
        
          x
          
            â²
          
        
        )
        >
        0
        
        âº
        
        
          
            {
            
              
                
                  a
                  r
                  g
                  m
                  a
                  
                    x
                    
                      c
                    
                  
                  F
                  (
                  
                    x
                    
                      â²
                    
                  
                  )
                  â 
                  C
                  (
                  x
                  )
                  ,
                
                
                  
                    (Untargeted)
                  
                
              
              
                
                  a
                  r
                  g
                  m
                  a
                  
                    x
                    
                      c
                    
                  
                  F
                  (
                  
                    x
                    
                      â²
                    
                  
                  )
                  =
                  
                    c
                    
                      â
                    
                  
                  ,
                
                
                  
                    (Targeted)
                  
                
              
            
            
          
        
      
    
    {\displaystyle S(x^{\prime })>0\iff {\begin{cases}argmax_{c}F(x^{\prime })\neq C(x),&{\text{(Untargeted)}}\\argmax_{c}F(x^{\prime })=c^{*},&{\text{(Targeted)}}\end{cases}}}
  
[59]
With this boundary function, the attack then follows an iterative algorithm to find adversarial examples 
  
    
      
        
          x
          
            â²
          
        
      
    
    {\textstyle x^{\prime }}
  
 for a given image 
  
    
      
        x
      
    
    {\textstyle x}
  
 that satisfies the attack objectives.

Initialize 
  
    
      
        x
      
    
    {\textstyle x}
  
 to some point where 
  
    
      
        S
        (
        x
        )
        >
        0
      
    
    {\textstyle S(x)>0}
  

Iterate below
Boundary search
Gradient update
Compute the gradient
Find the step size
Boundary search uses a modified binary search to find the point in which the boundary (as defined by 
  
    
      
        S
      
    
    {\textstyle S}
  
) intersects with the line between 
  
    
      
        x
      
    
    {\textstyle x}
  
 and 
  
    
      
        
          x
          
            â²
          
        
      
    
    {\textstyle x^{\prime }}
  
. The next step involves calculating the gradient for 
  
    
      
        x
      
    
    {\textstyle x}
  
, and update the original 
  
    
      
        x
      
    
    {\textstyle x}
  
 using this gradient and a pre-chosen step size. HopSkipJump authors prove that this iterative algorithm will converge, leading 
  
    
      
        x
      
    
    {\textstyle x}
  
 to a point right along the boundary that is very close in distance to the original image.[59]
However, since HopSkipJump is a proposed black box attack and the iterative algorithm above requires the calculation of a gradient in the second iterative step (which black box attacks do not have access to), the authors propose a solution to gradient calculation that requires only the model's output predictions alone.[59] By generating many random vectors in all directions, denoted as 
  
    
      
        
          u
          
            b
          
        
      
    
    {\textstyle u_{b}}
  
, an approximation of the gradient can be calculated using the average of these random vectors weighted by the sign of the boundary function on the image 
  
    
      
        
          x
          
            â²
          
        
        +
        
          Î´
          
            
              u
              
                b
              
            
          
        
      
    
    {\textstyle x^{\prime }+\delta _{u_{b}}}
  
, where 
  
    
      
        
          Î´
          
            
              u
              
                b
              
            
          
        
      
    
    {\textstyle \delta _{u_{b}}}
  
 is the size of the random vector perturbation:

  
    
      
        â
        S
        (
        
          x
          
            â²
          
        
        ,
        Î´
        )
        â
        
          
            1
            B
          
        
        
          â
          
            b
            =
            1
          
          
            B
          
        
        Ï
        (
        
          x
          
            â²
          
        
        +
        
          Î´
          
            
              u
              
                b
              
            
          
        
        )
        
          u
          
            b
          
        
      
    
    {\displaystyle \nabla S(x^{\prime },\delta )\approx {\frac {1}{B}}\sum _{b=1}^{B}\phi (x^{\prime }+\delta _{u_{b}})u_{b}}
  
[59]
The result of the equation above gives a close approximation of the gradient required in step 2 of the iterative algorithm, completing HopSkipJump as a black box attack.[60][61][59]

White Box Attacks[edit]
White box attacks assumes that the adversary has access to model parameters on top of being able to get labels for provided inputs.[57]

Fast Gradient Sign Method (FGSM)[edit]
One of the very first proposed attacks for generating adversarial examples was proposed by Google researchers Ian J. Goodfellow, Jonathon Shlens, and Christian Szegedy.[62] The attack was called fast gradient sign method, and it consists of adding a linear amount of in-perceivable noise to the image and causing a model to incorrectly classify it. This noise is calculated by multiplying the sign of the gradient with respect to the image we want to perturb by a small constant epsilon. As epsilon increases, the model is more likely to be fooled, but the perturbations become easier to identify as well. Shown below is the equation to generate an adversarial example where 
  
    
      
        x
      
    
    {\textstyle x}
  
 is the original image, 
  
    
      
        Ïµ
      
    
    {\textstyle \epsilon }
  
 is a very small number, 
  
    
      
        
          Î
          
            x
          
        
      
    
    {\textstyle \Delta _{x}}
  
 is the gradient function, 
  
    
      
        J
      
    
    {\textstyle J}
  
 is the loss function, 
  
    
      
        Î¸
      
    
    {\textstyle \theta }
  
 is the model weights, and 
  
    
      
        y
      
    
    {\textstyle y}
  
 is the true label.[63]

  
    
      
        a
        d
        
          v
          
            x
          
        
        =
        x
        +
        Ïµ
        â
        s
        i
        g
        n
        (
        
          Î
          
            x
          
        
        J
        (
        Î¸
        ,
        x
        ,
        y
        )
        )
      
    
    {\displaystyle adv_{x}=x+\epsilon \cdot sign(\Delta _{x}J(\theta ,x,y))}
  
[64]
One important property of this equation is that the gradient is calculated with respect to the input image since the goal is to generate an image that maximizes the loss for the original image of true label 
  
    
      
        y
      
    
    {\textstyle y}
  
. In traditional gradient descent (for model training), the gradient is used to update the weights of the model since the goal is to minimize the loss for the model on a ground truth dateset. The Fast Gradient Sign Method was proposed as a fast way to generate adversarial examples to evade the model, based on the hypothesis that neural networks cannot resist even linear amounts of perturbation to the input.[63][64][62]

Carlini & Wagner (C&W)[edit]
In an effort to analyze existing adversarial attacks and defenses, researchers at the University of California, Berkeley, Nicholas Carlini and David Wagner in 2016 propose a faster and more robust method to generate adversarial examples.[65]
The attack proposed by Carlini and Wagner begins with trying to solve a difficult non-linear optimization equation:

  
    
      
        min
        (
        
          |
        
        
          |
        
        Î´
        
          |
        
        
          
            |
          
          
            p
          
        
        )
        
          Â subject toÂ 
        
        C
        (
        x
        +
        Î´
        )
        =
        t
        ,
        x
        +
        Î´
        â
        [
        0
        ,
        1
        
          ]
          
            n
          
        
      
    
    {\displaystyle \min(||\delta ||_{p}){\text{ subject to }}C(x+\delta )=t,x+\delta \in [0,1]^{n}}
  
[45]
Here the objective is to minimize the noise (
  
    
      
        Î´
      
    
    {\textstyle \delta }
  
), added to the original input 
  
    
      
        x
      
    
    {\textstyle x}
  
, such that the machine learning algorithm (
  
    
      
        C
      
    
    {\textstyle C}
  
) predicts the original input with delta (or 
  
    
      
        x
        +
        Î´
      
    
    {\textstyle x+\delta }
  
) as some other class 
  
    
      
        t
      
    
    {\textstyle t}
  
. However instead of directly the above equation, Carlini and Wagner propose using a new function 
  
    
      
        f
      
    
    {\textstyle f}
  
 such that:

  
    
      
        C
        (
        x
        +
        Î´
        )
        =
        t
        
        âº
        
        f
        (
        x
        +
        Î´
        )
        â¤
        0
      
    
    {\displaystyle C(x+\delta )=t\iff f(x+\delta )\leq 0}
  
[45]
This condenses the first equation to the problem below:

  
    
      
        min
        (
        
          |
        
        
          |
        
        Î´
        
          |
        
        
          
            |
          
          
            p
          
        
        )
        
          Â subject toÂ 
        
        f
        (
        x
        +
        Î´
        )
        â¤
        0
        ,
        x
        +
        Î´
        â
        [
        0
        ,
        1
        
          ]
          
            n
          
        
      
    
    {\displaystyle \min(||\delta ||_{p}){\text{ subject to }}f(x+\delta )\leq 0,x+\delta \in [0,1]^{n}}
  
[45]
and even more to the equation below:

  
    
      
        min
        (
        
          |
        
        
          |
        
        Î´
        
          |
        
        
          
            |
          
          
            p
          
        
        +
        c
        â
        f
        (
        x
        +
        Î´
        )
        )
        ,
        x
        +
        Î´
        â
        [
        0
        ,
        1
        
          ]
          
            n
          
        
      
    
    {\displaystyle \min(||\delta ||_{p}+c\cdot f(x+\delta )),x+\delta \in [0,1]^{n}}
  
[45]
Carlini and Wagner then propose the use of the below function in place of 
  
    
      
        f
      
    
    {\textstyle f}
  
 using 
  
    
      
        Z
      
    
    {\textstyle Z}
  
, a function that determines class probabilities for given input 
  
    
      
        x
      
    
    {\textstyle x}
  
. When substituted in, this equation can be thought of as finding a target class that is more confident than the next likeliest class by some constant amount:

  
    
      
        f
        (
        x
        )
        =
        (
        [
        
          max
          
            i
            â 
            t
          
        
        Z
        (
        x
        
          )
          
            i
          
        
        ]
        â
        Z
        (
        x
        
          )
          
            t
          
        
        
          )
          
            +
          
        
      
    
    {\displaystyle f(x)=([\max _{i\neq t}Z(x)_{i}]-Z(x)_{t})^{+}}
  
[45]
When solved using gradient descent, this equation is able to produce stronger adversarial examples when compared to fast gradient sign method that is also able to bypass defensive distillation, a defense that was once proposed to be effective against adversarial examples.[66][67][65][45]

Defenses[edit]
  Conceptual representation of the proactive arms race[38][34]
Researchers have proposed a multi-step approach to protecting machine learning.[10]

Threat modeling â Formalize the attackers goals and capabilities with respect to the target system.
Attack simulation â Formalize the optimization problem the attacker tries to solve according to possible attack strategies.
Attack impact evaluation
Countermeasure design
Noise detection (For evasion based attack)[68]
Information laundering â Alter the information received by adversaries (for model stealing attacks)[45]
Mechanisms[edit]
A number of defense mechanisms against evasion, poisoning, and privacy attacks have been proposed, including:

Deep Neural Network (DNN) classifiers enhanced with data augmentation from GANs, eg. [69]
Secure learning algorithms[17][70][71]
Multiple classifier systems[16][72]
AI-written algorithms.[29]
AIs that explore the training environment; for example, in image recognition, actively navigating a 3D environment rather than passively scanning a fixed set of 2D images.[29]
Privacy-preserving learning[38][73]
Ladder algorithm for Kaggle-style competitions
Game theoretic models[74][75][76]
Sanitizing training data
Adversarial training[52]
Backdoor detection algorithms[77]
See also[edit]
Pattern recognition
References[edit]
.mw-parser-output .reflist{font-size:90%;margin-bottom:0.5em;list-style-type:decimal}.mw-parser-output .reflist .references{font-size:100%;margin-bottom:0;list-style-type:inherit}.mw-parser-output .reflist-columns-2{column-width:30em}.mw-parser-output .reflist-columns-3{column-width:25em}.mw-parser-output .reflist-columns{margin-top:0.3em}.mw-parser-output .reflist-columns ol{margin-top:0}.mw-parser-output .reflist-columns li{page-break-inside:avoid;break-inside:avoid-column}.mw-parser-output .reflist-upper-alpha{list-style-type:upper-alpha}.mw-parser-output .reflist-upper-roman{list-style-type:upper-roman}.mw-parser-output .reflist-lower-alpha{list-style-type:lower-alpha}.mw-parser-output .reflist-lower-greek{list-style-type:lower-greek}.mw-parser-output .reflist-lower-roman{list-style-type:lower-roman}

^ .mw-parser-output cite.citation{font-style:inherit;word-wrap:break-word}.mw-parser-output .citation q{quotes:"\"""\"""'""'"}.mw-parser-output .citation:target{background-color:rgba(0,127,255,0.133)}.mw-parser-output .id-lock-free a,.mw-parser-output .citation .cs1-lock-free a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/6/65/Lock-green.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-limited a,.mw-parser-output .id-lock-registration a,.mw-parser-output .citation .cs1-lock-limited a,.mw-parser-output .citation .cs1-lock-registration a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/d/d6/Lock-gray-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .id-lock-subscription a,.mw-parser-output .citation .cs1-lock-subscription a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/a/aa/Lock-red-alt-2.svg")right 0.1em center/9px no-repeat}.mw-parser-output .cs1-ws-icon a{background:linear-gradient(transparent,transparent),url("//upload.wikimedia.org/wikipedia/commons/4/4c/Wikisource-logo.svg")right 0.1em center/12px no-repeat}.mw-parser-output .cs1-code{color:inherit;background:inherit;border:none;padding:inherit}.mw-parser-output .cs1-hidden-error{display:none;color:#d33}.mw-parser-output .cs1-visible-error{color:#d33}.mw-parser-output .cs1-maint{display:none;color:#3a3;margin-left:0.3em}.mw-parser-output .cs1-format{font-size:95%}.mw-parser-output .cs1-kern-left{padding-left:0.2em}.mw-parser-output .cs1-kern-right{padding-right:0.2em}.mw-parser-output .citation .mw-selflink{font-weight:inherit}Kianpour, Mazaher; Wen, Shao-Fang (2020). "Timing Attacks on Machine Learning: State of the Art". Intelligent Systems and Applications. Advances in Intelligent Systems and Computing. Vol.Â 1037. pp.Â 111â125. doi:10.1007/978-3-030-29516-5_10. ISBNÂ 978-3-030-29515-8. S2CIDÂ 201705926.

^ Bengio, Samy; Goodfellow, Ian J.; Kurakin, Alexey (2017). "Adversarial Machine Learning at Scale". arXiv:1611.01236 [cs.CV].

^ Jump up to: a b c Lim, Hazel Si Min; Taeihagh, Araz (2019). "Algorithmic Decision-Making in AVs: Understanding Ethical and Technical Concerns for Smart Cities". Sustainability. 11 (20): 5791. arXiv:1910.13122. Bibcode:2019arXiv191013122L. doi:10.3390/su11205791. S2CIDÂ 204951009.

^ Goodfellow, Ian; McDaniel, Patrick; Papernot, Nicolas (25 June 2018). "Making machine learning robust against adversarial inputs". Communications of the ACM. 61 (7): 56â66. doi:10.1145/3134599. ISSNÂ 0001-0782. Retrieved 2018-12-13.

^ Jump up to: a b c d Adversarial Robustness Toolbox (ART) v1.8, Trusted-AI, 2021-10-23, retrieved 2021-10-23

^ Vincent, James (12 April 2017). "Magic AI: these are the optical illusions that trick, fool, and flummox computers". The Verge. Retrieved 27 March 2020.

^ Jump up to: a b Biggio, Battista; Nelson, Blaine; Laskov, Pavel (2013-03-25). "Poisoning Attacks against Support Vector Machines". arXiv:1206.6389 [cs.LG].

^ Jump up to: a b c Biggio, Battista; Corona, Igino; Maiorca, Davide; Nelson, Blaine; Srndic, Nedim; Laskov, Pavel; Giacinto, Giorgio; Roli, Fabio (2013). "Evasion attacks against machine learning at test time". ECML PKDD. Lecture Notes in Computer Science. Vol.Â 7908. Springer. pp.Â 387â402. arXiv:1708.06131. doi:10.1007/978-3-642-40994-3_25. ISBNÂ 978-3-642-38708-1. S2CIDÂ 18716873.

^ Szegedy, Christian; Zaremba, Wojciech; Sutskever, Ilya; Bruna, Joan; Erhan, Dumitru; Goodfellow, Ian; Fergus, Rob (2014-02-19). "Intriguing properties of neural networks". arXiv:1312.6199 [cs.CV].

^ Jump up to: a b Biggio, Battista; Roli, Fabio (December 2018). "Wild patterns: Ten years after the rise of adversarial machine learning". Pattern Recognition. 84: 317â331. arXiv:1712.03141. Bibcode:2018PatRe..84..317B. doi:10.1016/j.patcog.2018.07.023. S2CIDÂ 207324435.

^ Kurakin, Alexey; Goodfellow, Ian; Bengio, Samy (2016). "Adversarial examples in the physical world". arXiv:1607.02533 [cs.CV].

^ Gupta, Kishor Datta, Dipankar Dasgupta, and Zahid Akhtar. "Applicability issues of Evasion-Based Adversarial Attacks and Mitigation Techniques." 2020 IEEE Symposium Series on Computational Intelligence (SSCI). 2020.

^ Jump up to: a b Synced (2019-11-21). "Google Brain's Nicholas Frosst on Adversarial Examples and Emotional Responses | Synced". syncedreview.com. Retrieved 2021-10-23.

^ "Responsible AI practices". Google AI. Retrieved 2021-10-23.

^ amarshal. "Failure Modes in Machine Learning - Security documentation". docs.microsoft.com. Retrieved 2021-10-23.

^ Jump up to: a b Biggio, Battista; Fumera, Giorgio; Roli, Fabio (2010). "Multiple classifier systems for robust classifier design in adversarial environments". International Journal of Machine Learning and Cybernetics. 1 (1â4): 27â41. doi:10.1007/s13042-010-0007-7. ISSNÂ 1868-8071. S2CIDÂ 8729381.

^ Jump up to: a b BrÃ¼ckner, Michael; Kanzow, Christian; Scheffer, Tobias (2012). "Static Prediction Games for Adversarial Learning Problems" (PDF). Journal of Machine Learning Research. 13 (Sep): 2617â2654. ISSNÂ 1533-7928.

^ Jump up to: a b Rodrigues, Ricardo N.; Ling, Lee Luan; Govindaraju, Venu (1 June 2009). "Robustness of multimodal biometric fusion methods against spoof attacks" (PDF). Journal of Visual Languages & Computing. 20 (3): 169â179. doi:10.1016/j.jvlc.2009.01.010. ISSNÂ 1045-926X.

^ Su, Jiawei; Vargas, Danilo Vasconcellos; Sakurai, Kouichi (October 2019). "One Pixel Attack for Fooling Deep Neural Networks". IEEE Transactions on Evolutionary Computation. 23 (5): 828â841. arXiv:1710.08864. doi:10.1109/TEVC.2019.2890858. ISSNÂ 1941-0026. S2CIDÂ 2698863.

^ "Single pixel change fools AI programs". BBC News. 3 November 2017. Retrieved 12 February 2018.

^ Athalye, Anish; Engstrom, Logan; Ilyas, Andrew; Kwok, Kevin (2017). "Synthesizing Robust Adversarial Examples". arXiv:1707.07397 [cs.CV].

^ "AI Has a Hallucination Problem That's Proving Tough to Fix". WIRED. 2018. Retrieved 10 March 2018.

^ Zhou, Zhenglong; Firestone, Chaz (2019). "Humans can decipher adversarial images". Nature Communications. 10 (1): 1334. arXiv:1809.04120. Bibcode:2019NatCo..10.1334Z. doi:10.1038/s41467-019-08931-6. PMCÂ 6430776. PMIDÂ 30902973.

^ Jain, Anant (2019-02-09). "Breaking neural networks with adversarial attacks â Towards Data Science". Medium. Retrieved 2019-07-15.

^ Ackerman, Evan (2017-08-04). "Slight Street Sign Modifications Can Completely Fool Machine Learning Algorithms". IEEE Spectrum: Technology, Engineering, and Science News. Retrieved 2019-07-15.

^ "A Tiny Piece of Tape Tricked Teslas Into Speeding Up 50 MPH". Wired. 2020. Retrieved 11 March 2020.

^ "Model Hacking ADAS to Pave Safer Roads for Autonomous Vehicles". McAfee Blogs. 2020-02-19. Retrieved 2020-03-11.

^ Seabrook, John (2020). "Dressing for the Surveillance Age". The New Yorker. Retrieved 5 April 2020.

^ Jump up to: a b c Heaven, Douglas (October 2019). "Why deep-learning AIs are so easy to fool". Nature. 574 (7777): 163â166. Bibcode:2019Natur.574..163H. doi:10.1038/d41586-019-03013-5. PMIDÂ 31597977.

^ Hutson, Matthew (10 May 2019). "AI can now defend itself against malicious messages hidden in speech". Nature. doi:10.1038/d41586-019-01510-1. PMIDÂ 32385365. S2CIDÂ 189666088.

^ Lepori, Michael A; Firestone, Chaz (2020-03-27). "Can you hear me now? Sensitive comparisons of human and machine perception". arXiv:2003.12362 [eess.AS].

^ Vadillo, Jon; Santana, Roberto (2020-01-23). "On the human evaluation of audio adversarial examples". arXiv:2001.08444 [eess.AS].

^ D. B. Skillicorn. "Adversarial knowledge discovery". IEEE Intelligent Systems, 24:54â61, 2009.

^ Jump up to: a b B. Biggio, G. Fumera, and F. Roli. "Pattern recognition systems under attack: Design issues and research challenges". Int'l J. Patt. Recogn. Artif. Intell., 28(7):1460002, 2014.

^ Jump up to: a b Barreno, Marco; Nelson, Blaine; Joseph, Anthony D.; Tygar, J. D. (2010). "The security of machine learning" (PDF). Machine Learning. 81 (2): 121â148. doi:10.1007/s10994-010-5188-5. S2CIDÂ 2304759.

^ Sikos, Leslie F. (2019). AI in Cybersecurity. Intelligent Systems Reference Library. Vol.Â 151. Cham: Springer. p.Â 50. doi:10.1007/978-3-319-98842-9. ISBNÂ 978-3-319-98841-2.

^ Jump up to: a b c B. Biggio, G. Fumera, and F. Roli. "Security evaluation of pattern classifiers under attack Archived 2018-05-18 at the Wayback Machine". IEEE Transactions on Knowledge and Data Engineering, 26(4):984â996, 2014.

^ Jump up to: a b c d e Biggio, Battista; Corona, Igino; Nelson, Blaine; Rubinstein, Benjamin I. P.; Maiorca, Davide; Fumera, Giorgio; Giacinto, Giorgio; Roli, Fabio (2014). "Security Evaluation of Support Vector Machines in Adversarial Environments". Support Vector Machines Applications. Springer International Publishing. pp.Â 105â153. arXiv:1401.7727. doi:10.1007/978-3-319-02300-7_4. ISBNÂ 978-3-319-02300-7. S2CIDÂ 18666561.

^ Heinrich, Kai; Graf, Johannes; Chen, Ji; Laurisch, Jakob; Zschech, Patrick (2020-06-15). "FOOL ME ONCE, SHAME ON YOU, FOOL ME TWICE, SHAME ON ME: A TAXONOMY OF ATTACK AND DE-FENSE PATTERNS FOR AI SECURITY". ECIS 2020 Research Papers.

^ B. Nelson, B. I. Rubinstein, L. Huang, A. D. Joseph, S. J. Lee, S. Rao, and J. D. Tygar. "Query strategies for evading convex-inducing classifiers". J. Mach. Learn. Res., 13:1293â1332, 2012

^ B. Biggio, B. Nelson, and P. Laskov. "Support vector machines under adversarial label noise". In Journal of Machine Learning Research â Proc. 3rd Asian Conf. Machine Learning, volume 20, pp. 97â112, 2011.

^ M. Kloft and P. Laskov. "Security analysis of online centroid anomaly detection". Journal of Machine Learning Research, 13:3647â3690, 2012.

^ Moisejevs, Ilja (2019-07-15). "Poisoning attacks on Machine Learning â Towards Data Science". Medium. Retrieved 2019-07-15.

^ "How to steal modern NLP systems with gibberish?". cleverhans-blog. 2020-04-06. Retrieved 2020-10-15.

^ Jump up to: a b c d e f g h Wang, Xinran; Xiang, Yu; Gao, Jun; Ding, Jie (2020-09-13). "Information Laundering for Model Privacy". arXiv:2009.06112 [cs.CR].

^ Jump up to: a b c Dickson, Ben (2021-04-23). "Machine learning: What are membership inference attacks?". TechTalks. Retrieved 2021-11-07.

^ Jagielski, Matthew; Oprea, Alina; Biggio, Battista; Liu, Chang; Nita-Rotaru, Cristina; Li, Bo (May 2018). "Manipulating Machine Learning: Poisoning Attacks and Countermeasures for Regression Learning". 2018 IEEE Symposium on Security and Privacy (SP). IEEE: 19â35. arXiv:1804.00308. doi:10.1109/sp.2018.00057. ISBNÂ 978-1-5386-4353-2. S2CIDÂ 4551073.

^ "Attacking Machine Learning with Adversarial Examples". OpenAI. 2017-02-24. Retrieved 2020-10-15.

^ Gu, Tianyu; Dolan-Gavitt, Brendan; Garg, Siddharth (2019-03-11). "BadNets: Identifying Vulnerabilities in the Machine Learning Model Supply Chain". arXiv:1708.06733 [cs.CR].

^ Veale, Michael; Binns, Reuben; Edwards, Lilian (2018-11-28). "Algorithms that remember: model inversion attacks and data protection law". Philosophical Transactions. Series A, Mathematical, Physical, and Engineering Sciences. 376 (2133). arXiv:1807.04644. Bibcode:2018RSPTA.37680083V. doi:10.1098/rsta.2018.0083. ISSNÂ 1364-503X. PMCÂ 6191664. PMIDÂ 30322998.

^ Shokri, Reza; Stronati, Marco; Song, Congzheng; Shmatikov, Vitaly (2017-03-31). "Membership Inference Attacks against Machine Learning Models". arXiv:1610.05820 [cs.CR].

^ Jump up to: a b Goodfellow, Ian J.; Shlens, Jonathon; Szegedy, Christian (2015-03-20). "Explaining and Harnessing Adversarial Examples". arXiv:1412.6572 [stat.ML].

^ Madry, Aleksander; Makelov, Aleksandar; Schmidt, Ludwig; Tsipras, Dimitris; Vladu, Adrian (2019-09-04). "Towards Deep Learning Models Resistant to Adversarial Attacks". arXiv:1706.06083 [stat.ML].

^ Carlini, Nicholas; Wagner, David (2017-03-22). "Towards Evaluating the Robustness of Neural Networks". arXiv:1608.04644 [cs.CR].

^ Brown, Tom B.; ManÃ©, Dandelion; Roy, Aurko; Abadi, MartÃ­n; Gilmer, Justin (2018-05-16). "Adversarial Patch". arXiv:1712.09665 [cs.CV].

^ Guo, Sensen; Zhao, Jinxiong; Li, Xiaoyu; Duan, Junhong; Mu, Dejun; Jing, Xiao (2021-04-24). "A Black-Box Attack Method against Machine-Learning-Based Anomaly Network Flow Detection Models". Security and Communication Networks. 2021: e5578335. doi:10.1155/2021/5578335. ISSNÂ 1939-0114.

^ Jump up to: a b Gomes, Joao (2018-01-17). "Adversarial Attacks and Defences for Convolutional Neural Networks". Onfido Tech. Retrieved 2021-10-23.

^ Jump up to: a b c d e f g Andriushchenko, Maksym; Croce, Francesco; Flammarion, Nicolas; Hein, Matthias (2020).  Vedaldi, Andrea; Bischof, Horst; Brox, Thomas; Frahm, Jan-Michael (eds.). "Square Attack: A Query-Efficient Black-Box Adversarial Attack via Random Search". Computer Vision â ECCV 2020. Lecture Notes in Computer Science. Cham: Springer International Publishing. 12368: 484â501. arXiv:1912.00049. doi:10.1007/978-3-030-58592-1_29. ISBNÂ 978-3-030-58592-1. S2CIDÂ 208527215.

^ Jump up to: a b c d e f g h Chen, Jianbo; Jordan, Michael I.; Wainwright, Martin J. (2019), HopSkipJumpAttack: A Query-Efficient Decision-Based Attack, arXiv:1904.02144, retrieved 2021-10-25

^ Andriushchenko, Maksym; Croce, Francesco; Flammarion, Nicolas; Hein, Matthias (2020-07-29). "Square Attack: a query-efficient black-box adversarial attack via random search". arXiv:1912.00049 [cs.LG].

^ "Black-box decision-based attacks on images". KejiTech. 2020-06-21. Retrieved 2021-10-25.

^ Jump up to: a b Goodfellow, Ian J.; Shlens, Jonathon; Szegedy, Christian (2015-03-20). "Explaining and Harnessing Adversarial Examples". arXiv:1412.6572 [stat.ML].

^ Jump up to: a b Tsui, Ken (2018-08-22). "Perhaps the Simplest Introduction of Adversarial Examples Ever". Medium. Retrieved 2021-10-24.

^ Jump up to: a b "Adversarial example using FGSM | TensorFlow Core". TensorFlow. Retrieved 2021-10-24.

^ Jump up to: a b Carlini, Nicholas; Wagner, David (2017-03-22). "Towards Evaluating the Robustness of Neural Networks". arXiv:1608.04644 [cs.CR].

^ "carlini wagner attack". richardjordan.com. Retrieved 2021-10-23.

^ Plotz, Mike (2018-11-26). "Paper Summary: Adversarial Examples Are Not Easily Detected: Bypassing Ten Detection Methods". Medium. Retrieved 2021-10-23.

^ Kishor Datta Gupta; Akhtar, Zahid; Dasgupta, Dipankar (2021). "Determining Sequence of Image Processing Technique (IPT) to Detect Adversarial Attacks". SN Computer Science. 2 (5): 383. arXiv:2007.00337. doi:10.1007/s42979-021-00773-8. ISSNÂ 2662-995X. S2CIDÂ 220281087.

^ Feltus, Christophe (December 2021). "LogicGANâbased Data Augmentation Approach to Improve Adversarial Attack DNN Classiï¬ers". Proceedings of the 2021 International Conference on Computational Science and Computational Intelligence (CSCI).

^ O. Dekel, O. Shamir, and L. Xiao. "Learning to classify with missing and corrupted features". Machine Learning, 81:149â178, 2010.

^ Liu, Wei; Chawla, Sanjay (2010). "Mining adversarial patterns via regularized loss minimization" (PDF). Machine Learning. 81: 69â83. doi:10.1007/s10994-010-5199-2. S2CIDÂ 17497168.

^ B. Biggio, G. Fumera, and F. Roli. "Evade hard multiple classifier systems". In O. Okun and G. Valentini, editors, Supervised and Unsupervised Ensemble Methods and Their Applications, volume 245 of Studies in Computational Intelligence, pages 15â38. Springer Berlin / Heidelberg, 2009.

^ B. I. P. Rubinstein, P. L. Bartlett, L. Huang, and N. Taft. "Learning in a large function space: Privacy- preserving mechanisms for svm learning". Journal of Privacy and Confidentiality, 4(1):65â100, 2012.

^ M. Kantarcioglu, B. Xi, C. Clifton. "Classifier Evaluation and Attribute Selection against Active Adversaries". Data Min. Knowl. Discov., 22:291â335, January 2011.

^ Chivukula, Aneesh; Yang, Xinghao; Liu, Wei; Zhu, Tianqing; Zhou, Wanlei (2020). "Game Theoretical Adversarial Deep Learning with Variational Adversaries". IEEE Transactions on Knowledge and Data Engineering. 33 (11): 3568â3581. doi:10.1109/TKDE.2020.2972320. ISSNÂ 1558-2191. S2CIDÂ 213845560.

^ Chivukula, Aneesh Sreevallabh; Liu, Wei (2019). "Adversarial Deep Learning Models with Multiple Adversaries". IEEE Transactions on Knowledge and Data Engineering. 31 (6): 1066â1079. doi:10.1109/TKDE.2018.2851247. hdl:10453/136227. ISSNÂ 1558-2191. S2CIDÂ 67024195.

^ "TrojAI". www.iarpa.gov. Retrieved 2020-10-14.


External links[edit]
MITRE ATLAS: Adversarial Threat Landscape for Artificial-Intelligence Systems
NIST 8269 Draft: A Taxonomy and Terminology of Adversarial Machine Learning
NIPS 2007 Workshop on Machine Learning in Adversarial Environments for Computer Security
AlfaSVMLib â Adversarial Label Flip Attacks against Support Vector Machines[1]
Laskov, Pavel; Lippmann, Richard (2010). "Machine learning in adversarial environments". Machine Learning. 81 (2): 115â119. doi:10.1007/s10994-010-5207-6. S2CIDÂ 12567278.
Dagstuhl Perspectives Workshop on "Machine Learning Methods for Computer Security"
Workshop on Artificial Intelligence and Security, (AISec) Series
.mw-parser-output .navbox{box-sizing:border-box;border:1px solid #a2a9b1;width:100%;clear:both;font-size:88%;text-align:center;padding:1px;margin:1em auto 0}.mw-parser-output .navbox .navbox{margin-top:0}.mw-parser-output .navbox+.navbox,.mw-parser-output .navbox+.navbox-styles+.navbox{margin-top:-1px}.mw-parser-output .navbox-inner,.mw-parser-output .navbox-subgroup{width:100%}.mw-parser-output .navbox-group,.mw-parser-output .navbox-title,.mw-parser-output .navbox-abovebelow{padding:0.25em 1em;line-height:1.5em;text-align:center}.mw-parser-output .navbox-group{white-space:nowrap;text-align:right}.mw-parser-output .navbox,.mw-parser-output .navbox-subgroup{background-color:#fdfdfd}.mw-parser-output .navbox-list{line-height:1.5em;border-color:#fdfdfd}.mw-parser-output .navbox-list-with-group{text-align:left;border-left-width:2px;border-left-style:solid}.mw-parser-output tr+tr>.navbox-abovebelow,.mw-parser-output tr+tr>.navbox-group,.mw-parser-output tr+tr>.navbox-image,.mw-parser-output tr+tr>.navbox-list{border-top:2px solid #fdfdfd}.mw-parser-output .navbox-title{background-color:#ccf}.mw-parser-output .navbox-abovebelow,.mw-parser-output .navbox-group,.mw-parser-output .navbox-subgroup .navbox-title{background-color:#ddf}.mw-parser-output .navbox-subgroup .navbox-group,.mw-parser-output .navbox-subgroup .navbox-abovebelow{background-color:#e6e6ff}.mw-parser-output .navbox-even{background-color:#f7f7f7}.mw-parser-output .navbox-odd{background-color:transparent}.mw-parser-output .navbox .hlist td dl,.mw-parser-output .navbox .hlist td ol,.mw-parser-output .navbox .hlist td ul,.mw-parser-output .navbox td.hlist dl,.mw-parser-output .navbox td.hlist ol,.mw-parser-output .navbox td.hlist ul{padding:0.125em 0}.mw-parser-output .navbox .navbar{display:block;font-size:100%}.mw-parser-output .navbox-title .navbar{float:left;text-align:left;margin-right:0.5em}hide.mw-parser-output .navbar{display:inline;font-size:88%;font-weight:normal}.mw-parser-output .navbar-collapse{float:left;text-align:left}.mw-parser-output .navbar-boxtext{word-spacing:0}.mw-parser-output .navbar ul{display:inline-block;white-space:nowrap;line-height:inherit}.mw-parser-output .navbar-brackets::before{margin-right:-0.125em;content:"[ "}.mw-parser-output .navbar-brackets::after{margin-left:-0.125em;content:" ]"}.mw-parser-output .navbar li{word-spacing:-0.125em}.mw-parser-output .navbar a>span,.mw-parser-output .navbar a>abbr{text-decoration:inherit}.mw-parser-output .navbar-mini abbr{font-variant:small-caps;border-bottom:none;text-decoration:none;cursor:inherit}.mw-parser-output .navbar-ct-full{font-size:114%;margin:0 7em}.mw-parser-output .navbar-ct-mini{font-size:114%;margin:0 4em}vteDifferentiable computingGeneral
Differentiable programming
Neural Turing machine
Differentiable neural computer
Automatic differentiation
Neuromorphic engineering
Cable theory
Pattern recognition
Computational learning theory
Tensor calculus
Concepts
Gradient descent
SGD
Clustering
Regression
Overfitting
Adversary
Attention
Convolution
Loss functions
Backpropagation
Normalization
Activation
Softmax
Sigmoid
Rectifier
Regularization
Datasets
Augmentation
Programming languages
Python
Julia
Application
Machine learning
Artificial neural network
Deep learning
Scientific computing
Artificial Intelligence
Hardware
IPU
TPU
VPU
Memristor
SpiNNaker
Software library
TensorFlow
PyTorch
Keras
Theano
ImplementationAudio-visual
AlexNet
WaveNet
Human image synthesis
HWR
OCR
Speech synthesis
Speech recognition
Facial recognition
AlphaFold
DALL-E
Verbal
Word2vec
Transformer
BERT
NMT
Project Debater
Watson
GPT-2
GPT-3
Decisional
AlphaGo
AlphaZero
Q-learning
SARSA
OpenAI Five
Self-driving car
MuZero
Action selection
Robot control
People
Alex Graves
Ian Goodfellow
Yoshua Bengio
Geoffrey Hinton
Yann LeCun
Andrew Ng
Demis Hassabis
David Silver
Fei-Fei Li
Organizations
DeepMind
OpenAI
MIT CSAIL
Mila
Google Brain
FAIR

 Portals
Computer programming
Technology
 Category
Artificial neural networks
Machine learning


^ H. Xiao, B. Biggio, B. Nelson, H. Xiao, C. Eckert, and F. Roli. "Support vector machines under adversarial label contamination". Neurocomputing, Special Issue on Advances in Learning with Label Noise, In Press.






<img src="//en.wikipedia.org/wiki/Special:CentralAutoLogin/start?type=1x1" alt="" title="" width="1" height="1" style="border: none; position: absolute;" />
Retrieved from "https://en.wikipedia.org/w/index.php?title=Adversarial_machine_learning&oldid=1069468615"
		Categories: Machine learningComputer securityHidden categories: Webarchive template wayback linksArticles with short descriptionShort description is different from Wikidata
	
